# Support methods for working with authentication strategies.
#
module AuthHelper
  include Emma::Common

  extend ::AuthHelper

  # Generate the authentication data to be associated with the given user.
  #
  # @param [User, nil] user
  #
  # @return [OmniAuth::AuthHash, nil]
  #
  def auth_hash
    : (User user) -> OmniAuth::AuthHash
    | (nil  user) -> nil

  # Generate an auth hash based on fixed information.                           # if BS_AUTH
  #
  # @param [User, String, ActionController::Parameters, OmniAuth::AuthHash, Hash] src
  # @param [String, nil] token
  #
  # @return [OmniAuth::AuthHash, nil]
  #
  def synthetic_auth_hash: ((User|String|OmniAuth::AuthHash|prmHash) src, ?(String|nil) token) -> (OmniAuth::AuthHash | nil)

  # Table of user names/tokens acquired for use in non-production deploys.      # if BS_AUTH
  #
  # Token are taken from the User table entries that have an :access_token
  # value.  If BOOKSHARE_TEST_AUTH is supplied, it is used to prime (or update)
  # the database table.
  #
  # @param [Boolean, nil] refresh     If *true*, re-read the database.
  #
  # @return [Hash{String=>Hash}]
  #
  # === Usage Notes
  # Because the logic is only performed once, direct changes to the User
  # table will not be reflected here, however changes made indirectly via
  # #stored_auth_update and/or #stored_auth_update_user will change both
  # the value returned by this method and the associated User table entry.
  #
  def stored_auth: (?bool refresh) -> Hash[String,anyHash]

  # Produce a stored_auth table entry value.                                    # if BS_AUTH
  #
  # @param [String] token
  #
  # @return [Hash{Symbol=>String}]
  #
  def stored_auth_entry_value: (String token) -> Hash[Symbol,String]

  # auth_default_options                                                        # if BS_AUTH
  #
  # @return [OmniAuth::Strategy::Options]
  #
  def auth_default_options: () -> OmniAuth::Strategy::Options

  # Get user names/tokens from the database.                                    # if BS_AUTH
  #
  # @param [String, Array<String>] accounts   Default: `User#test_users`
  #
  # @return [Hash{String=>Hash}]
  #
  def stored_auth_fetch: (?accounts: String|strArray|nil) -> Hash[String,anyHash]

  # Add or update one or more user name/token entries.                          # if BS_AUTH
  #
  # @param [Hash{String=>String}, nil] pairs
  #
  # @return [void]
  #
  def stored_auth_update: ((Hash[String,String]|nil) pairs) -> void

  # Add or update a user name/token entry.                                      # if BS_AUTH
  #
  # If input parameters were invalid then no change will be made.
  #
  # @param [OmniAuth::AuthHash, String]         user
  # @param [String, ::OAuth2::AccessToken, nil] token
  #
  # @return [Hash{String=>Hash}]  The updated set of saved user/tokens.
  # @return [nil]
  #
  # -
  # === Variations
  # +
  #
  # @overload stored_auth_update_user(auth)
  #   @param [OmniAuth::AuthHash]            auth   User/token to add
  #
  # @overload stored_auth_update_user(auth)
  #   @param [String]                        user   User to add.
  #   @param [String, ::OAuth2::AccessToken] token  Associated token.
  #
  def stored_auth_update_user
    : (OmniAuth::AuthHash user, ?nil token                          ) -> (Hash[String,anyHash] | nil)
    | (String             user, (String|::OAuth2::AccessToken) token) -> (Hash[String,anyHash] | nil)

  private

  def self.included: (Module base) -> void
end
