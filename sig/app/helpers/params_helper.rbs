# View helper support methods related to `params` and `session`.
#
module ParamsHelper
  include Emma::Common

  # The URL :id term which indicates the target is the identifier of the
  # current record (depending on the context).
  #
  # @type [String]
  #
  CURRENT_ID: String

  # The suffix of a URL :action term which indicates that the action is to
  # operate on the current (context-specific) value.
  #
  # @type [String]
  #
  CURRENT_ACTION_SUFFIX: String

  # The suffix of a URL :action term which indicates that the action is to
  # present a menu of records.
  #
  # @type [String]
  #
  SELECT_ACTION_SUFFIX: String

  # Request parameters that are not relevant to the application.
  #
  # @type [Array<Symbol>]
  #
  IGNORED_PARAMETERS: symArray

  # Used as the first character of a session value that has been compressed.
  #
  # @type [String]
  #
  COMPRESSION_MARKER: String

  # Indicate whether the action represents a menu.
  #
  # @param [Symbol, String, nil] action
  #
  def menu_action?: (Symbol|String|nil action) -> bool

  # Return the base action for a value which may or may not ends with a suffix
  # indicating generation of a menu.
  #
  # @param [Symbol, String] action
  #
  # @return [Symbol]
  #
  def base_action: (Symbol|String action) -> Symbol

  # Return the variant of the action which indicates generation of a menu.
  #
  # @param [Symbol, String] action
  #
  # @return [Symbol]
  #
  def menu_action: (Symbol|String action) -> Symbol

  # Normalize a list of model identifier values.
  #
  # @param [Array<Symbol,String,Integer,Array,nil>] ids
  # @param [String,Regexp]                          separator
  #
  # @return [Array<Integer,String>]
  #
  def identifier_list: (*(Symbol|String|Integer|Array[Symbol|String|Integer]|nil) ids, ?separator: String|Regexp, **untyped _ignored) -> Array[Integer|String]

  # The full request URL without request parameters.
  #
  # @return [String]
  #
  def request_path: () -> String

  # All request parameters (including :controller and :action) as a Hash.
  #
  # @param [ActionController::Parameters, Hash, nil] prm  Default: `params`.
  #
  # @return [Hash{Symbol=>*}]
  #
  def request_parameters: (?(prmHash|nil) prm) -> symHash

  # The meaningful request URL parameters as a Hash (not including :controller
  # or :action).
  #
  # @param [ActionController::Parameters, Hash, nil] prm  Default: `params`.
  #
  # @return [Hash{Symbol=>String}]
  #
  # @see #request_parameters
  # @see #IGNORED_PARAMETERS
  #
  def url_parameters: (?(prmHash|nil) prm) -> symHash

  # Get a reference to `session[section]`.
  #
  # @param [String, Symbol, nil] section
  #
  # @return [Hash]
  #
  def session_section: (?(String|Symbol|nil) section) -> anyHash

  # Information about the last operation performed in this session.
  #
  # @return [Hash]
  #
  def last_operation: () -> strHash

  # Full URL of the last operation performed in this session.
  #
  # @return [String, nil]
  #
  def last_operation_path: () -> (String | nil)

  # Time of the last operation performed in this session.
  #
  # @return [Integer]
  #
  def last_operation_time: () -> Integer

  # Indicate whether this is the session's first operation since the last
  # reboot.
  #
  def first_operation?: () -> bool

  # Indicate whether the value has been compressed.
  #
  # @param [String, nil] v
  #
  def compressed_value?: ((String|nil) v) -> bool

  # compress_value
  #
  # @param [String, nil] v
  #
  # @return [String]
  #
  def compress_value: ((String|nil) v) -> String

  # decompress_value
  #
  # @param [String, nil] v
  #
  # @return [String, nil]
  #
  def decompress_value: ((String|nil) v) -> (String | nil)

  # Translate an item into the URL parameter for the controller with which it
  # is associated.
  #
  # @param [Symbol, String, Hash, Module, *] v  Def: `params[:controller]`.
  #
  # @return [String]
  # @return [nil]
  #
  def controller_to_name: (?untyped v) -> (String | nil)

  # Translate an item into the URL parameter for the controller with which it
  # is associated.
  #
  # @param [Symbol, String, Hash, *] v  Def: `params[:action]`.
  #
  # @return [String]
  # @return [nil]
  #
  def action_to_name: (?untyped v) -> (String | nil)

  # Translate into the URL parameters for the associated controller and action.
  #
  # @param [Symbol,String,Hash,Module,*] ctrlr    Def: `params[:controller]`
  # @param [Symbol,String,*]             action   Def: `params[:action]`
  #
  # @return [Array<(String,String)>]
  # @return [Array<(String,nil)>]
  # @return [Array<(nil,String)>]
  # @return [Array<(nil,nil)>]
  #
  # -
  # === Variations
  # +
  #
  # @overload ctrlr_action_to_names
  #   Get :controller and :action from `#params`.
  #   @return [Array<(String,String)>]
  #
  # @overload ctrlr_action_to_names(hash)
  #   Extract :controller and/or :action from *hash*.
  #   @param [Hash] hash
  #   @return [Array<(String,String)>]
  #   @return [Array<(String,nil)>]
  #   @return [Array<(nil,String)>]
  #   @return [Array<(nil,nil)>]
  #
  # @overload ctrlr_action_to_names(ctrlr)
  #   @param [Symbol, String, Module] ctrlr
  #   @return [Array<(String,nil)>]
  #
  # @overload ctrlr_action_to_names(ctrlr, action)
  #   @param [Symbol, String, Hash, Module, *] ctrlr
  #   @param [Symbol, String]                  action
  #   @return [Array<(String,String)>]
  #
  def ctrlr_action_to_names: (?untyped ctrlr, ?untyped action) -> [(String|nil),(String|nil)]

  private

  def self.included: (Module base) -> void
end
