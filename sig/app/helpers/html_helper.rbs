# Shared view helper HTML support methods.
#
module HtmlHelper
  include CssHelper

  include EncodingHelper

  # Short-cut for generating an HTML '<div>' element.
  #
  # @param [Array<*>] args            Passed to #html_tag.
  # @param [Proc]     block           Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_div
    : ((String|nil) content, *(String|nil) more_content, symHash options) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | ((String|nil) content, *(String|nil) more_content                 ) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | (                                                 ?symHash options)  { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML '<span>' element.
  #
  # @param [Array<*>] args            Passed to #html_tag.
  # @param [Proc]     block           Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_span
    : ((String|nil) content, *(String|nil) more_content, symHash options) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | ((String|nil) content, *(String|nil) more_content                 ) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | (                                                 ?symHash options)  { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML '<button>' element.
  #
  # @param [Array<*>] args            Passed to #html_tag.
  # @param [Proc]     block           Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_button
    : ((String|nil) content, *(String|nil) more_content, symHash options) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | ((String|nil) content, *(String|nil) more_content                 ) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | (                                                 ?symHash options)  { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML '<details>' element.
  #
  # For easier styling, additional content is wrapped in a '.content' element.
  #
  # @param [String]   summary         The text visible when not expanded.
  # @param [Array<*>] content         Appended to the '.content' element.
  # @param [String]   id              Passed to the inner `<summary>` element.
  # @param [String]   title           Passed to the inner `<summary>` element.
  # @param [Hash]     opt             Passed to the outer `<details>` element.
  # @param [Proc]     block           Appended to the '.content' element.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_details: (String summary, *String content, ?id: String|nil, ?title: String|nil, **untyped opt) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML element which normalizes element contents
  # provided via the parameter list and/or the block.
  #
  # If *tag* is a number it is translated to 'h1'-'h6'.  If *tag* is 0 or *nil*
  # then it defaults to 'div'.
  #
  # @param [Symbol, String, Integer, nil] tag
  # @param [Array]                        args
  #
  # @option args.last [String] :separator
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Additional content
  # @yieldreturn [String, Array]
  #
  # @see ActionView::Helpers::TagHelper#content_tag
  #
  # -
  # === Variations
  # +
  #
  # @overload html_tag(tag, content, *more_content, options = nil)
  #   @param [Symbol, String, Integer]                     tag
  #   @param [ActiveSupport::SafeBuffer, String, nil]      content
  #   @param [Array<ActiveSupport::SafeBuffer,String,nil>] more_content
  #   @param [Hash, nil]                                   options
  #
  # @overload html_tag(tag, options = nil, &block)
  #   @param [Symbol, String, Integer]                     tag
  #   @param [Hash, nil]                                   options
  #   @param [Proc]                                        block
  #
  def html_tag
    : ((Symbol|String|Integer|nil) tag, (String|nil) content, *(String|nil) more_content, symHash options) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | ((Symbol|String|Integer|nil) tag, (String|nil) content, *(String|nil) more_content                 ) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | ((Symbol|String|Integer|nil) tag,                                                  ?symHash options)  { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Invoke #form_tag after normalizing element contents provided via the
  # parameter list and/or the block.
  #
  # @param [String, Hash] url_or_path
  # @param [Array<*>]     args        Passed to #form_tag except for:
  #
  # @option args.last [String] :separator   Default: "\n"
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_form
    : ((String|symHash) tag, (String|nil) content, *(String|nil) more_content, symHash options) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | ((String|symHash) tag, (String|nil) content, *(String|nil) more_content                 ) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer
    | ((String|symHash) tag,                                                  ?symHash options)  { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # An "empty" element that can be used as a placeholder.
  #
  # @param [String, nil] comment      Text for an interior HTML comment.
  # @param [Symbol]      tag          The HTML tag to use for the element.
  # @param [Hash]        opt          Passed to #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def placeholder_element: (?comment: String|nil, ?tag: Symbol, **untyped opt) -> ActiveSupport::SafeBuffer

  # HTML attributes which indicate specification of an accessible name.
  #
  # @type [Array<Symbol>]
  #
  ARIA_LABEL_ATTRS: symArray

  # Indicate whether the HTML element to be created with the given arguments
  # appears to have an accessible name.
  #
  # @param [Array<*>] args
  # @param [Hash]     opt
  #
  def accessible_name?: (*untyped args, **untyped opt) -> bool

  # A matcher for one or more symbol-like characters.
  #
  # @type [Regexp]
  #
  SYMBOLS: Regexp

  # Indicate whether the string contains only characters that fall outside the
  # normal text range.  Always `false` if *text* is not a string.
  #
  # @param [String, *] text
  #
  def only_symbols?: (String  text) -> bool
                   | (untyped text) -> false

  # Make a Unicode character (sequence) into a decorative element that is not
  # pronounced by screen readers.
  #
  # @param [String] icon              Character(s) that should match #SYMBOLS.
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #html_span.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def symbol_icon: (String icon, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Pattern to #scan a string for HTML elements optionally preceded and
  # followed by literal text.
  #
  # @type [Regexp]
  #
  FOR_ELEMENTS: Regexp

  # If the text has any symbols in it, hide them from screen readers.
  #
  # If so, each run of one or more symbolic characters will be wrapped in
  # span.symbol with 'aria-hidden' and all other runs of characters will be
  # wrapped in span.text (unless *text* is already ActiveSupport::SafeBuffer).
  #
  # If not, *text* will be returned HTML-ready with no `<span>`s added.
  #
  # @param [String, nil] text
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def hide_symbols: ((String|nil) text) -> ActiveSupport::SafeBuffer

  # Augment Emma::Common::FormatMethods#non_breaking to hide symbols from
  # screen readers.
  #
  # @param [String, nil] text
  # @param [Boolean]     show_symbols   If *true* don't #hide_symbols.
  # @param [Hash]        opt            To super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see Emma::Common::FormatMethods#non_breaking
  #
  def non_breaking: (String? text, ?show_symbols: bool, **untyped opt) -> ActiveSupport::SafeBuffer

  # Augment Emma::Common::FormatMethods#labelize to hide symbols from screen
  # readers.
  #
  # @param [String, Symbol, nil]  text
  # @param [Boolean]              show_symbols  If *true* don't #hide_symbols.
  # @param [Hash]                 opt           To super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see Emma::Common::FormatMethods#labelize
  #
  def labelize: ((String|Symbol|nil) text, ?show_symbols: bool, **untyped opt) -> ActiveSupport::SafeBuffer

  # A line added to tooltips to indicate a .sign-in-required link.
  #
  # @type [String]
  #
  SIGN_IN: String

  # Augment with options that should be set/unset according to the context
  # (e.g. CSS classes present).
  #
  # @param [Symbol, String]  _tag
  # @param [Hash{Symbol=>*}] options
  #
  # @return [Hash]
  #
  def add_inferred_attributes: (Symbol|String _tag, symHash options) -> symHash

  # Append additional line(s) options[:title].
  #
  # @param [Hash{Symbol=>*}] options
  # @param [Array<String>]   lines
  #
  # @return [Hash]                    The modified *options*.
  #
  def append_tooltip!: (symHash options, *String lines) -> symHash

  # Create a multi-line tooltip.
  #
  # @param [String, nil]   title
  # @param [Array<String>] lines
  #
  # @return [String]
  #
  def make_tooltip: ((String|nil) title, *String lines) -> String

  # Attributes that are expected for a given HTML tag and can be added
  # automatically.
  #
  # @param[Hash{Symbol=>Array<Symbol>}]
  #
  # @see https://developer.mozilla.org/en-US/docs/Web/CSS/display#tables
  #
  ADDED_HTML_ATTRIBUTES: Hash[Symbol,symHash]

  # Augment with default options.
  #
  # @param [Symbol, String]  tag
  # @param [Hash{Symbol=>*}] options
  #
  # @return [Hash]
  #
  def add_required_attributes: (Symbol|String tag, symHash options) -> symHash

  # Attributes that are expected for a given HTML tag.
  #
  # @param[Hash{Symbol=>Array<Symbol>}]
  #
  REQUIRED_HTML_ATTRIBUTES: Hash[Symbol,symArray]

  # Verify that options have been included.
  #
  # @param [Symbol, String]  tag
  # @param [Hash{Symbol=>*}] options
  #
  # @return [Boolean]                 If *false* at least one was missing.
  #
  def check_required_attributes: (Symbol|String tag, symHash options) -> bool

  # These are observed hash keys which may travel alongside HTML attributes
  # like :id, :class, :tabindex etc. when passed as named parameters, but
  # should not be passed into methods which actually generate HTML elements.
  #
  # @type [Array<Symbol>]
  #
  NON_HTML_ATTRIBUTES: symArray

  # Make a copy which has only valid HTML attributes.
  #
  # @param [Hash, nil] html_opt       The target options hash.
  #
  # @return [Hash]
  #
  # @note Currently unused.
  #
  def html_options: ((symHash|nil) html_opt) -> symHash

  # Make a copy which has only valid HTML attributes with coalesced "data-*"
  # and `data: { }` options.
  #
  # @param [Hash] html_opt            The target options hash.
  #
  # @return [Hash]                    The modified *html_opt* hash.
  #
  def html_options!: (symHash html_opt) -> symHash

  # Retain only entries which are valid HTML attributes with coalesced "data-*"
  # and `data: { }` options.
  #
  # @param [Hash, nil]       html_opt   The target options hash.
  # @param [Array<Hash,nil>] args       Options hash(es) to merge into *opt*.
  #
  # @return [Hash]                      A new hash.
  #
  # @see #merge_html_options!
  #
  def merge_html_options: ((symHash|nil) html_opt, *(symHash|nil) args) -> symHash

  # Merge values from one or more hashes into an options hash.
  #
  # @param [Hash]            html_opt   The target options hash.
  # @param [Array<Hash,nil>] args       Options hash(es) to merge into *opt*.
  #
  # @return [Hash]                      The modified *opt* hash.
  #
  # @see #append_css!
  #
  def merge_html_options!: (symHash html_opt, *(symHash|nil) args) -> symHash

  private

  def self.included: (Module base) -> void
end
