# Shared view helper HTML support methods.
#
module HtmlHelper
  include CssHelper

  # Short-cut for generating an HTML '<div>' element.
  #
  # @param [Array<Any,nil>, nil] args   Passed to #html_tag.
  # @param [Proc]                block  Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_div: (*untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML '<span>' element.
  #
  # @param [Array<Any,nil>, nil] args   Passed to #html_tag.
  # @param [Proc]                block  Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_span: (*untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML '<button>' element.
  #
  # @param [Array<Any,nil>, nil] args   Passed to #html_tag.
  # @param [Proc]                block  Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_button: (*untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML element which normalizes element contents
  # provided via the parameter list and/or the block.
  #
  # If *tag* is a number it is translated to 'h1'-'h6'.  If *tag* is 0 or *nil*
  # then it defaults to 'div'.
  #
  # @param [Symbol, Integer, nil] tag
  # @param [Array<Any,nil>]       args
  #
  # @option args.last [String] :separator
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Additional content
  # @yieldreturn [String, Array]
  #
  # @see ActionView::Helpers::TagHelper#content_tag
  #
  # -
  # == Variations
  # +
  #
  # @overload html_tag(tag, content, options = nil, escape = true)
  #   @param [Symbol, String, nil]                    tag
  #   @param [ActiveSupport::SafeBuffer, String, nil] content
  #   @param [Hash]                                   options
  #   @param [Boolean]                                escape
  #
  # @overload html_tag(tag, options = nil, escape = true, &block)
  #   @param [Symbol, String, nil]                    tag
  #   @param [Hash]                                   options
  #   @param [Boolean]                                escape
  #   @param [Proc]                                   block
  #
  def html_tag: (Symbol|Integer|nil tag, *untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Invoke #form_tag after normalizing element contents provided via the
  # parameter list and/or the block.
  #
  # @param [String, Hash] url_or_path
  # @param [Array<Any>]   args        Passed to #form_tag except for:
  #
  # @option args.last [String] :separator   Default: "\n"
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_form: (String|symHash url_or_path, *untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # An "empty" element that can be used as a placeholder.
  #
  # @param [Hash] opt                         Passed to #html_div except for:
  #
  # @option opt [String]            :comment  The text of an HTML comment to
  #                                             place inside the empty element.
  # @option opt [Symbol,String,Integer] :tag  The HTML tag to use for the
  #                                             element instead of *div*.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def placeholder_element: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a symbol-based icon button or link which should be both accessible
  # and cater to the quirks of various accessibility scanners.
  #
  # @param [String, nil] icon         Default: Emma::Unicode#STAR
  # @param [String, nil] text         Default: 'Action'
  # @param [String, nil] url          Default: '#'
  # @param [Hash]        opt          Passed to #link_to or #html_span except:
  #
  # @option opt [String] :symbol      Overrides *symbol*
  # @option opt [String] :text        Overrides *text*
  # @option opt [String] :url         Overrides *url*
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # -
  # noinspection RubyMismatchedArgumentType
  # +
  def icon_button: (?icon: String?, ?text: String?, ?url: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link with appropriate accessibility settings.
  #
  # @param [String] label
  # @param [String] path
  # @param [Hash]   opt               Passed to #link_to except for:
  # @param [Proc]   block             Passed to #link_to.
  #
  # @option opt [String] :label       Overrides *label* parameter if present.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # == Usage Notes
  # This method assumes that local paths are always relative.
  #
  def make_link: (String label, String path, **untyped opt) { () -> String } -> ActiveSupport::SafeBuffer

  # Produce a link to an external site which opens in a new browser tab.
  #
  # @param [String] label
  # @param [String] path
  # @param [Hash]   opt
  # @param [Proc]   block
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #make_link
  #
  def external_link: (String label, String path, **untyped opt) { () -> String } -> ActiveSupport::SafeBuffer

  # Produce a link to download an item to the client's browser.
  #
  # @param [String] label
  # @param [String] path
  # @param [Hash]   opt
  # @param [Proc]   block
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #external_link
  #
  def download_link: (String label, String path, **untyped opt) { () -> String } -> ActiveSupport::SafeBuffer

  # If *text* is a URL return it directly; if *text* is HTML, locate the first
  # "href" and return the indicated value.
  #
  # @param [String, nil] text
  #
  # @return [String]                  A full URL.
  # @return [nil]                     No URL could be extracted.
  #
  def extract_url: (String|nil text) -> (String | nil)

  # Merge values from one or more options hashes.
  #
  # @param [Hash, nil]       html_opt   The target options hash.
  # @param [Array<Hash,nil>] args       Options hash(es) to merge into *opt*.
  #
  # @return [Hash]                      A new hash.
  #
  # @see #merge_html_options!
  #
  def merge_html_options: (symHash|nil html_opt, *(symHash|nil) args) -> symHash

  # Merge values from one or more hashes into an options hash.
  #
  # @param [Hash]            html_opt   The target options hash.
  # @param [Array<Hash,nil>] args       Options hash(es) to merge into *opt*.
  #
  # @return [Hash]                      The modified *opt* hash.
  #
  # @see #append_css!
  #
  # -
  # noinspection RubyMismatchedReturnType
  # +
  def merge_html_options!: (symHash html_opt, *(symHash|nil) args) -> symHash

  private

  def self.included: (Module base) -> void
end
