# Shared view helper HTML support methods.
#
module HtmlHelper
  include CssHelper
  include EncodingHelper

  # Short-cut for generating an HTML '<div>' element.
  #
  # @param [Array<Any,nil>, nil] args   Passed to #html_tag.
  # @param [Proc]                block  Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_div: (*untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML '<span>' element.
  #
  # @param [Array<Any,nil>, nil] args   Passed to #html_tag.
  # @param [Proc]                block  Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_span: (*untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML '<button>' element.
  #
  # @param [Array<Any,nil>, nil] args   Passed to #html_tag.
  # @param [Proc]                block  Passed to #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_button: (*untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Short-cut for generating an HTML element which normalizes element contents
  # provided via the parameter list and/or the block.
  #
  # If *tag* is a number it is translated to 'h1'-'h6'.  If *tag* is 0 or *nil*
  # then it defaults to 'div'.
  #
  # @param [Symbol, Integer, nil] tag
  # @param [Array<Any,nil>]       args
  #
  # @option args.last [String] :separator
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Additional content
  # @yieldreturn [String, Array]
  #
  # @see ActionView::Helpers::TagHelper#content_tag
  #
  # -
  # == Variations
  # +
  #
  # @overload html_tag(tag, content, options = nil, escape = true)
  #   @param [Symbol, String, nil]                    tag
  #   @param [ActiveSupport::SafeBuffer, String, nil] content
  #   @param [Hash]                                   options
  #   @param [Boolean]                                escape
  #
  # @overload html_tag(tag, options = nil, escape = true, &block)
  #   @param [Symbol, String, nil]                    tag
  #   @param [Hash]                                   options
  #   @param [Boolean]                                escape
  #   @param [Proc]                                   block
  #
  def html_tag: (Symbol|Integer|nil tag, *untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Invoke #form_tag after normalizing element contents provided via the
  # parameter list and/or the block.
  #
  # @param [String, Hash] url_or_path
  # @param [Array<Any>]   args        Passed to #form_tag except for:
  #
  # @option args.last [String] :separator   Default: "\n"
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_form: (String|symHash url_or_path, *untyped args) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # An "empty" element that can be used as a placeholder.
  #
  # @param [Hash] opt                         Passed to #html_div except for:
  #
  # @option opt [String]            :comment  The text of an HTML comment to
  #                                             place inside the empty element.
  # @option opt [Symbol,String,Integer] :tag  The HTML tag to use for the
  #                                             element instead of *div*.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def placeholder_element: (**untyped opt) -> ActiveSupport::SafeBuffer

  # These are observed hash keys which may travel alongside HTML attributes
  # like :id, :class, :tabindex etc. when passed as named parameters, but
  # should not be passed into methods which actually generate HTML elements.
  #
  # @type [Array<Symbol>]
  #
  NON_HTML_ATTRIBUTES: symArray

  # Make a copy which has only valid HTML attributes.
  #
  # @param [Hash, nil] html_opt       The target options hash.
  #
  # @return [Hash]
  #
  def html_options: (symHash|nil html_opt) -> symHash

  # Retain only entries which are valid HTML attributes.
  #
  # @param [Hash] html_opt            The target options hash.
  #
  # @return [Hash]                    The modified *html_opt* hash.
  #
  def html_options!: (symHash html_opt) -> symHash

  # Merge values from one or more options hashes.
  #
  # @param [Hash, nil]       html_opt   The target options hash.
  # @param [Array<Hash,nil>] args       Options hash(es) to merge into *opt*.
  #
  # @return [Hash]                      A new hash.
  #
  # @see #merge_html_options!
  #
  def merge_html_options: (symHash|nil html_opt, *(symHash|nil) args) -> symHash

  # Merge values from one or more hashes into an options hash.
  #
  # @param [Hash]            html_opt   The target options hash.
  # @param [Array<Hash,nil>] args       Options hash(es) to merge into *opt*.
  #
  # @return [Hash]                      The modified *opt* hash.
  #
  # @see #append_css!
  #
  # -
  # noinspection RubyMismatchedReturnType
  # +
  def merge_html_options!: (symHash html_opt, *(symHash|nil) args) -> symHash

  private

  def self.included: (Module base) -> void
end
