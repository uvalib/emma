# View helper methods supporting access and linkages to the
# "EMMA Unified Search" API.
#
module SearchHelper
  include CssHelper

  include LogoHelper

  include ModelHelper

  include PaginationHelper

  include RepositoryHelper

  include UploadHelper

  include PopupHelper

  # Default link tooltip.
  #
  # @type [String]
  #
  SEARCH_SHOW_TOOLTIP: String

  # Create a link to the details show page for the given item.
  #
  # @param [Search::Api::Record] item
  # @param [Hash]                opt    Passed to #model_link.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def search_item_link: (Search::Api::Record item, **untyped opt) -> ActiveSupport::SafeBuffer

  # In debug mode, add date and volume information to the title line.
  #
  # @type [Boolean]
  #
  SHOW_EXTENDED_TITLE: bool

  # Indicate whether items should get extended titles.
  #
  def extended_title?: () -> bool

  # Add date and volume information to the title line.
  #
  # @param [Search::Api::Record] item
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  # -
  # noinspection RubyMismatchedArgumentType, RailsParamDefResolve
  # +
  def extended_title: (Search::Api::Record item) -> ActiveSupport::SafeBuffer?

  # In debug mode, add a display of the (supposed) relevancy score.
  #
  # @note This is probably not very helpful for `title_results? == true`.
  #
  # @type [Boolean]
  #
  SHOW_RELEVANCY_SCORE: bool

  # Indicate whether items should show relevancy scores.
  #
  def relevancy_scores?: () -> bool

  # Generate an element to display a score for the item.
  #
  # @param [Search::Api::Record] item
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  # -
  # noinspection RubyMismatchedArgumentType, RailsParamDefResolve
  # +
  def relevancy_scores: (Search::Api::Record item) -> ActiveSupport::SafeBuffer?

  # Transform a field value for HTML rendering.
  #
  # @param [Upload, Model, Hash] item
  # @param [Any]                 value
  # @param [Symbol]              field
  # @param [Hash]                opt    Passed to the render method.
  #
  # @return [Any]   HTML or scalar value.
  # @return [nil]   If *value* was *nil* or *item* resolved to *nil*.
  #
  # @see ModelHelper::List#render_value
  # @see UploadHelper#upload_render_value
  #
  def search_render_value: (Upload|Model|symHash item, untyped value, ?field: Symbol?, **untyped opt) -> untyped?

  # Display title of the associated work along with the logo of the source
  # repository.
  #
  # @param [Search::Api::Record] item
  # @param [Hash]                opt    Passed to #html_div for title and to
  #                                       #prev_next_controls.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def title_and_source_logo: (Search::Api::Record item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Display title of the associated work along with the source repository.
  #
  # @param [Search::Api::Record] item
  # @param [Hash]                opt    Passed to #html_div for title and to
  #                                       #prev_next_controls.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def title_and_source: (Search::Api::Record item, **untyped opt) -> ActiveSupport::SafeBuffer

  # An element containing controls for moving up and down through the list.
  #
  # @param [Hash] opt   Passed to #prev_record_link and #next_record_link.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def prev_next_controls: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Create a control for jumping to the previous record in the list.
  #
  # @param [Integer, #to_i]      index      Current index.
  # @param [Integer, #to_i, nil] min_index  Default: 0.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/scroll.js *scrollToPrev()*
  #
  def prev_record_link: (?index: Integer?, ?min_index: Integer?, **untyped ignored) -> ActiveSupport::SafeBuffer

  # Create a control for jumping to the next record in the list.
  #
  # @param [Integer, #to_i]      index      Current index.
  # @param [Integer, #to_i, nil] max_index  Default: 1<<32.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/scroll.js *scrollToNext()*
  #
  def next_record_link: (?index: Integer?, ?max_index: Integer?, **untyped ignored) -> ActiveSupport::SafeBuffer

  # Make a clickable link to the display page for the title on the originating
  # repository's web site.
  #
  # @param [Search::Api::Record] item
  # @param [Hash]                opt    Passed to #record_popup or #make_link.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #bs_link?
  #
  def source_record_link: (Search::Api::Record item, **untyped opt) -> ActiveSupport::SafeBuffer

  # The defined levels for rendering an item hierarchically.
  #
  # @return [Hash{Symbol=>Array<Symbol,Integer>}]
  #
  # == Usage Notes
  # This is invoked from ModelHelper::Fields#field_levels.
  #
  def search_field_levels: (**untyped ignored) -> Hash[Symbol,Array[Symbol|Integer]]

  # CSS classes for the current #search_style.
  #
  # @param [String] suffix
  #
  # @return [Array<String>]
  #
  def search_style_classes: (?String suffix) -> strArray

  # CSS classes for the current #search_results.
  #
  # @param [String] suffix
  #
  # @return [Array<String>]
  #
  def search_result_classes: (?String suffix) -> strArray

  # Make a clickable link to retrieve a remediated file.
  #
  # @param [Search::Api::Record] item
  # @param [Hash]                opt    Passed to #make_link except for:
  #
  # @option opt [String] :label         Link text (default: the URL).
  # @option opt [String] :url           Overrides `item.record_download_url`.
  #
  # @return [ActiveSupport::SafeBuffer] HTML link element.
  # @return [nil]                       If no *url* was provided or found.
  #
  # @see #bs_link?
  #
  def source_retrieval_link: (Search::Api::Record item, **untyped opt) -> ActiveSupport::SafeBuffer?

  # Render a metadata listing for a search result item.
  #
  # @param [Search::Api::Record] item
  # @param [Hash, nil]       pairs    Additional field mappings.
  # @param [Hash]            opt      Passed to #model_details.
  #
  def search_item_details: (Search::Api::Record item, ?pairs: anyHash?, **untyped opt) -> ActiveSupport::SafeBuffer?

  # Create a container with the repository ID displayed as a link but acting as
  # a popup toggle button and a popup panel which is initially hidden.
  #
  # @param [Search::Api::Record] item
  # @param [Hash]                opt    Passed to #popup_container except for:
  #
  # @option opt [Hash] :attr            Options for deferred content.
  # @option opt [Hash] :placeholder     Options for transient placeholder.
  #
  # @see file:app/assets/javascripts/feature/popup.js *togglePopup()*
  #
  def record_popup: (Search::Api::Record item, **untyped opt) -> ActiveSupport::SafeBuffer

  # CSS class for the colorization button tray.
  #
  # @type [String]
  #
  SEARCH_STYLE_CONTAINER: String

  # Colorization button configuration template.
  #
  # @type [Hash{Symbol=>String,Symbol}]
  #
  # -
  # noinspection RailsI18nInspection
  # +
  SEARCH_STYLE_BUTTON_TEMPLATE: Hash[Symbol,(String|Symbol)]

  # Colorization buttons.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  # -
  # noinspection RailsI18nInspection
  # +
  SEARCH_STYLE_BUTTONS: Hash[Symbol,symHash]

  # Controls for applying one or more search style variants.
  #
  # @param [Hash] opt                 Passed to outer #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]
  #
  # @see #SEARCH_STYLE_BUTTONS
  # @see file:app/assets/javascripts/controllers/search.js *setupColorizeButtons()*
  #
  # == Usage Notes
  # This is invoked from ModelHelper::List#page_styles.
  #
  def search_page_styles: (**untyped opt) -> ActiveSupport::SafeBuffer?

  # Search result types.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  # -
  # noinspection RailsI18nInspection
  # +
  SEARCH_RESULT_TYPES: Hash[Symbol,symHash]

  # Parameters not included in the base path in #search_page_results.
  #
  # @type [Array<Symbol>]
  #
  SEARCH_RESULT_IGNORED_PARAMS: symArray

  # Control for selecting the type of search results to display.
  #
  # @param [String,Array,nil] selected  Selected menu item(s).
  # @param [Hash]             opt       Passed to outer #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #SEARCH_RESULT_TYPES
  #
  def search_page_results: (?selected: (String|Symbol)?,  **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single entry for use within a list of items.
  #
  # @param [Model, nil] item
  # @param [Hash, nil]  pairs         Additional field mappings.
  # @param [Hash]       opt           Passed to #model_list_item.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def search_list_item: (Model|nil item, ?pairs: anyHash?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Include edit and delete controls below the entry number.
  #
  # @param [Model]   item
  # @param [Boolean] edit
  # @param [Hash]    opt                  Passed to #list_item_number except:
  #
  # @option opt [String] :id              HTML ID of the item element.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                         If *item* or *index* is *nil*.
  #
  # @see UploadHelper#upload_edit_icon
  # @see UploadHelper#upload_delete_icon
  #
  def search_list_item_number: (Model? item, ?edit: bool, **untyped opt) -> ActiveSupport::SafeBuffer?

  # Generate a summary of the number of files per each format associated with
  # this item.
  #
  # @param [Search::Record::TitleRecord, nil] item
  # @param [Hash]                             opt   Passed to outer :ul.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def format_counts: (Search::Record::TitleRecord? item, **untyped opt) -> ActiveSupport::SafeBuffer

  # search_list_item_toggle
  #
  # @param [Integer] row
  # @param [Hash]    opt              Passed to #tree_button.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/controllers/search.js setupToggleControl()
  #
  def search_list_item_toggle: (?row: Integer?, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
