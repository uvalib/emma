# View helper methods supporting non-HTML rendering.
#
module SerializationHelper
  include ParamsHelper

  # Indicate whether the ultimate target format is HTML.
  #
  # @param [Hash, nil] p              Default: `params`.
  #
  def rendering_html?: (?(symHash|nil) p) -> bool

  # Indicate whether the ultimate target format is something other than HTML.
  #
  # @param [Hash, nil] p              Default: `params`.
  #
  # @note Currently unused.
  #
  def rendering_non_html?: (?(symHash|nil) p) -> bool

  # Indicate whether the ultimate target format is JSON.
  #
  # @param [Hash, nil] p              Default: `params`.
  #
  # @note Currently unused.
  #
  def rendering_json?: (?(symHash|nil) p) -> bool

  # Indicate whether the ultimate target format is XML.
  #
  # @param [Hash, nil] p              Default: `params`.
  #
  # @note Currently unused.
  #
  def rendering_xml?: (?(symHash|nil) p) -> bool

  # Indicate whether an update request originated from an HTML page.
  #
  def posting_html?: () -> bool

  # Serialize an item to JSON format.
  #
  # @param [any, nil] item
  # @param [Hash]     opt             Passed to #to_json.
  #
  # @return [String]
  #
  def make_json: (untyped item, **untyped opt) -> String

  # Serialize an item to XML format.
  #
  # @param [any, nil]        item
  # @param [String]          separator
  # @param [String]          name       Node name if item.respond_to? (:to_xml)
  # @param [Api::Serializer] serializer
  #
  # @return [String]                  XML serialization of *item*.
  # @return [nil]                     If *item* is *nil* or an empty collection
  #
  def make_xml: (untyped item, ?separator: String, ?name: String|nil, ?serializer: Api::Serializer|nil) -> (String | nil)

  # @private
  XML_PROLOG: String

  # add_xml_prolog
  #
  # @param [any, nil] item            String
  #
  # @return [String]
  #
  def add_xml_prolog: (untyped item) -> String

  # remove_xml_prolog
  #
  # @param [any, nil] item            String
  # @param [Boolean]  aggressive      If *true*, check all lines.
  #
  # @return [String]
  #
  def remove_xml_prolog: (untyped item, ?aggressive: bool) -> String

  private

  def self.included: (Module base) -> void
end
