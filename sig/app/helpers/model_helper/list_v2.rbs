# View helper methods supporting the display and creation of Model instances
# (both database items and API messages).
#
module ModelHelper::ListV2
  include ModelHelper::List

  # Render grouped field/value pairs.
  #
  # @param [Model, Hash, nil]    item
  # @param [String, Symbol, nil] model        Default: `params[:controller]`.
  # @param [String, Symbol, nil] action       Default: `params[:action]`.
  # @param [Hash, nil]           pairs        Except for #render_pair options.
  # @param [Integer, nil]        row_offset   Def: 0.
  # @param [String, nil]         separator    Def: #DEFAULT_ELEMENT_SEPARATOR.
  # @param [Hash]                opt
  # @param [Proc]                block        Passed to #field_pairs.
  #
  # @option opt [Integer] :index              Offset to make unique element IDs
  #                                             passed to #render_pair.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grouped_fields: ((Model|symHash)? item, ?model: (String|Symbol)?, ?action: (String|Symbol)?, ?pairs: anyHash?, ?row_offset: Integer?, ?separator: String?, **untyped opt) { () -> untyped } -> ActiveSupport::SafeBuffer

  # field_sort_order
  #
  # @param [Symbol, nil] field
  #
  # @return [Array<Integer, Symbol>]
  #
  def field_sort_order_v2: (Symbol|nil field) -> Array[Symbol|Integer]

  # Return with the CSS classes associated with the items field scope(s).
  #
  # @param [Array, Symbol, String, nil] value
  #
  # @return [Array<String>]
  #
  # -
  # == Variations
  # +
  #
  # @overload field_scopes_v2(single)
  #   Interpret the argument as a field name used to lookup the scope values.
  #   @param [Symbol, String, nil] single
  #   @return [Array<String>]
  #
  # @overload field_scopes_v2(array)
  #   Extract the scopes from *array*.
  #   @param [Array<Symbol>]       array
  #   @return [Array<String>]
  #
  def field_scopes_v2: (Symbol|String|Array[Symbol|String] value) -> strArray

  def search_field_level_v2: () -> symHash

  def primary_levels_v2: () -> symArray

  def secondary_levels_v2: () -> symArray

  def field_hierarchy_config_v2: () -> symHash

  private

  def self.included: (Module base) -> void
end
