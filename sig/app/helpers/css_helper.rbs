# Shared view helper CSS support methods.
#
module CssHelper
  include Emma::Common

  include Emma::Unicode

  # Indicate whether the HTML options include any of the given CSS classes.
  #
  # @param [Hash, nil]          html_opt  The target options hash.
  # @param [Array<#to_s,Array>] classes   CSS classes to find.
  #
  def has_class?: ((symHash|nil) html_opt, *(Array[_ToS]|_ToS|nil) classes) -> bool

  # Combine arrays and space-delimited strings to produce a space-delimited
  # string of CSS class names for use inline.
  #
  # @param [Array<#to_s,Array>] classes
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def css_classes: (*(Array[_ToS]|_ToS|nil) classes) -> ActiveSupport::SafeBuffer

  # Combine arrays and space-delimited strings to produce set of unique CSS
  # class names.
  #
  # @param [Array<#to_s,Array>] classes
  #
  # @return [Array<String>]
  #
  def css_class_array: (*(Array[_ToS]|_ToS|nil) classes) -> strArray

  # Return a copy of *html_opt* where the classes are appended to the current
  # `html_opt[:class]` value.
  #
  # @param [Hash, String, nil]  html_opt  The target options hash.
  # @param [Array<#to_s,Array>] classes   CSS class names.
  #
  # @return [Hash]                        A new hash with :class set.
  #
  # -
  # === Variations
  # +
  #
  # @overload append_css(html_opt, *classes)
  #   @param [Hash, String]       html_opt
  #   @param [Array<#to_s,Array>] classes
  #   @return [Hash]
  #
  # @overload append_css(*classes)
  #   @param [Array<#to_s,Array>] classes
  #   @return [Hash]
  #
  def append_css
    : ((symHash|nil) html_opt, *(Array[_ToS]|_ToS|nil) classes) -> symHash
    | (                        *(Array[_ToS]|_ToS|nil) classes) -> symHash

  # Replace `html_opt[:class]` with a new string containing the original
  # classes followed by the added classes.
  #
  # @param [Hash]               html_opt  The target options hash.
  # @param [Array<#to_s,Array>] classes   CSS class names.
  #
  # @return [Hash]                        The modified *html_opt* hash.
  #
  # === Implementation Notes
  # Compare with #prepend_css!
  #
  def append_css!: (symHash html_opt, *(Array[_ToS]|_ToS|nil) classes) -> symHash

  # Return a copy of *html_opt* where the classes are prepended to the current
  # `html_opt[:class]` value.
  #
  # @param [Hash, String, nil]  html_opt  The target options hash.
  # @param [Array<#to_s,Array>] classes   CSS class names.
  #
  # @return [Hash]                        A new hash with :class set.
  #
  # -
  # === Variations
  # +
  #
  # @overload prepend_css(html_opt, *classes)
  #   @param [Hash, String]       html_opt
  #   @param [Array<#to_s,Array>] classes
  #   @return [Hash]
  #
  # @overload prepend_css(*classes)
  #   @param [Array<#to_s,Array>] classes
  #   @return [Hash]
  #
  def prepend_css
    : ((symHash|nil) html_opt, *(Array[_ToS]|_ToS|nil) classes) -> symHash
    | (                        *(Array[_ToS]|_ToS|nil) classes) -> symHash

  # Replace `html_opt[:class]` with a new string containing the added classes
  # followed by the original classes.
  #
  # @param [Hash]               html_opt  The target options hash.
  # @param [Array<#to_s,Array>] classes   CSS class names.
  #
  # @return [Hash]                        The modified *html_opt* hash.
  #
  # === Implementation Notes
  # Compare with #append_css!
  #
  def prepend_css!: (symHash html_opt, *(Array[_ToS]|_ToS|nil) classes) -> symHash

  # Return a copy of *html_opt* where the classes are eliminated from the
  # `html_opt[:class]` value.
  #
  # @param [Hash]               html_opt  The target options hash.
  # @param [Array<#to_s,Array>] classes   CSS class names.
  #
  # @return [Hash]                        A new hash with :class set.
  #
  def remove_css: (symHash html_opt, *(Array[_ToS]|_ToS|nil) classes) -> symHash

  # Replace `html_opt[:class]` with a new string that includes none of the
  # named classes.  If no classes remain, :class is removed from *html_opt*.
  #
  # @param [Hash]               html_opt  The target options hash.
  # @param [Array<#to_s,Array>] classes   CSS class names.
  #
  # @return [Hash]                        The modified *html_opt* hash.
  #
  def remove_css!: (symHash html_opt, *(Array[_ToS]|_ToS|nil) classes) -> symHash

  # Return an independent copy of HTML options that can be modified without
  # affecting the original.
  #
  # @param [Hash, nil] html_opt
  #
  # @return [Hash]
  #
  def dup_options: ((symHash|nil) html_opt) -> symHash

  # Recursively duplicate HTML options parts, avoiding duplication of object
  # instances and other things that may be passed via named options.
  #
  # @param [*] item
  #
  # @return [*]
  #
  def deep_dup_options: [T] (T item) -> T

  # @private
  NO_DUP: Array[Module]

  # Indicate whether the item should be duplicated as part of a deep_dup of
  # HTML options.
  #
  # @param [*] item
  #
  def duplicable_option?: (untyped item) -> bool

  # Default number of digits produced by #hex_rand.
  #
  # @type [Integer]
  #
  HEX_RAND_DEFAULT_DIGITS: Integer

  # Generate a string of random hex digits.
  #
  # @param [Integer] digits           Default: `#HEX_RAND_DEFAULT_DIGITS`
  # @param [Boolean] upper            If *false* show lowercase hex digits.
  #
  # @return [String]
  #
  def hex_rand: (?digits: Integer|nil, upper: bool|nil) -> String

  # Create a unique CSS identifier from *base* and a random hex digit string.
  #
  # @param [String] base
  #
  # @return [String]
  #
  def css_randomize: (String base) -> String

  # Combine parts into a value for use as an HTML ID of an element associated
  # with a specific search input row.
  #
  # Unless *unique* is *false* or a string, #hex_rand will be used to generate
  # a value to make the resulting ID unique.
  #
  # @param [Array<*>]     parts
  # @param [*]            unique      Value unique to a search unique.
  # @param [Integer, nil] index       Value unique to an input row.
  # @param [Hash]         opt         Passed to #html_id.
  #
  # @return [String]
  #
  def unique_id: (*untyped parts, ?unique: untyped, ?index: Integer|nil, **untyped opt) -> String

  private

  def self.included: (Module base) -> void
end
