# Methods for describing the EMMA grant and project.
#
module EmmaHelper
  include Emma::Project

  # EMMA grant partners
  #
  # @type [Hash{Symbol=>Hash}]
  #
  EMMA_PARTNER: symHash

  # EMMA grant partner categories.
  #
  # @type [Array<Symbol>]
  #
  EMMA_PARTNER_TYPE: symArray

  # List EMMA academic partners.
  #
  # @param [Hash] opt                 To #emma_partner_list.
  #
  # @return [String]
  #
  def academic_partners: () -> String

  # List EMMA commercial partners.
  #
  # @param [Hash] opt                 To #emma_partner_list.
  #
  # @return [String]
  #
  def commercial_partners: (**untyped opt) -> String

  # Generate a textual list of EMMA partners.
  #
  # @param [Symbol, nil] type         One of :academic, :commercial, :all (def)
  # @param [Symbol]      mode         One of :brief or :long (default).
  # @param [String]      separator    Separator between items.
  # @param [String]      final        Connector for final :long format item.
  #
  # @return [String]
  #
  def emma_partner_list: (?(Symbol|nil) `type`, ?mode: Symbol, ?separator: String, ?final: String, **untyped _ignored) -> String

  # Get a selection of EMMA partners.
  #
  # @param [Symbol, nil] type         One of :academic, :commercial, :all (def)
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def emma_partners: (?(Symbol|nil) `type`) -> symHash

  # A simple "mailto:" link for project e-mail contact.
  #
  # @param [String, nil] label        Link text instead of the email address.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def project_email: (?(String|nil) label) -> ActiveSupport::SafeBuffer

  # A simple "mailto:" link for the general e-mail contact.
  #
  # @param [String, nil] label        Link text instead of the email address.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def contact_email: (?(String|nil) label) -> ActiveSupport::SafeBuffer

  # The "mailto:" link for the general e-mail contact.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def emma_administrator: () -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
