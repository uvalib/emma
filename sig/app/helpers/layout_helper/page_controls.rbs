# Control bar which holds action controls appropriate for the current page and
# the current user.
#
module LayoutHelper::PageControls
  include LayoutHelper::Common

  include ConfigurationHelper

  include IdentityHelper

  include LinkHelper

  include ParamsHelper

  # :nocov:
  #include Emma::Common::ObjectMethods

  # Indicate whether it is appropriate to show page controls.
  #
  # @param [Hash, nil] p              Default: `#request_parameters`.
  #
  def show_page_controls?: (?(symHash|nil) p) -> bool

  # Render the appropriate partial to insert page controls if they are defined
  # for the current controller/action.
  #
  # @param [String] css               CSS class/selector for outer container.
  # @param [Hash]   opt
  #
  # @option opt [String, Symbol] :controller    Alias for :ctrlr.
  # @option opt [String, Symbol] :ctrlr         Default: `params[:controller]`.
  # @option opt [String]         :label_id
  #
  # @return [ActiveSupport::SafeBuffer] An HTML element.
  # @return [nil]                       If no page_controls configured.
  #
  def render_page_controls: (?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Generate a list of controller/action pairs that the current user is able to
  # perform.
  #
  # If an action is given by an array, the first element is interpreted as a
  # controller.  If not the controller for *model* is assumed.
  #
  # @param [Symbol] ctrlr
  # @param [Symbol] action
  #
  # @return [Array<Hash>>]            Ctrlr/action entries with optional label.
  # @return [nil]                     No authorized actions were found.
  #
  # @see "en.emma.*.page_controls.actions"
  #
  def page_control_actions: (ctrlr: Symbol, action: Symbol) -> (Array[symHash] | nil)

  # Generate controls specified by controller/action pairs generated by
  # #page_control_actions.
  #
  # Any control which would lead back to the current page is disabled and
  # marked to indicate that the selected action has already been chosen.
  #
  # @param [Array<Hash>]         entries    From #page_control_actions
  # @param [Symbol, String, nil] ctrlr      Current controller.
  # @param [Symbol, String, nil] action     Current action.
  # @param [Hash]                path_opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def page_controls: (*symHash entries, ?controller: Symbol|String|nil, ?action: Symbol|String|nil, **untyped path_opt) -> ActiveSupport::SafeBuffer

  # page_controls_label
  #
  # @param [Hash] opt                 Passed to #config_lookup.
  #
  # @return [String]
  #
  def page_controls_label: (**untyped opt) -> String

  # Controllers which return *nil* for #model_class.
  #
  # @type [Array<Symbol>]
  #
  NO_MODEL_CONTROLLERS: symArray

  # Controllers which return *SearchResult* for #model_class.
  #
  # @type [Array<Symbol>]
  #
  SEARCH_MODEL_CONTROLLERS: symArray

  # Controllers which return *User* for #model_class.
  #
  # @type [Array<Symbol>]
  #
  USER_MODEL_CONTROLLERS: symArray

  # model_class
  #
  # @param [any, nil] ctrlr           Symbol, String, Class
  #
  # @return [Class]
  # @return [nil]
  #
  def model_class: (untyped ctrlr) -> (Class | nil)
end
