# Control bar which holds action controls appropriate for the current page and
# the current user.
#
module LayoutHelper::PageControls
  include LayoutHelper::Common

  include ConfigurationHelper

  include LinkHelper

  include ParamsHelper

  include RoleHelper

  # Indicate whether it is appropriate to show page controls.
  #
  # @param [Hash, nil] p              Default: `#request_parameters`.
  #
  def show_page_controls?: (?(symHash|nil) p) -> bool

  # Render the appropriate partial to insert page controls if they are defined
  # for the current controller/action.
  #
  # @param [Hash] opt
  #
  # @option opt [String, Symbol] :controller    Default: `params[:controller]`.
  # @option opt [String, Symbol] :action        Default: `params[:action]`.
  # @option opt [String]         :label_id
  #
  # @return [ActiveSupport::SafeBuffer] An HTML element.
  # @return [nil]                       If no page_controls configured.
  #
  def render_page_controls: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Generate a list of controller/action pairs that the current user is able to
  # perform.
  #
  # If an action is given by an array, the first element is interpreted as a
  # controller.  If not the controller for *model* is assumed.
  #
  # @param [Symbol] controller
  # @param [Symbol] action
  #
  # @return [Array<Array<(Symbol,Symbol)>>]   Controller/action pairs.
  # @return [nil]                             No authorized actions were found.
  #
  def page_control_actions: (controller: Symbol, action: Symbol) -> (Array[[Symbol,Symbol]] | nil)

  # Generate controls specified by controller/action pairs generated by
  # #page_controls_actions.
  #
  # Any control which would lead back to the current page is disabled and
  # marked to indicate that the selected action has already been chosen.
  #
  # @param [Array<Array<(Symbol,Symbol)>>] pairs
  # @param [Symbol, String, nil]           controller   Current controller.
  # @param [Symbol, String, nil]           action       Current action.
  # @param [Hash]                          path_opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def page_controls: (*[Symbol,Symbol] pairs, ?controller: Symbol|String|nil, ?action: Symbol|String|nil, **untyped path_opt) -> ActiveSupport::SafeBuffer

  # This is a kludge specifically for getting the controls on "/home/dashboard"
  # to look right.  Although the :edit control is going to "/account/edit/:id",
  # we want the label/tooltip configuration for "/user/registrations/edit".
  # (The generic "/account/edit" refers to changing "an account" rather than
  # "your account").
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def page_control: (**untyped opt) -> ActiveSupport::SafeBuffer

  # page_controls_label
  #
  # @param [Hash] opt                 Passed to #config_lookup.
  #
  # @return [String]
  #
  def page_controls_label: (**untyped opt) -> String

  # model_class
  #
  # @param [Symbol, String, ApplicationController, Any] ctrlr
  #
  # @return [Class]
  # @return [nil]
  #
  def model_class: ((Symbol|String|ApplicationController|untyped) ctrlr) -> (Class | nil)
end
