# View helper methods to support adding '.modal-popup' elements to the '<body>'
# element.
#
module LayoutHelper::PageModals

  @page_modal: Hash[String,ActiveSupport::SafeBuffer]

  # Emit the page modals for inclusion in the '<body>' element definition.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def page_modals: () -> (ActiveSupport::SafeBuffer | nil)

  # Access the '.modal-popup' children of the '<body>' element.
  #
  # @return [Hash{String=>ActiveSupport::SafeBuffer}]
  #
  # @yield To supply CSS class(es) to #set_page_modal.
  # @yieldreturn [String, Array<String>]
  #
  def page_modal: () -> Hash[String,ActiveSupport::SafeBuffer]

  # Indicate whether a modal has been defined for the given selector.
  #
  # @param [String] selector
  #
  # @note Currently unused.
  #
  def page_modal?: (String selector) -> bool

  # Add a modal definition associated with the given selector.  If a definition
  # already exists, the block will not be executed.
  #
  # @param [String]                         selector
  # @param [ActiveSupport::SafeBuffer, nil] definition
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Supply the definition of the modal if *definition* is *nil*.
  # @yieldreturn [ActiveSupport::SafeBuffer]
  #
  def add_page_modal: (String selector, ?(ActiveSupport::SafeBuffer|nil) definition) { () -> ActiveSupport::SafeBuffer } -> ActiveSupport::SafeBuffer

  # Remove the modal definition associated with the given selector.
  #
  # @param [String] selector
  #
  # @return [Boolean]                 True if the definition existed.
  #
  # @note Currently unused.
  #
  def remove_page_modal: (String selector) -> bool
end
