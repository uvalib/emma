# View helper methods for "/data" pages.
#
module DataHelper
  include Emma::Json

  include CssHelper

  # All known EMMA record fields (including those not currently in use).
  #
  # @type [Array<Symbol>]
  #
  EMMA_DATA_FIELDS: symArray

  # Tables to be displayed after all others.
  #
  # @type [Array<String,Regexp>]
  #
  LATER_TABLES: Array[String|Regexp]

  # Produce a list of sorted table names.
  #
  # @param [Array<String,Symbol>, nil] names  Default: `DataHelper#table_names`
  #
  # @return [Array<String>]
  #
  def sorted_table_names: (Array[String|Symbol]|nil names) -> strArray

  # table_names
  #
  # @return [Array<String>]
  #
  def table_names: () -> strArray

  # Indicate whether *name* is a valid table name.
  #
  # @param [String, Symbol, *] name
  #
  def table_name?: (untyped name) -> bool

  # table_columns
  #
  # @param [String, Symbol, *] table_name
  #
  # @return [Array<ActiveRecord::ConnectionAdapters::Column>]
  #
  def table_columns: (untyped table_name) -> Array[ActiveRecord::ConnectionAdapters::Column]

  # table_column_names
  #
  # @param [String, Symbol, *]    table_name
  # @param [Array<String,Symbol>] cols          Column names; default: "*".
  #
  # @return [Array<String>]
  #
  def table_column_names: (untyped table_name, *(String|Symbol) cols) -> strArray

  # table_column_types
  #
  # @param [String, Symbol, *]    table_name
  # @param [Array<String,Symbol>] cols          Column names; default: "*".
  #
  # @return [Hash{Symbol=>Symbol}]
  #
  def table_column_types: (untyped table_name, *(String|Symbol) cols) -> Hash[Symbol,Symbol]

  # table_row_count
  #
  # @param [String, Symbol, *] table_name
  #
  # @return [Integer]
  #
  def table_row_count: (untyped table_name) -> Integer

  # table_records
  #
  # @param [String, Symbol, *]    name        Database table name.
  # @param [Array<String,Symbol>] cols        Column names; default: "*".
  # @param [Boolean]              headings    If *false*, don't include the
  #                                             database schema.
  # @param [Boolean]              html        If *true*, produce records as
  #                                             arrays of values.
  # @param [Boolean]              fatal       If *false*, don't raise
  #                                             exceptions.
  # @param [Boolean]              no_blanks   If *true*, don't ignore blank
  #                                               column names.
  #
  # @return [Array<Hash>]
  # @return [Array<Array<String>,Hash>]       If *html* is *true*.
  #
  def table_records
    : (untyped name, *(String|Symbol) cols, ?headings: bool,  html: true, ?fatal: bool, ?no_blanks: bool) -> Array[strArray|symHash]
    | (untyped name, *(String|Symbol) cols, ?headings: bool, ?html: bool, ?fatal: bool, ?no_blanks: bool) -> Array[symHash]

  private

  # Error message for an invalid table name.
  #
  # @param [String, Symbol, *] name
  #
  # @return [String]
  #
  def invalid_table_name: (untyped name) -> String

  # Error message for blank column(s).
  #
  # @param [Array] columns
  #
  # @return [String]
  # @return [nil]                     If no columns are given.
  #
  def blank_columns
    : (*(String|Symbol) columns) -> String
    | ()                         -> nil

  # Error message for invalid column(s).
  #
  # @param [Array] columns
  #
  # @return [String]
  # @return [nil]                     If no columns are given.
  #
  def invalid_columns
    : (*(String|Symbol) columns) -> String
    | ()                         -> nil

  # db_connection
  #
  # @return [*]                       Return value of block.
  #
  # @yield [db]
  # @yieldparam [ActiveRecord::ConnectionAdapters::AbstractAdapter] db
  #
  def db_connection: () { (ActiveRecord::ConnectionAdapters::AbstractAdapter) -> untyped } -> untyped

  # db_columns
  #
  # @param [ActiveRecord::ConnectionAdapters::AbstractAdapter] db
  # @param [String, Symbol, *]          table   Database table name.
  #
  # @return [Array<ActiveRecord::ConnectionAdapters::Column>]
  #
  def db_columns: (ActiveRecord::ConnectionAdapters::AbstractAdapter db, untyped table) -> Array[ActiveRecord::ConnectionAdapters::Column]

  # db_select
  #
  # @param [ActiveRecord::ConnectionAdapters::AbstractAdapter] db
  # @param [String, Symbol, *]          table   Database table name.
  # @param [Array<String,Symbol>]       cols    Column names; default: "*".
  # @param [String, Symbol, Array, nil] sort
  #
  # @return [Array<Hash>]
  #
  def db_select: (ActiveRecord::ConnectionAdapters::AbstractAdapter db, untyped table, Array[String|Symbol] cols, ?sort: String|Symbol|Array[String|Symbol]|nil) -> Array[anyHash]

  # db_row_count
  #
  # @param [ActiveRecord::ConnectionAdapters::AbstractAdapter] db
  # @param [String, Symbol, *]          table   Database table name.
  #
  # @return [Integer]
  #
  def db_row_count: (ActiveRecord::ConnectionAdapters::AbstractAdapter db, untyped table) -> Array[ActiveRecord::ConnectionAdapters::Column]

  public

  # Generate HTML to display a database table.
  #
  # @param [Array<Hash>]    records
  # @param [String, Symbol] name        Database table name.
  # @param [Integer]        start_row
  # @param [String]         css         Characteristic CSS class.
  # @param [Hash]           opt         Passed to #html_db_record.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_db_table: (Array[symHash] records, ?name: String|Symbol|nil, ?start_row: Integer, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate HTML to display a database record.
  #
  # @param [Hash, Array]  fields
  # @param [Integer, nil] row
  # @param [Integer]      start_col
  # @param [String]       css         Characteristic CSS class.
  # @param [Hash]         opt         Passed to #html_db_column except:
  #
  # @option opt [Integer] :first      Index value of the first record.
  # @option opt [Integer] :last       Index value of the last record.
  # @option opt [Array]   :heads      Column headings.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_db_record: (symHash|Array[symHash] fields, ?row: Integer|nil, ?start_col: Integer, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate HTML to display a database record.
  #
  # @param [*]            field
  # @param [Integer, nil] row
  # @param [Integer, nil] col
  # @param [Integer, nil] first       Index value of the first column.
  # @param [Integer, nil] last        Index value of the last column.
  # @param [String, nil]  head        Related column heading.
  # @param [String]       css         Characteristic CSS class.
  # @param [Hash]         opt         Passed to #html_db_column.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_db_column: (untyped field, ?row: Integer|nil, ?col: Integer|nil, ?first: Integer|nil, ?last: Integer|nil, ?head: String|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate HTML to display table of EMMA submission field values.
  #
  # @param [Hash]           fields
  # @param [String, Symbol] name      Database table name.
  # @param [Integer]        start_row
  # @param [String]         css       Characteristic CSS class.
  # @param [Hash]           opt       Passed to #html_db_field.
  #
  # @option opt [Integer] :row        Start row (default: 1).
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_db_field_table: (symHash fields, ?name: String|Symbol|nil, ?start_row: Integer, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate HTML to display a summary of all values for a given EMMA field.
  #
  # @param [Symbol]         field
  # @param [Hash]           values
  # @param [Integer, nil]   row
  # @param [String]         css       Characteristic CSS class.
  # @param [Hash]           opt       Passed to #html_db_column.
  #
  # @option opt [Integer] :first      Index value of the first record.
  # @option opt [Integer] :last       Index value of the last record.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_db_field: (Symbol field, symHash values, ?row: Integer|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate HTML to display a list of values and counts.
  #
  # @param [Hash]   values
  # @param [String] css               Characteristic CSS class.
  # @param [Hash]   opt               Passed to outer #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def html_db_field_values: (symHash values, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
