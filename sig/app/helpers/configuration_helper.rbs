# Methods supporting "/config/locales" configuration lookup.
#
module ConfigurationHelper
  include Emma::Common

  extend ::ConfigurationHelper

  # Configuration values for the current page.
  #
  # @param [String, Symbol] ctrlr     Default `params[:controller]`
  # @param [String, Symbol] action    Default `params[:action]`
  # @param [Hash]           opt       To #config_page_section.
  #
  # @return [Hash]
  #
  def current_config_page_section: (?ctrlr: String|Symbol|nil, ?action: String|Symbol|nil, **untyped opt) -> symHash

  # Determine the path through the configuration hierarchy for the given
  # controller/action pair.
  #
  # For ctrlr == 'user/registrations' and action == 'edit' this yields
  # %i[user_registrations edit].
  #
  # @param [String, Symbol, nil] ctrlr
  # @param [String, Symbol, nil] action
  #
  # @return [Array(Symbol, Symbol)]
  # @return [Array(Symbol, nil)]
  # @return [Array(nil,    nil)]
  #
  def config_path
    : (String|Symbol ctrlr, String|Symbol action)              -> [Symbol, Symbol]
    | (String|Symbol ctrlr, ?nil          action)              -> [Symbol, nil]
    | (nil           ctrlr, ?nil          action)              -> [nil,    nil]

  # controller_configuration
  #
  # @param [String, Symbol, nil] ctrlr
  # @param [String, Symbol, nil] action
  #
  # @return [Hash]
  #
  def controller_configuration: (?(String|Symbol|nil) ctrlr, ?(String|Symbol|nil) action) -> symHash

  # config_lookup_order
  #
  # @param [String, Symbol, nil] ctrlr
  # @param [String, Symbol, nil] action
  #
  # @return [Array<Array<Symbol>>]
  #
  def config_lookup_order: (?(String|Symbol|nil) ctrlr, ?(String|Symbol|nil) action) -> Array[symArray]

  # Find the best match from config/locales for the given partial path, first
  # looking under "en.emma.page.(ctrlr)", then under "en.emma".
  #
  # @param [String, Array]       path       Partial I18n path.
  # @param [Symbol, String, nil] ctrlr
  # @param [Symbol, String, nil] action
  # @param [any, nil]            default  Returned on failure.
  # @param [Boolean]             fatal    If *true* then raise exceptions.
  # @param [Hash]                opt      To #config_interpolations except:
  #
  # @option opt [Integer]                 :count
  # @option opt [String]                  :unit
  # @option opt [String, Symbol, Boolean] :mode
  # @option opt [Boolean]                 :one
  # @option opt [Boolean]                 :many
  #
  # @raise [RuntimeError]             If *fatal* and configuration not found.
  #
  # @return [any, nil]                The specified value or *default*.
  #
  # @example Simple path - [:item, :property]
  # Returns the most specific configuration match from the list:
  #   * "en.emma.page.(ctrlr).action.(action).item.property"
  #   * "en.emma.page.(ctrlr).item.property"
  #   * "en.emma.item.property"
  #
  # @example Branching path - [[:item1, :item2], :property]
  # Returns the most specific configuration match from the list:
  #   * "en.emma.page.(ctrlr).action.(action).item1.property"
  #   * "en.emma.page.(ctrlr).action.(action).item2.property"
  #   * "en.emma.page.(ctrlr).item1.property"
  #   * "en.emma.page.(ctrlr).item2.property"
  #   * "en.emma.item1.property"
  #   * "en.emma.item2.property"
  #
  # === Implementation Notes
  # Ideally, this method should be moved into ::Configuration, however, because
  # it takes a very different approach to constructing the list of YAML path(s)
  # to check, the functionality is not easily merged into the existing methods
  # in that module.
  #
  def config_lookup: (*(String|Symbol|Array[String|Symbol]) path, ?ctrlr: String|Symbol|nil, ?action: String|Symbol|nil, ?default: untyped, ?fatal: bool, **untyped opt) -> untyped

  # config_lookup_paths
  #
  # @param [Symbol, String, nil] ctrlr
  # @param [Symbol, String, nil] action
  # @param [String, Array]       path     Partial I18n path.
  #
  # @return [Array<Array<Symbol>>]
  #
  def config_lookup_paths: ((Symbol|String|nil) ctrlr, (Symbol|String|nil) action, *(String|Symbol|Array[String|Symbol]) path) -> Array[symArray]

  # Generate a set of explicit paths through the configuration hierarchy based
  # on the path element(s) given.
  #
  # @param [String, Symbol, Array] path   Partial I18n path.
  # @param [Integer]               depth  Recursion depth.
  #
  # @return [Array<Array<Symbol>>]
  #
  # @example For path == [["a.b", "c", "d"], "e"]
  #   [["a.b", "a", "b"], "c"] -> [[:a, :b, :e], [:c, :e], [:d, :e]]
  #
  def config_flatten_order: (*(String|Symbol|Array[String|Symbol]) path, ?depth: Integer) -> Array[symArray]

  # Recursively apply supplied unit interpolations.
  #
  # @param [any, nil] item            Hash, Array, String, Integer, Boolean
  # @param [Hash]     opt
  #
  # @return [any, nil]
  #
  def apply_config_interpolations: [T] (T item, **untyped opt) -> T

  # The variations on the description of a model item managed by a controller.
  #
  # @param [String, Symbol, nil] ctrlr
  # @param [String, Symbol, nil] action
  # @param [Boolean]             brief      Default: *true*.
  # @param [Boolean]             long       Default: *false*.
  # @param [Symbol, nil]         mode       To specify either :brief or :long.
  # @param [Integer, nil]        count      If == 1, only single; if != 1, only
  #                                           plural.
  # @param [Boolean, nil]        plural     If *true*, only plural; if *false*,
  #                                           only single.
  # @param [Hash]                units      Specify one or more unit names.
  #
  # @option units [String] :item            Specify single unit name.
  # @option units [String] :items           Specify plural unit name.
  # @option units [String] :Item            Specify capitalized single unit.
  # @option units [String] :Items           Specify capitalized plural units.
  #
  # @return [Hash{Symbol=>String}]
  #
  # === Usage Notes
  # Specifying :item completely by-passes configuration lookup.  Specifying
  # :items, :Item, and/or :Items will simply override the matching configured
  # (or derived) value.
  #
  # === Implementation Notes
  # This method does not have an embedded fallback value -- it assumes that
  # some form of "en.emma.generic.unit" will be found if there is no definition
  # for the given controller.
  #
  def config_interpolations: (?ctrlr: String|Symbol|nil, ?action: String|Symbol|nil, ?brief: bool, ?long: bool, ?mode: Symbol|nil, ?count: Integer|nil, ?plural: bool|nil, **untyped units) -> Hash[Symbol,String]

  private

  def self.included: (Module base) -> void
end
