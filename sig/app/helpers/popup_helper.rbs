# View helper methods supporting the display of popups.
#
module PopupHelper
  include Emma::Unicode

  include HtmlHelper

  include LinkHelper

  POPUP_TOGGLE_CLASS: String

  POPUP_PANEL_CLASS: String

  POPUP_CLOSER_CLASS: String

  POPUP_CONTROLS_CLASS: String

  POPUP_DEFERRED_CLASS: String

  POPUP_RESIZE_CLASS: String

  POPUP_HIDDEN_MARKER: String

  # Render a free-standing popup element.
  #
  # @param [Hash] opt                 Passed to #make_popup_panel.
  # @param [Proc] block               Passed to #make_popup_panel.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/shared/modal-base.js
  #
  def modal_popup: (**untyped opt) { () -> (String|strArray) } -> ActiveSupport::SafeBuffer

  # Render a popup control and associated popup element.
  #
  # @param [Hash, nil] control        Options for the visible toggle control.
  # @param [Hash, nil] panel          Options for the popup panel element.
  # @param [Hash] opt                 Passed to 'inline-popup' except for
  #                                     options passed to #make_popup_toggle,
  #                                     #make_popup_panel.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Popup panel content.
  # @yieldreturn [String,Array<String>]
  #
  # @see file:app/assets/stylesheets/layouts/controls/_popup.scss
  #
  def inline_popup: (?control: symHash|nil, ?panel: symHash|nil, **untyped opt) ?{ () -> (String|strArray) } -> ActiveSupport::SafeBuffer

  # @private
  POPUP_TOGGLE_OPT: symArray

  # Create a popup toggle control.
  #
  # @param [Hash] opt                 Passed to element method except for:
  #
  # @option opt [ActiveSupport::SafeBuffer, Hash]   :button
  # @option opt [ActiveSupport::SafeBuffer, String] :text
  # @option opt [String]                            :label
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def make_popup_toggle: (?button: untyped|nil, ?text: untyped|nil, ?label: untyped|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # @private
  POPUP_PANEL_OPT: symArray

  # Render a popup control and popup element.
  #
  # @param [Boolean]   hidden         If *false*, panel is displayed initially.
  # @param [Boolean]   resize         If *true*, the panel is resizable.
  # @param [Boolean]   left_grab      If *true*, resize grab is on the left.
  # @param [Hash, nil] closer         Options for the panel closer icon.
  # @param [Hash, nil] close          Options for the panel close button.
  # @param [Hash]      opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Popup panel content
  # @yieldreturn [String,Array<String>]
  #
  def make_popup_panel: (?hidden: bool, ?resize: bool, ?left_grab: bool, ?closer: symHash|nil, ?close: symHash|nil, **untyped opt) ?{ () -> (String|strArray) } -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
