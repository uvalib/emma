# View helper methods supporting access and linkages to the Bookshare API.
#
module BookshareHelper
  include ModelHelper

  include BsApiHelper

  include HtmlHelper

  BOOKSHARE_SITE: String

  BOOKSHARE_CMS: String

  BOOKSHARE_CATALOG: String

  BOOKSHARE_USER: String

  # Bookshare actions.
  #
  # Any action not explicitly listed (or listed without a :url value) is
  # implicitly assumed to be a #BOOKSHARE_SITE endpoint.
  #
  # @type [Hash{Symbol=>Hash,String}]
  #
  # -
  # noinspection LongLine
  # +
  BOOKSHARE_ACTION: Hash[Symbol,(String|symHash)]

  # Mapping of application URL parameters to Bookshare URL parameters.
  #
  # @type [Hash{Symbol=>Hash{Symbol=>Symbol}}]
  #
  PARAM_MAPPING: Hash[Symbol,Hash[Symbol,Symbol]]

  # Mapping of an application action (expressed as "controller-action") to the
  # associated Bookshare action (expressed as a #BOOKSHARE_ACTION key).
  #
  # @type [Hash{Symbol=>Hash}]
  #
  ACTION_MAPPING: symHash

  # Creator field categories.
  #
  # @type [Array<Symbol>]
  #
  CREATOR_FIELDS: symArray

  # Generate a Bookshare URL.  If *path* is not given, infer it from the
  # originating controller and action.
  #
  # @param [Hash, String, nil] path
  # @param [Hash]              prm    Passed to #make_path.
  #
  # @return [String]                  A full URL.
  # @return [nil]                     If the URL could not be determined.
  #
  # -
  # == Variations
  # +
  #
  # @overload bookshare_url(url, **path_opt)
  #   @param [String, nil] url        Full or partial URL.
  #   @param [Hash]        prm
  #
  # @overload bookshare_url(hash, **path_opt)
  #   @param [Hash]        hash       Controller/action.
  #   @param [Hash]        prm
  #
  # -
  # noinspection RubyNilAnalysis
  # +
  def bookshare_url: (String|symHash|nil path, **untyped prm) -> String?

  # A direct link to a Bookshare page to open in a new browser tab.
  #
  # @param [Bs::Api::Record, String] item
  # @param [String]                  path
  # @param [Hash]                    path_opt   Passed to #bookshare_url.
  #
  # @return [ActiveSupport::SafeBuffer]         HTML link element.
  # @return [nil]                               If no *path* was found.
  #
  # -
  # == Variations
  # +
  #
  # @overload bookshare_link(item)
  #   @param [Bs::Api::Record] item
  #
  # @overload bookshare_link(item, path, **path_opt)
  #   @param [String] item            Link label.
  #   @param [String] path            Passed as #bookshare_url *path* parameter
  #   @param [Hash]   path_opt
  #
  def bookshare_link: (String|Bs::Api::Record item, ?path: String?, **untyped path_opt) -> ActiveSupport::SafeBuffer?

  # @private
  # @type [Array<Symbol>]
  SEARCH_LINKS_OPTIONS: symArray

  # Item terms as search links.
  #
  # Items in returned in two separately sorted groups: actionable links (<a>
  # elements) followed by items which are not linkable (<span> elements).
  #
  # @param [Model] item
  # @param [Hash]  opt                  Passed to :link_method except for:
  #
  # @option opt [Symbol] :field
  # @option opt [Symbol] :method
  # @option opt [Hash]   :method_opt    Passed to *method* call.
  # @option opt [String] :separator     Default: #DEFAULT_ELEMENT_SEPARATOR
  # @option opt [Symbol] :link_method   Default: :search_link
  #
  # @return [ActiveSupport::SafeBuffer] HTML link element(s).
  # @return [nil]                       If access method unsupported by *item*.
  #
  def search_links: (Model item, **untyped opt) -> ActiveSupport::SafeBuffer?

  # @private
  # @type [Array<Symbol>]
  SEARCH_LINK_OPTIONS: symArray

  # Create a link to the search results index page for the given term(s).
  #
  # @param [Model, String] terms
  # @param [Hash]          opt                Passed to #make_link except for:
  #
  # @option opt [Symbol]         :field       Default: :title.
  # @option opt [Boolean]        :all_words
  # @option opt [Boolean]        :no_link
  # @option opt [Symbol, String] :scope
  # @option opt [Symbol, String] :controller
  #
  # @return [ActiveSupport::SafeBuffer]       An HTML link element.
  # @return [nil]                             If no *terms* were provided.
  #
  # -
  # noinspection RubyMismatchedArgumentType
  # +
  def search_link: (Model|String terms, **untyped opt) -> ActiveSupport::SafeBuffer?

  # Create record links to an external target or via the internal API interface
  # endpoint.
  #
  # @param [Model, Array<String>, String] links
  # @param [Hash] opt                 Passed to #make_link except for:
  #
  # @option opt [Boolean] :no_link
  # @option opt [String]  :separator  Default: #DEFAULT_ELEMENT_SEPARATOR.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def record_links: (Model|String|strArray links, **untyped opt) -> ActiveSupport::SafeBuffer

  # Transform a field value for HTML rendering.
  #
  # @param [Bs::Api::Record] item
  # @param [Any]             value
  # @param [Hash]            opt      Passed to the render method.
  #
  # @return [Any]   HTML or scalar value.
  # @return [nil]   If *value* was *nil* or *item* resolved to *nil*.
  #
  # @see ModelHelper::List#render_value
  #
  def bookshare_render_value: (Bs::Api::Record item, untyped value, **untyped opt) -> untyped?

  # The type of named field regardless of pluralization or presence of a
  # "_list" suffix.
  #
  # @param [Symbol, String, Any] name
  #
  # @return [Symbol]
  #
  def field_category: (untyped name) -> Symbol

  # Transform name(s) into Bookshare username(s).
  #
  # @param [String, Symbol, Array<String,Symbol>] name
  #
  # @return [String]
  # @return [Array<String>]
  #
  # -
  # == Variations
  # +
  #
  # @overload bookshare_user(name)
  #   @param [String, Symbol] name
  #   @return [String]
  #
  # @overload bookshare_user(names)
  #   @param [Array<String,Symbol>] names
  #   @return [Array<String>]
  #
  def bookshare_user: (String|Symbol name)        -> String
                    | (Array[String|Symbol] name) -> strArray

  private

  def self.included: (Module base) -> void
end
