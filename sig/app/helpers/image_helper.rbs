# View helper methods supporting the display of images.
#
module ImageHelper
  include Emma::Common

  include HtmlHelper

  include LinkHelper

  # If this value is true, a placeholder image will be displayed initially and
  # client-side JavaScript will be responsible for replacing fetching the image
  # asynchronously via "/search/image".
  #
  # @type [Boolean]
  #
  ASYNCHRONOUS_IMAGES: bool

  # Asynchronous image placeholder image relative asset path.
  #
  # @type [String]
  #
  IMAGE_PLACEHOLDER_ASSET: String

  # Asynchronous image placeholder image CSS class.
  #
  # @type [String]
  #
  IMAGE_PLACEHOLDER_CLASS: String

  # Asynchronous image placeholder image alt text.
  #
  # @type [String]
  #
  # === Implementation Notes
  # This is defined as an empty string because display of the alt text by the
  # (for the brief time that the placeholder image might be unavailable) is
  # disruptive to the entire display layout.
  #
  IMAGE_PLACEHOLDER_ALT: String

  # Create an HTML image element.
  #
  # @param [String]       url
  # @param [String, nil]  link        If present, the URL to which the image
  #                                     is a link.
  # @param [String, nil]  alt         Passed to #image_tag.
  # @param [Integer, nil] row         Grid row of the element.
  # @param [Hash]         opt         Passed to #html_div except for options
  #                                     passed to #make_link if *link* given.
  #
  # @return [ActiveSupport::SafeBuffer]   HTML image or placeholder.
  # @return [nil]                         If *url* is invalid.
  #
  def image_element: (String url, ?link: String|nil, ?alt: String|nil, ?row: Integer|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Placeholder image.
  #
  # If :alt text is provided in *opt* it is preserved as 'data-alt', along with
  # *url* in 'data-path'.
  #
  # @param [String]      url
  # @param [String, nil] image        Default: #image_placeholder_asset.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          Passed to #image_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def image_placeholder: (String url, ?image: String|nil, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Current path to the #IMAGE_PLACEHOLDER_ASSET.
  #
  # @return [String]
  #
  def image_placeholder_asset: () -> String

  private

  def self.included: (Module base) -> void
end
