# View helper methods for "/artifact" pages.
#
module ArtifactHelper
  include BookshareHelper

  # Configuration for Bookshare download control properties.
  #
  # @type [Hash{Symbol=>Any}]
  #
  # -
  # noinspection RailsI18nInspection
  # +
  DOWNLOAD_CONFIG: symHash

  # Default link tooltip.
  #
  # @type [String]
  #
  DOWNLOAD_TOOLTIP: String

  # Default completed link tooltip.
  #
  # @type [String]
  #
  DOWNLOAD_COMPLETE_TIP: String

  # Artifact download progress indicator element CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_CLASS: String

  # Artifact download progress indicator tooltip.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_TIP: String

  # Artifact download progress indicator relative asset path.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_ASSET: String

  # Artifact download progress indicator alt text.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_ALT_TEXT: String

  # Artifact download failure message element CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_FAILURE_CLASS: String

  # Artifact download button element CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_BUTTON_CLASS: String

  # Artifact download button label.
  #
  # @type [String]
  #
  DOWNLOAD_BUTTON_LABEL: String

  # Generic reference to format type for label construction.
  #
  # @type [String]
  #
  THIS_FORMAT: String

  # Tooltip text added if the link requires authentication. # TODO: I18n
  #
  # @type [String]
  #
  SIGN_IN: String

  # Create an element containing a link to download the given item.
  #
  # @param [Api::Record]                     item
  # @param [String, Bs::Record::Format, nil] format
  # @param [String, nil]                     url      Def: derived from *item*.
  # @param [Hash]                            opt      Passed to #model_link.
  #
  # @return [ActiveSupport::SafeBuffer]   The HTML link element.
  # @return [nil]                         No link URL was provided or found.
  #
  def artifact_link: (Api::Record item, String|Bs::Record::Format|nil format, ?url: String?, **untyped opt) -> ActiveSupport::SafeBuffer?

  # Create links to download each artifact of the given item.
  #
  # @param [Api::Record] item
  # @param [Hash]        opt          Passed to #artifact_link except for:
  #
  # @option opt [String] :fmt         One of `BsFormatType#values`
  # @option opt [String] :separator   Default: #DEFAULT_ELEMENT_SEPARATOR.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def download_links: (Api::Record item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Prepare a format name for use in a tooltip or label.
  #
  # @param [String, Symbol, nil] fmt
  # @param [String, nil]         quote  Quote character; default: '"'.
  #
  # @return [String]
  #
  def format_label: (Symbol|String|nil fmt, ?quote: String?) -> String

  # An element to be shown while an artifact is being acquired.
  #
  # @param [String, nil] image        Default: 'loading-balls.gif'
  # @param [Hash]        opt          Passed to #image_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def download_progress: (?image: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # An element to indicate failure.
  #
  # @param [Hash] opt                 Passed to #html_span.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/download.js *appendFailureMessage*
  #
  def download_failure: (**untyped opt) -> ActiveSupport::SafeBuffer

  # An element for direct download of an artifact.
  #
  # @param [String]         label
  # @param [String, Symbol] fmt
  # @param [Hash]           opt       Passed to #make_link.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def download_button: (?label: String?, ?fmt: (String|Symbol)?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Transform a field value for HTML rendering.
  #
  # @param [Bs::Api::Record] item
  # @param [Any]             value
  # @param [Hash]            opt        Passed to the render method.
  #
  # @return [Any]   HTML or scalar value.
  # @return [nil]   If *value* was *nil* or *item* resolved to *nil*.
  #
  # @see BookshareHelper#bookshare_render_value
  #
  def artifact_render_value: (Bs::Api::Record item, untyped value, **untyped opt) -> untyped?

  # Render a metadata listing of an artifact.
  #
  # @param [Bs::Api::Record] item
  # @param [Hash, nil]       pairs    Additional field mappings.
  # @param [Hash]            opt      Passed to #model_details.
  #
  def artifact_details: (Bs::Api::Record item, ?pairs: anyHash?, **untyped opt) -> ActiveSupport::SafeBuffer?

  # Render a single entry for use within a list of items.
  #
  # @param [Bs::Api::Record] item
  # @param [Hash, nil]       pairs    Additional field mappings.
  # @param [Hash]            opt      Passed to #model_list_item.
  #
  def artifact_list_item: (Bs::Api::Record item, ?pairs: anyHash?, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
