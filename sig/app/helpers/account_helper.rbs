# View helper methods for "/account" pages.
#
module AccountHelper
  include ModelHelper

  include ConfigurationHelper

  include I18nHelper

  include RoleHelper

  # Create a link to the details show page for the given item.
  #
  # @param [User] item
  # @param [Hash] opt                 Passed to #model_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_link: (User item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Create a link to the edit page for the given item.
  #
  # @param [User] item
  # @param [Hash] opt                 Passed to #model_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def edit_account_link: (User item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Create a link to remove the given item.
  #
  # @param [User] item
  # @param [Hash] opt                 Passed to #model_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def delete_account_link: (User item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Transform a field value for HTML rendering.
  #
  # @param [User] item
  # @param [Any]  value
  # @param [Hash] opt                 Passed to the render method.
  #
  # @return [Any]   HTML or scalar value.
  # @return [nil]   If *value* was *nil* or *item* resolved to *nil*.
  #
  # @see ModelHelper::List#render_value
  #
  def account_render_value: (User item, untyped value, **untyped opt) -> untyped

  # Create a list of User roles.
  #
  # @param [User] item
  # @param [Hash] opt                 Passed to #html_tag
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_roles: (User item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Create a single term which describes the role level of *item*.
  #
  # @param [User] item
  # @param [Hash] opt                 Passed to #html_tag
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_role_prototype: (User item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render details of an account.
  #
  # @param [User]      item
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to #account_field_values and
  #                                     #model_details.
  #
  def account_details: (User|nil item, ?pairs: anyHash?, **untyped opt) -> ActiveSupport::SafeBuffer?

  # Render a single entry for use within a list of items.
  #
  # @param [User]      item
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to #model_list_item.
  #
  def account_list_item: (User? item, ?pairs: anyHash?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render accounts as a table.
  #
  # @param [User, Array<User>] list
  # @param [Hash]              opt    Passed to #model_table
  #
  def account_table: (User|Array[User]|nil list, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render one or more entries for use within a <tbody>.
  #
  # @param [User, Array<User>] list
  # @param [Hash]              opt    Passed to #model_table_entries
  #
  def account_table_entries: (User|Array[User]|nil list, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single entry for use within a table of items.
  #
  # @param [User] item
  # @param [Hash] opt                 Passed to #model_table_entry
  #
  def account_table_entry: (User? item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render column headings for an account table.
  #
  # @param [User, Array<User>] item
  # @param [Hash]              opt    Passed to #model_table_headings
  #
  def account_table_headings: (User|Array[User]|nil item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Patterns for User record columns which are not included for non-developers.
  #
  # @type [Array<String,Regexp>]
  #
  ACCOUNT_FIELD_FILTERS: Array[String|Regexp]

  # Specified field selections from the given User instance.
  #
  # @param [User, nil] item
  # @param [Hash]      opt            Passed to #model_field_values
  #
  # @return [Hash{String=>ActiveSupport::SafeBuffer}]
  #
  def account_field_values: (User|nil item, **untyped opt) -> Hash[String,ActiveSupport::SafeBuffer]

  # account_columns
  #
  # @param [User, nil] item
  # @param [Hash]      opt            Passed to #account_field_values
  #
  # @return [Hash{Symbol=>Any}]
  #
  def account_columns: (?User? item, **untyped opt) -> symHash

  # Render pre-populated form fields.
  #
  # @param [User]      item
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to #render_form_fields.
  #
  def account_form_fields: (User item, ?pairs: anyHash?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Button information for account actions.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  ACCOUNT_ACTION_VALUES: symHash

  # Generate a form with controls for accounting a file, entering metadata, and
  # submitting.
  #
  # @param [User]           item
  # @param [String]         label     Label for the submit button.
  # @param [String, Symbol] action    Either :new or :edit.
  # @param [Hash]           opt       Passed to #form_with except for:
  #
  # @option opt [String] :cancel      URL for cancel button action (default:
  #                                     :back).
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_form: (User item, ?label: String?, ?action: (String|Symbol)?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Account submit button.
  #
  # @param [Hash] opt                 Passed to #submit_tag except for:
  #
  # @option opt [String, Symbol] :action    Default: `params[:action]`.
  # @option opt [String]         :label     Default: based on :action.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/download.js *submitButton()*
  #
  def account_submit_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Account cancel button.
  #
  # @param [Hash] opt                 Passed to #button_tag except for:
  #
  # @option opt [String, Symbol] :action    Default: `params[:action]`.
  # @option opt [String]         :label     Default: based on :action.
  # @option opt [String]         :url       Default: `params[:cancel]` or
  #                                           `request.referer`.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/download.js *cancelButton()*
  #
  def account_cancel_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Form fields are wrapped in an element for easier grid manipulation.
  #
  # @param [User] item
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_field_container: (User item, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a menu of local EMMA user account entries.
  #
  # @param [Symbol, String] action    Default: `params[:action]`
  # @param [User, String]   user      Default: '@user'
  # @param [String]         prompt
  # @param [Hash]           opt       Passed to #page_items_menu.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_items_menu: (?action: (Symbol|String)?, ?user: (String|User)?, ?prompt: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a form with controls for deleting a local EMMA user account.
  #
  # @param [Array<String,User>] items
  # @param [String]             label   Label for the submit button.
  # @param [Hash]               opt     Passed to 'account-delete-form' except:
  #
  # @option opt [String] :cancel        Cancel button redirect URL passed to
  #                                       #account_delete_cancel.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_delete_form: (*(String|User) items, ?label: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Submit button for the delete upload form.
  #
  # @param [Array<String,User>] items
  # @param [Hash]               opt     Passed to #delete_submit_button.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def account_delete_submit: (*(String|User) items, **untyped opt) -> ActiveSupport::SafeBuffer

  # Cancel button for the delete account form.
  #
  # @param [Hash] opt                 Passed to #account_cancel_button
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/download.js *cancelAction()*
  #
  def account_delete_cancel: (**untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
