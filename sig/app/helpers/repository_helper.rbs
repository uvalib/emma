# View helper methods supporting variations for the member repositories.
#
module RepositoryHelper
  include LinkHelper

  # HathiTrust parameters which cause a prompt for login.
  #
  # @type [String]
  #
  HT_URL_PARAMS: String

  # Internet Archive items that don't require EMMA login.
  #
  # @type [Array<String,Regexp>]
  #
  IA_DIRECT_LINK_PATTERNS: Array[String|Regexp]

  # Indicate whether the given URL is an EMMA link.
  #
  # @param [String, nil] url
  #
  def emma_link?: ((String|nil) url) -> bool

  # Indicate whether the given URL is a Bookshare link.
  #
  # @param [String, nil] url
  #
  # == Usage Notes
  # This exists to support the handful of items which are represented as
  # belonging to the "EMMA" repository but which are actually Bookshare items
  # from the "EMMA Collection".
  #
  def bs_link?: ((String|nil) url) -> bool

  # Indicate whether the given URL is a HathiTrust link.
  #
  # @param [String, nil] url
  #
  def ht_link?: ((String|nil) url) -> bool

  # Indicate whether the given URL is an Internet Archive link.
  #
  # ACE/ScholarsPortal items are hosted by Internet Archive with download links
  # which are indistinguishable.
  #
  # @param [String, nil] url
  #
  def ia_link?: ((String|nil) url) -> bool

  # Report the member repository associated with the given URL.
  #
  # @param [String, nil] url
  #
  # @return [String]                  One of EmmaRepository#values.
  # @return [nil]                     If not associated with any repository.
  #
  def url_repository: ((String|nil) url) -> (String | nil)

  # Report the member repository as indicated by the given parameters.
  #
  # To account for the handful of "EMMA" items that are actually Bookshare
  # items from the "EMMA collection", if both a String (URL) and Model/Hash are
  # given, change the reported repository based on the nature of the URL.
  #
  # @param [Model, Hash, String, nil] arg1
  # @param [Model, Hash, String, nil] arg2
  #
  # @return [String]                  One of EmmaRepository#values.
  # @return [nil]                     If not associated with any repository.
  #
  def repository_for
    : (Model|symHash obj,  ?(String|nil)           url)  -> (String | nil)
    | (String        url,  ?(Model|symHash|nil)    obj)  -> (String | nil)
    | (nil           arg1,  (Model|symHash|String) arg2) -> (String | nil)
    | (nil           arg1, ?nil                    arg2) -> nil

  # Produce a link to retrieve an EMMA file.
  #
  # @param [String] label
  # @param [String] url
  # @param [Hash]   opt               Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def emma_retrieval_link: (String label, String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to open a new browser tab to retrieve a file from the
  # Bookshare web site.
  #
  # @param [String] label
  # @param [String] url
  # @param [Hash]   opt               Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def bs_retrieval_link: (String label, String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to open a new browser tab to retrieve a file from the
  # HathiTrust web site.
  #
  # @param [String] label
  # @param [String] url
  # @param [Hash]   opt               Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ht_retrieval_link: (String label, String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve an Internet Archive file.
  #
  # @param [String] label
  # @param [String] url
  # @param [Hash]   opt               Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # == Implementation Notes
  # Encrypted DAISY files are handled differently; for an explanation:
  # @see IaDownloadConcern#ia_download_response
  #
  def ia_retrieval_link: (String label, String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve an ACE file.
  #
  # @param [String] label
  # @param [String] url
  # @param [Hash]   opt               Passed to #ia_retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ace_retrieval_link: (String label, String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve a content file.
  #
  # @param [String] label
  # @param [String] url
  # @param [Hash]   opt               Passed to LinkHelper#download_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def retrieval_link: (String label, String url, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
