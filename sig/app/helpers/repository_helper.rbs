# View helper methods supporting variations for partner repositories.
#
module RepositoryHelper
  include LinkHelper

  # Internet Archive items that don't require EMMA login.
  #
  # @type [Array<String,Regexp>]
  #
  IA_DIRECT_LINK_PATTERNS: Array[String|Regexp]

  # Indicate whether the given URL is an EMMA link.
  #
  # @param [String, nil] url
  #
  def emma_link?: ((String|nil) url) -> bool

  # Indicate whether the given URL is an Internet Archive link.
  #
  # ACE/ScholarsPortal items are hosted by Internet Archive with download links
  # which are indistinguishable.
  #
  # @param [String, nil] url
  #
  def ia_link?: ((String|nil) url) -> bool

  # Indicate whether the given URL is an OpenAlex link.
  #
  # @param [String, nil] url
  #
  def oa_link?: ((String|nil) url) -> bool

  # Report the partner repository associated with the given URL.
  #
  # @param [String, nil] url
  # @param [Boolean]     warn
  #
  # @return [Symbol]                  From one of EmmaRepository#values.
  # @return [nil]                     Associated repo could not be determined.
  #
  def url_repository: ((String|nil) url, ?warn: bool) -> (Symbol | nil)

  # Report the partner repository as indicated by the given parameter(s).
  #
  # To account for the handful of "EMMA" items that are actually Bookshare
  # items from the "EMMA collection", if both a String (URL) and Model/Hash are
  # given, change the reported repository based on the nature of the URL.
  #
  # @param [String, Model, Hash, nil] url
  # @param [Model, Hash, nil]         obj
  # @param [Symbol]                   field
  #
  # @return [Symbol]                  From one of EmmaRepository#values.
  # @return [nil]                     Associated repo could not be determined.
  #
  def repository_for: ((String|Model|symHash|nil) url, ?(Model|symHash|nil) obj, ?field: Symbol) -> (Symbol | nil)

  # Return the name of the indicated repository.
  #
  # @param [any, nil] repo            EmmaRepository, String, Symbol
  #
  # @return [String, nil]
  #
  def repository_title
    : (EmmaRepository|String|Symbol repo) -> (String | nil)
    | (untyped                      repo) -> nil

  # Return the term for the indicated repository needed for
  # "en.emma.term.search.source.link_tooltip".
  #
  # @param [any, nil] repo            EmmaRepository, String, Symbol
  #
  # @return [String]
  #
  def record_src: (EmmaRepository|String|Symbol|nil repo) -> String

  # Return the term for the indicated repository needed for
  # "en.emma.term.search.source.retrieval_tip".
  #
  # @param [any, nil] repo            EmmaRepository, String, Symbol
  #
  # @return [String]
  #
  def download_src: (EmmaRepository|String|Symbol|nil repo) -> String

  # Get a value from "en.emma.repository.#(repo)" or the fallback value from
  # "en.emma.repository._template".
  #
  # @note "en.emma.repository._template.#(key)" is expected to be non-nil.
  #
  # @param [Symbol]   key
  # @param [any, nil] repo            EmmaRepository, String, Symbol
  #
  # @return [String]
  #
  def repository_config_value: (Symbol key, ?(EmmaRepository|String|Symbol|nil) repo) -> String

  # Produce a link to retrieve an EMMA file.
  #
  # @param [String]      url
  # @param [String, nil] label        Default: *path*.
  # @param [Hash]        opt          Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def emma_retrieval_link: (String url, ?(String|nil) label, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve an Internet Archive file.
  #
  # @param [String]      url
  # @param [String, nil] label        Default: *path*.
  # @param [Hash]        opt          Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # === Implementation Notes
  # Encrypted DAISY files are handled differently; for an explanation:
  # @see IaDownloadConcern#ia_download_response
  #
  def ia_retrieval_link: (String url, ?(String|nil) label, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve an ACE file.
  #
  # @param [String]      url
  # @param [String, nil] label        Default: *path*.
  # @param [Hash]        opt          Passed to #ia_retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ace_retrieval_link: (String url, ?(String|nil) label, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve an OpenAlex file.
  #
  # @param [String]      url
  # @param [String, nil] label        Default: *path*.
  # @param [Hash]        opt          Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # === Implementation Notes
  # OpenAlex only has direct download of PDF files.
  #
  def oa_retrieval_link: (String url, ?(String|nil) label, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve a content file.
  #
  # @param [String]      url
  # @param [String, nil] label        Default: *path*.
  # @param [Hash]        opt          Passed to LinkHelper#download_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def retrieval_link: (String url, ?(String|nil) label, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
