# View helper supporting EMMA settings available to all workers/threads.
#
module SysHelper::Settings
  include SysHelper::Common

  # @private
  COMMIT_LABEL: String

  # On/off toggles for each application setting flag.
  #
  # @param [String] submit            The submit label (or button).
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               To #form_tag
  #
  def app_flags: (?submit: String|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Display of application setting values.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               To #form_tag
  #
  def app_settings: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Display of application GlobalProperty values.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               To #form_tag
  #
  def app_properties: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # HTML for separating application configuration items.
  #
  # @param [String, nil] content
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def app_spacer: (?(String|nil) content) -> ActiveSupport::SafeBuffer

  # HTML for a labelled pair of radio buttons for turning a flag on/off.
  #
  # @param [Symbol, String]                   key
  # @param [AppSettings::Value, Boolean, nil] value   Current value of the flag
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def app_flag_controls: (Symbol|String key, ?(AppSettings::Value|bool|nil) value) -> ActiveSupport::SafeBuffer

  # HTML for an entry displaying an application configuration value.
  #
  # @param [Symbol, String]                  key
  # @param [AppSettings::Value, String, nil] value
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def app_setting_display: (Symbol|String key, ?(AppSettings::Value|String|nil) value) -> ActiveSupport::SafeBuffer

  # Create a radio button and label for an EMMA flag.
  #
  # @param [Symbol, String] flag
  # @param [*]              value     Current value of the flag.
  # @param [Boolean, nil]   on        Whether this is the 'ON' or 'OFF' control
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def app_flag_radio_button: (Symbol|String flag, untyped value, on: bool|nil) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
