# View helper supporting EMMA settings available to all workers/threads.
#
module SysHelper::Common
  include Emma::Common

  include Emma::Constants

  include LinkHelper

  # @private
  SYS_CONFIGURATION: symHash

  # A list of the "/sys" links available to the current user.
  #
  # @param [Symbol, String, Integer, nil] tag   Element wrapping #make_link.
  # @param [Hash]                         opt   Passed to each #make_link.
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def action_links: (?tag: Symbol|String|Integer|nil, **untyped opt) -> Array[ActiveSupport::SafeBuffer]

  # Translate Hash keys and values into an element containing pairs of
  # dt and dd elements.
  #
  # @param [Array, Hash] hdrs
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def dt_dd_section: ((anyHash|Array[String|Symbol]) hdrs, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Translate Hash keys and values into pairs of dt and dd elements.
  #
  # @param [Array, Hash] hdrs
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def dt_dd_lines: ((anyHash|Array[String|Symbol]) hdrs) -> ActiveSupport::SafeBuffer

  # Translate Hash keys and values into pairs of dt and dd elements.
  #
  # @param [Hash] pairs
  # @param [Hash] opt                 Passed to `dt` and `dd` elements.
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def dt_dd_pairs: ((anyHash|Array[String|Symbol]) pairs, **untyped opt) -> Array[ActiveSupport::SafeBuffer]

  # Format a name.
  #
  # @param [any, nil] name
  # @param [String]   css             Characteristic CSS class/selector.
  # @param [Hash]     opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def dt_name: (untyped name, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Format a value.
  #
  # @param [any, nil] value
  # @param [Integer]  object_wrap
  # @param [String]   css             Characteristic CSS class/selector.
  # @param [Hash]     opt
  #
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def dd_value: (untyped value, ?object_wrap: Integer, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a table for "/sys" pages.
  #
  # @param [Hash,Array<Array>] pairs
  # @param [Symbol, Hash]      headers  Where the keys become CSS class names.
  # @param [Boolean]           sort
  # @param [String]            css      Characteristic CSS class/selector.
  # @param [Hash]              opt      Passed to the outer `table` element.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def sys_table: ((anyHash|Array[[untyped,untyped]]) pairs, (Symbol|anyHash) headers, ?sort: bool, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Run a system command and return its output.
  #
  # If *command* is an array, it is treated as a sequence of alternate commands
  # which are tried in order until one of them is successful.
  #
  # @param [String, Array<String>] command
  #
  # @return [String]
  #
  def run_command: (String|strArray commannd) -> String

  # Run the system `ls` command.
  #
  # All items at the root are listed and will be recursed into except for the
  # root names present in *ignore*.
  #
  # @param [String, nil]                root
  # @param [String, Array<String>, nil] names
  # @param [String, Array<String>, nil] ignore  Do not recurse into these.
  # @param [String]                     ls_opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ls_command: (?root: String|nil, ?names: String|strArray|nil, ?ignore: String|strArray|nil, ?ls_opt: String) -> ActiveSupport::SafeBuffer

  # Create an `ls` output line, with the name as a link to view it if it is a
  # file.
  #
  # @param [String]      line
  # @param [String, nil] base         Root for file paths.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ls_entry: (String line, ?(String|nil) base) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
