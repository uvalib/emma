# View helper methods for setting/getting <script> meta-tags.
#
module HeadHelper::Scripts
  include HeadHelper::Common

  include ImageHelper

  private

  # @type [Array<String,Hash,Array(String,Hash)>]
  DEFAULT_PAGE_JAVASCRIPTS: Array[script_path]

  public

  @page_javascript: Array[script_path]

  # Access the scripts for this page.
  #
  # If a block is given, this invocation is being used to accumulate script
  # sources; otherwise this invocation is being used to emit the JavaScript
  # '<script>' element(s).
  #
  # @return [ActiveSupport::SafeBuffer]               If no block given.
  # @return [Array<String,Hash,Array(String,Hash)>]   If block given.
  #
  # @yield To supply source(s) to #set_page_javascripts.
  # @yieldreturn [String,Hash,Array(String,Hash),Array<String,Hash,Array(String,Hash)>]
  #
  def page_javascripts
    : () { () -> (script_path | Array[script_path]) } -> Array[String|symHash|[String,symHash]]
    | ()                                              -> ActiveSupport::SafeBuffer

  # Set the script(s) for this page, eliminating any previous value(s).
  #
  # @param [Array] sources
  #
  # @return [Array<String,Hash,Array(String,Hash)>] New @page_javascript array.
  #
  # @yield To supply additional source(s) to @page_javascript.
  # @yieldreturn [String,Hash,Array(String,Hash),Array<String,Hash,Array(String,Hash)>]
  #
  def set_page_javascripts: (*(script_path|Array[script_path]) values) ?{ () -> (script_path | Array[script_path]) } -> Array[String|symHash|[String,symHash]]

  # Add to the script(s) for this page.
  #
  # @param [Array] sources
  #
  # @return [Array<String,Hash,Array(String,Hash)>] Updated @page_javascript.
  #
  # @yield To supply additional source(s) to @page_javascript.
  # @yieldreturn [String,Hash,Array(String,Hash),Array<String,Hash,Array(String,Hash)>]
  #
  def append_page_javascripts: (*(script_path|Array[script_path]) values) ?{ () -> (script_path | Array[script_path]) } -> Array[String|symHash|[String,symHash]]

  # Emit the '<script>' tag(s) appropriate for the current page.
  #
  # @param [Hash] opt                 Passed to #javascript_include_tag
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def emit_page_javascripts: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Main JavaScript for the application.
  #
  # @param [Hash] opt                 Passed to #javascript_include_tag
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def app_javascript: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Dynamic overrides for JavaScript settings that are otherwise supplied at
  # the time of asset compilation.  Setting values here makes it possible to
  # change values that were in effect at that time -- particularly useful for
  # settings that are based on environment variable settings.
  #
  # @see #page_script_settings
  #
  SCRIPT_SETTINGS_OVERRIDES: symHash

  @script_settings: symHash

  # The set of overrides to JavaScript client settings.
  #
  # @return [Hash]
  #
  def script_settings: () -> symHash

  # Add override(s) to JavaScript client settings.
  #
  # @param [Hash] opt                 Settings override values.
  #
  # @return [Hash]
  #
  def script_setting: (**untyped opt) -> symHash

  # Produce inline JavaScript to set up dynamic constant values on the client.
  #
  # The values set here override the values "baked in" to the JavaScript when
  # assets were compiled -- this allows the values of environment variables
  # for the running server to be used in place of the values of those
  # variables when the assets were compiled.
  #
  # Also, this provides a way to override any number of settings in the
  # JavaScript (e.g., enabling or disabling features).
  #
  # @param [Hash] opt                 Optional additional settings overrides.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  # @see file:app/assets/javascripts/shared/assets.js.erb
  #
  def page_script_settings: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)
end
