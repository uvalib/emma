# Methods for creating and displaying flash messages.
#
module FlashHelper
  include Emma::Common

  include HtmlHelper

  # Maximum length of any one flash message.
  #
  # @type [Integer]
  #
  # == Implementation Notes
  # This has been sized very conservatively so that it also works in the
  # desktop setting where the instance shares the 4096-byte cookie space with
  # other local applications.
  #
  # This shouldn't be a big problem; if it is then it might be time to consider
  # investing in setting up infrastructure for an alternative cookie mechanism.
  #
  FLASH_MAX_ITEM_SIZE: Integer

  # Maximum size of all combined flash messages.
  #
  # @type [Integer]
  #
  FLASH_MAX_TOTAL_SIZE: Integer

  # Each instance translates to a distinct line in the flash message.
  #
  class FlashPart < ExecReport::FlashPart
    include HtmlHelper

    # Create a new instance.
    #
    def initialize: (ExecReport::Part|String|Integer|anyArray|anyHash|nil topic, ?(ExecReport::Part|String|anyArray|anyHash|nil) details) -> void

    # Generate HTML elements for the parts of the entry.
    #
    # @param [Integer, nil] first     Index of first column (def: 1).
    # @param [Integer, nil] last      Index of last column (def: `parts.size`).
    # @param [Hash]         part      Options passed to inner #html_div.
    # @param [Hash]         opt       Passed to outer #html_div
    #
    # @option opt [String, nil]  :separator   Default: #HTML_BREAK.
    # @option opt [Boolean, nil] :html
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @see #render_part
    #
    def render: (?first: Integer?, ?last: Integer?, ?part: symHash?, **untyped opt) -> ActiveSupport::SafeBuffer

    # Generate an HTML element for a single part of the entry.
    #
    # @param [String, nil]  part
    # @param [Integer, nil] pos       Position of part (starting from 1).
    # @param [Integer, nil] first     Index of the first column.
    # @param [Integer, nil] last      Index of the last column.
    # @param [Hash]         opt       Passed to #html_div.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def render_part: (String|nil part, ?pos: Integer?, ?first: Integer?, ?last: Integer?, **untyped opt) -> ActiveSupport::SafeBuffer

    # A short-cut for creating a FlashHelper::FlashPart only if required.
    #
    # @param [FlashPart, Any] other
    #
    # @return [FlashPart]
    #
    def self.[]: (untyped other) -> FlashPart
  end

  # Success flash notice.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @see #flash_notice
  # @see #flash_format
  #
  def flash_success: (*(Symbol|String|Exception|ExecReport|FlashPart) args, **untyped opt) -> void

  # Failure flash notice.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @see #flash_alert
  # @see #flash_format
  #
  def flash_failure: (*(Symbol|String|Exception|ExecReport|FlashPart) args, **untyped opt) -> void

  # Flash notice.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Symbol, nil]                                         topic
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @see #set_flash
  # @see #flash_format
  #
  def flash_notice: (*(Symbol|String|Exception|ExecReport|FlashPart) args, ?topic: Symbol?, **untyped opt) -> void

  # Flash alert.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Symbol, nil]                                         topic
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @see #set_flash
  # @see #flash_format
  #
  def flash_alert: (*(Symbol|String|Exception|ExecReport|FlashPart) args, ?topic: Symbol?, **untyped opt) -> void

  # Flash notification, which appears on the next page to be rendered.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Symbol]      type         :alert or :notice
  # @param [Symbol, nil] topic
  # @param [Boolean]     clear        If *true* clear flash first.
  # @param [Hash]        opt          Passed to #flash_format.
  #
  # @return [void]
  #
  # @see #flash_format
  #
  def set_flash: (*(Symbol|String|Exception|ExecReport|FlashPart) args, type: Symbol, ?topic: Symbol?, ?clear: bool?, **untyped opt) -> void

  # Success flash now.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @note Currently unused.
  #
  # @see #flash_now_notice
  # @see #flash_format
  #
  def flash_now_success: (*(Symbol|String|Exception|ExecReport|FlashPart) args, **untyped opt) -> void

  # Failure flash now.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @see #flash_now_alert
  # @see #flash_format
  #
  def flash_now_failure: (*(Symbol|String|Exception|ExecReport|FlashPart) args, **untyped opt) -> void

  # Flash now notice.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Symbol, nil]                                         topic
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @see #set_flash_now
  # @see #flash_format
  #
  def flash_now_notice: (*(Symbol|String|Exception|ExecReport|FlashPart) args, ?topic: Symbol?, **untyped opt) -> void

  # Flash now alert.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Symbol, nil]                                         topic
  # @param [Hash]                                                opt
  #
  # @return [void]
  #
  # @see #set_flash_now
  # @see #flash_format
  #
  def flash_now_alert: (*(Symbol|String|Exception|ExecReport|FlashPart) args, ?topic: Symbol?, **untyped opt) -> void

  # Flash now notification, which appears on the current page when it is
  # rendered.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Symbol]      type         :alert or :notice
  # @param [Symbol, nil] topic
  # @param [Hash]        opt
  #
  # @return [void]
  #
  # @see #flash_format
  #
  def set_flash_now: (*(Symbol|String|Exception|ExecReport|FlashPart) args, type: Symbol, ?topic: Symbol?, **untyped opt) -> void

  # Create items(s) to be included in the 'X-Flash-Message' header to support
  # the ability of the client to update the flash display.
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Hash]                                                opt
  #
  # @return [String]
  #
  # @see #flash_format
  #
  def flash_xhr: (*(Symbol|String|Exception|ExecReport|FlashPart) args, **untyped opt) -> String

  # @type [Array<Symbol>]
  FLASH_TARGETS: symArray

  # Prepend the method invoking flash if there is not already one at the start
  # of *args*.
  #
  # @param [Array]          args
  # @param [Symbol, String] meth      Calling method (if not at args[0]).
  #
  # @return [Array]                   The original *args*, possibly modified.
  #
  def prepend_flash_source!: (Array[Symbol|String|Exception|ExecReport|FlashPart] args, ?meth: (Symbol|String)?) -> Array[Symbol|String|Exception|ExecReport|FlashPart]

  # Return the effective flash type.
  #
  # @param [Symbol, String, nil] type
  #
  # @return [Symbol]
  #
  def flash_target: (Symbol|String|nil `type`) -> Symbol

  # Theoretical space available for flash messages.
  #
  # @return [Integer]
  #
  # @see ActionDispatch::Flash::RequestMethods#commit_flash
  # @see ActionDispatch::Flash::FlashHash#to_session_value
  #
  def flash_space_available: () -> Integer

  # String to display if item(s) were omitted.
  #
  # @param [Integer, nil] count   Total number of items.
  # @param [Boolean]      html
  #
  # @return [String]                    If *html* is *false*.
  # @return [ActiveSupport::SafeBuffer] If *html* is *true*.
  #
  def flash_omission: (?Integer? count, ?html: bool, **untyped ingored) -> (ActiveSupport::SafeBuffer | String)
                    | (?Integer? count, html: false, **untyped ingored) -> String
                    | (?Integer? count, html: true,  **untyped ingored) -> ActiveSupport::SafeBuffer

  # Create item(s) to be included in the flash display.
  #
  # By default, when displaying an Exception, this method also logs the
  # exception and its stack trace (to avoid "eating" the exception when this
  # method is called from an exception handler block).
  #
  # @param [Array<Symbol,ExecReport,Exception,FlashPart,String>] args
  # @param [Symbol, nil] topic
  # @param [Hash]        opt          To #flash_template except for:
  #
  # @option opt [Boolean] :inspect    If *true* apply #inspect to messages.
  # @option opt [Any]     :status     Override reported exception status.
  # @option opt [Boolean] :log        If *false* do not log exceptions.
  # @option opt [Boolean] :trace      If *true* always log exception trace.
  # @option opt [Symbol]  :meth       Calling method.
  # @option opt [Boolean] :xhr        Format for 'X-Flash-Message'.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [String]                      For :xhr.
  #
  # -
  # == Variations
  # +
  #
  # @overload flash_format(meth, error, *args, topic: nil, **opt)
  #   @param [Symbol]                  meth   Calling method.
  #   @param [ExecReport, Exception]   error  Error (message) if :alert.
  #   @param [Array<String,FlashPart>] args   Additional message part(s).
  #   @param [Symbol, nil]             topic
  #   @param [Hash]                    opt
  #
  # @overload flash_format(error, *args, topic: nil, **opt)
  #   @param [ExecReport, Exception]   error  Error (message) if :alert.
  #   @param [Array<String,FlashPart>] args   Additional message part(s).
  #   @param [Symbol, nil]             topic
  #   @param [Hash]                    opt
  #
  # @overload flash_format(meth, *args, topic: nil, **opt)
  #   @param [Symbol]                  meth   Calling method.
  #   @param [Array<String,FlashPart>] args   Additional message part(s).
  #   @param [Symbol, nil]             topic
  #   @param [Hash]                    opt
  #
  # @overload flash_format(*args, topic: nil, **opt)
  #   @param [Array<String,FlashPart>] args   Additional message part(s).
  #   @param [Symbol, nil]             topic
  #   @param [Hash]                    opt
  #
  # -
  # noinspection RubyMismatchedArgumentType, RubyMismatchedReturnType
  # +
  def flash_format: (*(Symbol|String|Exception|ExecReport|FlashPart) args, ?topic: Symbol?, **untyped opt) -> (ActiveSupport::SafeBuffer | String)

  # Create item(s) to be included in the flash display.
  #
  # @param [String, Array, FlashPart] item
  # @param [Hash]                     opt
  #
  # @option opt [Boolean] :inspect  If *true* show inspection of *item*.
  # @option opt [Boolean] :html     If *true* force ActiveSupport::SafeBuffer.
  # @option opt [Integer] :max      See below.
  #
  # @return [ActiveSupport::SafeBuffer]   If *item* is HTML or *html* is true.
  # @return [String]                      If *item* is not HTML.
  # @return [Array]                       If *item* is an array.
  #
  # -
  # == Variations
  # +
  #
  # @overload flash_item(string, max: FLASH_MAX_ITEM_SIZE, **opt)
  #   Create a single flash item which conforms to the maximum per-item size.
  #   @param [ActiveSupport::SafeBuffer, String] string
  #   @return [ActiveSupport::SafeBuffer, String]
  #   @return [ActiveSupport::SafeBuffer]               If :html is *true*.
  #
  # @overload flash_item(array, max: FLASH_MAX_TOTAL_SIZE, **opt)
  #   Create a set of flash items which conforms to the overall maximum size.
  #   @param [Array<ActiveSupport::SafeBuffer,String>] array
  #   @return [Array<ActiveSupport::SafeBuffer,String>]
  #   @return [Array<ActiveSupport::SafeBuffer>]        If :html is *true*.
  #
  def flash_item: (Array[String|FlashPart] array, **untyped opt) -> Array[ActiveSupport::SafeBuffer|String]
                | (String|FlashPart string,       **untyped opt) -> (ActiveSupport::SafeBuffer | String)

  # An item's actual impact toward the total flash size.
  #
  # @param [String, Array<String>] item
  # @param [Boolean]               html
  #
  # @return [Integer]
  #
  # == Usage Notes
  # This does not account for any separators that would be added when
  # displaying multiple items.
  #
  def flash_item_size: (String|strArray item, ?html: bool) -> Integer

  # Render an item in the intended form for addition to the flash.
  #
  # @param [String, FlashPart] item
  # @param [Boolean, nil]      html     Force ActiveSupport::SafeBuffer.
  # @param [Boolean, nil]      xhr
  # @param [Boolean, nil]      inspect  Show inspection of *item*.
  # @param [Integer, nil]      max      Max length of result.
  #
  # @return [String]                    If *html* is *false*.
  # @return [ActiveSupport::SafeBuffer] If *html* is *true*.
  #
  def flash_item_render: (String|FlashPart item, ?html: bool?, ?xhr: bool?, ?inspect: bool?, ?max: Integer?) -> (ActiveSupport::SafeBuffer | String)

  # If a :topic was specified, it is used as part of a set of I18n paths used
  # to locate a template to which the flash message is applied.
  #
  # @param [String, Array<String>] msg
  # @param [Symbol, String]        topic
  # @param [Symbol, String, nil]   meth
  # @param [Boolean, nil]          html
  # @param [String, nil]           separator
  # @param [Hash]                  opt        Passed to I18n#t.
  #
  # @return [String]                          # Even if html is *true*.
  #
  def flash_template: (String|strArray msg, topic: Symbol|String, ?meth: (Symbol|String)?, ?html: bool?, ?separator: String?, **untyped opt) -> String

  # I18n scope based on the current class context.
  #
  # @return [String]
  #
  def flash_i18n_scope: () -> String

  # Build an I18n path.
  #
  # @param [Array<String,Symbol,Array,nil>] parts
  #
  # @return [Symbol]
  #
  def flash_i18n_path: (*(String|Symbol|Array[String|Symbol]|nil) parts) -> Symbol

  private

  def self.included: (Module base) -> void
end
