# View helper methods for "/help" pages.
#
module HelpHelper
  include Emma::Common

  include Emma::Constants

  include HtmlHelper

  include PopupHelper

  # Configuration for help pages properties.
  #
  # @type [Hash{Symbol=>Any}]
  #
  # -
  # noinspection RailsI18nInspection
  # +
  HELP_CONFIG: symHash

  # Help topics and values.
  #
  # Content (if present) is normalize to an array of HTML-safe sections.  If
  # both :content_html and :content are present, they will be combined in that
  # order to create a new :content value with one or more HTML-safe sections.
  #
  # Textual URLs are converted to links.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  HELP_ENTRY: Hash[Symbol,symHash]

  # Default text to display while help is loading asynchronously. # TODO: I18n
  #
  # @type [String]
  #
  HELP_PLACEHOLDER: String

  # Create a container with a visible popup toggle button and a popup panel
  # which is initially hidden.
  #
  # @param [Symbol, String] topic
  # @param [Symbol, String] sub_topic   Starting HTML ID.
  # @param [Hash]           opt         Passed to #inline_popup except for:
  #
  # @option opt [Hash] :attr            Options for deferred content.
  # @option opt [Hash] :placeholder     Options for transient placeholder.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                       If *topic* is blank.
  #
  # @see file:javascripts/shared/modal_base.js *ModalBase.toggleModal()*
  #
  def help_popup: (Symbol|String topic, ?(Symbol|String)? sub_topic, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Values for a specific help topic.
  #
  # @param [Symbol, String] topic
  #
  # @return [Hash{Symbol=>Any}]
  #
  def help_topic: (Symbol|String topic) -> symHash

  # Help topic names.
  #
  # @return [Array<Symbol>]
  #
  def help_topics: () -> symArray

  # Each help topic with its title.
  #
  # @param [Array<Symbol,Array, Hash>] topics   Default: `#help_topics`.
  #
  # @return [Hash{Symbol=>String}]
  #
  def help_titles: (*(Symbol|symHash|Array[Symbol|symHash]) topics) -> Hash[Symbol,String]

  # Title/link pairs for each help topic.
  #
  # The kind of links generated depend on the :type parameter value:
  #   :anchor - Page-relative (default)
  #   :path   - Site-relative links.
  #   :url    - Full URL links.
  #
  # @param [Array<Symbol,Array>] topics   Default: `#help_topics`.
  # @param [Symbol, nil]         type     Type of links; default: :anchor.
  # @param [Hash]                opt      Passed to route helper.
  #
  # @return [Array<Array<(String,String)>>]
  #
  def help_links: (*(Symbol|symHash|Array[Symbol|symHash]) topics, ?type: Symbol?, **untyped opt) -> Array[[String,String]]

  # A table of contents element with a link for each help topic.
  #
  # @param [Array<Symbol,Array>] topics   Passed to #help_links.
  # @param [Hash]                opt      Passed to outer #html_div except for:
  #
  # @option opt [Symbol]        :type     Passed to #help_links.
  # @option opt [Symbol,String] :tag      Default: :ul.
  # @option opt [Hash]          :inner    Passed to inner #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_toc: (*(Symbol|symHash|Array[Symbol|symHash]) topics, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render help content parts within an HTML element.
  #
  # @param [Array<String, Array>] content
  # @param [Hash]                 opt       Passed to #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_element: (*(String|strArray) content, **untyped opt) -> ActiveSupport::SafeBuffer

  # Transform help content parts into an array of HTML entries.
  #
  # @param [Array<String, Array>] content
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def help_paragraphs: (*(String|strArray) content) -> Array[ActiveSupport::SafeBuffer]

  # Render an image from "app/assets/images/help/*".
  #
  # @param [Symbol, String] name
  # @param [Hash]           opt       Passed to #image_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_image: (Symbol|String name, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render an illustration of a button element in help.
  #
  # @param [String] label
  # @param [Hash]   opt               Passed to #html_span.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_span: (String label, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a help link within help text.
  #
  # @param [String]         label
  # @param [Symbol, String] topic
  # @param [Hash]           opt       Passed to #link_to.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_jump: (String label, Symbol|String topic, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single entry for use within a list of items.
  #
  # @param [Symbol, nil] item         Default: `#request_parameters[:id]`.
  # @param [Boolean]     wrap         If *false*, do not wrap.
  # @param [Hash]        opt          Passed to #help_container.
  #
  # @return [ActiveSupport::SafeBuffer]   Help contents section element.
  # @return [nil]                         No content and *wrap* is *false*.
  #
  def help_section: (?item: Symbol?, ?wrap: bool, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Render a single entry for use within a list of items.
  #
  # @param [Symbol, nil] item         Default: `#request_parameters[:id]`.
  # @param [Boolean]     wrap         If *true*, wrap in a container element.
  # @param [Hash]        opt          Passed to #help_container.
  #
  # @return [ActiveSupport::SafeBuffer]   Help contents list element.
  # @return [nil]                         No content and *wrap* is *false*.
  #
  def help_list_item: (?item: Symbol?, ?wrap: bool, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Render the contents of a single entry from configuration or from a partial.
  #
  # @param [Symbol, nil] item         Default: `#request_parameters[:id]`.
  # @param [Boolean]     wrap         Wrap in a "help-container" element.
  # @param [Hash]        opt          Passed to #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]   Help contents element.
  # @return [nil]                         No content and *wrap* is *false*.
  #
  # @see config/locales/controllers/help.en.yml
  #
  def help_container: (?item: Symbol?, ?wrap: bool, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  private

  def self.included: (Module base) -> void
end
