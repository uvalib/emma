# View helper methods for "/help" pages.
#
module HelpHelper
  include Emma::Common

  include Emma::Constants

  include Emma::Unicode

  include ApplicationHelper

  include HtmlHelper

  include LinkHelper

  include ParamsHelper

  include PopupHelper

  include SessionDebugHelper

  # Configuration for help pages properties.
  #
  # @type [Hash]
  #
  HELP_CONFIG: symHash

  # Help topics and values.
  #
  # Content (if present) is normalize to an array of HTML-safe sections.  If
  # both :content_html and :content are present, they will be combined in that
  # order to create a new :content value with one or more HTML-safe sections.
  #
  # Textual URLs are converted to links.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  HELP_ENTRY: Hash[Symbol,symHash]

  # Default text to display while help is loading asynchronously.
  #
  # @type [String]
  #
  HELP_PLACEHOLDER: String

  # Create a container with a visible popup toggle button and a popup panel
  # which is initially hidden.
  #
  # @param [Symbol, String] topic
  # @param [Symbol, String] sub_topic   Starting HTML ID.
  # @param [String]         css         Characteristic CSS class/selector.
  # @param [Hash]           opt         Passed to #inline_popup except for:
  #
  # @option opt [Hash] :attr            Options for deferred content.
  # @option opt [Hash] :placeholder     Options for transient placeholder.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                       If *topic* is blank.
  #
  # @see file:javascripts/shared/modal-base.js *ModalBase.toggleModal()*
  #
  def help_popup: ((Symbol|String) topic, ?(Symbol|String|nil) sub_topic, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Values for a specific help topic.
  #
  # @param [Symbol, String] topic
  #
  # @return [Hash]
  #
  def help_topic_entry: ((Symbol|String) topic) -> symHash

  # Normalize help topic and sub_topic.
  #
  # @param [Symbol, String]      topic
  # @param [Symbol, String, nil] sub_topic
  #
  # @return [Array(Symbol,Symbol)]
  # @return [Array(Symbol,nil)]
  #
  def help_normalize
    : ((Symbol|String) topic, (Symbol|String) sub_topic) -> [Symbol, Symbol]
    | ((Symbol|String) topic, ?nil            sub_topic) -> [Symbol, nil]

  # Normalize a help topic.
  #
  # @param [Symbol, String, nil] topic
  #
  # @return [Symbol, nil]
  #
  def help_topic: ((Symbol|String|nil) topic) -> (Symbol | nil)

  # Help topic names.
  #
  # @return [Array<Symbol>]
  #
  def help_topics: () -> symArray

  # Each help topic with its title.
  #
  # @param [Array<Symbol,Array, Hash>] topics   Default: `#help_topics`.
  #
  # @return [Hash{Symbol=>String}]
  #
  def help_titles: (*(Symbol|symHash|Array[Symbol|symHash]) topics) -> Hash[Symbol,String]

  # Title/link pairs for each help topic.
  #
  # The kind of links generated depend on the :type parameter value:
  #   :anchor - Page-relative (default)
  #   :path   - Site-relative links.
  #   :url    - Full URL links.
  #
  # @param [Array<Symbol,Array>] topics   Default: `#help_topics`.
  # @param [Symbol, nil]         type     Type of links; default: :anchor.
  # @param [Hash]                opt      Passed to route helper.
  #
  # @return [Array<Array(String,String)>]
  #
  def help_links: (*(Symbol|symHash|Array[Symbol|symHash]) topics, ?type: Symbol|nil, **untyped opt) -> Array[[String,String]]

  # A table of contents element with a link for each help topic.
  #
  # @param [Array<Symbol,Array>] topics   Passed to #help_links.
  # @param [Symbol, String]      tag      HTML tag for outer container.
  # @param [Array, String, nil]  before   Content before the links.
  # @param [Array, String, nil]  after    Content after the links.
  # @param [Hash]                opt      Passed to outer #html_div except for:
  #
  # @option opt [Symbol]        :type     Passed to #help_links.
  # @option opt [Hash]          :inner    Passed to inner link wrapper.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_toc: (*(Symbol|symHash|Array[Symbol|symHash]) topics, ?tag: Symbol|String, ?before: strArray|String|nil, ?after: strArray|String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render help content parts within an HTML element.
  #
  # @param [Array<String, Array>] content
  # @param [Hash]                 opt       Passed to #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                           If no *content*.
  #
  def help_element: (*(String|strArray) content, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Transform help content parts into an array of HTML entries.
  #
  # @param [Array<String, Array>] content
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  # @return [nil]                           If no *content*.
  #
  def help_paragraphs: (*(String|strArray) content) -> (Array[ActiveSupport::SafeBuffer] | nil)

  # Render an image from "app/assets/images/help/*".
  #
  # @param [Symbol, String] name
  # @param [Hash]           opt       Passed to #image_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_image: ((Symbol|String) name, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render an illustration of a button element in help.
  #
  # @param [String] label
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #html_span.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_span: (String label, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a help link within help text.
  #
  # @param [String]         label
  # @param [Symbol, String] topic
  # @param [Hash]           opt       Passed to #link_to.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_jump: (String label, (Symbol|String) topic, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single entry for use within a list of items.
  #
  # @param [Symbol, nil] item         Default: `#request_parameters[:id]`.
  # @param [Boolean]     wrap         If *false*, do not wrap.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          Passed to #help_container.
  #
  # @return [ActiveSupport::SafeBuffer]   Help contents section element.
  # @return [nil]                         No content and *wrap* is *false*.
  #
  def help_section: (?item: Symbol|nil, ?wrap: bool, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Render a single entry for use within a list of items.
  #
  # @param [Symbol, nil] item         Default: `#request_parameters[:id]`.
  # @param [Boolean]     wrap         If *true*, wrap in a container element.
  # @param [Hash]        opt          Passed to #help_container.
  #
  # @return [ActiveSupport::SafeBuffer]   Help contents list element.
  # @return [nil]                         No content and *wrap* is *false*.
  #
  def help_list_item: (?item: Symbol|nil, ?wrap: bool, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Render the contents of a single entry from configuration or from a partial.
  #
  # @param [Symbol, nil] item         Default: `#request_parameters[:id]`.
  # @param [Boolean]     wrap         Wrap in a "help-container" element.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          Passed to #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]   Help contents element.
  # @return [nil]                         No content and *wrap* is *false*.
  #
  # @see config/locales/controllers/help.en.yml
  #
  def help_container: (?item: Symbol|nil, ?wrap: bool, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Render a toggle for use on help pages.
  #
  # @param [String] label
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_toggle: (String label, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a button for use on help pages.
  #
  # @param [String] label
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_button: (String label, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a button for use on help pages.
  #
  # @param [BaseDecorator, Class] decorator
  # @param [Symbol]               action
  # @param [Symbol]               button
  # @param [Hash]                 opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def help_button_for: (BaseDecorator|Class decorator, actions: Symbol, button: Symbol, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Generate data about action shortcut icons for use on help pages.
  #
  # @param [BaseDecorator, Class] decorator
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def help_shortcut_icons: (BaseDecorator|Class decorator, ?actions: symArray) -> Hash[Symbol, Hash[Symbol,untyped]]

  class FieldEntry
    include HtmlHelper

    # @return [Symbol]
    attr_reader field: Symbol

    # @return [ActiveSupport::SafeBuffer]
    attr_reader label: ActiveSupport::SafeBuffer

    # @return [String]
    attr_reader name: String

    # @return [ActiveSupport::SafeBuffer, nil]
    attr_reader text: ActiveSupport::SafeBuffer | nil

    # @return [ActiveSupport::SafeBuffer, nil]
    attr_reader note: ActiveSupport::SafeBuffer | nil

    # @return [String]
    attr_reader id: String

    # Create a new instance.
    #
    # @param [any, nil] base
    # @param [Hash]     cfg
    #
    def initialize: (?base: untyped, **untyped cfg) -> void

    # Find an HTML or plain test value.
    #
    # @param [Hash]          cfg
    # @param [Array<Symbol>] names
    #
    # @return [String, nil]
    #
    def text_value: (symHash cfg, *Symbol names) -> (String | nil)
  end

  # help_field_entries
  #
  # @param [any, nil]      model      Symbol, String, Class, Model
  # @param [Array<Symbol>] names
  # @param [any, nil]      base
  #
  # @return [Hash{Symbol=>FieldEntry}]
  #
  def help_field_entries: (untyped model, *Symbol names, ?base: untyped) -> Hash[Symbol,FieldEntry]

  # A help entry for a model field description.
  #
  # @param [Symbol]                   fld
  # @param [Hash{Symbol=>FieldEntry}] fields
  # @param [String]                   css     Characteristic CSS class/selector
  # @param [Hash]                     opt
  #
  # @yield [entry] The enclosed content for the entry.
  # @yieldparam [FieldEntry] entry  Values related to the field.
  #
  def help_field: (Symbol fld, fields: Hash[Symbol,FieldEntry], ?css: String, **untyped opt) { (FieldEntry entry) -> untyped } -> ActiveSupport::SafeBuffer

  # The introductory panel at the top of the Help index page.
  #
  # @param [Hash]   opt             Passed to the container.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_main_intro: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Render a numbered list container with links to each item in "/public/doc".
  #
  # @param [String] css             Characteristic CSS class/selector.
  # @param [Hash]   opt             Passed to the outer list container.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def help_offline: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Full directory paths to all "/public/doc" PDFs.
  #
  # @return [Array<String>]
  #
  def help_offline_items: () -> strArray

  private

  def self.included: (Module base) -> void
end
