# A 'phases' table record which tracks a workflow involving an Entry.
#
# @!attribute [r]  entry_id
#   The EMMA entry associated with this workflow instance.
#
# @!attribute [r]  user_id
#   The user who initiated this workflow instance.
#
# @!attribute [rw] command
#   Control command to be honored by the workflow process using this instance.
#
# @!attribute [r]  type
#   Phase STI subclass.
#
# @!attribute [rw] state
#   Phase::*.state_values
#
# @!attribute [rw] remarks
#   Reviewer comments.
#   (Phase::Review only)
#
# @!attribute [rw] submission_id
#   The EMMA entry associated with this workflow instance.
#   (Phase::Create or Phase::Edit only - when :emma_data is updated)
#   TODO: probably don't need to break this out
#
# @!attribute [rw] repository
#   The repository for the EMMA entry associated with this workflow instance.
#   (Phase::Create or Phase::Edit only - when :emma_data is updated)
#   TODO: probably don't need to break this out
#
# @!attribute [rw] fmt
#   The format of the file uploaded for this workflow instance.
#   (Phase::Create or Phase::Edit only - when :file_data is updated)
#   TODO: probably don't need to break this out
#
# @!attribute [rw] ext
#   The extension of the file uploaded for this workflow instance.
#   (Phase::Create or Phase::Edit only - when :file_data is updated)
#   TODO: probably don't need to break this out
#
# @!attribute [rw] emma_data
#   JSON metadata extracted from the file uploaded for this workflow instance.
#   (Phase::Create or Phase::Edit only)
#
# @!attribute [rw] file_data
#   Shrine metadata for the file uploaded for this workflow instance.
#   (Phase::Create or Phase::Edit only)
#
# @!attribute [r]  created_at
#   Time of record creation.
#
# @!attribute [rw] updated_at
#   Last time record was modified.
#
class Phase < ApplicationRecord
  DESTRUCTIVE_TESTING: bool

  include Model

  include Record

  include Record::Sti::Root

  include Record::Bulk::Root

  include Record::EmmaData

  include Record::Assignable

  include Record::Authorizable

  include Record::Controllable

  include Record::Describable

  include Record::Reportable

  include Record::Searchable

  include Record::Submittable

  include Record::Updatable

  include Record::Testing

  include Record::Debugging

  # :nocov:
  include Record::Controllable::CommandMethods

  extend Record::Describable::ClassMethods

  # Update database fields, including the structured contents of the :emma_data
  # field.
  #
  # @param [Hash, ActionController::Parameters, Model, nil] attr
  # @param [Hash, nil]                                      opt
  #
  # @return [void]
  #
  # @see Record::EmmaData#EMMA_DATA_KEYS
  #
  def assign_attributes: ((Model|prmHash|nil) attr, ?(symHash|nil) opt) -> void

  def running?: () -> bool

  def paused?: () -> bool

  def waiting?: () -> bool

  def resuming?: () -> bool

  def retrying?: () -> bool

  def restarting?: () -> bool

  def failed?: () -> bool

  def succeeded?: () -> bool

  # Fetch the error report from the latest action.
  #
  # @param [Boolean, nil] refresh     If *false*, don't re-fetch.
  #
  # @return [ExecReport, nil]
  #
  def get_exec_report: (?(bool|nil) refresh) -> (ExecReport | nil)

  # Phase records don't have a REPORT_COLUMN.
  #
  # @raise [RuntimeError]
  #
  def set_exec_report: (*untyped _ignored) ?{ () -> untyped } -> void

  # Phase records don't have a REPORT_COLUMN.
  #
  # @raise [RuntimeError]
  #
  def clear_exec_report: (*untyped _ignored) ?{ () -> untyped } -> void

  # The most-recently created action.
  #
  # @return [Action, nil]
  #
  def newest_action: () -> (Action | nil)

  # The most-recently updated action, representing the current status of the
  # Phase instance.
  #
  # @return [Action, nil]
  #
  def current_action: () -> (Action | nil)

  # The latest failed action.
  #
  # @return [Action, nil]
  #
  def failed_action: () -> (Action | nil)

  # Actions that are not finished.
  #
  # @return [Array<Action>]
  #
  def active_actions: () -> Array[Action]

  # Get Action records associated with this record for the action given either
  # as *action_type* or `opt[:type]`.
  #
  # @param [Symbol,String,Action,Class,nil] action_type   Def: #current_action.
  # @param [Hash]                           opt           For #where.
  #
  # @return [ActiveRecord::Relation<Action>]
  #
  def action_scope: (?(Symbol|String|Class|Action|nil) action_type, **untyped opt) -> ActiveRecord::Relation # _ActiveRecord_Relation[Action, Integer]

  # Create a new Action for this Phase, initializing it with the current values
  # from this record.
  #
  # @param [Symbol, String, nil] type     If *nil*, opt[:type] must be present.
  # @param [Hash]                opt      Passed to ActiveRecord#create
  #
  # @raise [Record::SubmitError]            If type not given.
  # @raise [ActiveRecord::RecordInvalid]    Update failed due to validations.
  # @raise [ActiveRecord::RecordNotSaved]   Update halted due to callbacks.
  #
  # @return [Action]
  #
  def generate_action: ((Symbol|String|nil) `type`, **untyped opt) -> Action

  # Error messages for various states.
  #
  # TODO: Move into STATE_TABLE?
  #
  # @type [Hash{Symbol=>String}]
  #
  STATE_MESSAGE: Hash[Symbol,String]

  # Raise an exception if *phase* is not in the indicated state.
  #
  # @param [Phase]               phase
  # @param [Symbol, String, nil] state
  #
  # @raise [Record::SubmitError]
  #
  # @return [Phase]
  #
  def self.raise_unless: (Phase phase, (Symbol|String|nil) state) -> Phase

  # Get the latest matching Phase record.
  #
  # @param [Model, Hash, String, Symbol, nil] sid
  # @param [Hash]                             opt
  #
  # @raise [Record::StatementInvalid]   If *sid*/opt[:submission_id] invalid.
  # @raise [Record::NotFound]           If record not found.
  #
  # @return [Phase]
  #
  def self.latest_for_sid: (?(Model|symHash|String|Symbol|nil) sid, **untyped opt) -> Phase

  # A textual description of the type of the Model instance.
  #
  # @param [Phase] phase
  # @param [Hash]  opt
  #
  # @return [String]
  #
  def self.describe_type: (Phase phase, **untyped opt) -> String

  # A textual description of the status of the Phase instance.
  #
  # @param [Phase] phase
  # @param [Hash]  opt                To Action#describe_status except for:
  #
  # @option opt [String] :note
  # @option opt [Action] :action
  #
  # @return [String]
  #
  def self.describe_status: (Phase phase, **untyped opt) -> String

  def describe_parts: (?(Phase|nil) phase, **untyped opt) -> (String | nil)

  def show: () -> nil

  def self.show: () -> nil
end
