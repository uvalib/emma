# Model for the representation of an EMMA user.
#
class User < ApplicationRecord
  include Emma::Common

  include Model

  include Record

  include Record::Identification

  include Record::Searchable

  # :nocov:
  #include Rolify

  #include Rolify::Role

  #include Devise::Models::DatabaseAuthenticatable

  #include Devise::Models::Rememberable

  #include Devise::Models::Trackable

  #include Devise::Models::Registerable

  #include Devise::Models::Omniauthable

  #extend ActiveRecord::Validations

  # A textual label for the record instance.
  #
  # @param [User, nil] item  Default: self.
  #
  # @return [String, nil]
  #
  def label: (?(User|nil) item) -> (String | nil)

  # The controller for the model/model instance.
  #
  # @type [Class]
  #
  def self.model_controller: () -> Class

  # Create a new instance.
  #
  # @param [User, Hash, nil] attr
  #
  # @note - for dev traceability
  #
  def initialize: (?(User|symHash|nil) attr) -> void

  def user_id: () -> (Integer | nil)

  def org_id: () -> (Integer | nil)

  def user_key: () -> Symbol

  def self.user_key: () -> Symbol

  # Display the User instance as the user identifier.
  #
  # @return [String]
  #
  def to_s: () -> String

  # Value of :id for the indicated record.
  #
  # @param [User, String, Integer, *] user  Default: self
  # @param [Hash]                     opt
  #
  # @return [String]
  # @return [nil]                     If no matching record was found.
  #
  def id_value: (?untyped user, **untyped opt) -> (String | nil)

  # Value of :id for the indicated record.
  #
  # @param [User, String, Integer, *] user
  # @param [Hash]                     opt
  #
  # @return [String]
  # @return [nil]                     If no matching record was found.
  #
  def self.id_value: (untyped user, **untyped opt) -> (String | nil)

  def user_column: () -> Symbol

  def self.user_column: () -> Symbol

  # Return with the specified User record or *nil* if one could not be found.
  #
  # @param [String, Integer, Hash, Model, *] item
  # @param [Hash]                            opt
  #
  # @return [User, nil]
  #
  def find_record: (untyped item, **untyped opt) -> (User | nil)

  # Return with the specified User record or *nil* if one could not be found.
  #
  # @param [String, Symbol, Integer, Hash, Model, Any, nil] item
  # @param [Hash]                                           opt
  #
  # @option opt [Boolean] :fatal      False by default.
  #
  # @return [User, nil]
  #
  def self.find_record: (untyped item, **untyped opt) -> (User | nil)

  def ability: () -> Ability

  @ability: Ability

  # Return the account ID of *user*.
  #
  # @param [User, String, Symbol, Integer, Any, nil] user  Default: self.
  #
  # @return [String, nil]
  #
  def account_name: (?untyped user) -> (String | nil)

  # Return the account ID of *user*.
  #
  # @param [User, String, Symbol, Integer, Any, nil] user
  #
  # @return [String, nil]
  #
  def self.account_name: (untyped user) -> (String | nil)

  # The user ID is the same as the email address.                               # unless BS_AUTH
  #
  # The user ID is the same as the Bookshare ID, which is the same as the email # if BS_AUTH
  # address.
  #
  # @return [String]
  #
  def account: () -> String

  # Address to use for email communication with the user.
  #
  # @return [String]
  #
  def email_address: () -> String

  # Indicate whether the user is one of the known "fake" test user accounts.
  #
  def test_user?: () -> bool

  # Indicate whether the user has the :developer role.
  #
  def developer?: () -> bool

  @developer: bool

  # Indicate whether the user has the :administrator role.
  #
  def administrator?: () -> bool

  @administrator: bool

  # Indicate whether the user has the :manager role.
  #
  def manager?: () -> bool

  @manager: bool

  # The user's EMMA roles.
  #
  # @return [Array<Symbol>]
  #
  def role_list: () -> symArray

  # assign_default_role
  #
  # @return [void]
  #
  # === Implementation Notes
  # A new User will be created the first time a new person authenticates via    # if BS_AUTH
  # Bookshare -- this may be the place to query the Bookshare API for that
  # user's Bookshare role in order to map it onto EMMA "prototype user".
  #
  def assign_default_role: () -> void

  private

  # Add EMMA role(s) to the current user based on its prototype.
  #
  # @param [Symbol, nil] prototype    Default: `Role#DEFAULT_PROTOTYPE`.
  #
  # @return [Array<Role>]             Added role(s).
  #
  def add_roles: (?(Symbol|nil) prototype) -> Array[Role]

  public

  # Extend Rolify #has_role? to first check for role prototype.
  #
  # Always returns *false* if *role* is blank.
  #
  # @param [String, Symbol, nil]                   role
  # @param [Symbol, Class, ApplicationRecord, nil] resource
  #
  def has_role?: (nil           role, ?(Symbol|nil) resource) -> false
               | (String|Symbol role, ?(Symbol|nil) resource) -> bool

  # Current EMMA test accounts.
  #
  # @type [Hash{String=>Symbol}]
  #
  def self.test_users: () -> Hash[String,Symbol]

  # Get the database entry for the indicated user and update it with additional # unless BS_AUTH
  # information from the provider.
  #
  # Get (or create) a database entry for the indicated user and update the      # if BS_AUTH
  # associated User object with additional information from the provider.
  #
  # @param [OmniAuth::AuthHash, Hash, nil] data
  # @param [Boolean]                       update   If *false* keep DB record.
  #
  # @return [User]                    Updated record of the indicated user.
  # @return [nil]                     If *data* is not valid.
  #
  # @see https://github.com/omniauth/omniauth/wiki/Auth-Hash-Schema
  #
  def self.from_omniauth: ((OmniAuth::AuthHash|symHash|nil) data, ?update: bool) -> (User | nil)
end
