# Model for the representation of an EMMA user.
#
class User < ApplicationRecord
  include Emma::Common

  include Model

  include Record

  include Record::Assignable

  include Record::Identification

  include Record::Searchable

  include Record::Sortable

  include User::Config

  include User::Assignable

  # :nocov:
  #include Devise::Models::DatabaseAuthenticatable

  #include Devise::Models::Rememberable

  #include Devise::Models::Trackable

  #include Devise::Models::Registerable

  #include Devise::Models::Omniauthable

  #extend ActiveRecord::Validations

  # A short textual representation for the record instance.
  #
  # @param [User, nil] item           Default: self.
  #
  # @return [String, nil]
  #
  def abbrev: (?(User|nil) item) -> (String | nil)

  # A textual label for the record instance.
  #
  # @param [User, nil] item  Default: self.
  #
  # @return [String, nil]
  #
  def label: (?(User|nil) item) -> (String | nil)

  # Create a new instance.
  #
  # @param [User, Hash, nil] attr
  #
  # @note - for dev traceability
  #
  def initialize: (?(User|symHash|nil) attr) -> void

  def user_id: () -> (Integer | nil)

  def org_id: () -> (Integer | nil)

  # Symbolic name of the controller associated with the model/model instance.
  #
  # @type [Symbol]
  #
  def self.ctrlr_type: () -> Symbol

  def user_key: () -> Symbol

  def self.user_key: () -> Symbol

  # Display the User instance as the user identifier.
  #
  # @return [String]
  #
  def to_s: () -> String

  def ability: () -> Ability

  @ability: Ability

  # Return the account ID of *user*.
  #
  # @param [any, nil] user            User, String, Symbol, Integer; def: self.
  #
  # @return [String, nil]
  #
  def account_name: (?untyped user) -> (String | nil)

  # Return the account ID of *user*.
  #
  # @note This method assumes that if *user* is a String or Symbol it already
  #   represents an account name unless it resolves to a user ID.
  #
  # @param [any, nil] user            User, String, Symbol, Integer
  #
  # @return [String, nil]
  #
  def self.account_name: (untyped user) -> (String | nil)

  # The user ID is the same as the email address.
  #
  # @return [String]
  #
  def account: () -> String

  # The full personal name of the user.
  #
  # @return [String]
  #
  def full_name: () -> String

  # The email address to use for communications with the user.
  #
  # @return [String]
  #
  def email_address: () -> String

  # The number of EMMA entries submitted by this user.
  #
  # @return [Integer]
  #
  def upload_count: () -> Integer

  # The number of bulk upload manifests associated with this user.
  #
  # @return [Integer]
  #
  def manifest_count: () -> Integer

  # Indicate whether the user is one of the known "fake" test user accounts.
  #
  def test_user?: () -> bool

  # Indicate whether the user has the :developer role.
  #
  def developer?: () -> bool

  @developer: bool

  # Indicate whether the user has the :administrator role.
  #
  def administrator?: () -> bool

  @administrator: bool

  # Indicate whether the user has the :manager role.
  #
  def manager?: () -> bool

  @manager: bool

  # Check for role prototype or role capability.
  #
  # Always returns *false* if *value* is blank.
  #
  # @param [RolePrototype, RoleCapability, String, Symbol, nil] value
  #
  def has_role?: (RolePrototype|RoleCapability|String|Symbol|nil role) -> bool

  # Current EMMA test accounts.
  #
  # @type [Hash{String=>Symbol}]
  #
  def self.test_users: () -> Hash[String,Symbol]

  # Get the database entry for the indicated user and update it with additional
  # information from the provider.
  #
  # @param [OmniAuth::AuthHash, Hash, nil] data
  # @param [Boolean]                       update   If *false* keep DB record.
  #
  # @return [User]                    Updated record of the indicated user.
  # @return [nil]                     If *data* is not valid.
  #
  # @see https://github.com/omniauth/omniauth/wiki/Auth-Hash-Schema
  #
  def self.from_omniauth: ((OmniAuth::AuthHash|symHash|nil) data, ?update: bool) -> (User | nil)

  # Return the User instance indicated by the argument.
  #
  # @param [any, nil] v               Model, Hash, String, Integer
  #
  # @return [User, nil]               A fresh record unless *v* is a User.
  #
  def self.instance_for: (untyped v) -> (User | nil)
end
