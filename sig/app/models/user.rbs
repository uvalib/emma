# Model for the representation of an EMMA/Bookshare user.
#
# == Implementation Notes
# NOTE: There is still some friction between the concepts of User and Member.
#
# === Documented "types" of "users"
# Section 2.6 of the API documentation mentions "Membership Assistants" and
# "administrators" as being able to access "/v2/accounts" where:
# - A Membership Assistant is allowed to see and manage only those user
#   accounts that are associated with their site.
# - Administrators are allowed access to users across all sites.
#
# @see https://www.bookshare.org/cms/help-center/how-do-i-use-bookshare-web-reader
# This page mentions "Individual Member", "Student Member",
# "Bookshare teacher", and "sponsor".
#
# @see https://www.bookshare.org/cms/help-center/what-kind-account-should-my-students-use
# There are three main types of student Bookshare accounts: Individual
# Memberships, Organizational Memberships, and Linked Accounts.
#
# @see https://www.bookshare.org/cms/help-center/how-do-i-create-individual-membership-my-student
# [A] sponsor can set a limited access username and password to allow a
# member to log in and access books shared on a Reading List. Once the member
# logs in they can select the "Upgrade to an Individual membership" link
# found on the left side of their My Bookshare page to learn how to upgrade
# to a full Individual Membership.  Or a sponsor on the account can [...]
# provide an 'Activation ID' to the student.
#
# @see https://www.bookshare.org/cms/help-center/what-activation-id
# If you were originally registered for Bookshare as an Organizational Member
# (e.g. a student at a school), your Bookshare Sponsor can provide you an
# Activation ID that will link your new Individual Membership to the
# Organization. With this Activation ID your Organization has verified you
# Proof of Disability, and if you are over 18 your account would be
# immediately active. Members who are under 18 will still need to submit an
# Individual Agreement form to complete registration.
#
# === Prototypical users
# Bookshare seems to merge the concepts of "role" and "prototypical user".
# The test accounts that we were given seem to represent four "types" of users,
# although it's not clear whether these are all the "types" that are meant to
# exist.
#
# ==== EMMADSO@bookshare.org
# The home page has button for "Add Students".
#
# In "My Bookshare", this user:
# - has a link for "Members".
# - has a link for "Sponsors".
# - has a link for "My Requests".
#
# This user seems to be typical of current (DSO "sponsor") users that have
# Bookshare accounts.
#
# ==== EmmaVolunteer@bookshare.org
# The home page has links for "Checkout a Book" and "Submit a Book".
#
# In "My Bookshare", this user:
# - has none of the sidebar-links that a DSO "sponsor" has.
# - does not seem to be part of the same org as "EMMADSO@bookshare.org".
#
# This user seems to be typical of current "volunteer" Bookshare users which
# are (often?) unassociated with any DSO.
#
# ==== emmacollection@bookshare.org
# This user's home page says:
# We are so excited to have you help us with the approval queue and introduce
# this new account role.
#
# In "My Bookshare", this user:
# - has a link for "Collection Admin" to catalog.bookshare.org.
# - does not have a link for "Members".
# - does not have a link for "Sponsors".
# - does not have a link for "My Requests".
# - does not seem to have visibility into organization reading lists.
# - does not seem to be part of the same org as "EMMADSO@bookshare.org".
#
# Evidently, this "type" of user is completely new and not fully fleshed-out in
# terms of what it is meant to do.
#
# ==== EmmaMembership@bookshare.org
# This user cannot log in to www.bookshare.org or catalog.bookshare.org and
# appears to be a "type" of user that is completely new.
#
class User < ApplicationRecord
  include Emma::Common

  include Model

  include Record

  include Record::Identification

  # :nocov:
  #include Devise::Models::DatabaseAuthenticatable

  #include Devise::Models::Rememberable

  #include Devise::Models::Trackable

  #include Devise::Models::Registerable

  #include Devise::Models::Omniauthable

  #extend ActiveRecord::Validations

  # Create a new instance.
  #
  # @param [User, Hash, nil] attr
  #
  # @note - for dev traceability
  #
  def initialize: (?(User|symHash|nil) attr) -> void

  # Display the User instance as the user identifier.
  #
  # @return [String]
  #
  def to_s: () -> String

  # Update database fields.
  #
  # @param [User, Hash, nil] attributes
  #
  # @return [void]
  #
  def assign_attributes: ((User|symHash|nil) attributes) -> void

  # Value of :id for the indicated record.
  #
  # @param [User, String, Integer, Any] user  Default: self
  # @param [Hash]                       opt
  #
  # @return [String]
  # @return [nil]                     If no matching record was found.
  #
  def id_value: (?untyped user, **untyped opt) -> (String | nil)

  # Value of :id for the indicated record.
  #
  # @param [User, String, Integer, Any] user
  # @param [Hash]                       opt
  #
  # @return [String]
  # @return [nil]                     If no matching record was found.
  #
  def self.id_value: (untyped user, **untyped opt) -> (String | nil)

  def user_column: () -> Symbol

  def self.user_column: () -> Symbol

  # Return with the specified User record or *nil* if one could not be found.
  #
  # @param [String, Symbol, Integer, Hash, Model, Any, nil] item
  # @param [Hash]                                           opt
  #
  # @return [User, nil]
  #
  def find_record: (untyped item, **untyped opt) -> (User | nil)

  # Return with the specified User record or *nil* if one could not be found.
  #
  # @param [String, Symbol, Integer, Hash, Model, Any, nil] item
  # @param [Hash]                                           opt
  #
  # @option opt [Boolean] :no_raise   True by default.
  #
  # @return [User, nil]
  #
  def self.find_record: (untyped item, **untyped opt) -> (User | nil)

  # Return the account ID of *user*.
  #
  # @param [User, String, Symbol, Integer, Any, nil] user  Default: self.
  #
  # @return [String, nil]
  #
  def uid_value: (?untyped user) -> (String | nil)

  # Return the account ID of *user*.
  #
  # @param [User, String, Symbol, Integer, Any, nil] user
  #
  # @return [String, nil]
  #
  def self.uid_value: (untyped user) -> (String | nil)

  # The user ID is the same as the Bookshare ID, which is the same as the email
  # address.
  #
  # @return [String]
  #
  def uid: () -> String

  # Indicate whether this User is represented by a different Bookshare user.
  #
  # The Bookshare ID associated with this account if different from *self*.
  #
  # @return [String]
  # @return [nil]
  #
  def effective_uid: () -> (String | nil)

  # The User who interacts with Bookshare on behalf of this account if
  # different from *self*.
  #
  # @return [User]
  # @return [nil]
  #
  def effective_user: () -> (User | nil)

  # Indicate whether this account directly maps on to a Bookshare account.
  #
  def is_bookshare_user?: () -> bool

  # The Bookshare ID associated with this account.
  #
  # @return [String]
  #
  def bookshare_uid: () -> String

  @bookshare_user: User

  # The User who interacts with Bookshare on behalf of this account.
  #
  # This is *self* unless :effective_id is non-null.
  #
  # @return [User]
  #
  def bookshare_user: () -> User

  # Indicate whether the user is both an Organizational Member and an
  # Institutional Member.
  #
  # @see Member#linked_account?
  #
  def linked_account?: () -> bool

  # Current EMMA test Bookshare accounts and their role prototypes.
  #
  # @type [Hash{String=>Symbol}]
  #
  # @see Roles#PROTOTYPE
  #
  TEST_USERS: Hash[String,Symbol]

  # Indicate whether the user is one of the known "fake" test user accounts.
  #
  def test_user?: () -> bool

  @developer: bool

  # Indicate whether the user has the developer role.
  #
  def developer?: () -> bool

  @administrator: bool

  # Indicate whether the user has the administrator role.
  #
  def administrator?: () -> bool

  # The user's EMMA roles.
  #
  # @return [Array<Symbol>]
  #
  def role_list: () -> symArray

  # menu_label
  #
  # @param [User, nil] item           Default: self.
  #
  # @return [String, nil]
  #
  # @see BaseDecorator::Menu#items_menu_label
  #
  def menu_label: (?(User|nil) item) -> (String | nil)

  # assign_default_role
  #
  # @return [void]
  #
  # == Implementation Notes
  # A new User will be created the first time a new person authenticates via
  # Bookshare -- this may be the place to query the Bookshare API for that
  # user's Bookshare role in order to map it onto EMMA "prototype user".
  #
  def assign_default_role: () -> void

  private

  # Add EMMA role(s) to the current user based on its prototype.
  #
  # @param [Symbol, nil] prototype    Default: `Roles#DEFAULT_PROTOTYPE`.
  #
  # @return [Array<Role>]             Added role(s).
  #
  def add_roles: (?(Symbol|nil) prototype) -> Array[Role]

  public

  # Current EMMA test Bookshare accounts.
  #
  # @type [Hash{String=>Symbol}]
  #
  def self.test_users: () -> Hash[String,Symbol]

  # Pairs of current EMMA test Bookshare accounts with their "users" table
  # record IDs.
  #
  # @type [Array<(String,Integer)>]
  #
  def self.test_user_menu: () -> Array[String|Integer]

  # Get (or create) a database entry for the indicated user and update the
  # associated User object with additional information from the provider.
  #
  # @param [OmniAuth::AuthHash, Hash, nil] data
  # @param [Boolean]                       update   If *false* keep DB record.
  #
  # @return [User]                    Updated record of the indicated user.
  # @return [nil]                     If *data* is not valid.
  #
  # @see https://github.com/omniauth/omniauth/wiki/Auth-Hash-Schema
  #
  def self.from_omniauth: ((OmniAuth::AuthHash|symHash|nil) data, ?update: bool) -> (User | nil)
end
