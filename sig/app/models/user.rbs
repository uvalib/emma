# Model for the representation of an EMMA user.
#
class User < ApplicationRecord
  include Emma::Common

  include Model

  include Record

  include Record::Identification

  # :nocov:
  #include Rolify

  #include Rolify::Role

  #include Devise::Models::DatabaseAuthenticatable

  #include Devise::Models::Rememberable

  #include Devise::Models::Trackable

  #include Devise::Models::Registerable

  #include Devise::Models::Omniauthable

  #extend ActiveRecord::Validations

  # Create a new instance.
  #
  # @param [User, Hash, nil] attr
  #
  # @note - for dev traceability
  #
  def initialize: (?(User|symHash|nil) attr) -> void

  # Display the User instance as the user identifier.
  #
  # @return [String]
  #
  def to_s: () -> String

  # Update database fields.                                                     # if BS_AUTH
  #
  # @param [User, Hash, nil] attributes
  #
  # @return [void]
  #
  def assign_attributes: ((User|symHash|nil) attributes) -> void

  # Value of :id for the indicated record.
  #
  # @param [User, String, Integer, *] user  Default: self
  # @param [Hash]                     opt
  #
  # @return [String]
  # @return [nil]                     If no matching record was found.
  #
  def id_value: (?untyped user, **untyped opt) -> (String | nil)

  # Value of :id for the indicated record.
  #
  # @param [User, String, Integer, *] user
  # @param [Hash]                     opt
  #
  # @return [String]
  # @return [nil]                     If no matching record was found.
  #
  def self.id_value: (untyped user, **untyped opt) -> (String | nil)

  def user_column: () -> Symbol

  def self.user_column: () -> Symbol

  # Return with the specified User record or *nil* if one could not be found.
  #
  # @param [String, Symbol, Integer, Hash, Model, Any, nil] item
  # @param [Hash]                                           opt
  #
  # @return [User, nil]
  #
  def find_record: (untyped item, **untyped opt) -> (User | nil)

  # Return with the specified User record or *nil* if one could not be found.
  #
  # @param [String, Symbol, Integer, Hash, Model, Any, nil] item
  # @param [Hash]                                           opt
  #
  # @option opt [Boolean] :no_raise   True by default.
  #
  # @return [User, nil]
  #
  def self.find_record: (untyped item, **untyped opt) -> (User | nil)

  # Return the account ID of *user*.
  #
  # @param [User, String, Symbol, Integer, Any, nil] user  Default: self.
  #
  # @return [String, nil]
  #
  def uid_value: (?untyped user) -> (String | nil)

  # Return the account ID of *user*.
  #
  # @param [User, String, Symbol, Integer, Any, nil] user
  #
  # @return [String, nil]
  #
  def self.uid_value: (untyped user) -> (String | nil)

  # The user ID is the same as the email address.                               # unless BS_AUTH
  #
  # The user ID is the same as the Bookshare ID, which is the same as the email # if BS_AUTH
  # address.
  #
  # @return [String]
  #
  def uid: () -> String

  # Indicate whether this User is represented by a different Bookshare user.    # if BS_AUTH
  #
  # The Bookshare ID associated with this account if different from *self*.
  #
  # @return [String]
  # @return [nil]
  #
  def effective_uid: () -> (String | nil)

  # The User who interacts with Bookshare on behalf of this account if          # if BS_AUTH
  # different from *self*.
  #
  # @return [User]
  # @return [nil]
  #
  def effective_user: () -> (User | nil)

  # Indicate whether this account directly maps on to a Bookshare account.      # if BS_AUTH
  #
  def is_bookshare_user?: () -> bool

  # The Bookshare ID associated with this account.                              # if BS_AUTH
  #
  # @return [String]
  #
  def bookshare_uid: () -> String

  @bookshare_user: User                                                         # if BS_AUTH

  # The User who interacts with Bookshare on behalf of this account.            # if BS_AUTH
  #
  # This is *self* unless :effective_id is non-null.
  #
  # @return [User]
  #
  def bookshare_user: () -> User

  # Indicate whether the user is one of the known "fake" test user accounts.
  #
  def test_user?: () -> bool

  @developer: bool

  # Indicate whether the user has the :developer role.
  #
  def developer?: () -> bool

  @administrator: bool

  # Indicate whether the user has the :administrator role.
  #
  def administrator?: () -> bool

  # The user's EMMA roles.
  #
  # @return [Array<Symbol>]
  #
  def role_list: () -> symArray

  # menu_label
  #
  # @param [User, nil] item           Default: self.
  #
  # @return [String, nil]
  #
  # @see BaseDecorator::Menu#items_menu_label
  #
  def menu_label: (?(User|nil) item) -> (String | nil)

  # assign_default_role
  #
  # @return [void]
  #
  # === Implementation Notes
  # A new User will be created the first time a new person authenticates via    # if BS_AUTH
  # Bookshare -- this may be the place to query the Bookshare API for that
  # user's Bookshare role in order to map it onto EMMA "prototype user".
  #
  def assign_default_role: () -> void

  private

  # Add EMMA role(s) to the current user based on its prototype.
  #
  # @param [Symbol, nil] prototype    Default: `Role#DEFAULT_PROTOTYPE`.
  #
  # @return [Array<Role>]             Added role(s).
  #
  def add_roles: (?(Symbol|nil) prototype) -> Array[Role]

  public

  # Extend Rolify #has_role? to first check for role prototype.
  #
  # @param [String, Symbol] role      Role capability or role prototype.
  # @param [Symbol, nil]    resource
  #
  def has_role?: (String|Symbol role, ?(Symbol|nil) resource) -> bool

  # Current EMMA test accounts.
  #
  # @type [Hash{String=>Symbol}]
  #
  def self.test_users: () -> Hash[String,Symbol]

  # Pairs of current EMMA test Bookshare accounts with their "users" table      # if BS_AUTH
  # record IDs.
  #
  # @type [Array<(String,Integer)>]
  #
  def self.test_user_menu: () -> Array[[String|Integer]]

  # Get the database entry for the indicated user and update it with additional # unless BS_AUTH
  # information from the provider.
  #
  # Get (or create) a database entry for the indicated user and update the      # if BS_AUTH
  # associated User object with additional information from the provider.
  #
  # @param [OmniAuth::AuthHash, Hash, nil] data
  # @param [Boolean]                       update   If *false* keep DB record.
  #
  # @return [User]                    Updated record of the indicated user.
  # @return [nil]                     If *data* is not valid.
  #
  # @see https://github.com/omniauth/omniauth/wiki/Auth-Hash-Schema
  #
  def self.from_omniauth: ((OmniAuth::AuthHash|symHash|nil) data, ?update: bool) -> (User | nil)
end
