# A file object uploaded from the client.
#
class Upload < ApplicationRecord
  include ActiveModel::Validations

  include Model

  include Upload::Config

  include Upload::BulkMethods

  include Upload::EmmaDataMethods

  include Upload::FileMethods

  include Upload::IdentifierMethods

  include Upload::SearchMethods

  include Upload::SortMethods

  include Upload::RenderMethods

  include Upload::WorkflowMethods

  # Control whether field validation should occur.
  #
  # NOTE: Not currently supported
  #
  # @type [Boolean]
  #
  FIELD_VALIDATION: bool

  # Create a new instance.
  #
  # @param [Upload, Hash, nil] attr   Passed to #assign_attributes via super.
  #
  def initialize: (?(Upload|symHash|nil) attr) ?{ () -> untyped } -> void

  # The user associated with this record.
  #
  # @return [Integer, nil]
  #
  def user_id: () -> (Integer | nil)

  # The organization associated with this record.
  #
  # @return [Integer, nil]
  #
  def org_id: () -> (Integer | nil)

  # A textual label for the record instance.
  #
  # @param [User, nil] item  Default: self.
  #
  # @return [String, nil]
  #
  def label: (?(User|nil) item) -> (String | nil)

  def uid: (?untyped item) -> (Integer | nil)

  def oid: (?untyped item) -> (Integer | nil)

  def self.for_user: (?untyped user, **untyped opt) -> ActiveRecord::Relation

  def self.for_org: (?untyped org, **untyped opt) -> ActiveRecord::Relation

  # Model/controller options passed in through the constructor.
  #
  # @return [Upload::Options]
  #
  attr_reader model_options: Upload::Options

  # set_model_options
  #
  # @param [Upload::Options, Hash, nil] options
  #
  # @return [Upload::Options]
  #
  def set_model_options: ((Upload::Options|symHash|nil) options) -> Upload::Options

  # Mutually-exclusive modes of operation in #assign_attributes.
  #
  # @type [Array<Symbol>]
  #
  ASSIGN_MODES: symArray

  # Non-field keys used to pass control information to #assign_attributes.
  #
  # @type [Array<Symbol>]
  #
  ASSIGN_CONTROL_OPT: symArray

  # Update database fields, including the structured contents of the :emma_data
  # field.
  #
  # @param [Upload, Hash, nil] attributes
  #
  # @option attributes [String]         :base_url
  # @option attributes [Module, String] :importer
  # @option attributes [Boolean]        :defer
  # @option attributes [Boolean]        :initializing
  # @option attributes [Boolean]        :finishing_edit
  # @option attributes [Boolean]        :reset
  #
  # === Options
  #
  # :base_url
  #
  #   Supplied to give the base URL for constructing a retrieval link from a
  #   submission ID (:emma_retrievalLink).
  #
  # :importer
  #
  #   Supplied to specify an import translation mechanism (typically for
  #   bulk import). @see Import#translate_fields
  #
  # :defer
  #
  #   Used internally to indicate whether a file indicated by an imported
  #   :file_path data field should be acquired immediately.  If *true* then
  #   @file_path will be set but the referenced file will *not* be fetched
  #   automatically via #upload_file
  #
  # === Mode Options
  #
  # :initializing
  #
  #   Indicates that the method is being executed from the initializer.
  #
  # :finishing_edit
  #
  #   Indicates that the method is being executed from #finishing_edit.
  #   This accommodates the use-case of updating record values from the fields
  #   used when editing an existing EMMA entry (:edit_file_data and/or
  #   :edit_emma_data).
  #
  # :reset
  #
  #   Provided to indicate that user-supplied record attributes should be
  #   wiped (while retaining values that were originally set by the system).
  #
  # @return [self]
  #
  def assign_attributes: ((Upload|symHash|nil) attributes) -> self

  @file_path: String

  # Formatted record contents.
  #
  # @param [Hash, nil] attr
  #
  # @return [String]
  #
  def inspect: (?(symHash|nil) attr) -> String

  private

  # Allow :file_data and :emma_data to be seen fully when inspecting.
  #
  # @param [Symbol, String] name      Attribute name.
  # @param [any, nil]       value     Attribute value.
  #
  # @return [String]
  #
  def format_for_inspect: ((Symbol|String) name, untyped value) -> String

  # log_ignored
  #
  # @param [String] label
  # @param [Hash]   values
  # @param [Symbol, nil] caller
  #
  def log_ignored: (String label, symHash values, ?(Symbol|nil) caller) -> nil

  public

  # The fields defined in the schema for this record.
  #
  # @return [Array<Symbol>]
  #
  def field_names: () -> symArray

  # Locate records matching the submission ID given as either *sid* or
  # `opt[:submission_id]`.
  #
  # @param [Model, Hash, String, Symbol, nil] sid
  # @param [Integer, nil]    max      Log error if matches exceed this.
  # @param [Boolean, Symbol] log      Calling method for logging.
  # @param [Boolean]         fatal    If *false*, return *nil* on error.
  # @param [Hash]            opt      Passed to #where.
  #
  # @raise [UploadWorkflow::SubmitError]
  #
  # @return [ActiveRecord::Relation]
  # @return [nil]                     If invalid and *fatal* is *false*.
  #
  def self.matching_sid
    : (?(Model|symHash|String|Symbol|nil) sid, ?max: Integer|nil, ?log: bool|Symbol, ?fatal: true,  **untyped opt) -> ActiveRecord::Relation
    | (?(Model|symHash|String|Symbol|nil) sid, ?max: Integer|nil, ?log: bool|Symbol,  fatal: false, **untyped opt) -> (ActiveRecord::Relation | nil)

  # Get the latest record matching the submission ID given as either *sid* or
  # `opt[:submission_id]`.
  #
  # @param [Model, Hash, String, Symbol, nil] sid
  # @param [Symbol, String] sort    In case of multiple SIDs (:created_at).
  # @param [Hash]           opt     Passed to #matching_sid.
  #
  # @raise [Record::StatementInvalid]   If *sid*/opt[:submission_id] invalid.
  # @raise [Record::NotFound]           If record not found.
  #
  # @return [Model]
  # @return [nil]                       On error if `opt[:fatal]` is *false*.
  #
  def self.latest_for_sid: (?(Model|symHash|String|Symbol|nil) sid, ?sort: Symbol|String|nil, **untyped opt) -> (Model | nil)

  # Return the Upload instance indicated by the argument.
  #
  # @param [any, nil] v               Model, Hash, String, Integer
  #
  # @return [Upload, nil]             A fresh record unless *v* is an Upload.
  #
  def self.instance_for: (untyped v) -> (Upload | nil)

  # Configured requirements for Upload fields.
  #
  # @return [ActionConfig]            Frozen result.
  #
  def upload_fields: () -> ActionConfig

  # Indicate whether all required fields have valid values.
  #
  def required_fields_valid?: () -> bool

  # Indicate whether all required fields have valid values.
  #
  # @note Currently unused.
  #
  def emma_data_valid?: () -> bool

  # Compare the source fields against configured requirements.
  #
  # @param [Hash]         required_fields
  # @param [Upload, Hash] source
  #
  # @return [void]
  #
  def check_required: (?(symHash|nil) required_fields, ?(Upload|symHash|nil) source) -> void

  # Database column schema.
  #
  # @return [Hash{Symbol=>ActiveRecord::ConnectionAdapters::PostgreSQL::Column}]
  #
  def database_columns: () -> Hash[Symbol,ActiveRecord::ConnectionAdapters::PostgreSQL::Column]

  module ClassMethods

    # Database column schema.
    #
    # @return [Hash{Symbol=>ActiveRecord::ConnectionAdapters::PostgreSQL::Column}]
    #
    def database_columns: () -> Hash[Symbol,ActiveRecord::ConnectionAdapters::PostgreSQL::Column]

    @database_columns: Hash[Symbol,ActiveRecord::ConnectionAdapters::PostgreSQL::Column]

    # Counter for the trailing portion of the generated submission ID.
    #
    # This provides a per-thread value in the range 0..99 which can be used to
    # differentiate submission IDs which are generated in rapid succession
    # (e.g., for bulk upload).
    #
    # @return [Integer]
    #
    def sid_counter: () -> Integer

    @sid_counter: Integer
  end

  extend ClassMethods

  private

  def error: (Symbol field, Symbol `type`, ?(String|nil) message) -> void
end
