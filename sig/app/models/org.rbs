class Org < ApplicationRecord
  include Model

  include Record

  include Record::Assignable

  include Record::Searchable

  include Record::Testing

  include Record::Debugging

  include Org::Config

  include Org::Assignable

  # A short textual representation for the record instance.
  #
  # @param [Org, nil] item            Default: self.
  #
  # @return [String, nil]
  #
  def abbrev: (?(Org|nil) item) -> (String | nil)

  # A textual label for the record instance.
  #
  # @param [Org, nil] item  Default: self.
  #
  # @return [String, nil]
  #
  def label: (?(Org|nil) item) -> (String | nil)

  # Create a new instance.
  #
  # @param [Org, Hash, nil] attr   Passed to #assign_attributes via super.
  #
  # @note - for dev traceability
  #
  def initialize: (?(Org|prmHash|nil) attr) ?{ () -> untyped } -> void

  def org_id: () -> (Integer | nil)

  def org_key: () -> Symbol

  def self.org_key: () -> Symbol

  def uid: (?untyped item) -> (Integer | nil)

  def self.for_user: (?untyped user, **untyped opt) -> ActiveRecord::Relation

  def user_ids: () -> Array[Integer]

  def user_emails: () -> strArray

  # This is the (non-persisted) organization associated with ID 0.
  #
  # User records use :org_id == 0 to indicate that the user is explicitly not
  # associated with any member organization, whereas a NIL field value
  # indicates that the user's organization has not yet been determined.
  #
  # @return [Org]
  #
  def self.none: () -> Org

  # Return the Org instance indicated by the argument.
  #
  # @param [Model, Hash, String, Integer, nil] v
  #
  # @return [Org, nil]
  #
  def self.instance_for: (Model|symHash|String|Integer|nil v) -> (Org | nil)
end
