# A singleton object for providing global settings to all workers/threads via
# Rails.cache.
#
class AppGlobal
  # The Rails.cache namespace for items managed by this class.
  #
  # @type [Symbol]
  #
  NAMESPACE: Symbol

  module Methods
    # Rails.cache namespace for key/value pairs.
    #
    # @return [Symbol]
    #
    def namespace: () -> Symbol

    # The value returned if the value was not present.
    #
    # @return [any]
    #
    def default: () -> untyped

    # Get a global value.
    #
    # @param [Hash] opt               Passed to #cache_read.
    #
    # @return [any]
    #
    def get_item: (**untyped opt) -> untyped

    # Set a global value.
    #
    # @param [any, nil] value         Default: `#default`.
    # @param [Hash]     opt           Passed to #cache_write.
    #
    # @return [any]                   The new current value.
    # @return [nil]                   If the write failed.
    #
    def set_item: (?untyped value, **untyped opt) -> (untyped | nil)

    # Initialize a global value.
    #
    # @param [any, nil] value         Replacement value (if given).
    # @param [Hash]     opt           Passed to #cache_write.
    #
    # @return [any]                   The new current value.
    # @return [nil]                   If the write failed.
    #
    def reset_item: (?untyped value, **untyped opt) -> (untyped | nil)

    # Remove a global value.
    #
    # @param [Hash] opt               Passed to #cache_delete.
    #
    # @return [Boolean]
    # @return [nil]                   If the write failed.
    #
    def clear_item: (**untyped opt) -> (bool | nil)

    # The key defined by the subclass.
    #
    # @return [Symbol, nil]
    #
    def cache_key: () -> (Symbol | nil)

    # Get a Rails.cache value.
    #
    # @param [Symbol, String] key
    #
    # @return [any, nil]
    # @return [nil]                   If *key* is missing.
    #
    def cache_read: (?key: Symbol|String|nil) -> (untyped | nil)

    # Set a Rails.cache value.
    #
    # @param [any, nil]       value
    # @param [Symbol, String] key
    #
    # @return [Boolean]
    # @return [nil]                   If *key* is missing.
    #
    def cache_write: (untyped value, ?key: Symbol|String|nil) -> (bool | nil)

    # Remove a Rails.cache value.
    #
    # @param [Symbol, String] key
    #
    # @return [Boolean]
    # @return [nil]                   If *key* is missing.
    #
    def cache_delete: (?key: Symbol|String|nil) -> (bool | nil)

    # validate_key
    #
    # @param [any, nil] key
    #
    # @raise [RuntimeError]             If key is missing/blank.
    #
    # @return [true]
    #
    def validate_key: (untyped key) -> true

    private

    def self.included: (Module base) -> void
  end

  include Methods
end
