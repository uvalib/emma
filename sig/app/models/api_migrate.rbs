# API data migration.
#
# @see "en.emma.api_migrate"
#
class ApiMigrate
  include Emma::Common

  # API migration configuration entries.
  #
  # To ensure idempotent translations, for each new value, the value itself is
  # included at the start of the list of old item pattern matches.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  CONFIGURATION_ENTRY: Hash[Symbol,symHash]

  module ClassMethods
    include Emma::Json

    # Default target record class.
    #
    # @return [Class<ApplicationRecord>]
    #
    def record_class: () -> Class

    # Record column(s) holding EMMA data.
    #
    # @return [Array<Symbol>]
    #
    def data_columns: () -> symArray

    # get_relation
    #
    # @param [Integer, Array<Integer>, String, Hash, nil] range
    #
    # @return [ActiveRecord::Relation]
    #
    def get_relation: (?(Integer|Array[Integer]|String|symHash|nil) range) -> ActiveRecord::Relation

    # API migration name (#CONFIGURATION_ENTRY key).
    #
    # @param [Symbol, String, Integer, Float, nil] key
    #
    # @return [Symbol, nil]
    #
    def migration_name: ((Symbol|String|Integer|Float|nil) key) -> (Symbol | nil)

    # API migration configured field transformations.
    #
    # @param [Symbol, String, Integer, Float, nil] key  Default: latest
    #
    # @type [Hash{Symbol=>Hash}]
    #
    def configuration: (?(Symbol|String|Integer|Float|nil) key) -> Hash[Symbol,symHash]

    # The sequence of possible field transformations.
    #
    # @type [Array<Symbol>]
    #
    # @see "en.emma.api_migrate._template"
    #
    TRANSFORMATION_STEPS: symArray

    # Transform EMMA data fields.
    #
    # @param [Model, Hash]  record
    # @param [Symbol]       column    Default: :emma_data.
    # @param [Hash]         config
    # @param [Hash]         opt       Passed to #report_changes.
    #
    # @return [Model, Hash]           Possibly modified *record*.
    #
    def transform!: ((Model|symHash) record, ?column: Symbol|nil, ?config: symHash, **untyped opt) -> (Model | symHash)

    # Transform the value before #translate by applying each requested method.
    #
    # @param [Any]       value
    # @param [Array]     meths
    # @param [Symbol]    field
    # @param [Hash, nil] emma_data
    #
    # @return [Any]
    #
    def pre_translate: (untyped value, symArray meths, field: Symbol, ?emma_data: symHash|nil) -> untyped

    # Translate values.
    #
    # @param [Any]     value
    # @param [Hash]    translations
    # @param [Boolean] unique         If *false*, do not prune results.
    #
    # @return [Any]
    #
    def translate: (untyped value, symHash translations, ?unique: bool) -> untyped

    # Transform the value after #translate by applying each requested method.
    #
    # @param [Any]       value
    # @param [Array]     meths
    # @param [Symbol]    field
    # @param [Hash, nil] emma_data
    #
    # @return [Any]
    #
    def post_translate: (untyped value, symArray meths, field: Symbol, ?emma_data: symHash|nil) -> untyped

    # Transform the value by applying each requested method.
    #
    # @param [Any]    value
    # @param [Array]  meths
    # @param [Symbol] field
    #
    # @return [Any]
    #
    def normalize: (untyped value, symArray meths, field: Symbol) -> untyped

    # Change cardinality (single to array or array to single) based on the
    # specified range of values.
    #
    # @param [Any]          value
    # @param [Array, Range] range
    # @param [Symbol]       field
    #
    # @return [Any]
    #
    def new_min_max: (untyped value, (Array[Integer]|Range[Integer]) range, field: Symbol) -> untyped

    # Transform the value by applying each requested method.
    #
    # @param [Any]       value
    # @param [Array]     meths
    # @param [Symbol]    field
    # @param [Hash, nil] emma_data
    #
    # @return [Any]
    #
    def apply: (untyped value, symArray meths, field: Symbol, ?emma_data: symHash|nil) -> untyped

    # Transform a multi-item value into a single-item value.
    #
    # @param [Any]    value
    # @param [String] separator
    #
    # @return [Any]                   The *value* itself if it was not an Array
    #
    def from_array: (untyped value, ?String separator) -> untyped

    # Transform a single-item value into an array of items.
    #
    # @param [Any]    value
    # @param [String] separator
    #
    # @return [Array]
    #
    def to_array: (untyped value, ?String separator) -> untyped

    # report_changes
    #
    # @param [Symbol]       column
    # @param [Hash]         original
    # @param [Hash]         current
    # @param [Hash, nil]    report
    # @param [Boolean, nil] log
    #
    # @return [void]
    #
    def report_changes: (Symbol column, symHash original, symHash current, ?report: symHash|nil, ?log: bool|nil) -> void

    # Transform JSON EMMA data.
    #
    # If an :emma_data field won't parse it could be because one or more data
    # fields contains an unescaped double-quote, making the entry invalid JSON.
    #
    # This method attempts to correct that by protecting all of the valid
    # instances of unescaped double-quotes and escaping any double-quotes
    # remaining in the string before reapplying #json_parse.
    #
    # @param [String] data
    #
    # @return [Hash]
    #
    def parse_data: (String data) -> symHash

    # Remove blank values.
    #
    # Strings are conditioned by replacing HTML entities with Unicode
    # characters and by replacing Unicode characters with ASCII characters
    # where possible.
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>, String, Any]    Nil for an empty array.
    #
    def remove_blank: ((String|strArray) value) -> untyped

    # Bogus :dc_creator values found via
    # "https://emma.lib.virginia.edu/data/counts".
    #
    # @type [Array<String,Regexp>]
    #
    BOGUS_CREATOR: Array[String|Regexp]

    # Remove bogus :dc_creator values which are probably due to file metadata
    # extraction where the "creator" is actually the creator of the PDF or
    # Word document as opposed to the creator of the source creative work.
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>, String]
    #
    def normalize_creator: ((String|strArray) value) -> (String | strArray)

    # normalize_identifier
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>]
    #
    def normalize_identifier: ((String|strArray) value) -> strArray

    # normalize_day
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>, String, nil]
    #
    def normalize_day: ((String|strArray) value) -> (String | strArray | nil)

    # normalize_datetime
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>, String, nil]
    #
    def normalize_datetime: ((String|strArray) value) -> (String | strArray | nil)

    # normalize_metadata_source
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>]
    #
    def normalize_metadata_source: ((String|strArray) value) -> strArray

    # Split values on '.', ',', and ';'.
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>]
    #
    def normalize_text_list: ((String|strArray) value) -> strArray

    # normalize_coverage
    #
    # @param [Array<String>, String] value
    #
    # @return [Array<String>, String]
    #
    def normalize_coverage: ((String|strArray) value) -> (String | strArray)

    # Ensure that a field designated as 'boolean' is not persisted as a String.
    #
    # @param [Array, Any, nil] value
    #
    # @return [Array<Boolean>, Boolean, nil]
    #
    def normalize_boolean: (untyped value) -> (Array[bool] | bool | nil)

    # Reduce an array of quality values to the single highest value.
    #
    # @param [Array<String>, String] value
    #
    # @return [String, nil]
    #
    # === Usage Notes
    # This is expected to operate on already-translated field values.
    #
    # === Implementation Notes
    # The source enumeration is expected to be ordered from lowest to highest
    # quality.
    #
    def summarize_quality: ((String|strArray) value) -> (String | nil)

    # EMMA data fields that have, do, or will contain remediation comments.
    #
    # @type [Array<Symbol>]
    #
    COMMENT_FIELDS: symArray

    # Complete :rem_remediation translation by moving untranslated items to
    # :rem_comments.
    #
    # @param [Array<String>, String] value
    # @param [Hash]                  emma_data
    #
    # @return [Array<String>, String, nil]
    #
    # === Implementation Notes
    # In order to avoid requiring that the API field migrations be done in a
    # specific sequence, this method will favor the pre-migrated field names
    # if they are present.
    #
    def preserve_remediation_comments: ((String|strArray) value, symHash emma_data) -> (String | strArray | nil)

    # FormatFeature translations
    #
    # @type [Hash]
    #
    FORMAT_FEATURE_MIGRATION: symHash

    # Process :emma_lastRemediationNote by adding to :emma_formatFeature any
    # values which can be detected.  The original value is returned.
    #
    # @param [String] value
    # @param [Hash]   emma_data
    #
    # @return [String]
    #
    def extract_format_feature: (String value, symHash emma_data) -> String

    # RemediatedAspects translations
    #
    # @type [Hash]
    #
    REMEDIATION_MIGRATION: symHash

    # EMMA data fields that have, do, or will contain remediation comments.
    #
    # @type [Array<Symbol>]
    #
    ASPECT_FIELDS: symArray

    # Process :emma_lastRemediationNote by adding to :rem_remediatedAspects any
    # values which can be detected.  The original value is returned.
    #
    # @param [String] value
    # @param [Hash]   emma_data
    #
    # @return [String]
    #
    # === Implementation Notes
    # In order to avoid requiring that the API field migrations be done in a
    # specific sequence, this method will favor the pre-migrated field names
    # if they are present.
    #
    def extract_remediated_aspects: (String value, symHash emma_data) -> String

    # Set a default :rem_coverage if none was provided unless :rem_status has
    # a value (in which case, this is deferred until the post-translate step
    # for :rem_status).  The new value is returned.
    #
    # @param [Array<String>, String] value
    # @param [Hash]                  emma_data
    #
    # @return [Array<String>, String]
    #
    # @see #derive_default_coverage
    #
    def set_default_coverage: ((String|strArray) value, symHash emma_data) -> (String | strArray)

    # Based on :rem_status (and :rem_complete) add a :rem_coverage comment if
    # none exists.  The original value is returned.
    #
    # @param [String] value
    # @param [Hash]   emma_data
    #
    # @return [String]
    #
    # @see #set_default_coverage
    #
    def derive_default_coverage: (String value, symHash emma_data) -> String

    private

    # If the current :rem_coverage is missing or is an automatically-generated
    # value, return a default value based on :rem_status and :rem_complete.
    #
    # @param [Array<String>, String] current    Current :rem_coverage value.
    # @param [Hash]                  emma_data
    #
    # @return [String, nil]
    #
    def default_coverage: ((String|strArray) current, symHash emma_data) -> (String | nil)

    # Find terms within *value* and add them to the indicated data field.
    #
    # @param [Hash]                       emma_data
    # @param [String]                     value
    # @param [Hash]                       patterns
    # @param [Array<Symbol>, Symbol, nil] fields
    #
    # @return [void]
    #
    def add_translations: (symHash emma_data, String value, symHash patterns, ?(Symbol|symArray|nil) fields) -> void

    # Add one or more values to the indicated data field.
    #
    # @param [Hash]                  emma_data
    # @param [Symbol, Array<Symbol>] fields
    # @param [String, Array<String>] values
    # @param [Boolean]               unique
    # @param [Boolean, nil]          single
    #
    # @return [Any]                   New value of `emma_data[field]`.
    #
    def add_values: (symHash emma_data, (Symbol|symArray) fields, (String|strArray) values, ?unique: bool, ?single: bool|nil) -> (untyped | nil)

    # To avoid requiring that the API field migrations be performed in a
    # specific order, this method supports the ability to arrange potential
    # target fields so that pre-migrated fields will be favored if they are
    # present.
    #
    # If none are present, the last (or only) supplied field name is returned.
    #
    # @param [Hash]                       emma_data
    # @param [Array<Symbol>, Symbol, nil] fields
    #
    # @return [Symbol, nil]
    #
    def find_field: (symHash emma_data, (Symbol|symArray|nil) fields) -> (Symbol | nil)

    def self.included: (Module base) -> void
  end

  include ClassMethods

  # Associated "en.emma.api_migrate" key.
  #
  # @type [Symbol]
  #
  attr_reader name: Symbol

  # Produce additional log output for debugging.
  #
  # @type [Boolean]
  #
  attr_reader log: bool

  # Generate a hash reporting on the changes for each record.
  #
  # @type [Hash, nil]
  #
  attr_reader report: symHash | nil

  # Create a new instance.
  #
  # @param [Symbol, String, Integer, Float, nil] key        Default: latest.
  # @param [Boolean, Hash]                       report
  # @param [Boolean]                             log
  # @param [Boolean]                             no_raise
  #
  def initialize: (?untyped key, ?report: bool|symHash|nil, ?log: bool|nil, ?no_raise: bool) -> void

  # Run the data migrations.
  #
  # @param [Boolean] update           If *true*, the database is updated.
  # @param [Any]     range            For #get_relation.
  # @param [Hash]    opt              Passed to #transform!.
  #
  # @return [Array{Hash}]             New record values.
  #
  def run!: (?update: bool, ?range: untyped, **untyped opt) -> untyped

  # Default target record class.
  #
  # @return [Class<ApplicationRecord>]
  #
  def record_class: () -> untyped

  # API migration name (#CONFIGURATION_ENTRY key).
  #
  # @param [Symbol, String, Integer, Float, nil] key  Default: `#name`.
  #
  # @return [Symbol, nil]
  #
  def migration_name: (?untyped key) -> untyped

  # API migration configured field transformations.
  #
  # @param [Symbol, String, Integer, Float, nil] key  Default: `#name`.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  def configuration: (?untyped key) -> untyped

  # Transform fields.
  #
  # @param [Model, Hash]           record
  # @param [Symbol, Array<Symbol>] column
  # @param [Hash]                  opt
  #
  # @option opt [Hash, nil]    :report      Add modified field value(s).
  # @option opt [Boolean, nil] :log         Log modified field value(s).
  #
  # @return [Model, Hash]             Possibly modified *record*.
  #
  def transform!: (untyped record, column: untyped, **untyped opt) -> untyped
end
