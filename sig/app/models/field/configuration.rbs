module Field::Configuration
  include Field::Property

  DEFAULT_MODEL: Symbol

  # Subtrees of the configuration that are visited when looking for a specific
  # field.  The first (*nil*) indicates the top-level -- i.e., where the field
  # is an ActionConfig key.  The others are meaningful only for the Upload
  # configuration -- e.g., allowing :dc_title to be found within the subtree
  # rooted at :emma_data.
  #
  # @type [Array<nil,Symbol,Array<Symbol>]
  #
  SUB_SECTIONS: Array[nil|Symbol|symArray]

  # Configuration properties for a field within a given model/controller.
  #
  # @param [Symbol, String, Array, nil]  field
  # @param [Symbol, String, ModelConfig] model
  # @param [Symbol, String, nil]         action
  #
  # @return [FieldConfig]             Frozen result.
  #
  # -
  # === Variations
  # +
  #
  # @overload configuration_for(field, model = nil, action = nil)
  #   Look the named field in the configuration subtree for *action* if given
  #   and then in the :all subtree.  For hierarchical configurations (currently
  #   only for submissions), the top-level is checked for *field* and then
  #   the sub-sections within :emma_data, :file_data, and :file_data :metadata.
  #   @param [Symbol, String, nil]         field
  #   @param [Symbol, String, ModelConfig] model
  #   @param [Symbol, String, nil]         action
  #
  # @overload configuration_for(field_path, model = nil, action = nil)
  #   The field name to check is taken from the end of the array; the remainder
  #   is used to limit the sub-section to check.
  #   @param [Array<Symbol,String,Array>]  field_path
  #   @param [Symbol, String, ModelConfig] model
  #   @param [Symbol, String, nil]         action
  #
  def configuration_for: ((Array[Symbol|String|nil|Array[Symbol|String|nil]]|Symbol|String|nil) field, (Symbol|String|ModelConfig) model, ?(Symbol|String|nil) action) -> FieldConfig

  # Find the field whose configuration entry has a matching label.
  #
  # @param [String, Symbol, nil]         label
  # @param [Symbol, String, ModelConfig] model
  # @param [Symbol, String, nil]         action
  #
  # @return [FieldConfig]      Frozen result.
  #
  def configuration_for_label: ((Symbol|String|nil) label, (Symbol|String|ModelConfig) model, ?(Symbol|String|nil) action) -> FieldConfig

  private

  def self.included: (Module base) -> void
end
