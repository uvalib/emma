# Upload record methods to support Shrine-based file objects uploaded from the
# client.
#
# @!attribute [r] file
#   A de-serialized representation of the :file_data column for this model.
#   @return [FileUploader::UploadedFile]
#
# @!attribute [r] file_attacher
#   Inserted by Shrine::Plugins:Activerecord.
#   @return [FileUploader::Attacher]
#
# @!attribute [r] edit_file
#   A de-serialized representation of the :edit_file_data column.
#   @return [FileUploader::UploadedFile]
#
# @!attribute [r] edit_file_attacher
#   Inserted by Shrine::Plugins:Activerecord.
#   @return [FileUploader::Attacher]
#
module Upload::FileMethods
  include Upload::WorkflowMethods

  include FileNaming

  #include ActiveRecord::Validations

  # Represents a file that was uploaded to a storage.                         # NOTE: to Record::Uploadable
  #
  # @return [FileUploader::UploadedFile]
  #
  # @see Shrine::ClassMethods#inherited (Created via Shrine)
  #
  attr_reader file: FileUploader::UploadedFile

  # Saves information about the uploaded file as an attachment to a record    # NOTE: to Record::Uploadable
  # (saving the file data to the :file_data database column).
  #
  # The attaching process requires a temporary and a permanent storage to be
  # registered (by default that's :cache and :store).
  #
  # @return [FileUploader::Attacher]
  #
  attr_reader file_attacher: FileUploader::Attacher

  # Represents a file that was uploaded to a storage as a replacement for the
  # originally-submitted file.
  #
  # @return [FileUploader::UploadedFile]
  #
  # @see #file
  #
  attr_reader edit_file: FileUploader::UploadedFile

  # Saves information about the uploaded replacement as an attachment to a
  # record (saving the file data to the :edit_file_data database column).
  #
  # The attaching process requires a temporary and a permanent storage to be
  # registered (by default that's :cache and :store).
  #
  # @return [FileUploader::Attacher]
  #
  # @see #file_attacher
  #
  attr_reader edit_file_attacher: FileUploader::Attacher

  # The maximum age (in seconds) allowed for download links which are meant to  # NOTE: to Record::Uploadable
  # be valid only for a single time.
  #
  # This should be generous to allow for network delays.
  #
  # @type [Integer]
  #
  ONE_TIME_USE_EXPIRATION: Integer

  # The maximum age (in seconds) allowed for download links.                    # NOTE: to Record::Uploadable
  #
  # This allows the link to be reused for a while, but not long enough to allow
  # sharing of content URLs for distribution.
  #
  # @type [Integer]
  #
  DOWNLOAD_EXPIRATION: Integer

  # Full name of the file.
  #
  # @return [String]
  # @return [nil]                     If :file_data is blank.
  #
  def filename: () -> (String | nil)

  @filename: String | nil

  # Return the attached file, loading it if necessary (and possible).
  #
  # @return [FileUploader::UploadedFile]
  # @return [nil]                     If :file_data is blank.
  #
  def attached_file: () -> (FileUploader::UploadedFile | nil)

  # Full name of the file when editing an existing entry.
  #
  # @return [String]
  # @return [nil]                     If :file_data is blank.
  #
  def edit_filename: () -> (String | nil)

  # Return the attached file, loading it if necessary (and possible).
  #
  # @return [FileUploader::UploadedFile]
  # @return [nil]                     If :file_data is blank.
  #
  def edit_attached_file: () -> (FileUploader::UploadedFile | nil)

  # Full name of the file currently associated with the record.
  #
  # @return [String]
  # @return [nil]                     If :file_data is blank.
  #
  def active_filename: () -> (String | nil)

  # Return the attached file currently associated with the record.
  #
  # @return [FileUploader::UploadedFile]
  # @return [nil]                     If :file_data is blank.
  #
  def active_attached_file: () -> (FileUploader::UploadedFile | nil)

  # Return the cached file, attaching it if necessary (and possible).
  #
  # @return [FileUploader::UploadedFile, nil]
  #
  def attach_cached: () -> (FileUploader::UploadedFile | nil)

  # Return the cached file, attaching it if necessary (and possible).
  #
  # @return [FileUploader::UploadedFile, nil]
  #
  def edit_attach_cached: () -> (FileUploader::UploadedFile | nil)

  # Return the cached file currently associated with the record.
  #
  # @return [FileUploader::UploadedFile, nil]
  #
  def active_attach_cached: () -> (FileUploader::UploadedFile | nil)

  # Move the uploaded file to its final destination.
  #
  # If the file is in :cache it will be moved to :store.  If it's already in
  # :store then this is a no-op.
  #
  # @param [Boolean] no_raise         If *false*, re-raise exceptions.
  #
  # @return [FileUploader::UploadedFile, nil]
  #
  def promote_file: (?no_raise: bool) -> (FileUploader::UploadedFile | nil)

  # Remove the uploaded file from storage (either :store or :cache).
  #
  # @param [Boolean] no_raise         If *false*, re-raise exceptions.
  # @param [Symbol] field             Either :file_data or :edit_file_data;
  #                                     otherwise the field is determined by
  #                                     the phase.
  #
  # @return [void]
  #
  def delete_file: (?no_raise: bool, ?field: Symbol|nil) -> void

  # Generate a URL to the uploaded file which can be used to download the file
  # to the client browser.
  #
  # @param [Hash] opt                 Passed to Shrine::UploadedFile#url.
  #
  # @return [String]
  # @return [nil]                     If :file_data is blank.
  #
  def download_url: (**untyped opt) -> (String | nil)

  # The AWS S3 object for the file.
  #
  # @return [Aws::S3::Object, nil]
  #
  def s3_object: () -> (Aws::S3::Object | nil)

  # Acquire a file and upload it to storage.
  #
  # @param [String] file_path
  # @param [Hash]   opt               Passed to FileUploader::Attacher#attach
  #                                     except for:
  #
  # @option [Symbol] :meth            Calling method (for logging).
  #
  # @return [FileUploader::UploadedFile]
  #
  # == Usage Notes
  # This method is not necessary for an Upload instance which is persisted to
  # the database because Shrine adds event handlers which cause the file to be
  # copied to storage.  This method is allows this action for a "free-standing"
  # Upload instance (without needing to execute #save in order to engage Shrine
  # event handlers to copy the file to storage).
  #
  def fetch_and_upload_file: (String file_path, **untyped opt) -> FileUploader::UploadedFile

  # Options for Down#open.                                                      # NOTE: to Record::Uploadable
  #
  # @type [Hash]
  #
  # @see Down::NetHttp#initialize
  # @see Down::NetHttp#open
  # @see Down::NetHttp#create_net_http
  #
  DOWN_OPEN_OPTIONS: symHash

  # Acquire a remote file and copy it to storage.                               # NOTE: to Record::Uploadable#upload_remote
  #
  # @param [String] url
  # @param [Hash]   opt     Passed to FileUploader::Attacher#attach except for:
  #
  # @option opt [Integer] :read_retry
  #
  # @return [FileUploader::UploadedFile]
  #
  def upload_remote_file: (String url, **untyped opt) -> FileUploader::UploadedFile

  # Copy a local file to storage.
  #
  # @param [String] path
  # @param [Hash]   opt               Passed to FileUploader::Attacher#attach
  #
  # @return [FileUploader::UploadedFile]
  #
  def upload_local_file: (String url, **untyped opt) -> FileUploader::UploadedFile

  # The database column currently associated with uploaded file information
  # used by Shrine.
  #
  # @return [Symbol]
  #
  def file_data_column: () -> Symbol

  # The uploaded file currently being used with Shrine.
  #
  # @return [FileUploader::UploadedFile, nil]
  #
  def active_file: () -> (FileUploader::UploadedFile | nil)

  # The file attacher currently being used with Shrine.
  #
  # @return [FileUploader::Attacher]
  #
  def active_file_attacher: () -> FileUploader::Attacher

  # The file metadata currently being used with Shrine.
  #
  # @return [String, nil]
  #
  def active_file_data: () -> (String | nil)

  # Indicate whether the attached file is valid.
  #
  def attached_file_valid?: () -> bool

  # Make a debug output note to mark when a callback has occurred.
  #
  # @param [Symbol] type
  #
  # @return [void]
  #
  # == Usage Notes
  #
  # :before_save # should trigger:
  # Shrine::Plugins::Activerecord::AttacherMethods#activerecord_before_save
  #   Shrine::Attacher::InstanceMethods#save
  #
  # :after_commit, on: %i[create update] # should trigger:
  # Shrine::Plugins::Activerecord::AttacherMethods#activerecord_after_save
  #   Shrine::Attacher::InstanceMethods#finalize
  #     Shrine::Attacher::InstanceMethods#destroy_previous
  #     Shrine::Attacher::InstanceMethods#promote_cached
  #       Shrine::Attacher::InstanceMethods#promote
  #   Shrine::Plugins::Activerecord::AttacherMethods#activerecord_persist
  #     ActiveRecord::Persistence#save
  #
  # :after_commit, on: %i[destroy] # should trigger:
  # Shrine::Plugins::Activerecord::AttacherMethods#activerecord_after_destroy
  #   Shrine::Attacher::InstanceMethods#destroy_attached
  #     Shrine::Attacher::InstanceMethods#destroy
  #
  def note_cb: (Symbol `type`) -> void

  # Finalize a file upload by promoting the :cache file to a :store file.
  #
  # @param [Boolean] no_raise         If *true*, don't re-raise exceptions.
  # @param [Boolean] keep_cached      If *true*, don't delete the original.
  #
  # @return [FileUploader::UploadedFile, nil]
  #
  def promote_cached_file: (?no_raise: bool, ?keep_cached: bool) -> (FileUploader::UploadedFile | nil)

  # Finalize a deletion by the removing the file from :cache and/or :store.
  #
  # @param [Boolean] no_raise         If *true*, don't re-raise exceptions.
  #
  # @return [TrueClass, nil]
  #
  def delete_cached_file: (?no_raise: bool) -> (true | nil)

  private

  # Add a log message for an exception.
  #
  # @param [Exception] excp
  # @param [Symbol]    meth           Calling method.
  #
  # @return [nil]
  #
  def log_exception: (Exception excp, ?(Symbol|nil) meth) -> nil
end
