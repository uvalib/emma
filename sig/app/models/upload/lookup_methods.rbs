# Class methods for accessing Upload records.
#
module Upload::LookupMethods
  include Upload::WorkflowMethods

  extend ::Upload::LookupMethods

  # Get the Upload record by either :id or :submission_id.
  #
  # @param [String, Symbol, Integer, Hash, Upload, nil] identifier
  #
  # @return [Upload, nil]
  #
  def get_record: ((symHash|Symbol|String|Integer|Upload|nil) identifier) -> (Upload | nil)

  # Get Upload records specified by either :id or :submission_id.
  #
  # @param [Array<Upload, String, Integer, Array>] identifiers
  # @param [Hash]                                  opt  Passed to #get_relation
  #
  # @return [Array<Upload>]
  #
  def get_records: (*(symHash|Symbol|String|Integer|Upload) identifiers, **untyped opt) -> Array[Upload]

  # Local options consumed by #search_records.
  #
  # @type [Array<Symbol>]
  #
  SEARCH_RECORDS_OPTIONS: symArray

  # URL parameters that are not directly used in searches.
  #
  # @type [Array<Symbol>]
  #
  NON_SEARCH_PARAMS: symArray

  # Get the Upload records specified by either :id or :submission_id.
  #
  # Additional constraints may be supplied via *opt*.  If no *identifiers* are
  # supplied then this method is essentially an invocation of #where which
  # returns the matching records.
  #
  # @param [Array<Upload, String, Integer, Array>] identifiers
  # @param [Hash]                                  opt To #get_relation except
  #                                                    #SEARCH_RECORDS_OPTIONS:
  #
  # @option opt [Integer,nil]    :offset
  # @option opt [Integer,nil]    :limit
  # @option opt [Integer,nil]    :page
  # @option opt [Boolean]        :pages   Return array of arrays of record IDs.
  # @option opt [Boolean,Symbol] :groups  Return state group counts; if :only
  #                                        then do not return :list.
  # @option opt [String,Symbol]  :meth    Calling method for diagnostics.
  #
  # @raise [RangeError]                   If :page is not valid.
  #
  # @return [Paginator::Result]
  #
  # @see ActiveRecord::Relation#where
  #
  def search_records: (*(String|Integer|Upload|Array[String|Integer|Upload]) identifiers, **untyped opt) -> Paginator::Result

  # Generate an ActiveRecord relation for records specified by either
  # :id or :submission_id.
  #
  # Additional constraints may be supplied via *opt*.  If no *identifiers* are
  # supplied then this method is essentially an invocation of #where which
  # returns the matching records.
  #
  # @param [Array<Upload, String, Integer, Array>] items
  # @param [Hash]                                  opt  Passed to #where except
  #
  # @option opt [String,Symbol,Hash,Boolean,nil] :sort No sort if nil or false.
  # @option opt [Integer, nil]      :offset
  # @option opt [Integer, nil]      :limit
  # @option opt [String, Date]      :start_date   Earliest :updated_at.
  # @option opt [String, Date]      :end_date     Latest :updated_at.
  # @option opt [String, Date]      :after        All :updated_at after this.
  # @option opt [String, Date]      :before       All :updated_at before this.
  # @option opt [String,Symbol,nil] :meth         Caller for diagnostics.
  #
  # @return [ActiveRecord::Relation]
  #
  # @see Upload#expand_ids
  # @see ActiveRecord::Relation#where
  #
  def get_relation: (*(String|Integer|Upload|Array[String|Integer|Upload]) identifiers, **untyped opt) -> ActiveRecord::Relation

  # A table of counts for items in each state group.
  #
  # @param [ActiveRecord::Relation] relation
  #
  # @return [Hash{Symbol=>Integer}]
  #
  def group_counts: (ActiveRecord::Relation relation) -> symHash

  # Generate a Date-parseable string from a string that indicates either a day,
  # (YYYYMMDD), a month (YYYYMM), or a year (YYYY) -- with or without date
  # separator punctuation.
  #
  # @param [*] value
  #
  # @return [nil,    false, false]    If *value* is not a date string.
  # @return [String, false, false]    If *value* specifies a day.
  # @return [String, true,  false]    If *value* specifies a month.
  # @return [String, false, true]     If *value* specifies a year
  #
  def day_string
    : (String  value) -> ([String, bool, bool] | [nil, false, false])
    | (untyped value) -> [nil, false, false]

  private

  def self.included: (Module base) -> void
end
