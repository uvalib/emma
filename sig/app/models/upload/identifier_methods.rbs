# Upload record utility methods related to identifiers.
#
module Upload::IdentifierMethods
  def included: (Module base) -> void

  include Emma::Common

  extend ::Upload::IdentifierMethods

  # @type [String]                                                              # NOTE: to Record::EmmaIdentification
  SID_PREFIX: String

  # @type [(Integer,Integer)]                                                   # NOTE: to Record::EmmaIdentification
  SID_LETTERS: [Integer, Integer]

  # @type [Integer]                                                             # NOTE: to Record::EmmaIdentification
  SID_LETTER_SPAN: Integer

  # @type [String]                                                              # NOTE: to Record::EmmaIdentification
  SID_LETTER_MATCH: String

  # @type [Regexp]                                                              # NOTE: to Record::EmmaIdentification
  SID_PATTERN: Regexp

  # Extract the database ID from the given item.
  #
  # @param [Api::Record, Upload, Hash, String, Any, nil] item
  #
  # @return [String]                  Record ID (:id).
  # @return [nil]                     No valid :id specified.
  #
  def id_for: (untyped item) -> (String | nil)

  # Extract the submission ID from the given item.                              # NOTE: to Record::EmmaIdentification#sid_value
  #
  # @param [Api::Record, Upload, Hash, String, *] item
  #
  # @return [String]                  The submission ID.
  # @return [nil]                     No submission ID could be determined.
  #
  def sid_for: (untyped item) -> (String | nil)

  # Indicate whether *value* could be an EMMA submission ID.
  #
  # @param [Any] value                Must be a String.
  #
  def valid_sid?: (untyped value) -> bool

  # Create a unique submission item identifier.
  #
  # @param [Time, DateTime, nil] time
  # @param [String, Boolean] prefix   Character(s) leading the numeric portion,
  #                                     *true* for the default prefix, or
  #                                     *false* for no prefix.
  #
  # @return [String]
  #
  # @see #sid_counter
  #
  # == Implementation Notes
  # The result is a (single-character) prefix followed by 8 hexadecimal digits
  # which represent seconds into the epoch followed by a single random letter
  # from 'g' to 'z', followed by two decimal digits from "00" to "99" based on
  # a randomly initialized counter.  This arrangement allows bulk upload (which
  # occurs on a single thread) to be able to generate unique IDs in rapid
  # succession.
  #
  # Leading with a non-hex-digit guarantees that submission ID's are distinct
  # from database ID's (which are only decimal digits).
  #
  def generate_submission_id: (?(Time|DateTime|nil) time, ?prefix: bool|String) -> String

  @sid_counter: Integer

  # Counter for the trailing portion of the generated submission ID.
  #
  # This provides a per-thread value in the range 0..99 which can be used to
  # differentiate submission IDs which are generated in rapid succession (e.g.,
  # for bulk upload).
  #
  # @return [Integer]
  #
  def sid_counter: () -> Integer

  # Interpret an identifier as either an :id or :submission_id, generating a
  # field/value pair for use with #find_by or #where.
  #
  # @param [String, Symbol, Integer, Hash, Upload, nil] v
  #
  # @return [Hash{Symbol=>Integer,String,nil}] Result will have only one entry.
  #
  def id_term: ((symHash|Symbol|String|Integer|Upload|nil) v) -> Hash[Symbol,(String|Integer|nil)]

  # The database ID of the first "upload" table record.
  #
  # @return [Integer]                 If 0 then the table is empty.
  #
  def minimum_id: () -> Integer

  # The database ID of the last "upload" table record.
  #
  # @return [Integer]                 If 0 then the table is empty.
  #
  def maximum_id: () -> Integer

  # Transform a mixture of ID representations into a set of one or more
  # non-overlapping range representations followed by non-identifiers (if any).
  #
  # @param [Array<Upload, String, Integer, Array>] items
  # @param [Hash]                                  opt
  #
  # @option opt [Integer] :min_id     Default: `#minimum_id`
  # @option opt [Integer] :max_id     Default: `#maximum_id`
  #
  # @return [Array<String>]
  #
  def compact_ids: (*(String|Integer|Upload|Array[String|Integer|Upload]) items, **untyped opt) -> strArray

  # Transform a mixture of ID representations into a list of single IDs.
  #
  # Any parameter may be (or contain):
  # - A single ID as a String or Integer
  # - A set of IDs as a string of the form /\d+(,\d+)*/
  # - A range of IDs as a string of the form /\d+-\d+/
  # - A range of the form /-\d+/ is interpreted as /0-\d+/
  #
  # @param [Array<Upload, String, Integer, Array>] ids
  # @param [Hash]                                  opt
  #
  # @option opt [Integer] :min_id     Default: `#minimum_id`
  # @option opt [Integer] :max_id     Default: `#maximum_id`
  #
  # @return [Array<String>]
  #
  # == Examples
  #
  # @example Single
  #   expand_ids('123') -> %w(123)
  #
  # @example Sequence
  #   expand_ids('123,789') -> %w(123 789)
  #
  # @example Range
  #   expand_ids('123-126') -> %w(123 124 125 126)
  #
  # @example Mixed
  #   expand_ids('125,789-791,123-126') -> %w(125 789 790 791 123 124 126)
  #
  # @example Implicit range
  #   expand_ids('-3')  -> %w(1 2 3)
  #   expand_ids('*-3') -> %w(1 2 3)
  #
  # @example Open-ended range
  #   expand_ids('3-')  -> %w(3 4 5 6)
  #   expand_ids('3-*') -> %w(3 4 5 6)
  #   expand_ids('3-$') -> %w(3 4 5 6)
  #
  # @example All records
  #   expand_ids('*')   -> %w(1 2 3 4 5 6)
  #   expand_ids('-$')  -> %w(1 2 3 4 5 6)
  #   expand_ids('*-$') -> %w(1 2 3 4 5 6)
  #   expand_ids('1-$') -> %w(1 2 3 4 5 6)
  #
  # @example Last record only
  #   expand_ids('$')   -> %w(6)
  #   expand_ids('$-$') -> %w(6)
  #
  def expand_ids: (*(String|Integer|Upload|Array[String|Integer|Upload]) ids, **untyped opt) -> strArray

  # A valid ID range term for interpolation into a Regexp.                      # NOTE: to Record::Identification::RNG_TERM
  #
  # @type [String]
  #
  RANGE_TERM: String

  # Interpret an ID string as a range of IDs if possible.
  #
  # The method supports a mixture of database IDs (which are comprised only of
  # decimal digits) and submission IDs (which always start with a non-digit),
  # however a submission ID cannot be part of a range.
  #
  # @param [String, Integer, Upload] id
  # @param [Hash]                    opt
  #
  # @option opt [Integer] :min_id     Default: `#minimum_id`
  # @option opt [Integer] :max_id     Default: `#maximum_id`
  #
  # @return [Array<String>]
  #
  # @see #expand_ids
  #
  def expand_id_range: ((String|Integer|Upload) id, **untyped opt) -> strArray
end
