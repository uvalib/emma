# Address only those 'good_jobs' records initiated by LookupJob.
#
class LookupJobRecord < GoodJob::Job
  include JobMethods

  # :nocov:
  #extend JobMethods

  # The database column checked against the time of last reboot to determine
  # whether the record is defunct.
  #
  # @return [Symbol]
  #
  def self.activity_column: () -> Symbol
  def activity_column:      () -> Symbol

  # Select only the 'good_jobs' records involving this client request.
  #
  # @param [String] stream
  #
  # @return [ActiveRecord::Relation<LookupJobRecord>]
  #
  def self.for: (String stream) -> ActiveRecord::Relation

  # SQL fragment representing the lookup service in the data.
  #
  # In context, this will yield a SQL string value.
  #
  # @return [String]
  #
  def self.service: () -> String

  # SQL fragment representing the stream name in the data.
  #
  # In context, this will yield a SQL string value.
  #
  # @return [String]
  #
  def self.stream_name: () -> String

  # SQL fragment representing the items being looked up.
  #
  # In context, this will yield a SQL JSON object.
  #
  # @return [String]
  #
  def self.job_service: () -> String

  # SQL fragment representing the items being looked up.
  #
  # In context, this will yield a SQL JSON object.
  #
  # @return [String]
  #
  def self.job_items: () -> String

  # SQL fragment representing the ActiveJob options for the record.
  #
  # In context, this will yield a SQL JSON object.
  #
  # @return [String]
  #
  def self.job_options: () -> String

  # SQL fragment extracting ActiveJob arguments for the record or selecting a
  # specific argument value.
  #
  # @param [Integer, nil] index
  #
  # In context, this will yield a SQL JSON object.
  #
  # @return [String]
  #
  def self.job_arguments: (?(Integer|nil) index) -> String
end
