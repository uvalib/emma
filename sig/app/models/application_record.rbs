# Base class for database record models.
#
class ApplicationRecord < ActiveRecord::Base
  include IdMethods

  include SqlMethods

  include Emma::TypeMethods

  # A textual label for the record instance.
  #
  # @param [ApplicationRecord, nil] item  Default: self.
  #
  # @return [String, nil]
  #
  # @see Api::Shared::TitleMethods#label
  #
  def label: (?(ApplicationRecord|nil) item) -> (String | nil)

  # menu_label
  #
  # @param [ApplicationRecord, nil] item  Default: self.
  #
  # @return [String, nil]
  #
  # @see BaseDecorator::Menu#items_menu_label
  #
  def menu_label: (?(ApplicationRecord|nil) item) -> (String | nil)

  # Symbolic types for all record classes.
  #
  # @return [Array<Symbol>]
  #
  def self.model_types: () -> symArray

  # A mapping of #model_key to #model_id_key for all record classes.
  #
  # @return [Hash{Symbol=>Symbol}]
  #
  def self.model_id_key_map: () -> Hash[Symbol,Symbol]

  # A representation of the model subclass for use in URL parameters.
  #
  # @return [Symbol]
  #
  def self.model_type: () -> Symbol

  def model_type: () -> Symbol

  # A URL parameter key denoting a model instance or its values.
  #
  # @type [Symbol]
  #
  def self.model_key: () -> Symbol

  def model_key: () -> Symbol

  # A URL parameter key denoting the identity of a model instance.
  #
  # @type [Symbol]
  #
  def self.model_id_key: () -> Symbol

  def model_id_key: () -> Symbol

  # The controller for the model/model instance.
  #
  # @type [Class]
  #
  def self.model_controller: () -> Class

  def model_controller: () -> Class

  # Return the record instance indicated by the argument.
  #
  # @param [Model, Hash, String, Integer, nil] v
  #
  # @return [ApplicationRecord, nil]
  #
  def self.instance_for: (Model|symHash|String|Integer|nil v) -> (ApplicationRecord | nil)

  # This is a convenience so that model classes can provide lists for use with
  # menus in the same way that EnumType#pairs does.
  #
  # @param [Symbol, String, Hash, Array, nil] sort      Default: :id
  # @param [Hash, nil]                        prepend   Added leading pair(s).
  # @param [Hash, nil]                        append    Added following pairs.
  # @param [Hash]                             opt       Terms passed to #where.
  #
  # @return [Hash]
  #
  # @see EnumType::Methods#pairs
  #
  def self.pairs: (?sort: anyHash|Symbol|String|Array[Symbol|String]|nil, ?prepend: anyHash|nil, ?append: anyHash|nil, **untyped opt) ?{ (ApplicationRecord) -> [untyped,untyped] } -> Hash[String,String]
end
