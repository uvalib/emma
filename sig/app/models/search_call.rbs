# Model for a specific search call event instance.
#
class SearchCall < ApplicationRecord
  include Emma::Debug

  include Model

  include Record

  include Record::Assignable

  include Record::Searchable

  include Record::Sortable

  # :nocov:
  #extend SqlMethods::ClassMethods

  # Each JSON-structured column of 'search_calls'.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  JSON_COLUMN_CONFIG: Hash[Symbol,symHash]

  # Database fields holding attributes of the search that was performed.
  #
  # @type [Array<Symbol>]
  #
  JSON_COLUMNS: symArray

  # JSON fields defined for each JSON column.
  #
  # @type [Hash{Symbol=>Array<Symbol>}]
  #
  JSON_COLUMN_FIELDS: Hash[Symbol,symArray]

  # JSON sub-field parameters for each JSON column.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  JSON_COLUMN_PARAMETERS: Hash[Symbol,symHash]

  # URL parameters which map into attributes.
  #
  # @type [Hash{Symbol=>Array<Symbol>}]
  #
  PARAMETER_MAP: Hash[Symbol,symArray]

  # Create a new instance.
  #
  # @param [SearchCall, Hash, nil] attr
  #
  # @note - for dev traceability
  #
  def initialize: (?(SearchCall|anyHash|nil) attr) ?{ () -> untyped } -> void

  # The user associated with this record.
  #
  # @return [Integer, nil]
  #
  def user_id: () -> (Integer | nil)

  # The organization associated with this record.
  #
  # @return [Integer, nil]
  #
  def org_id: () -> (Integer | nil)

  def uid: (?untyped item) -> (Integer | nil)

  def oid: (?untyped item) -> (Integer | nil)

  def self.for_user: (?untyped user, **untyped opt) -> ActiveRecord::Relation

  def self.for_org: (?untyped org, **untyped opt) -> ActiveRecord::Relation

  # Produce a value that can be used for SearchController URL parameters.
  #
  # @return [Hash]
  #
  def as_search_parameters: () -> symHash

  # Update database fields, including the structured contents of JSON fields.
  #
  # @param [SearchCall, Hash, ActionController::Parameters, nil] attr
  #
  # @return [void]
  #
  def assign_attributes: ((SearchCall|prmHash|nil) attr) -> void

  # Called to prepare values to be used for assignment to record attributes.
  #
  # @param [SearchCall, Hash, ActionController::Parameters, nil] attr
  # @param [Hash]                                                opt
  #
  # @return [Hash{Symbol=>*}]
  #
  # @see #map_parameters
  #
  def normalize_attributes: ((SearchCall|prmHash|nil) attr, **untyped opt) -> symHash

  # For now a no-op that just returns *attr*.
  #
  # @param [Hash] attr
  #
  # @return [Hash]
  #
  def normalize_fields: (symHash attr, **untyped _ignored) -> symHash

  # Transform URL parameters into attribute settings.
  #
  # @param [ActionController::Parameters, Hash, nil] params
  #
  # @return [Hash{Symbol=>String,Array<String>}]
  #
  def map_parameters: ((prmHash|nil) params) -> Hash[Symbol,(String|strArray)]

  # Extract a 'users' table index from the given item.
  #
  # @param [User, String, Numeric] src
  #
  # @return [String]
  # @return [nil]
  #
  def get_user_id: ((User|String|Numeric) src) -> (String | nil)

  # Generate a :record attribute value from the given item.
  #
  # @param [Api::Message, Hash, Array, Numeric, String] src
  #
  # @return [Hash{Symbol=>Integer}]
  #
  def get_counts: ((Api::Message|String|Numeric|symHash|anyArray) src) -> Hash[Symbol,Integer]

  # @see SqlMethods#sql_extended_table
  #
  def sql_extended_table: (?(String|symHash|nil) extra, **untyped opt) -> String

  # @see SqlMethods#sql_extended_table
  #
  def self.sql_extended_table: (?(String|symHash|nil) extra, **untyped opt) -> String

  # @see SqlMethods#sql_where_clause
  #
  def sql_where_clause: (**untyped opt) -> String

  # @see SqlMethods#sql_where_clause
  #
  def self.sql_where_clause: (**untyped opt) -> String
end
