# An 'actions' table record which is used by a (possibly asynchronous) process
# to track execution of a specific action involving an Entry.
#
# @!attribute [r]  phase_id
#   The workflow instance this action is a part of.
#
# @!attribute [r]  user_id
#   The user who initiated the action.
#
# @!attribute [rw] command
#   Control command to be honored by the workflow process using this instance.
#
# @!attribute [r]  type
#   Action STI subclass.
#
# @!attribute [rw] state
#   Action::*.state_values
#
# @!attribute [rw] condition
#   Action.condition_values
#
# @!attribute [rw] action
#   Current action in progress.
#
# @!attribute [rw] report
#   Latest error message from action.
#
# @!attribute [rw] retries
#   Current retry; 0 for initial execution.
#
# @!attribute [rw] emma_data
#   JSON metadata extracted from the file.
#   (Action::Store only)
#
# @!attribute [rw] file_data
#   Shrine metadata for the file.
#   (Action::Store only)
#
# @!attribute [rw] file_source
#   URI origin of the file (unless uploaded directly).
#   (Action::Store only)
#   TODO: probably want to push this into :file_data
#
# @!attribute [rw] checksum
#   File checksum (for detecting file change)
#   (Action::Store only)
#   TODO: probably want to push this into :file_data
#
# @!attribute [r]  created_at
#   Time of record creation.
#
# @!attribute [rw] updated_at
#   Last time record was modified.
#
class Action < ApplicationRecord
  DESTRUCTIVE_TESTING: bool

  include Model

  include Record

  include Record::Sti::Root

  include Record::Bulk::Root

  include Record::Assignable

  include Record::Authorizable

  include Record::Controllable

  include Record::Describable

  include Record::Reportable

  include Record::Submittable

  include Record::Updatable

  include Record::Testing

  include Record::Debugging

  # :nocov:
  include Record::Controllable::CommandMethods

  include Record::Controllable::ConditionMethods

  extend Record::Describable::ClassMethods

  # Record::Submittable methods for IngestService operations.
  #
  # @type [Hash{Symbol=>Symbol,Proc}]
  #
  INGEST_METHODS: Hash[Symbol,(Symbol|Proc)]

  # Invoke the given IngestService method.
  #
  # @param [Symbol]                    meth         Service method.
  # @param [Hash{Symbol=>Symbol,Proc}] method_map
  #
  # @return [Boolean]                 True if there were no errors.
  #
  def ingest_action: (Symbol meth, ?method_map: Hash[Symbol,(Symbol|Proc)]) -> bool

  # Record::Submittable methods for AwsS3Service operations.
  #
  # @type [Hash{Symbol=>Symbol,Proc}]
  #
  REPOSITORY_METHODS: Hash[Symbol,(Symbol|Proc)]

  # Invoke the given AwsS3Service method.
  #
  # @param [Symbol]                    meth         Service method.
  # @param [Hash{Symbol=>Symbol,Proc}] method_map
  #
  # @return [Boolean]                 True if there were no errors.
  #
  def member_repository_action: (Symbol meth, ?method_map: Hash[Symbol,(Symbol|Proc)]) -> bool

  # external_action
  #
  # @return [Boolean]                 True if there were no errors.
  #
  # @yield [target]
  # @yieldparam [Phase, Action] target
  # @yieldreturn [ExecReport, Hash, String, Array<String>, Array<FlashPart>]
  #
  def external_action: () { (Phase|Action target) -> errorArgs } -> bool

  # A textual description of the type of the Model instance.
  #
  # @param [Action] action
  # @param [Hash]  opt
  #
  # @return [String]
  #
  def self.describe_type: (Action action, **untyped opt) -> String

  # A textual description of the status of the Action instance.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @option opt [String]              :note
  # @option opt [Symbol, String, nil] :state  If *nil*, do not append state.
  # @option opt [Symbol, String]      :type   Default: `action.type_value`
  #
  # @return [String]
  #
  def self.describe_status: (Action action, **untyped opt) -> String

  def show: () -> nil
end
