# == Phase::BulkOperation
#
# Base class for phases that represent bulk operations.
#
# @see file:config/locales/state_table.en.yml *en.emma.state_table.phase.bulk_operation*
#
# @!method started?
# @!method running?
# @!method pausing?
# @!method resuming?
# @!method restarting?
# @!method completed?
# @!method canceling?
# @!method canceled?
# @!method aborted?
#
# @!method started!
# @!method running!
# @!method pausing!
# @!method resuming!
# @!method restarting!
# @!method completed!
# @!method canceling!
# @!method canceled!
# @!method aborted!
#
class Phase::BulkOperation < Phase
  include Record::Bulk::Operation

  include Record::Steppable

  # Source of the file to be uploaded.                                          # NOTE: from Upload::BulkMethods
  #
  # @return [String, nil]
  #
  attr_reader manifest_path: String | nil

  # Source of the file to be uploaded.
  #
  # @return [Array, nil]
  #
  attr_reader manifest: strArray| nil

  # Create a new instance.
  #
  # @param [Hash, ActionController::Parameters, Model, nil] attr
  # @param [Hash, nil]                                      opt
  # @param [Proc, nil]                                      block
  #
  # @option attr [String|Array] :manifest   If *attr* is a Hash or Hash-like.
  # @option opt  [String|Array] :manifest   If *opt* hash is provided.
  #
  def initialize: (?(Model|prmHash)? attr, ?(symHash|nil) opt) { () -> untyped } -> void

  # The #type_value of BulkPart elements associated with this BulkOperation.
  #
  # @return [Symbol, nil]
  #
  def base_type_value: () -> (Symbol | nil)

  # The #type_value of BulkPart elements associated with this BulkOperation.
  #
  # @return [Symbol, nil]
  #
  def self.base_type_value: () -> (Symbol | nil)

  # Source of the file to be uploaded.
  #
  # @return [Array]
  #
  def manifest: () -> strArray

  # load_manifest
  #
  # @param [String, Array, nil] data
  #
  # @return [Array]
  #
  def load_manifest: (?(String|strArray)? data) -> strArray

  # Perform bulk operation.
  #
  # @param [Hash] opt
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  # @see Record::Controllable#COMMAND_TABLE[:run]
  #
  def run!: (**untyped opt) -> (bool | nil)

  # Pause running action(s).
  #
  # @param [Hash] opt
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  # @see Record::Controllable#COMMAND_TABLE[:pause]
  #
  def pause!: (**untyped opt) -> (bool | nil)

  # Resume paused action(s).
  #
  # @param [Hash] opt
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  # @see Record::Controllable#COMMAND_TABLE[:resume]
  #
  def resume!: (**untyped opt) -> (bool | nil)

  # Retry failed action(s).
  #
  # @param [Hash] opt
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  # @see Record::Controllable#COMMAND_TABLE[:restart]
  #
  def restart!: (**untyped opt) -> (bool | nil)

  # Transition to a previous state unconditionally.
  #
  # @param [Symbol, String] prev_state
  #
  # @return [nil]
  #
  def revert_to!: (Symbol|String prev_state) -> nil

  # The subclass-specific operation(s) performed when running.
  #
  # @param [Symbol, Any] prev_state
  # @param [Hash]        opt
  #
  # @return [Boolean]
  #
  def run_sequence: (?(untyped|nil) prev_state, **untyped opt) -> bool

  # The operation(s) performed when pausing.
  #
  # @param [Symbol, Any] prev_state
  # @param [Hash]        opt
  #
  # @return [Boolean]
  #
  def pause_sequence: (?(untyped|nil) prev_state, **untyped opt) -> bool

  # The operation(s) performed when resuming.
  #
  # @param [Symbol, Any] prev_state
  # @param [Hash]        opt
  #
  # @return [Boolean]
  #
  def resume_sequence: (?(untyped|nil) prev_state, **untyped opt) -> bool

  # The operation(s) performed when restarting.
  #
  # @param [Symbol, Any] prev_state
  # @param [Hash]        opt
  #
  # @return [Boolean]
  #
  def restart_sequence: (?(untyped|nil) prev_state, **untyped opt) -> bool

  # A textual description of the type of the Model instance.
  #
  # @param [Phase, nil] phase
  # @param [Hash]       opt
  #
  # @return [String]
  #
  def self.describe_type: (Phase? phase, **untyped opt) -> String

  # A textual description of the status of the given Phase instance.
  #
  # @param [Phase] phase
  # @param [Hash]  opt
  #
  # @return [String]
  #
  def self.describe_status: (Phase phase, **untyped opt) -> String
end
