# Review workflow tracking record.
#
# @see file:config/locales/state_table.en.yml *en.emma.state_table.phase.review*
#
# @!method started?
# @!method scheduling?
# @!method assigned?
# @!method reviewing?
# @!method rejected?
# @!method approved?
# @!method canceling?
# @!method canceled?
# @!method aborted?
#
# @!method started!
# @!method scheduling!
# @!method assigned!
# @!method reviewing!
# @!method rejected!
# @!method approved!
# @!method canceling!
# @!method canceled!
# @!method aborted!
#
class Phase::Review < Phase::Single
  include Record::Sti::Leaf

  include Record::Steppable

  # @private
  CLASS: Class

  # schedule!
  #
  # @param [Hash] opt
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def schedule!: (**untyped opt) -> (bool | nil)

  # Method called from the action launched by #schedule!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def schedule_cb: (?(Action|nil) action, **untyped opt) -> bool

  # review!
  #
  # @param [Hash] opt
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def review!: (**untyped opt) -> (bool | nil)

  # Method called from the action launched by #review!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def review_cb: (?(Action|nil) action, **untyped opt) -> bool

  # cancel!
  #
  # @param [Hash] opt
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def cancel!: (**untyped opt) -> (bool | nil)

  # Method called from the action launched by #cancel!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def cancel_cb: (?(Action|nil) action, **untyped opt) -> bool

  # Reviewer rejects (sends back) submission.
  #
  # @param [String, nil] comments     Passed to #terminate_phase!
  # @param [Hash]        opt          Passed to #terminate_phase!
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def reject!: (?(String|nil) comments, **untyped opt) -> (bool | nil)

  # Method called from the action launched by #reject!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def reject_cb: (?(Action|nil) action, **untyped opt) -> bool

  # Reviewer approves (sends forward) submission.
  #
  # @param [String, nil] comments     Passed to #terminate_phase!
  # @param [Hash]        opt          Passed to #terminate_phase!
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def approve!: (?(String|nil) comments, **untyped opt) -> (bool | nil)

  # Method called from the action launched by #approve!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def approve_cb: (?(Action|nil) action, **untyped opt) -> bool

  # Complete the review phase.
  #
  # @param [Symbol, String] final_state
  # @param [String, nil]    comments
  # @param [Hash]           opt
  #
  # @option opt [Boolean] :async      If *true* run callback asynchronously.
  # @option opt [Symbol]  :meth       Name of caller (for logging).
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def terminate_phase!: ((Symbol|String) final_state, ?(String|nil) comments, **untyped opt) -> (bool | nil)

  # A textual description of the type of the Model instance.
  #
  # @return [String]
  #
  def self.describe_type: (*untyped, **untyped) ?{ () -> untyped } -> String

  # A textual description of the status of the given Phase instance. # TODO: I18n
  #
  # @param [Phase] phase
  # @param [Hash]  opt
  #
  # @option opt [Symbol] :state       Override #state_value.
  #
  # @return [String]
  #
  def self.describe_status: (Phase phase, **untyped opt) -> String
end
