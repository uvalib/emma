# Entry creation workflow tracking record.
#
# @see file:config/locales/state_table.en.yml *en.emma.state_table.phase.create*
#
# @!method started?
# @!method uploading?
# @!method storing?
# @!method indexing?
# @!method indexed?
# @!method submitting?
# @!method submitted?
# @!method canceling?
# @!method canceled?
# @!method aborted?
#
# @!method started!
# @!method uploading!
# @!method storing!
# @!method indexing!
# @!method indexed!
# @!method submitting!
# @!method submitted!
# @!method canceling!
# @!method canceled!
# @!method aborted!
#
class Phase::Create < Phase::BulkPart
  include Record::Sti::Leaf

  include Record::EmmaData

  include Record::Steppable

  include Record::Uploadable

  # Upload file to AWS S3 Shrine :cache.
  #
  # @param [ActionDispatch::Request, Hash, nil] request
  # @param [Hash] opt                 Passed to Action::Store#update! except:
  #
  # @option opt [Boolean] :async      Always ignored.
  #
  # @raise [ActiveRecord::RecordInvalid]    Action record creation failed.
  # @raise [ActiveRecord::RecordNotSaved]   Action record creation halted.
  #
  # @return [Array<(Integer, Hash{String=>Any}, Array<String>)>]
  #
  # @see Action::Store#upload!
  #
  # == Usage Notes
  # Always performed synchronously.
  #
  def upload!: (symHash|ActionDispatch::Request|nil request, **untyped opt) -> httpResult

  # Method called from the action launched by #upload!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  # == Usage Notes
  # Will be performed synchronously by Action::Store#upload!.
  #
  def upload_cb: (?Action? action, **untyped opt) -> bool

  # Move uploaded file from Shrine :cache to Shrine :store.
  #
  # @param [Hash] opt                 Passed to Action::Store#promote!
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def promote!: (**untyped opt) -> (bool | nil)

  # Method called from the action launched by #promote!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def promote_cb: (?Action? action, **untyped opt) -> bool

  # Create an index entry for this item.
  #
  # @param [Hash] opt                 Passed to Action::Index#index!
  #
  # @raise [ActiveRecord::RecordInvalid]    Action record creation failed.
  # @raise [ActiveRecord::RecordNotSaved]   Action record creation halted.
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def index!: (**untyped opt) -> (bool | nil)

  # Method called from the action launched by #index!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def index_cb: (?Action? action, **untyped opt) -> bool

  # Send a submission package to a member repository.
  #
  # @param [Hash] opt                 Passed to Action::Queue#submit!
  #
  # @raise [ActiveRecord::RecordInvalid]    Action record creation failed.
  # @raise [ActiveRecord::RecordNotSaved]   Action record creation halted.
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def submit!: (**untyped opt) -> (bool | nil)

  # Method called from the action launched by #submit!.
  #
  # @param [Action] action
  # @param [Hash]   opt
  #
  # @return [Boolean]   *false* if the callback's callback failed to process.
  #
  def submit_cb: (?Action? action, **untyped opt) -> bool

  # Run through the step(s) needed to complete a new submission.
  #
  # @param [Hash] opt                 Values for record attributes except for:
  #
  # @option opt [Boolean, nil] :async
  # @option opt [Symbol]       :meth
  #
  # @raise [ActiveRecord::RecordInvalid]    Phase record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Phase record update halted.
  #
  # @return [nil]       Failed to transition record to the new state.
  # @return [Boolean]   *false* if the action could not be processed.
  #
  def complete!: (**untyped opt) -> (bool | nil)

  # Generate and persist an instance that will later be associated with the
  # creation of a new Entry.
  #
  # @param [Hash] opt                       Values for record attributes.
  #
  # @raise [ActiveRecord::RecordInvalid]    Update failed due to validations.
  # @raise [ActiveRecord::RecordNotSaved]   Update halted due to callbacks.
  #
  # @return [Phase::Create]
  #
  def self.start_submission: (**untyped opt) -> Phase::Create

  # Update the instance record and complete its workflow steps.
  #
  # @param [Hash] opt                 Passed to #complete!
  #
  # @raise [Record::StatementInvalid]       If submission ID was invalid.
  # @raise [Record::NotFound]               If Phase record not found.
  # @raise [Record::SubmitError]            Invalid workflow transition.
  # @raise [ActiveRecord::RecordInvalid]    Phase record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Phase record update halted.
  #
  # @return [Phase::Create]
  #
  def self.finish_submission: (**untyped opt) -> Phase::Create

  # Get the latest matching Phase::Create record.  Although there should only
  # be one, if there are multiple, the record with the latest creation date is
  # selected.
  #
  # @param [Model,Hash,String,Symbol,nil] sid
  # @param [Hash]                         opt   Passed to Phase#latest_for_sid
  #
  # @raise [Record::StatementInvalid]   If *sid*/opt[:submission_id] invalid.
  # @raise [Record::NotFound]           If record not found.
  #
  # @return [Phase::Create]
  #
  def self.latest_for_sid: (?(symHash|String|Symbol|Model)? sid, **untyped opt) -> Phase::Create

  # A textual description of the type of the Model instance.
  #
  # @param [Phase] phase
  # @param [Hash]  opt
  #
  # @return [String]
  #
  def self.describe_type: (Phase phase, **untyped opt) -> String

  # A textual description of the status of the given Phase instance.
  #
  # @param [Phase] phase
  # @param [Hash]  opt
  #
  # @return [String]
  #
  def self.describe_status: (Phase phase, **untyped opt) -> String
end
