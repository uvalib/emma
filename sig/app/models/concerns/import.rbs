# Common bulk import methods.
#
module Import
  include Emma::Common

  # The prefix applied to imported field names that have not otherwise been
  # assigned a field name to be used within :emma_data.
  #
  # @type [String]
  #
  DEFAULT_NAME_PREFIX: String

  # Convert imported data fields.
  #
  # @param [Hash] fields
  #
  # @return [Hash]
  #
  # === Usage Notes
  # The caller should take care to ensure that *fields* only contains import
  # fields; if database attributes, or :file_data/:emma_data fields appear here
  # they will be treated as import fields to which the default transformation
  # will be applied.
  #
  def translate_fields: (anyHash fields) -> symHash

  # Import schema.
  #
  # @return [Hash]
  #
  def schema: () -> symHash

  # String prepended to an imported data key which turns it into a key that can
  # be included in data storage.
  #
  # @return [String]
  #
  def name_prefix: () -> String

  # Translate an import field name to a destination field name.
  #
  # @param [Symbol, String] k
  # @param [String]         prefix
  #
  # @return [Symbol]
  #
  def default_name: ((Symbol|String) k, ?String prefix) -> Symbol

  # Transform a value into a name that can be used as a symbolized hash key.
  #
  # @param [*] v
  #
  # @return [Symbol]
  #
  def hash_key: (untyped v) -> Symbol

  # Transform a data item.
  #
  # Strings containing ";" are interpreted as multi-valued items; these are
  # transformed into an array.
  #
  # Arrays without multiple items are transformed into strings.
  #
  # @param [*] v
  #
  # @return [Any, nil]
  #
  def values
    :     (true     v) -> true
    |     (false    v) -> nil
    |     (Integer  v) -> Integer
    |     (String   v) -> (strArray|String|nil)
    |     (strArray v) -> (strArray|String|nil)
    |     (anyArray v) -> (anyArray|untyped|nil)
    | [T] (T        v) -> (T|nil)

  # Transform a data item into an array unconditionally.
  #
  # @param [*] v
  #
  # @return [Array]
  #
  # @yield [element] Allow replacement of each array element.
  # @yieldparam [String] element
  # @yieldreturn [String] The replacement element.
  #
  def array_value: (untyped v) ?{ (untyped element) -> untyped } -> anyArray

  # Transform a data item into a string.
  #
  # @param [*]      v
  # @param [String] join              Connector if *v* is an array.  If *join*
  #                                     is set to *nil* then only the first
  #                                     array element is selected.
  # @param [Boolean] first            If *true* then only the first array
  #                                     element is selected.
  #
  # @return [String, nil]
  #
  def string_value: (untyped v, ?join: String, ?first: bool) -> (String | nil)

  # Transform a data item into a counting number (1 or greater).
  #
  # @param [*] v
  #
  # @return [Integer, nil]
  #
  def ordinal_value: (untyped v) -> (Integer | nil)

  # Transform a date data item into a four-digit year.
  #
  # @param [String] v
  #
  # @return [String, nil]
  #
  def year_value: (untyped v) -> (String | nil)

  # Transform a data item into one or more three-character ISO 639 values.
  #
  # @param [*] v
  #
  # @return [Array<String>]
  #
  def language_values: (untyped v) -> strArray

  # Transform a data item into one or more DOI identifiers.
  #
  # @param [*] v
  #
  # @return [Array<String>]
  #
  def doi_values: (untyped v) -> strArray

  # Transform a data item into one or more ISBN identifiers.
  #
  # @param [*] v
  #
  # @return [Array<String>]
  #
  def isbn_values: (untyped v) -> strArray

  # Transform a data item into one or more ISSN identifiers.
  #
  # @param [*] v
  #
  # @return [Array<String>]
  #
  def issn_values: (untyped v) -> strArray

  # Transform a data item into one or more LCCN identifiers.
  #
  # @param [*] v
  #
  # @return [Array<String>]
  #
  def lccn_values: (untyped v) -> strArray

  # Transform a data item into one or more identifiers of the form expected by
  # :dc_identifier and :dc_relation.
  #
  # @param [*]             v
  # @param [String, #to_s] prefix
  #
  # @return [Array<String>]
  #
  def identifier_values: (untyped v, (String|_ToStr) prefix) -> strArray

  # Transform a data item into an EnumType value.
  #
  # @param [*]     v
  # @param [Class] type               A subclass of EnumType.
  #
  # @return [String, nil]
  #
  def enum_value: (untyped v, Class `type`) -> (String | nil)

  # Transform a data item into an array of EnumType values.
  #
  # @param [*]     v
  # @param [Class] type               A subclass of EnumType.
  #
  # @return [Array<String>]
  #
  def enum_values: (untyped v, Class `type`) -> strArray

  # Referenced in the schema as a translation target that indicates that the
  # associated import field should be skipped and not included in data stored
  # in the record.
  #
  # @param [*] k                      Imported field being skipped.
  # @param [*] v
  #
  # @return [Array<(nil,nil)>]
  #
  def skip: (?untyped k, ?untyped v) -> [nil, nil]

  # Default transformation.
  #
  # @param [Symbol, String] k
  # @param [*]              v
  # @param [String]         prefix
  #
  # @return [Array<(Symbol,*)>]
  #
  def default: (untyped k, untyped v, ?String prefix) -> [Symbol, untyped]

  # Normalize single-element arrays to scalar values.
  #
  # @param [Hash] fields
  #
  # @return [Hash]
  #
  def normalize_results!: (symHash fields) -> symHash

  # Apply the appropriate method for the given import field.
  #
  # @param [Symbol, String] k         Import field name.
  # @param [*]              v         Import field value.
  #
  # @return [Array<(Symbol,*)>]
  #
  def resolve: ((Symbol|String) k, untyped v) -> [Symbol, untyped]

  # get_importer
  #
  # @param [Module, String, Symbol] mod
  #
  # @return [Module, nil]
  #
  def self.get_importer: ((Module|String|Symbol) mod) -> (Module | nil)

  include Emma::Debug::OutputMethods

  # __debug_import
  #
  # @param [String, Symbol] label
  # @param [*]              k
  # @param [*]              v
  #
  # @return [nil]
  #
  def __debug_import: ((String|Symbol) label, untyped k, untyped v) -> nil
end
