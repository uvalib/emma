# Encapsulation of pagination parameters.
#
class Paginator
  include ActionController::UrlFor

  include Emma::Common

  include ParamsHelper

  # Core URL parameters involved in pagination.
  #
  # @type [Array<Symbol>]
  #
  OFFSET_KEYS: symArray

  # URL parameters involved in pagination.
  #
  # @type [Array<Symbol>]
  #
  PAGE_KEYS: symArray

  # URL parameters that are search-related but "out-of-band".
  #
  # @type [Array<Symbol>]
  #
  PAGE_OFFSET_KEYS: symArray

  # URL parameters that are search-related but "out-of-band" including :limit.
  #
  # @type [Array<Symbol>]
  #
  PAGINATION_KEYS: symArray

  # URL parameters that are not directly used in searches.
  #
  # @type [Array<Symbol>]
  #
  NON_SEARCH_KEYS: symArray

  # URL parameters involved in form submission.
  #
  # @type [Array<Symbol>]
  #
  FORM_KEYS: symArray

  # POST/PUT/PATCH parameters from the entry form that are not relevant to the
  # create/update of a model instance.
  #
  # @type [Array<Symbol>]
  #
  IGNORED_FORM_KEYS: symArray

  # Pagination data values.
  #
  # This does not include :page_items so that value can be handled separately
  # for diagnostic reporting.
  #
  class Properties < ::Hash[Symbol,untyped]
    # Property names relating to the range of index values on the page.
    #
    # @type [Array<Symbol>]
    #
    INDEX: symArray

    # Property names relating to cursors for field position per page item.
    #
    # @type [Array<Symbol>]
    #
    POSITION: symArray

    # Empty copy of data values in the preferred order (for debug output).
    #
    # @type [Hash{Symbol=>*}]
    #
    TEMPLATE: symHash

    def initialize: (?(symHash|nil) values) -> void

    # All property names.
    #
    # @return [Array<Symbol>]
    #
    def self.keys: () -> symArray
  end

  attr_reader context: symHash

  attr_reader initial_parameters: symHash

  # Create a new instance.
  #
  # @param [ApplicationController, nil] ctrlr
  # @param [ActionDispatch::Request]    request
  # @param [Hash]                       opt         From #request_parameters
  #
  def initialize
    : (ApplicationController ctrlr, ?request: ActionDispatch::Request|nil, **untyped opt) -> void
    | (?nil                  ctrlr,  request: ActionDispatch::Request,     **untyped opt) -> void

  # Finish setting of pagination values based on the result list and original
  # URL parameters.
  #
  # @param [ActiveRecord::Relation, Hash, nil] values
  # @param [Hash]                              opt
  #
  # @return [void]
  #
  def finalize: (?(ActiveRecord::Relation|symHash|nil) values, **untyped opt) -> void

  # Modify the usual result so that the dump of @page_items is replaced with
  # a count of each type of element it contains.
  #
  # @return [String]
  #
  def inspect: () -> String

  # Originating request
  #
  # @note Defined to support use of external routing methods like #url_for.
  #
  # @return [ActionDispatch::Request]
  #
  def request: () -> ActionDispatch::Request

  # Originating environment.
  #
  # @note Defined to support use of external routing methods like #url_for.
  #
  # @return [Hash{String=>*}]
  #
  def env: () -> strHash

  module PageMethods
    # Configured results per page for the given controller/action.
    #
    # @param [Symbol, String, Hash, nil] c   Controller
    # @param [Symbol, String, nil]       a   Action
    #
    # @return [Integer]
    #
    def get_page_size
      : (symHash)                                        -> Integer
      | (?(Symbol|String|nil) c, ?(Symbol|String|nil) a) -> Integer

    def self.included: (Module base) -> void
  end

  module ListMethods
    # Determine the number of records reported by an object.
    #
    # @param [Paginator, Api::Record, Model, Array, Hash, *] value
    # @param [Integer]                                       default
    #
    # @return [Integer]               Zero indicates unknown count.
    #
    def record_count: (?untyped value, ?default: Integer) -> Integer

    # Extract the number of "items" reported by an object.
    #
    # (For aggregate items, this is the number of aggregates as opposed to the
    # number of records from which they are composed.)
    #
    # @param [Paginator, Api::Record, Model, Array, Hash, *] value
    # @param [Integer]                                       default
    #
    # @return [Integer]               Zero indicates unknown count.
    #
    def item_count: (?untyped value, ?default: Integer) -> Integer

    def self.included: (Module base) -> void
  end

  module PathMethods
    # Interpret *value* as a URL path or a JavaScript action.
    #
    # @param [String, Symbol, nil] value  One of [:back, :forward, :go].
    # @param [Integer, nil]   page        To #page_history for *action* :go.
    #
    # @return [String]                    A value usable with 'href'.
    # @return [nil]                       If *value* is invalid.
    #
    def page_path: ((String|Symbol|nil) value, ?(Integer|nil) page) -> (String | nil)

    # A value to use in place of a path in order to engage browser history.
    #
    # @param [String, Symbol] action    One of [:back, :forward, :go].
    # @param [Integer, nil]   page      History page if *directive* is :go.
    #
    # @return [String]
    #
    def page_history: ((String|Symbol) action, ?(Integer|nil) page) -> String

    def self.included: (Module base) -> void
  end

  include PageMethods

  include ListMethods

  include PathMethods

  extend PageMethods

  extend ListMethods

  extend PathMethods

  # Current results per page for the given controller/action (unless an
  # argument is present).
  #
  # @param [Symbol, String, Hash, nil] c   Controller
  # @param [Symbol, String, nil]       a   Action
  #
  # @return [Integer]
  #
  def get_page_size
    : (symHash)                                        -> Integer
    | (?(Symbol|String|nil) c, ?(Symbol|String|nil) a) -> Integer

  # Determine the number of records reported by an object.
  #
  # @param [Paginator, Api::Record, Model, Array, Hash, *] value  Default: self
  # @param [Hash]                                          opt
  #
  # @return [Integer]               Zero indicates unknown count.
  #
  def record_count: (?untyped value, **untyped opt) -> Integer

  # Extract the number of "items" reported by an object.
  #
  # @param [Paginator, Api::Record, Model, Array, Hash, *] value  Default: self
  # @param [Hash]                                          opt
  #
  # @return [Integer]               Zero indicates unknown count.
  #
  def item_count: (?untyped value, **untyped opt) -> Integer

  # Relation which generates the indicated page of records.
  #
  # @return [ActiveRecord::Relation, nil]
  #
  def page_source: () -> (ActiveRecord::Relation | nil)

  # Set the relation which generates the indicated page of records.
  #
  # @param [ActiveRecord::Relation, Array, nil] src
  #
  # @return [ActiveRecord::Relation, nil]
  #
  def page_source=
    : (ActiveRecord::Relation src) -> ActiveRecord::Relation
    | (anyArray|nil           src) -> nil

  @page_source: ActiveRecord::Relation | nil

  # Get the current page of result items.
  #
  # @return [Array]
  #
  def page_items: () -> anyArray

  # Set the current page of result items.
  #
  # @param [ActiveRecord::Relation, Array, nil] values
  #
  # @return [Array, nil]
  #
  def page_items=
    : (anyArray                   src) -> anyArray
    | (ActiveRecord::Relation|nil src) -> nil

  @page_items: anyArray | nil

  # property
  #
  # @return [Paginator::Properties]
  #
  def property: () -> Paginator::Properties

  @property: Paginator::Properties

  # Induce all properties to acquire a value (typically for diagnostics).
  #
  # @return [Hash]
  #
  def current_properties: () -> symHash

  # Default results per page for the current controller/action.
  #
  # @return [Integer]
  #
  def default_page_size: () -> Integer

  @default_page_size: Integer

  # The number of records that are (or will be) produced.
  #
  # @return [Integer]
  #
  def size: () -> Integer

  # Fetch records from the source.
  #
  # @param [Hash] opt
  #
  # @return [Array<ActiveRecord::Base>, nil]
  #
  def source_page_items: (**untyped opt) -> (Array[ActiveRecord::Base] | nil)

  # Generate a relation.
  #
  # @param [Hash] opt
  #
  # @return [ActiveRecord::Relation, nil]
  #
  def source_relation: (**untyped opt) -> (ActiveRecord::Relation | nil)

  # Get the current page number.
  #
  # @return [Integer]
  #
  def page_number: () -> Integer

  # Set the current page number.
  #
  # @param [Integer, nil] value
  #
  # @return [Integer]
  #
  def page_number=: ((Integer|nil) value) -> Integer

  # Get the number of results per page.
  #
  # @return [Integer]
  #
  def page_size: () -> Integer

  # Set the number of results per page.
  #
  # @param [Integer, nil] value
  #
  # @return [Integer]
  #
  def page_size=: ((Integer|nil) value) -> Integer

  # Get the offset of the current page into the total set of results.
  #
  # @return [Integer]
  #
  def page_offset: () -> Integer

  # Set the offset of the current page into the total set of results.
  #
  # @param [Integer, nil] value
  #
  # @return [Integer]
  #
  def page_offset=: ((Integer|nil) value) -> Integer

  # Get the total results count if known.
  #
  # @return [Integer, nil]
  #
  def total_items: () -> (Integer | nil)

  # Set the total results count.
  #
  # @param [Integer, nil] value
  #
  # @return [Integer, nil]
  #
  def total_items=: ((Integer|nil) value) -> (Integer | nil)

  # Get the number of records returned from the API for this page.
  #
  # @return [Integer, nil]
  #
  def page_records: () -> (Integer | nil)

  # Set the number of records returned from the API for this page.
  #
  # @param [Integer, nil] value
  #
  # @return [Integer, nil]
  #
  def page_records=: ((Integer|nil) value) -> (Integer | nil)

  # Get the path to the first page of results.
  #
  # @return [String]                  URL for the first page of results.
  # @return [nil]                     If @first_page is unset.
  #
  def first_page: () -> (String | nil)

  # Set the path to the first page of results.
  #
  # @param [String, Symbol, nil] value
  #
  # @return [String]                  New URL for the first page of results.
  # @return [nil]                     If @first_page is unset.
  #
  def first_page=: ((String|Symbol|nil) value) -> (String | nil)

  # Get the path to the last page of results.
  #
  # @return [String]                  URL for the last page of results.
  # @return [nil]                     If @last_page is unset.
  #
  def last_page: () -> (String | nil)

  # Set the path to the last page of results.
  #
  # @param [String, Symbol, nil] value
  #
  # @return [String]                  New URL for the last page of results.
  # @return [nil]                     If @last_page is unset.
  #
  def last_page=: ((String|Symbol|nil) value) -> (String | nil)

  # Get the path to the next page of results
  #
  # @return [String]                  URL for the next page of results.
  # @return [nil]                     If @next_page is unset.
  #
  def next_page: () -> (String | nil)

  # Set the path to the next page of results
  #
  # @param [String, Symbol, nil] value
  #
  # @return [String]                  New URL for the next page of results.
  # @return [nil]                     If @next_page is unset.
  #
  def next_page=: ((String|Symbol|nil) value) -> (String | nil)

  # Get the path to the previous page of results.
  #
  # @return [String]                  URL for the previous page of results.
  # @return [nil]                     If @prev_page is unset.
  #
  def prev_page: () -> (String | nil)

  # Set the path to the previous page of results.
  #
  # @param [String, Symbol, nil] value
  #
  # @return [String]                  New URL for the previous page of results.
  # @return [nil]                     If @prev_page is unset.
  #
  def prev_page=: ((String|Symbol|nil) value) -> (String | nil)

  # Analyze the *list* object to generate the path for the next page of
  # results.
  #
  # @param [Api::Record, Array] list
  # @param [Hash]               url_params  For `list.next`.
  #
  # @return [String]                  Path to generate next page of results.
  # @return [nil]                     If there is no next page.
  #
  def next_page_path: (?list: Api::Record|Array[Api::Record]|nil, **untyped url_params) -> (String | nil)

  # The item index of the first item on the current page.
  #
  # @return [Integer]
  #
  def first_index: () -> Integer

  # Set the item index of the first item on the current page.
  #
  # @param [Integer, nil] value       If *nil*, resets to default.
  #
  # @return [Integer]
  #
  def first_index=: ((Integer|nil) value) -> Integer

  # The item index of the last item on the current page.
  #
  # @return [Integer]
  #
  def last_index: () -> Integer

  # Set the item index of the first item on the current page.
  #
  # @param [Integer, nil] value       If *nil*, resets to default.
  #
  # @return [Integer]
  #
  def last_index=: ((Integer|nil) value) -> Integer

  # The item index cursor.
  #
  # @param [Boolean] increment        If *true*, post-increment value.
  # @param [Boolean] check            If *true*, raise if out of bounds.
  #
  # @return [Integer]
  #
  def current_index: (?increment: bool, ?check: bool) -> Integer

  # The field position of the first field for the indicated item.
  #
  # @param [Integer, nil] index       Default: `#current_index`
  #
  # @return [Integer]
  #
  def first_position: (?(Integer|nil) index) -> Integer

  # Set the field position of the first field for the indicated item.
  #
  # @param [Integer]      value
  # @param [Integer, nil] index       Default: `#current_index`
  #
  # @return [Integer]
  #
  def set_first_position: (Integer value, ?(Integer|nil) index) -> Integer

  # The field position of the last field for the indicated item.
  #
  # @param [Integer, nil] index       Default: `#current_index`
  #
  # @return [Integer, nil]
  #
  def final_position: (?(Integer|nil) index) -> Integer

  # Set the field position of the first field for the indicated item.
  #
  # @param [Integer]      value
  # @param [Integer, nil] index       Default: `#current_index`
  #
  # @return [Integer]
  #
  def set_final_position: (Integer value, ?(Integer|nil) index) -> Integer

  # The field position cursor.
  #
  # @param [Integer, nil] index       Default: `#current_index`
  # @param [Boolean]      increment   If *true*, post-increment value.
  # @param [Boolean]      check       If *true*, raise if out of bounds.
  #
  # @return [Integer]
  #
  def current_position: (?(Integer|nil) index, ?increment: bool, ?check: bool) -> Integer

  # Delegate to the underlying array of items if it has been generated, or to
  # the underlying source relation if it has been set.
  #
  # @param [Symbol, String] name
  # @param [Array<*>]       args
  # @param [Proc]           blk
  #
  # @return [Any]
  #
  def method_missing: ((Symbol|String) name, *untyped args) ?{ () -> untyped } -> untyped
end

# Results from #search_records with fields in this order:
#
# @!attribute [rw] offset
#   The list offset for display purposes (not the SQL OFFSET).
#   @return [Integer]
#
# @!attribute [rw] limit
#   The page size.
#   @return [Integer]
#
# @!attribute [rw] page
#   The ordinal number of the current page.
#   @return [Integer]
#
# @!attribute [rw] first
#   If the given :page is the first page of the record set.
#   @return [Boolean]
#
# @!attribute [rw] last
#   If the given :page is the last page of the record set.
#   @return [Boolean]
#
# @!attribute [rw] min_id
#   The #pagination_column value of the first matching record.
#   @return [Integer]
#
# @!attribute [rw] max_id
#   The #pagination_column value of the last matching record.
#   @return [Integer]
#
# @!attribute [rw] groups
#   The Table of counts for each state group.
#   @return [Hash]
#
# @!attribute [rw] pages
#   An array of arrays where each element has the IDs for that page.
#   @return [Array]
#
# @!attribute [rw] list
#   A relation for retrieving records.
#   @return [ActiveRecord::Relation, nil]
#
class Paginator::Result < ::Hash[Symbol, untyped]
  TEMPLATE: symHash

  attr_accessor offset: Integer
  attr_accessor limit:  Integer
  attr_accessor page:   Integer
  attr_accessor first:  bool
  attr_accessor last:   bool
  attr_accessor min_id: Integer
  attr_accessor max_id: Integer
  attr_accessor groups: symHash
  attr_accessor pages:  anyArray
  attr_accessor list:   ActiveRecord::Relation | nil

  def initialize: (?(symHash|nil) src) -> void
end
