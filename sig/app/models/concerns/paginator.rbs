# Encapsulation of pagination parameters.
#
class Paginator
  include ActionController::UrlFor

  include Emma::Common

  include ParamsHelper

  # NOTE: from SearchTermsHelper::PAGINATION_KEYS
  PAGINATION_KEYS: symArray

  # URL parameters involved in pagination.
  #
  # @type [Array<Symbol>]
  #
  PAGE_PARAMS: symArray

  # URL parameters involved in form submission.
  #
  # @type [Array<Symbol>]
  #
  FORM_PARAMS: symArray

  # POST/PUT/PATCH parameters from the entry form that are not relevant to the
  # create/update of a model instance.
  #
  # @type [Array<Symbol>]
  #
  IGNORED_FORM_PARAMS: symArray

  private

  attr_reader controller: (ApplicationController | nil)

  attr_reader context: symHash

  public

  attr_reader initial_parameters: symHash

  # Create a new instance.
  #
  # @param [ApplicationController, nil] controller
  # @param [Hash]                       opt         From `#request_parameters`.
  #
  def initialize: (?(ApplicationController|nil) controller, **untyped opt) -> void

  # Finish setting of pagination values based on the result list and original
  # URL parameters.
  #
  # @param [Api::Record, Array] list
  # @param [Symbol, nil]        meth    Method to invoke from *list* for items.
  # @param [Hash]               search  Passed to #next_page_path.
  #
  # @return [void]
  #
  def finalize: ((Api::Record|anyArray) list, ?(Symbol|nil) meth, **untyped search) -> void

  # Modify the usual result so that the dump of @page_items is replaced with
  # a count of each type of element it contains.
  #
  # @return [String]
  #
  def inspect: () -> String

  # Pagination data values.
  #
  class Properties < ::Hash[Symbol,untyped]
    # Empty copy of data values in the preferred order (for debug output).
    #
    # @type [Hash{Symbol=>any}]
    #
    TEMPLATE: symHash

    def initialize: (?(symHash|nil) values) -> void
  end

  attr_reader property:           Paginator::Properties
  attr_reader page_items:         anyArray
  attr_reader default_page_size:  Integer

  # property
  #
  # @return [Paginator::Properties]
  #
  def property: () -> Paginator::Properties

  # Get the number of results per page.
  #
  # @return [Integer]
  #
  def page_size: () -> Integer

  # Set the number of results per page.
  #
  # @param [Integer] value
  #
  # @return [Integer]
  #
  def page_size=: (Integer value) -> Integer

  # Get the path to the first page of results.
  #
  # @return [String]                  URL for the first page of results.
  # @return [nil]                     If @first_page is unset.
  #
  def first_page: () -> (String | nil)

  # Set the path to the first page of results.
  #
  # @param [String, Symbol] value
  #
  # @return [String]                  New URL for the first page of results.
  # @return [nil]                     If @first_page is unset.
  #
  def first_page=: ((String|Symbol) value) -> (String | nil)

  # Get the path to the last page of results.
  #
  # @return [String]                  URL for the last page of results.
  # @return [nil]                     If @last_page is unset.
  #
  def last_page: () -> (String | nil)

  # Set the path to the last page of results.
  #
  # @param [String, Symbol] value
  #
  # @return [String]                  New URL for the last page of results.
  # @return [nil]                     If @last_page is unset.
  #
  def last_page=: ((String|Symbol) value) -> (String | nil)

  # Get the path to the next page of results
  #
  # @return [String]                  URL for the next page of results.
  # @return [nil]                     If @next_page is unset.
  #
  def next_page: () -> (String | nil)

  # Set the path to the next page of results
  #
  # @param [String, Symbol] value
  #
  # @return [String]                  New URL for the next page of results.
  # @return [nil]                     If @next_page is unset.
  #
  def next_page=: ((String|Symbol) value) -> (String | nil)

  # Get the path to the previous page of results.
  #
  # @return [String]                  URL for the previous page of results.
  # @return [nil]                     If @prev_page is unset.
  #
  def prev_page: () -> (String | nil)

  # Set the path to the previous page of results.
  #
  # @param [String, Symbol] value
  #
  # @return [String]                  New URL for the previous page of results.
  # @return [nil]                     If @prev_page is unset.
  #
  def prev_page=: ((String|Symbol) value) -> (String | nil)

  # Get the offset of the current page into the total set of results.
  #
  # @return [Integer]
  #
  def page_offset: () -> Integer

  # Set the offset of the current page into the total set of results.
  #
  # @param [Integer] value
  #
  # @return [Integer]
  #
  def page_offset=: (Integer value) -> Integer

  # Get the total results count.
  #
  # @return [Integer]
  #
  def total_items: () -> Integer

  # Set the total results count.
  #
  # @param [Integer] value
  #
  # @return [Integer]
  #
  def total_items=: (Integer value) -> Integer

  # Get the number of records returned from the API for this page.
  #
  # @return [Integer]
  #
  def page_records: () -> Integer

  # Set the number of records returned from the API for this page.
  #
  # @param [Integer] value
  #
  # @return [Integer]
  #
  def page_records=: (Integer value) -> Integer

  # Get the current page of result items.
  #
  # @return [Array]
  #
  def page_items: () -> anyArray

  # Set the current page of result items.
  #
  # @param [Array] values
  #
  # @return [Array]
  #
  def page_items=: (anyArray values) -> anyArray

  # Interpret *value* as a URL path or a JavaScript action.
  #
  # @param [String, Symbol] value     One of [:back, :forward, :go].
  # @param [Integer, nil]   page      Passed to #page_history for *action* :go.
  #
  # @return [String]                  A value usable with 'href'.
  # @return [nil]                     If *value* is invalid.
  #
  def page_path: ((String|Symbol) value, ?(Integer|nil) page) -> (String | nil)

  # A value to use in place of a path in order to engage browser history.
  #
  # @param [String, Symbol] action    One of [:back, :forward, :go].
  # @param [Integer, nil]   page      History page if *directive* is :go.
  #
  # @return [String]
  #
  def page_history: ((String|Symbol) action, ?(Integer|nil) page) -> String

  # Analyze the *list* object to generate the path for the next page of
  # results.
  #
  # @param [Api::Record, Array] list
  # @param [Hash]               url_params  For `list.next`.
  #
  # @return [String]                  Path to generate next page of results.
  # @return [nil]                     If there is no next page.
  #
  def next_page_path: (?list: Api::Record|Array[Api::Record]|nil, **untyped url_params) -> (String | nil)

  # Default results per page for the current controller/action.
  #
  # @return [Integer]
  #
  def default_page_size: () -> Integer

  # Default results per page.
  #
  # @return [Integer]
  #
  def get_page_size: () -> Integer

  # Extract the number of "items" reported by an object.
  #
  # @param [Api::Record, Model, Array, Hash, Any, nil] value
  # @param [Hash]                                      opt
  #
  # @return [Integer]
  #
  def item_count: (?(untyped|nil) value, **untyped opt) -> Integer

  # Determine the number of records reported by an object.
  #
  # @param [Api::Record, Model, Array, Hash, Any, nil] value
  #
  # @return [Integer]
  #
  def record_count: (?(untyped|nil) value) -> Integer

  # Default results per page for the given controller/action.
  #
  # @param [Symbol, String, Hash, nil] c   Controller
  # @param [Symbol, String, nil]       a   Action
  #
  # @return [Integer]
  #
  def self.get_page_size: (symHash)                                        -> Integer
                        | (?(Symbol|String|nil) c, ?(Symbol|String|nil) a) -> Integer

  # Extract the number of "items" reported by an object.
  #
  # (For aggregate items, this is the number of aggregates as opposed to the
  # number of records from which they are composed.)
  #
  # @param [Api::Record, Model, Array, Hash, Any, nil] value
  # @param [Any]                                       default
  #
  # @return [Integer]
  #
  def self.item_count: ((untyped|nil) value, ?default: untyped) -> Integer

  # Determine the number of records reported by an object.
  #
  # @param [Api::Record, Model, Array, Hash, Any, nil] value
  #
  # @return [Integer]
  #
  def self.record_count: ((untyped|nil) value) -> Integer
end
