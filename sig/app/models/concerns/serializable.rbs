module Serializable
  extend ActiveSupport::Concern

  # These overrides (in part) work around deficiencies in the standard
  # definition of ActiveJob custom serializers to allow:
  #
  # * The ability for a subclasses in a hierarchy of class definitions to have
  #   their own serializers.
  #
  # * The ability for items requiring custom serializer support to be nested.
  #
  # @see ActiveJob::ArgumentsExt
  #
  class Base < ActiveJob::Serializers::ObjectSerializer
    # @type [String,Symbol]
    VALUE_KEY: String | Symbol

    # @type [Array<String,Symbol>]
    VALUE_KEYS: Array[String|Symbol]

    # @type [Array<String,Symbol>]
    RESERVED_KEYS: Array[String|Symbol]

    # @type [Array<Module>]
    PERMITTED_TYPES: Array[Module]

    # @type [Array<Module>]
    ENUMERABLE_TYPES: Array[Module]

    # @type [Array<Module>]
    OTHER_TYPES: Array[Module]

    # @type [Array<Module>]
    WORK_REQUIRED: Array[Module]

    # @type [Array<Module>]
    BASIC_TYPES: Array[Module]

    # The default method is inadequate for serializers defined for a hierarchy
    # of subclasses because it will always return with the serializer
    # associated with the base class of that hierarchy rather than the
    # serializer for the specific subclass.
    #
    # @param [any] argument
    #
    def serialize?: (untyped argument) -> bool

    # To be consistent, serialized values will always be rooted at the same
    # place in the serialization hash.
    #
    # @param [any] item
    #
    # @return [Hash]
    #
    # @yield [item] Return data from *item* that will be needed to recreate it.
    # @yieldparam [self] item An instance of the class.
    # @yieldreturn [any]      The data from *item*.
    #
    def serialize: (untyped item) { (untyped) -> untyped } -> anyHash

    # Recreate an item from the data produced by #serialize.
    #
    # @param [Hash] hash        Generated via serialization.
    #
    # @return [any]             An instance of the associated class.
    #
    # @yield [value]
    # @yieldparam [any] value   Data produced by #serialize.
    # @yieldreturn [self,any]   An item instance or data to create a new one.
    #
    def deserialize: (anyHash hash) { (untyped) -> untyped } -> untyped

    module Methods
      def serialize_argument: (ActiveSupport::HashWithIndifferentAccess[untyped,untyped] item) -> strHash
                            | (GlobalID::Identification                                  item) -> Hash[String,String]
                            | (anyHash                                                   item) -> strHash
                            | (anyArray                                                  item) -> anyArray
                            | (untyped                                                   item) -> untyped

      def deserialize_argument: (untyped item) -> untyped

      # Deep symbolize all keys except for ActiveJob reserved keys.
      #
      # @return [Hash{String,Symbol=>*}]
      #
      def re_symbolize_keys: (anyHash hash) -> anyHash

      private

      def self.included: (Module base) -> void
    end

    include Methods
  end

  THIS_MODULE: Module

  public

  include Serializable::Base::Methods

  # Create a job serializer class associated with *base*.
  #
  # @param [Class] base   The executing class.
  #
  # @return [Class]       The serializer within the `base.class` namespace.
  # @return [nil]         If there was a problem.
  #
  def serializer_class: (?(Class|nil) base) -> (Class | nil)

  # Serializer definition.
  #
  # @param [Symbol, nil] mode
  #
  # -
  # == Variations
  # +
  #
  # @overload serializer
  #   With no parameters or block, the statement just creates the serializer
  #   for the executing class.
  #
  # @overload serializer(mode = :serialize, &block)
  #   Define a #serialize override to pass the block to Base#serialize.
  #   @param [Symbol] mode
  #   @param [Proc]   block         Passed to Base#serialize.
  #
  # @overload serializer(mode = :deserialize, &block)
  #   Define a #deserialize override to pass the block to Base#deserialize.
  #   @param [Symbol] mode
  #   @param [Proc]   block         Passed to Base#serialize.
  #
  def serializer: ()                                      -> (Class | nil)
                | (:serialize)   { (untyped) -> untyped } -> (Class | nil)
                | (:deserialize) { (untyped) -> untyped } -> (Class | nil)
end
