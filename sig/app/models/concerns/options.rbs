# Options that may be specific to the originating controller.
#
# === Usage Notes
# Subclasses are expected to be defined lexically within their associated
# model class (which allows #model_class to be resolved automatically).
# Alternatively the subclass can define a MODEL constant to explicitly define
# the associated model class.
#
class Options
  include Emma::Json

  include ParamsHelper

  # URL parameters involved in pagination.
  #
  # @type [Array<Symbol>]
  #
  PAGE_KEYS: symArray

  # URL parameters involved in form submission.
  #
  # @type [Array<Symbol>]
  #
  FORM_KEYS: symArray

  # POST/PUT/PATCH parameters from the entry form that are not relevant to the
  # create/update of a model instance.
  #
  # @type [Array<Symbol>]
  #
  IGNORED_FORM_KEYS: symArray

  @params: symHash

  @value: symHash

  # Create a new options object.
  #
  # @param [any, nil] model           Symbol
  # @param [Hash, nil] prm
  #
  def initialize: (?untyped model, ?(symHash|nil) prm) -> void

  # The model class associated with these options.
  #
  # @type [Class]
  #
  def self.model_class: () -> Class

  def model_class: () -> Class

  self.@model_class: Class

  # The parameter key denoting a collection of model field values in URL
  # parameters.
  #
  # @param [Symbol, nil] key          Key value defined by subclass.
  #
  # @type [Symbol]
  #
  def self.model_key: () -> Symbol

  def model_key: () -> Symbol

  self.@model_key: Symbol

  # The parameter key denoting the identity of a model instance in URL
  # parameters.
  #
  # @param [Symbol, nil] key          Key value defined by subclass.
  #
  # @type [Symbol]
  #
  def self.model_id_key: () -> Symbol

  def model_id_key: () -> Symbol

  self.@model_id_key: Symbol

  # Indicate whether the item is a valid option.
  #
  # @param [Symbol, String] key
  #
  # @note Currently unused.
  #
  def option?: ((Symbol|String) key) -> bool

  # Get an option value.
  #
  # @param [Symbol, String] key
  # @param [Boolean]        log   If *false*, do not warn about bad keys.
  #
  # @return [any, nil]
  #
  def get: ((Symbol|String) key, ?log: bool) -> untyped

  # Set an option value.
  #
  # @param [Symbol, String] key
  # @param [any, nil]       value
  #
  # @return [any, nil]
  #
  def set
    :     (nil             key, untyped value) -> nil
    | [T] ((Symbol|String) key, T       value) -> T

  # Fill @value with all option settings from defaults and supplied URL params.
  #
  # @param [Boolean] clean            If *true*, remove option parameters from
  #                                     the local copy of URL parameters.
  # @param [Hash]    opt              Passed to #get.
  #
  # @return [Hash]                    Updated option values.
  #
  def all: (?clean: bool, **untyped opt) -> symHash

  alias [] get

  alias []= set

  # URL parameters associated with item/entry identification.
  #
  # @type [Array<Symbol>]
  #
  def identifier_keys: () -> symArray

  @identifier_keys: symArray

  # URL parameters associated with POST data.
  #
  # @type [Array<Symbol>]
  #
  def data_keys: () -> symArray

  @data_keys: symArray

  # The valid option keys defined by the subclass.
  #
  # @return [Array<Symbol>]
  #
  def option_keys: () -> symArray

  # The method associated with the given option key.
  #
  # @param [any, nil] key             String, Symbol
  #
  # @return [Symbol, nil]
  #
  def option_method
    : ((Symbol|String) key) -> (Symbol | nil)
    | (untyped         key) -> nil

  # Supplied URL parameters.
  #
  # @note This method is expected by ParamsHelper.
  #
  # @return [Hash]
  #
  def params: () -> symHash

  @params: symHash

  # URL parameters relevant to the associated model/controller.
  #
  # @note This method is expected by Record::Properties#parameters.
  #
  # @return [Hash]
  #
  def model_params: () -> symHash

  @model_params: symHash

  # Get URL parameters relevant to the current operation.
  #
  # @return [Hash]
  #
  def get_model_params: () -> symHash

  # Extract POST parameters that are usable for creating/updating a new model
  # instance.
  #
  # @return [Hash]
  #
  def model_post_params: () -> symHash

  # ignored_form_params
  #
  # @return [Array<Symbol>]
  #
  def ignored_form_params: () -> symArray

  # model_data_params
  #
  # @return [Hash{Symbol=>Symbol}]
  #
  def model_data_params: () -> Hash[Symbol, Symbol]

  # Extract POST parameters that are usable for creating/updating an Upload
  # instance.
  #
  # @param [Hash]    prm              Parameters to update
  # @param [Boolean] compact          If *false*, allow blanks.
  # @param [Hash]    opt              Options to #json_parse.
  #
  # @return [Hash]                    The possibly-modified *prm*.
  #
  def extract_model_data!: (symHash prm, ?compact: bool, **untyped opt) -> symHash

  def inspect: () -> String
end
