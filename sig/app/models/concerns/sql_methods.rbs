# Common SQL methods for database record models.
#
# TODO: Postgres 11 handling of JSON?
#
# @see https://www.postgresql.org/about/featurematrix/
# @see https://www.postgresql.org/docs/11/datatype-json.html
# @see https://www.postgresql.org/docs/11/functions-json.html
# @see https://www.postgresql.org/docs/11/hstore.html
# @see https://www.postgresql.org/docs/11/functions-aggregate.html
# @see https://www.postgresql.org/docs/11/functions-textsearch.html
#
module SqlMethods
  include Emma::Common

  SQL_NUM: String

  SQL_NUM_OP: String

  SQL_NUMBER: Regexp

  SQL_COMPARISON: Regexp

  SQL_PATTERN: Regexp

  # Indicate whether two records match.
  #
  # @param [ApplicationRecord] rec_1
  # @param [ApplicationRecord] rec_2
  #
  def match?: (ApplicationRecord rec_1, ApplicationRecord rec_2) -> bool

  # Translate hash keys/values into SQL conditions combined by AND.
  #
  # @param [Array<Hash,Array,String>] terms
  # @param [Hash]                     other   Additional terms.
  #
  # @return [String]
  #
  # @see #sql_terms
  #
  def sql_and: (*(anyHash|strArray|String|nil) terms, **untyped other) -> String

  # Translate hash keys/values into SQL conditions combined by OR.
  #
  # @param [Array<Hash,Array,String>] terms
  # @param [Hash]                     other   Additional terms.
  #
  # @return [String]
  #
  # @see #sql_terms
  #
  def sql_or: (*(anyHash|strArray|String|nil) terms, **untyped other) -> String

  # Translate hash keys/values into SQL conditions.
  #
  # If *join* is set to *nil*, an array of SQL clauses is returned instead.
  #
  # @param [Array<Hash,Array,String>] terms
  # @param [Symbol, nil]              join    Either :or or :and; default: :and
  # @param [Hash]                     other   Additional terms.
  #
  # @return [String]
  #
  # === Examples
  #
  # @example Single term - Hash
  #   cond = { age: '18', hgt = 1.8 }
  #   sql_terms(cond) -> "age = '18' AND hgt = '1.8'"
  #
  # @example Single term - SQL
  #   ids = 'id IN (123, 456)'
  #   sql_terms(ids) -> "(id IN (123, 456))"
  #
  # @example Multiple terms
  #   sql_clauses(cond, ids)-> "age='18' AND hgt='1.8' AND (id IN (123, 456))"
  #
  def sql_terms: (*(anyHash|strArray|String|nil) terms, ?join: Symbol|nil, **untyped other) -> String

  # Translate hash keys/values into SQL conditions.
  #
  # @param [Hash]        hash
  # @param [Symbol, nil] join         Either :or or :and; default: :and
  #
  # @return [String]                  SQL expression.
  # @return [Array]                   SQL clauses if *join* is set to *nil*.
  #
  # === Examples
  #
  # @example AND-ed values
  #   sql_clauses(id: '123', age: '18') -> "id = '123' AND age = '18'"
  #
  # @example OR-ed values
  #   sql_clauses(id: '123', age: '18', join: :or)-> "id = '123' OR age = '18'"
  #
  def sql_clauses: (anyHash, ?join: Symbol|nil) -> String

  # Translate a key and value into a SQL condition.
  #
  # @param [String, Symbol, Hash] k
  # @param [any, nil]             v
  #
  # @return [String, nil]
  #
  # -
  # === Variations
  # +
  #
  # @overload sql_clause(k, v)
  #   @param [String, Symbol] k
  #   @param [any, nil]       v
  #
  # @overload sql_clause(hash)
  #   @param [Hash] hash              Only the first pair is used.
  #
  # === Examples
  #
  # @example Single value
  #   sql_clause(:id, '123') -> "id = '123'"
  #
  # @example Single value as a hash
  #   sql_clause(id: '123')  -> "id = '123'"
  #
  # @example Multiple values
  #   sql_clause(:id, %w[123 456 789]) -> "id IN ('123','456','789')"
  #
  # @example Multiple values as a hash
  #   sql_clause(id: %w[123 456 789])  -> "id IN ('123','456','789')"
  #
  def sql_clause
    : ((String|Symbol) k, untyped v) -> (String | nil)
    | (anyHash)                      -> (String | nil)

  # Join SQL terms, with multiple terms fully parenthesized.
  #
  # @param [Array<String,Array>] terms
  # @param [Symbol, nil]         join   Either :or or :and.
  #
  # @return [String]
  # @return [Array<String>]             If *join* is *nil*.
  #
  def sql_join: (*(String|strArray|nil) terms, Symbol|nil join) -> String

  # Look for a value in a standard database field.
  #
  # @param [Symbol, String] column
  # @param [any, nil]       value
  # @param [Hash]           opt       Passed to #sql_test
  #
  # @return [String]
  #
  def sql_match_pattern: ((Symbol|String) column, untyped value, **untyped opt) -> String

  # Look for value in a JSON-type database column.
  #
  # @note This was written for MySQL and has not been translated for Postgres.
  #
  # @param [Symbol, String] column
  # @param [String, #to_s]  term
  # @param [Hash]           opt       Passed to #sql_match_term
  #
  # @return [String]
  #
  # @see https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html
  # @see https://stackoverflow.com/questions/49782240/can-i-do-case-insensitive-search-with-json-extract-in-mysql
  #
  # === Usage Notes
  # Does not handle "exact: false" for field names yet, only field values.
  #
  def sql_match_json: ((Symbol|String) column, String term, **untyped opt) -> String

  # Generate a SQL JSON_TABLE definition.
  #
  # @param [Symbol, String]              column
  # @param [String, nil]                 name       Def: derived from *column*.
  # @param [Symbol, String, Array]       fields     JSON fields for *column*.
  # @param [Hash{Symbol=>Array<Symbol>}] field_map  If *fields* not given.
  #
  # @return [String]
  #
  # === Implementation Notes
  # * Documentation indicates that '$[*]' should work but only '$' seems to.
  #
  def sql_json_table: ((Symbol|String) column, ?name: String|nil, ?fields: Array[Symbol|String]|Symbol|String|nil, ?field_map: Hash[Symbol,symArray]|nil) -> String

  # Generate condition(s) for a WHERE clause.
  #
  # @param [Hash{Symbol=>Array<Symbol>}] field_map  For JSON fields.
  # @param [Hash{Symbol=>Hash}]          param_map  For JSON fields.
  # @param [Hash]                        matches    Field assertions.
  #
  # @return [String]                  Blank if no valid field assertions.
  #
  def sql_where_clause: (?field_map: Hash[Symbol,symArray]|nil, ?param_map: symHash|nil, **untyped matches) -> String

  # Generate the SQL fragment which is the test of a name against a value.
  #
  # @param [any, nil] name
  # @param [any, nil] value
  # @param [Hash]     opt             Passed to #sql_name_value
  #
  # @return [String]
  #
  def sql_test: (untyped name, untyped value, **untyped opt) -> String

  # Generate the SQL fragment elements for testing a name against a value.
  #
  # @param [any, nil] name
  # @param [any, nil] value
  # @param [Hash]     opt             Passed to #sql_match_term
  #
  # @return [Array(String,String,String)]
  #
  def sql_name_value: (untyped name, untyped value, **untyped opt) -> [String,String,String]

  # Generate the SQL operator and value from a term.
  #
  # @param [any, nil] term
  # @param [Boolean]  exact
  # @param [Boolean]  match_case
  #
  # @return [Array(String,String)]
  #
  # @see #sql_test
  #
  def sql_match_term: (untyped term, ?exact: bool, ?match_case: bool, **untyped _ignored) -> [String,String]

  # Mapping of digits to visibly similar letters.
  #
  # @type [Hash{String=>String}]
  #
  DIGIT_TO_ALPHA: Hash[String,String]

  # Some JSON key names have numbers in them but SQL seems to have a problem
  # with that for the names defined within "COLUMNS()".
  #
  # @param [Array<String,Symbol>] name
  #
  # @return [String]
  # @return [nil]                     If *name* was blank.
  #
  def sanitize_sql_name: (*(String|Symbol|nil) name) -> (String | nil)

  # Make a string safe to use within an SQL LIKE statement.
  #
  # @param [String] text
  # @param [String] escape_character
  #
  # @return [String]
  #
  # @see ActiveRecord::Sanitization::ClassMethods#sanitize_sql_like
  #
  def sanitize_sql_like: (String text, ?String escape_character) -> String

  # Return the value, quoted if necessary.
  #
  # @param [String, Symbol, Float, Integer, nil] value
  # @param [String, nil]                         null
  #
  # @return [String, Float, Integer, nil]
  #
  def sql_quote
    :     (String value, ?null: String|nil) -> (String | Float | Integer | nil)
    |     (Symbol value, ?null: String|nil) -> (String | nil)
    | [T] (T      value, ?null: String|nil) -> T

  # Return a list of SQL values.
  #
  # @param [any, nil]    value
  # @param [String, nil] null
  #
  # @return [String]
  #
  def sql_list: (untyped value, ?null: String|nil) -> String

  module InstanceMethods
    include SqlMethods

    # The fields defined in the schema for this record.
    #
    # @return [Array<Symbol>]
    #
    def field_names: () -> symArray

    @field_names: symArray

    # Translate hash keys/values into SQL LIKE statements.
    #
    # If *join* is set to *nil*, an array of SQL clauses is returned instead.
    #
    # @param [Array<Hash,String>] terms
    # @param [Symbol, nil]        join    Either :or or :and; default: :and
    # @param [Hash]               opt     Passed to #merge_match_terms.
    #
    # @return [String]
    #
    def sql_match: (*(anyHash|String) terms, ?join: Symbol|nil, **untyped opt) -> String

    # Accumulate match pairs.
    #
    # @param [String, Array, Hash] terms
    # @param [Hash]                opt    Passed to #merge_match_terms!
    #
    def merge_match_terms: (*(anyHash|strArray|String) terms, **untyped opt) -> Hash[Symbol,strArray]

    # Accumulate match pairs.
    #
    # @param [Hash]                dst
    # @param [String, Array, Hash] terms
    # @param [Array<Symbol>]       columns    Limit fields to match.
    # @param [Symbol]              type       Ignored unless :json.
    # @param [Boolean]             sanitize   If *false* do not escape '%', '_'
    #
    # @return [Hash{Symbol=>Array<String>}] The modified *dst* hash.
    #
    def merge_match_terms!: (symHash dst, *(anyHash|strArray|String) terms, ?columns: symArray|nil, ?type: Symbol|nil, ?sanitize: bool) -> Hash[Symbol,strArray]

    # Dynamically create a derived table with JSON fields expanded into columns
    #
    # @param [String, Array, Hash, nil] extra   Passed to #sql_extended_table
    # @param [Hash]                     opt     Passed to #sql_extended_table
    #
    # @return [ActiveRecord::Result]
    #
    def extended_table: (?(anyHash|strArray|String|nil) extra, **untyped opt) -> ActiveRecord::Result

    # Generate the SQL statement for dynamically creating a derived table with
    # JSON fields expanded into columns.
    #
    # @param [String, Array, Hash, nil]    extra      More SQL appended to FROM
    # @param [Hash{Symbol=>Array<Symbol>}] field_map
    # @param [Array<Symbol>, Symbol, nil]  only
    # @param [Array<Symbol>, Symbol, nil]  except
    # @param [Hash]                        where      WHERE clause elements.
    #
    # @return [String]
    #
    def sql_extended_table: (?(anyHash|strArray|String|nil) extra, field_map: Hash[Symbol,symArray], ?only: symArray|Symbol|nil, ?except: symArray|Symbol|nil, **untyped where) -> String
  end

  # Class methods automatically added to the including class.
  #
  module ClassMethods
    include InstanceMethods

    # :nocov:
    include ActiveRecord::ModelSchema::ClassMethods

    include ActiveRecord::QueryMethods

    # The fields defined in the schema for this record.
    #
    # @return [Array<Symbol>]
    #
    def field_names: () -> symArray

    # Build a relation for finding records with columns containing matches on
    # the given search term(s).
    #
    # @param [Array<Hash,String>]               terms
    # @param [Symbol, String, Hash, Array, nil] sort    Implicit sort if *nil*.
    # @param [Hash]                             opt     Passed to #sql_match.
    #
    # @return [ActiveRecord::Relation]
    #
    def matching: (*(anyHash|String) terms, ?sort: anyHash|Symbol|String|Array[Symbol|String]|nil, **untyped opt) -> ActiveRecord::Relation
  end

  private

  def self.included: (Module base) -> void
end
