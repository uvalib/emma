# FileUploader
#
# @!attribute [r] opts
#   Created via Shrine::ClassMethods#inherited.
#   @return [Hash]
#
# @!attribute [r] storages
#   Created via Shrine::ClassMethods#inherited.
#   @return [Hash]
#
# @!attribute [r] logger
#   Created via Shrine::ClassMethods#inherited.
#   @return [Logger]
#
# === Constants via Shrine::ClassMethods#inherited
#
# @!attribute [r] UploadedFile
#   Represents a file that was uploaded to a storage.
#   - Created via Shrine::ClassMethods#inherited.
#   - Augmented by all plugin FileMethods.
#   - Extended by all plugin FileClassMethods.
#   @return [Shrine::UploadedFile]
#
# @!attribute [r] Attachment
#   A convenience interface to the Shrine::Attacher object.  If :activerecord
#   plugin is loaded this module (1) syncs Shrine's validation errors with the
#   record, (2) triggers promoting after record is saved, (3) deletes the
#   uploaded file if attachment was replaced or the record destroyed.
#   - Created via Shrine::ClassMethods#inherited.
#   - Augmented by all plugin AttachmentMethods.
#   - Extended by all plugin AttachmentClassMethods.
#   @return [Shrine::Attachment]
#
# @!attribute [r] Attacher
#   Saves information about uploaded files as an attachment to a record (saving
#   the file data to a database column).  The attaching process requires a
#   temporary and a permanent storage to be registered (by default that's
#   :cache and :store).
#   - Created via Shrine::ClassMethods#inherited.
#   - Augmented by all plugin AttacherMethods.
#   - Extended by all plugin AttacherClassMethods.
#   @return [Shrine::Attacher]
#
# === Implementation Notes
# If #DEBUG_SHRINE is true then the overrides defined in Shrine::UploaderDebug
# (lib/ext/shrine/lib/shrine.rb) apply to the methods inherited from Shrine.
#
class FileUploader < Shrine

  # Temporary until Shrine RBS:
  class Attacher     < Shrine::Attacher     end
  class UploadedFile < Shrine::UploadedFile end

  MIN_SIZE: Integer

  FORMATS: strArray

  FORMAT_LIST: String

  ERROR: Hash[Symbol,String]

  include Shrine::ExtensionDebugging

  extend Shrine::ExtensionDebugging

  # upload
  #
  # @param [IO, StringIO] io
  # @param [Symbol]       storage
  # @param [Hash]         options
  #
  # @return [Shrine::UploadedFile]
  #
  def self.upload: ((IO|StringIO) io, Symbol storage, **untyped options) -> UploadedFile

  # uploaded_file
  #
  # @param [Shrine::UploadedFile, Hash, String, nil] object
  #
  # @raise [ArgumentError]          If *object* is an invalid type.
  #
  # @return [Shrine::UploadedFile]
  #
  def self.uploaded_file: ((symHash|String|UploadedFile) object) -> UploadedFile

  # with_file
  #
  # @param [IO, StringIO] io
  #
  # @return [void]
  #
  def self.with_file: ((IO|StringIO) io) -> void

  # initialize
  #
  # @param [Symbol] storage_key
  #
  def initialize: (Symbol storage_key) -> void

  # upload
  #
  # @param [IO, StringIO] io
  # @param [Hash]         options
  #
  # @return [Shrine::UploadedFile]
  #
  def upload: ((IO|StringIO) io, **untyped options) -> UploadedFile

  # generate_location
  #
  # @param [IO, StringIO] io
  # @param [Hash]         metadata
  # @param [Hash]         options
  #
  # @return [String]
  #
  def generate_location: ((IO|StringIO) io, ?metadata: anyHash, **untyped options) -> String

  # extract_metadata
  #
  # @param [IO, StringIO] io
  # @param [Hash]         options
  #
  # @return [Hash{String=>String,Integer}]
  #
  def extract_metadata: ((IO|StringIO) io, **untyped options) -> Hash[String,(String|Integer)]
end
