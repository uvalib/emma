# @note From UploadWorkflow::Errors
module Record::Exceptions
  extend ActiveSupport::Concern

  include Emma::Common

  include Emma::Debug

  # Raise an exception.
  #
  # @param [Symbol, String, Array<String>, ExecReport, Exception, nil] problem
  # @param [any, nil]                                                  value
  #
  # @raise [Record::SubmitError]
  # @raise [ExecError]
  #
  # @see ExceptionHelper#raise_failure
  #
  # @note From UploadWorkflow::Errors#raise_failure
  #
  def raise_failure: ((Symbol|String|strArray|Exception|ExecReport|nil) problem, ?untyped value, ?log: bool|String, **untyped _ignored) -> void

  # Methods which are only appropriate if the including class is an
  # ApplicationRecord.
  #
  module InstanceMethods
    # The exception raised within the instance.
    #
    # @return [Record::Error, nil]
    #
    attr_reader exception: Record::Error | nil

    # Indicate whether the instance has experienced an exception.
    #
    def error?: () -> bool

    # Associate an exception with the instance.
    #
    # @param [Class<Record::Error>, Record::Error, Exception, nil] error
    # @param [Hash] opt   Passed to initializer if *error* is a class.
    #
    # @return [Record::Error]         New value of @exception.
    #
    def set_error: ((Class|Record::Error|Exception|nil) error, **untyped opt) -> Record::Error
  end

  private

  THIS_MODULE: Module

  include InstanceMethods
end

# Each instance translates to a distinct line in the flash message.
#
class Record::Exceptions::FlashPart < FlashHelper::FlashPart
  # A hook for treating the first part of a entry as special.
  #
  # @param [any, nil] src
  # @param [Hash]     opt
  #
  # @return [ActiveSupport::SafeBuffer, String, nil]
  #
  # @note From UploadWorkflow::Errors::FlashPart#render_topic
  #
  def render_topic: (untyped src, **untyped opt) -> (ActiveSupport::SafeBuffer | String | nil)
end

# Base class for workflow errors involving records.
#
class Record::Error < ExecError
  include Record::Exceptions
end

# Exception raised when the specified record(s) could not be found, but through
# mechanisms that did not raise an ActiveRecord::RecordNotFound.
#
class Record::NotFound < Record::Error
end

# Exception raised when criteria were missing to specify the record(s).
#
class Record::StatementInvalid < Record::Error
end

# Exception raised when a submission is incomplete or invalid.
#
# @note Analogous to UploadWorkflow::Errors::SubmitError
#
class Record::SubmitError < Record::Error
end
