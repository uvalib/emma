# Class methods for validating records.
#
module Record::Validatable
  extend ActiveSupport::Concern

  include Record

  # :nocov:
  #include ActiveRecord::Validations

  # Control whether field validation should occur.
  #
  # NOTE: Not currently supported
  #
  # @type [Boolean]
  #
  FIELD_VALIDATION: bool

  # Configured requirements for Entry fields.
  #
  # @return [Hash{Symbol=>Hash}]      Frozen result.
  #
  def entry_fields: () -> Hash[Symbol,symHash]

  # Indicate whether all required fields have valid values.
  #
  def required_fields_valid?: () -> bool

  # Indicate whether all required fields have valid values.
  #
  def emma_data_valid?: () -> bool

  # Compare the source fields against configured requirements.
  #
  # @param [Hash, nil]        required_fields   Default: `#entry_fields`
  # @param [Entry, Hash, nil] source            Default: self.
  #
  # @return [void]
  #
  # -
  # == Variations
  # +
  #
  # @overload check_required
  #   Check that all configured fields are present in the current record.
  #   @param [Hash]        required_fields
  #
  # @overload check_required(required_fields)
  #   Check that the given fields are present in the current record.
  #   @param [Hash]        required_fields
  #
  # @overload check_required(required_fields, source)
  #   Check that the given fields are present in the given source object.
  #   @param [Hash]        required_fields
  #   @param [Entry, Hash] source
  #
  def check_required: (?(symHash|nil) required_fields, ?(symHash|Entry|nil) source) -> void

  private

  def error: (Symbol field, Symbol `type`, ?(String|nil) message) -> void

  private

  THIS_MODULE: Module

  # :nocov:
  include ActiveRecord::Validations
end
