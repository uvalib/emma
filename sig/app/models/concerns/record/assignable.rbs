# Methods relating to record field assignment.
#
module Record::Assignable
  extend ActiveSupport::Concern

  include Record

  include Record::Identification

  include SqlMethods

  # :nocov:
  #include ActiveRecord::Core

  # Called to prepare values to be used for assignment to record attributes.
  #
  # @param [Model, Hash, ActionController::Parameters, nil] attr
  # @param [Hash, nil]                                      opt
  #
  # @option opt [ApplicationRecord]            :from        A record used to provide initial field values.
  # @option opt [User, String, Integer]        :user        Transformed into a :user_id value.
  # @option opt [Symbol, Array<Symbol>]        :force       Allow these fields unconditionally.
  # @option opt [Symbol, Array<Symbol>]        :except      Ignore these fields (default: []).
  # @option opt [Symbol, Array<Symbol>, false] :only        Not limited if *false* (default: `#field_name`).
  # @option opt [Boolean]                      :compact     If *false*, allow blanks (default: *true*).
  # @option opt [Boolean]                      :key_norm    If *true*, transform provided keys to the real column name.
  # @option opt [Boolean]                      :normalized  If *attr* already processed by #normalize_attributes.
  # @option opt [Hash]                         :attr_opt    A hash containing any of the above values.
  #
  # @raise [RuntimeError]             If the type of *attr* is invalid.
  #
  # @return [Hash{Symbol=>*}]
  #
  def normalize_attributes: ((Model|prmHash|nil) attr, ?(symHash|nil) opt) -> symHash

  # The fields that will be accepted by #normalize_attributes.
  #
  # @return [Array<Symbol>]
  #
  def allowed_keys: () -> symArray

  # The fields that will be ignored by #normalize_attributes from a source
  # passed in via the :from parameter.
  #
  # @return [Array<Symbol>]
  #
  def ignored_keys: () -> symArray

  # Return with the key name for the given value.
  #
  # @param [String, Symbol] key
  #
  # @return [Symbol]
  #
  def normalize_key: (String|Symbol key) -> Symbol

  # A mapping of key comparison value to actual database column name.
  #
  # @return [Hash{String=>Symbol}]
  #
  def key_mapping: () -> Hash[String,Symbol]

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Assignable
  end

  # Methods which are only appropriate if the including class is an
  # ApplicationRecord.
  #
  module InstanceMethods
    include Record::Assignable

    # :nocov:
    #include ActiveRecord::AttributeAssignment

    #include Record::Debugging::InstanceMethods

    # Model/controller options passed in through the constructor.
    #
    # @return [::Options]
    #
    attr_reader model_options: ::Options

    # set_model_options
    #
    # @param [::Options, Hash, nil] options
    #
    # @return [::Options]
    #
    def set_model_options: ((::Options|symHash|nil) options) -> ::Options

    # Create a new instance.
    #
    # @param [Model, Hash, nil] attr
    #
    # @return [void]
    #
    # @note - for dev traceability
    #
    def initialize: (?(Model|anyHash|nil) attr) ?{ () -> untyped } -> void

    # Update database fields, including the structured contents of JSON fields.
    #
    # @param [Model, Hash, ActionController::Parameters, nil] attr
    #
    # @return [void]
    #
    # @see #normalize_attributes
    # @see ActiveModel::AttributeAssignment#assign_attributes
    #
    def assign_attributes: ((Model|prmHash|nil) attr) -> void
  end

  private

  THIS_MODULE: Module

  include InstanceMethods
end
