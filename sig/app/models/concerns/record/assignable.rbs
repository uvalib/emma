# Methods relating to record field assignment.
#
module Record::Assignable
  extend ActiveSupport::Concern

  include Emma::Constants

  include Emma::Json

  include Record

  include Record::Identification

  include SqlMethods

  # :nocov:
  #include ActiveRecord::Core
  # :nocov:

  # Called to prepare values to be used for assignment to record attributes.
  #
  # @param [Model, Hash, ActionController::Parameters, nil] attr
  # @param [Hash]                                           opt
  #
  # @option opt [ApplicationRecord]            :from        A record used to provide initial field values.
  # @option opt [User, String, Integer]        :user        Transformed into a :user_id value.
  # @option opt [Symbol, Array<Symbol>]        :force       Allow these fields unconditionally.
  # @option opt [Symbol, Array<Symbol>]        :except      Ignore these fields (default: []).
  # @option opt [Symbol, Array<Symbol>, false] :only        Not limited if *false* (default: `#field_name`).
  # @option opt [Boolean]                      :compact     If *false*, allow blanks (default: *true*).
  # @option opt [Boolean]                      :key_norm    If *true*, transform provided keys to the real column name.
  # @option opt [Boolean]                      :normalized  If *attr* already processed by #normalize_attributes.
  # @option opt [Hash]                         :attr_opt    A hash containing any of the above values.
  #
  # @raise [RuntimeError]             If the type of *attr* is invalid.
  #
  # @return [Hash]
  #
  def normalize_attributes: ((Model|prmHash|nil) attr, **untyped opt) -> symHash

  # The fields that will be accepted by #normalize_attributes.
  #
  # @return [Array<Symbol>]
  #
  def allowed_keys: () -> symArray

  # The fields that will be ignored by #normalize_attributes from a source
  # passed in via the :from parameter.
  #
  # @return [Array<Symbol>]
  #
  def ignored_keys: () -> symArray

  # Return with the key name for the given value.
  #
  # @param [String, Symbol] key
  #
  # @return [Symbol]
  #
  def normalize_key: (String|Symbol key) -> Symbol

  # A mapping of key comparison value to actual database column name.
  #
  # @return [Hash{String=>Symbol}]
  #
  def key_mapping: () -> Hash[String,Symbol]

  # Evaluate an attribute key.
  #
  # @param [Symbol]   k
  # @param [any, nil] v
  #
  # @return [String]                  The reason why *k* will be rejected.
  # @return [nil]                     If *k* is acceptable.
  #
  def invalid_field: (Symbol k, untyped v) -> (String | nil)

  # Include defaults where values were not specified.
  #
  # @param [Hash] attr
  #
  # @return [Hash]                    The *attr* argument, possibly modified.
  #
  def default_attributes!: (symHash attr) -> symHash

  # Convert field values which have been marked for removal.
  #
  # @param [Hash] attr
  #
  # @return [Hash]                    The *attr* argument, possibly modified.
  #
  # == Usage Notes
  # It is important that this come after honoring :compact so that the fields
  # which are being intentionally nullified are not removed.
  #
  def deleted_fields!: (symHash attr) -> symHash

  # Called by #normalize_attributes after key names have been normalized and
  # attributes have been filtered.
  #
  # @param [Hash] attr
  # @param [Hash] opt
  #
  # @option opt [Boolean]   :invalid  Allow invalid values.
  # @option opt [Symbol]    :meth     Caller (for diagnostics).
  # @option opt [Hash, nil] :errors   Accumulator for errors.
  #
  # @return [Hash]                    A possibly-modified copy of *attr*.
  #
  def normalize_fields: (symHash attr, **untyped opt) -> symHash

  # Normalize a specific field value.
  #
  # @param [Symbol]        key
  # @param [any, nil]      value
  # @param [String, Class] type
  # @param [Hash, nil]     errors
  #
  # @return [any, nil]
  #
  def normalize_field: (Symbol key, untyped value, String|Class `type`, ?(symHash|nil) errors) -> untyped

  # Pattern by which string attribute values are split into arrays.
  #
  # @type [String,Regexp]
  #
  LINE_SPLIT: String | Regexp

  # String by which array attribute values are combined into strings.
  #
  # @type [String,RegExp]
  #
  LINE_JOIN: String

  # The phrase indicating a problematic value.
  #
  # @type [String]
  #
  INVALID_FIELD: String

  # Indicate whether the value is valid for *type*.
  #
  # @param [any, nil] v
  # @param [any, nil] type
  #
  def is_invalid?: (untyped v, String|Class `type`) -> bool

  # add_field_error!
  #
  # @param [Hash, String, Symbol] field
  # @param [any, nil]             value
  # @param [Hash, nil]            target  Default: `#field_error`.
  #
  # @return [Hash{Symbol=>Hash{String=>String}}]
  #
  def add_field_error!
    : (String|Symbol field,  ?untyped value, ?(anyHash|nil) target) -> Hash[Symbol, Hash[String,String]]
    | (symHash       errors,                 ?(anyHash|nil) target) -> Hash[Symbol, Hash[String,String]]

  # normalize_file
  #
  # @param [any, nil] data            Hash, String
  #
  # @return [Hash, nil]
  #
  def normalize_file
    : (anyHash|String data, **untyped _ignored) -> symHash
    | (untyped        data, **untyped _ignored) -> nil

  # normalize_single
  #
  # @param [any, nil]     v
  # @param [String,Class] type
  # @param [Hash]         opt         Passed to normalization method.
  #
  # @return [any, nil]
  #
  def normalize_single: (untyped v, String|Class `type`, **untyped opt) -> (untyped | nil)

  # normalize_bool
  #
  # @param [any, nil] v               BoolType, String
  #
  # @return [true, false, nil]
  #
  def normalize_bool
    : (String  v, **untyped _ignored) -> (bool | nil)
    | (bool    v, **untyped _ignored) -> bool
    | (untyped v, **untyped _ignored) -> nil

  # normalize_number
  #
  # @param [any, nil] v               String, Numeric
  #
  # @return [Numeric, nil]
  #
  def normalize_number
    : (String  v, **untyped _ignored) -> (Numeric | nil)
    | (Numeric v, **untyped _ignored) -> Numeric
    | (untyped v, **untyped _ignored) -> nil

  # normalize_date
  #
  # @param [any, nil] v               Date, String, Numeric
  #
  # @return [Date, String, nil]
  #
  def normalize_date
    : (String|Numeric v, **untyped _ignored) -> (Date | String)
    | (Date           v, **untyped _ignored) -> Date
    | (untyped        v, **untyped _ignored) -> nil

  # normalize_datetime
  #
  # @param [any, nil] v               Date, String, Numeric
  #
  # @return [DateTime, String, nil]
  #
  def normalize_datetime
    : (String|Numeric v, **untyped _ignored) -> (DateTime | String)
    | (Date           v, **untyped _ignored) -> DateTime
    | (untyped        v, **untyped _ignored) -> nil

  # normalize_class
  #
  # @param [any, nil] v
  # @param [Class]    type            EnumType or ApplicationRecord subclass
  # @param [Hash]     opt             Passed to EnumType#cast method.
  #
  # @return [ApplicationRecord, EnumType, nil]
  #
  def normalize_class
    : (String        v, Class `type`, **untyped opt) -> (ApplicationRecord | EnumType | nil)
    | (Integer       v, Class `type`, **untyped opt) -> (ApplicationRecord | nil)
    | (Symbol        v, Class `type`, **untyped opt) -> (EnumType | nil)
    | (Model|symHash v, Class `type`, **untyped opt) -> ApplicationRecord
    | (EnumType      v, Class `type`, **untyped opt) -> EnumType
    | (untyped       v, Class `type`, **untyped opt) -> nil

  # normalize_record
  #
  # @param [any, nil] v
  # @param [Class]    type            EnumType subclass
  #
  # @return [ApplicationRecord, nil]
  #
  def normalize_record
    : (String|Integer v, Class `type`, **untyped _ignored) -> (ApplicationRecord | nil)
    | (Model|symHash  v, Class `type`, **untyped _ignored) -> ApplicationRecord
    | (untyped        v, Class `type`, **untyped _ignored) -> nil

  # normalize_enum
  #
  # @param [any, nil] v
  # @param [Class]    type            EnumType subclass
  # @param [Hash]     opt             Passed to #cast method.
  #
  # @return [EnumType, nil]
  #
  def normalize_enum
    : (String|Symbol v, Class `type`, **untyped opt) -> (EnumType | nil)
    | (EnumType      v, Class `type`, **untyped opt) -> EnumType
    | (untyped       v, Class `type`, **untyped opt) -> nil

  # normalize_json
  #
  # @param [any, nil] v               Array<Hash,String>, Hash, String
  #
  # @return [Array<Hash>, Hash, nil]
  #
  def normalize_json
    : (anyHash  v, **untyped _ignored) -> symHash
    | (anyArray v, **untyped _ignored) -> Array[symHash]
    | (untyped  v, **untyped _ignored) -> (symHash | nil)

  # normalize_text
  #
  # @param [any, nil] v               Array, String, Symbol
  #
  # @return [String, any, nil]
  #
  def normalize_text
    :     (anyArray|String|Symbol v, **untyped _ignored) -> String
    | [T] (T                      v, **untyped _ignored) -> T

  # normalize_copyright
  #
  # @param [any, nil] v               Date, String, Numeric
  #
  # @return [String, nil]
  #
  def normalize_copyright
    : (Date|String|Numeric v, **untyped _ignored) -> String
    | (untyped             v, **untyped _ignored) -> nil

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Assignable
  end

  # Methods which are only appropriate if the including class is an
  # ApplicationRecord.
  #
  module InstanceMethods
    include Record::Assignable

    # :nocov:
    #include ActiveRecord::AttributeAssignment
    #include Record::Debugging::InstanceMethods
    # :nocov:

    # Model/controller options passed in through the constructor.
    #
    # @return [::Options]
    #
    attr_reader model_options: ::Options

    # set_model_options
    #
    # @param [::Options, Hash, nil] options
    #
    # @return [::Options]
    #
    def set_model_options: ((::Options|symHash|nil) options) -> ::Options

    # Create a new instance.
    #
    # @param [Model, Hash, nil] attr
    #
    # @return [void]
    #
    # @note - for dev traceability
    #
    def initialize: (?(Model|anyHash|nil) attr) ?{ () -> untyped } -> void

    # Update database fields, including the structured contents of JSON fields.
    #
    # @param [Model, Hash, ActionController::Parameters, nil] attr
    #
    # @return [void]
    #
    # @see #normalize_attributes
    # @see ActiveModel::AttributeAssignment#assign_attributes
    #
    def assign_attributes: ((Model|prmHash|nil) attr) -> void
  end

  private

  THIS_MODULE: Module

  include InstanceMethods
end
