# TODO: workflow logic
#
# NOTE: This is basically UploadWorkflow::External but without any of the
#   Workflow module-specific stuff.
#
# NOTE: A big problem here may be the built-in assumption that there's only one
#   type of record to deal with...
#
module Record::Submittable
  extend ActiveSupport::Concern

  include Record

  include Record::EmmaIdentification

  include Record::Exceptions

  include Record::Properties

  module RecordMethods
    include Record::Submittable

    # Indicate whether the item represents an EMMA repository entry (as opposed
    # to a partner repository entry).
    #
    # @param [any, nil] item          Model, String
    #
    # @see Record::EmmaIdentification#valid_sid?
    # @see Record::EmmaIdentification#emma_native?
    #
    # @note From UploadWorkflow::External#emma_item?
    #
    def emma_item?: (untyped item) -> bool

    # Indicate whether the item does not represent an existing EMMA entry.
    #
    # @param [any, nil] item          Model, String
    #
    # @note From UploadWorkflow::External#incomplete?
    #
    def incomplete?: (untyped item) -> bool

    # Create a new free-standing (un-persisted) record instance.
    #
    # @param [Hash, Model, nil] data  Passed to record class initializer.
    #
    # @return [Model]
    #
    # @see #add_title_prefix
    #
    # @note From UploadWorkflow::External#new_record
    #
    def new_record: (?(symHash|Model|nil) data) -> Model

    # If a prefix was specified, apply it to the record's title.
    #
    # @param [Model]  record
    # @param [String] prefix
    #
    # @return [void]
    #
    # @note From UploadWorkflow::External#add_title_prefix
    #
    def add_title_prefix: (Model record, prefix: String) -> void
  end

  module DatabaseMethods
    include Record::Submittable

    include Record::Submittable::RecordMethods

    # Add a single record to the database.
    #
    # @param [Model, Hash] data       @see Upload#assign_attributes.
    #
    # @return [ApplicationRecord]
    #
    # @note From UploadWorkflow::External#db_insert
    #
    def db_insert: ((symHash|Model) data) -> ApplicationRecord

    # Modify a single existing database record.
    #
    # @param [Model, Hash, String] item
    # @param [Hash, nil]           data
    #
    # @raise [Record::StatementInvalid]       If :id/:sid not given.
    # @raise [Record::NotFound]               If *item* was not found.
    # @raise [ActiveRecord::RecordInvalid]    Update failed due to validations.
    # @raise [ActiveRecord::RecordNotSaved]   Update halted due to callbacks.
    #
    # @return [ApplicationRecord]
    # @return [nil]                           If `data[:fatal]` is *false*.
    #
    # @note From UploadWorkflow::External#db_update
    #
    def db_update: ((symHash|Model|String) item, ?(symHash|nil) data) -> (ApplicationRecord | nil)

    # Remove a single existing record from the database.
    #
    # @param [Model, Hash, String] item
    #
    # @raise [Record::StatementInvalid]           If :id/:sid not given.
    # @raise [Record::NotFound]                   If *item* was not found.
    # @raise [ActiveRecord::RecordNotDestroyed]   Halted due to callbacks.
    #
    # @return [any]
    # @return [nil]                   If the record was not found or removed.
    #
    # @note From UploadWorkflow::External#db_delete
    #
    def db_delete: ((symHash|Model|String) item) -> (untyped | nil)
  end

  module IndexIngestMethods
    include Record::Submittable

    include ExecReport::Constants

    # :nocov:
    #include Record::Submittable::SubmissionMethods

    # Current EMMA Unified Ingest API service instance.
    #
    # @return [IngestService]
    #
    # @note From UploadWorkflow::External#ingest_api
    #
    def ingest_api: () -> IngestService

    # As a convenience for testing, sending to the EMMA Unified Ingest API can
    # be short-circuited here.  The value should be *false* normally.
    #
    # @type [Boolean]
    #
    # @note From UploadWorkflow::External#DISABLE_UPLOAD_INDEX_UPDATE
    #
    DISABLE_UPLOAD_INDEX_UPDATE: bool

    # Patterns indicating errors that should not be reported as indicating a
    # problem that would abort a removal workflow.
    #
    # @type [Array<String,Regexp>]
    #
    # @note From UploadWorkflow::External#IGNORED_REMOVE_ERRORS
    #
    IGNORED_REMOVE_ERRORS: Array[String|Regexp]

    # Add the indicated items from the EMMA Unified Index.
    #
    # @param [Array<Upload>] items
    # @param [Boolean]       atomic
    #
    # @raise [Api::Error] @see IngestService::Action::Submissions#put_records
    #
    # @return [Array<(Array,Array,Array)>]  Succeeded records, failed item
    #                                         msgs, and records to roll back.
    #
    # @note From UploadWorkflow::External#add_to_index
    #
    def add_to_index: (*Upload items, ?atomic: bool) -> [Array[Upload], Array[Record::Exceptions::FlashPart], Array[Upload]]

    # Add/modify the indicated items from the EMMA Unified Index.
    #
    # @param [Array<Upload>] items
    # @param [Boolean]       atomic
    #
    # @raise [Api::Error] @see IngestService::Action::Submissions#put_records
    #
    # @return [Array<(Array,Array,Array)>]  Succeeded records, failed item
    #                                         msgs, and records to roll back.
    #
    # @note From UploadWorkflow::External#update_in_index
    #
    def update_in_index: (*Upload items, ?atomic: bool) -> [Array[Upload], Array[Record::Exceptions::FlashPart], Array[Upload]]

    # Remove the indicated items from the EMMA Unified Index.
    #
    # @param [Array<Model,String>] items
    # @param [Boolean]             atomic
    #
    # @raise [Api::Error] @see IngestService::Action::Submissions#delete_records
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note From UploadWorkflow::External#remove_from_index
    #
    def remove_from_index: (*(Model|String) items, ?atomic: bool) -> [Array[Upload], Array[Record::Exceptions::FlashPart]]

    def skip_index_ingest: (Symbol meth, *(Upload|Model|String) items) -> ([Array[Upload], []] | [Array[Model|String], []])

    # Interpret error message(s) generated by EMMA Unified Ingest service to
    # determine which item(s) failed.
    #
    # @param [Ingest::Message::Response, Hash{String,Integer=>String}] result
    # @param [Array<Model,String>]                                     items
    # @param [Hash]                                                    opt
    #
    # @return [Array<(Array,Array,Array)>]  Succeeded records, failed item
    #                                         msgs, and records to roll back.
    #
    # @see ExecReport#error_table
    #
    # @note From UploadWorkflow::External#process_ingest_errors
    #
    # === Implementation Notes
    # It's not clear whether there would ever be situations where there was a
    # mix of errors by index, errors by submission ID, and/or general errors,
    # but this method was written to be able to cope with the possibility.
    #
    def process_ingest_errors: ((Ingest::Message::Response|Hash[(String|Integer),String]) result, *(Model|String) items, **untyped opt) -> [Array[Upload], Array[Record::Exceptions::FlashPart], Array[Upload]]

    # Return a flatten array of items.
    #
    # @param [Array<Upload, String, Array>] items
    # @param [Symbol, nil]                  meth    The calling method.
    # @param [Integer]                      max     Maximum number to ingest.
    #
    # @raise [Record::SubmitError]  If item count is too large to be ingested.
    #
    # @return [Array]
    #
    # @note From UploadWorkflow::External#normalize_index_items
    #
    def normalize_index_items: (*(Upload|String|Array[Upload|String]) items, ?meth: Symbol|nil, ?max: Integer) -> Array[Upload|String]
  end

  module PartnerRepositoryMethods
    include Record::Submittable

    include Record::Submittable::IndexIngestMethods

    # Current AWS API service instance.
    #
    # @return [AwsS3Service]
    #
    # @note From UploadWorkflow::External#aws_api
    #
    def aws_api: () -> AwsS3Service

    # Failure messages for partner repository requests.
    #
    # @type [Hash{Symbol=>String}]
    #
    # @note From UploadWorkflow::External#REPO_FAILURE
    #
    REPO_FAILURE: Hash[Symbol,String]

    # Submit a new item to a partner repository.
    #
    # @param [Array<Model>] items
    # @param [Hash]         opt
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note From UploadWorkflow::External#repository_create
    #
    def repository_create: (*Model items, **untyped opt) -> [Array[Model], Array[Record::Exceptions::FlashPart]]

    # Submit a request to a partner repository to modify the metadata and/or
    # file of a previously-submitted item.
    #
    # @param [Array<Model>] items
    # @param [Hash]         opt
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note This capability is not yet supported by any partner repository.
    #
    # @note From UploadWorkflow::External#repository_modify
    #
    def repository_modify: (*Model items, **untyped opt) -> [Array[Model], Array[Record::Exceptions::FlashPart]]

    # Request deletion of a prior submission to a partner repository.
    #
    # @param [Array<String,Model>] items
    # @param [Hash]                opt
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note This capability is not yet supported by any partner repository.
    #
    # @note From UploadWorkflow::External#repository_remove
    #
    def repository_remove: (*Model items, **untyped opt) -> [Array[Model], Array[Record::Exceptions::FlashPart]]

    # Remove request(s) from a partner repository queue.
    #
    # @param [Array<String,Model>] items
    # @param [Hash]                opt
    #
    # @option opt [String] :repo      Required for String items.
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note From UploadWorkflow::External#repository_dequeue
    #
    def repository_dequeue: (*Model items, **untyped opt) -> [Array[Model], Array[Record::Exceptions::FlashPart]]

    # Interpret error message(s) generated by AWS S3.
    #
    # @param [AwsS3::Message::Response, Hash{String,Integer=>String}] result
    # @param [Array<String,Model>]                                    items
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @see ExecReport#error_table
    #
    # @note From UploadWorkflow::External#process_aws_errors
    #
    def process_aws_errors: ((AwsS3::Message::Response|Hash[(String|Integer),String]) result, *(String|Model) items) -> [Array[String|Model], Array[Record::Exceptions::FlashPart]]

    # Send removal request(s) to partner repositories.
    #
    # @param [Hash, Array, Model] items
    # @param [Hash]               opt     Passed to #repository_remove.
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note From UploadWorkflow::External#repository_removals
    #
    # -
    # === Variations
    # +
    #
    # @overload repository_removals(requests, **opt)
    #   @param [Hash{Symbol=>Array}] requests
    #   @param [Hash]                opt
    #   @return [Array<(Array,Array)>]
    #
    # @overload repository_removals(items, **opt)
    #   @param [Array]               items
    #   @param [Hash]                opt
    #   @return [Array<(Array,Array)>]
    #
    def repository_removals: ((symHash|String|Model|Array[String|Model]|nil) items, **untyped opt) ->  [Array[String|Model], Array[Record::Exceptions::FlashPart]]

    # Remove request(s) from partner repository queue(s).
    #
    # @param [Hash, Array] items
    # @param [Hash]        opt        Passed to #repository_remove.
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # -
    # === Variations
    # +
    #
    # @overload repository_dequeues(requests, **opt)
    #   @param [Hash{Symbol=>Array}] requests
    #   @param [Hash]                opt
    #   @return [Array<(Array,Array)>]
    #
    # @overload repository_dequeues(items, **opt)
    #   @param [Array]               items
    #   @param [Hash]                opt
    #   @return [Array<(Array,Array)>]
    #
    def repository_dequeues: ((symHash|Array[String|Model]|nil) items, **untyped opt) -> [Array[String|Model], Array[Record::Exceptions::FlashPart]]

    # Transform items into arrays of requests per repository.
    #
    # @param [Hash, Array, Model] items
    # @param [Boolean]            empty_key   If *true*, allow invalid items.
    #
    # @return [Hash{String=>Array<Model>}]  One or more requests per repo.
    #
    # -
    # === Variations
    # +
    #
    # @overload repository_requests(hash, empty_key: false)
    #   @param [Hash{String=>Model,Array<Model>}] hash
    #   @param [Boolean]                          empty_key
    #   @return [Hash{String=>Array<Model>}]
    #
    # @overload repository_requests(requests, empty_key: false)
    #   @param [Array<String,Model,any>]          requests
    #   @param [Boolean]                          empty_key
    #   @return [Hash{String=>Array<Model>}]
    #
    # @overload repository_requests(request, empty_key: false)
    #   @param [Model]                            request
    #   @param [Boolean]                          empty_key
    #   @return [Hash{String=>Array<Model>}]
    #
    def repository_requests: ((symHash|Array[String|Model]|nil) items, ?empty_key: bool) -> [Array[String|Model], Array[Record::Exceptions::FlashPart]]
  end

  module BatchMethods
    include Record::Submittable

    include Record::Submittable::RecordMethods

    include Record::Submittable::PartnerRepositoryMethods

    # :nocov:
    #include Record::Submittable::SubmissionMethods

    # Bulk removal.
    #
    # @param [Array<String,Integer,Hash,Model>] ids
    # @param [Boolean] index          If *false*, do not update index.
    # @param [Boolean] atomic         If *false*, do not stop on failure.
    # @param [Boolean] force          Default: `#force_delete`.
    # @param [Hash]    opt            Passed to #entry_remove via
    #                                   #batch_entry_operation.
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note From UploadWorkflow::External#batch_upload_remove
    #
    def batch_entry_remove: ((Array[symHash|String|Integer|Model]|nil) ids, ?index: bool, ?atomic: bool, ?force: bool|nil, **untyped opt) -> [Array[String|Model], Array[Record::Exceptions::FlashPart]]

    # Process *entries* in batches by calling *op* on successive subsets.
    #
    # If *size* is *false* or negative, then *entries* is processed as a single
    # batch.
    #
    # If *size* is *true* or zero or missing, then *entries* is processed in
    # batches of the default #BATCH_SIZE.
    #
    # @param [Symbol]                           op
    # @param [Array<String,Integer,Hash,Model>] items
    # @param [Integer, Boolean]                 size     Default: #BATCH_SIZE.
    # @param [Hash]                             opt
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @note From UploadWorkflow::External#batch_upload_operation
    #
    def batch_entry_operation: (Symbol op, Array[symHash|String|Integer|Model] items, ?size: Integer|bool|nil, **untyped opt) -> [Array[String|Model], Array[Record::Exceptions::FlashPart]]

    # Release the current thread to the scheduler.
    #
    # @param [Integer]       counter    Iteration counter.
    # @param [Integer]       frequency  E.g., '3' means every third iteration.
    # @param [Float,Boolean] pause      Default: `#THROTTLE_PAUSE`.
    #
    # @return [void]
    #
    # @note From UploadWorkflow::External#throttle
    #
    def throttle: (Integer counter, ?frequency: Integer, ?pause: bool|Float) -> Integer
  end

  module SubmissionMethods
    include Record::Submittable

    include Record::Submittable::RecordMethods

    include Record::Submittable::DatabaseMethods

    include Record::Submittable::IndexIngestMethods

    include Record::Submittable::PartnerRepositoryMethods

    include Record::Submittable::BatchMethods

    # Add a new submission to the database, upload its file to storage, and add
    # a new index entry for it (if explicitly requested).
    #
    # @param [Boolean] index          If *true*, update index.
    # @param [Boolean] atomic         Passed to #add_to_index.
    # @param [Hash]    data           @see Upload#assign_attributes.
    #
    # @return [Array<(Upload,Array>)]  Record instance; zero or more messages.
    # @return [Array<(nil,Array)>]     No record; one or more error messages.
    #
    # @see #db_insert
    # @see #add_to_index
    #
    # @note Currently unused.
    #
    # @note From UploadWorkflow::External#upload_create
    #
    # === Implementation Notes
    # Compare with #bulk_entry_create
    #
    def entry_create: (?index: bool|nil, ?atomic: bool|nil, **untyped data) -> [(Upload | nil), Array[Record::Exceptions::FlashPart]]

    # Update an existing database Upload record and update its associated index
    # entry (if explicitly requested).
    #
    # @param [Boolean] index          If *true*, update index.
    # @param [Boolean] atomic         Passed to #update_in_index.
    # @param [Hash]    data           @see Upload#assign_attributes
    #
    # @return [Array<(Upload,Array>)] Record instance; zero or more messages.
    # @return [Array<(nil,Array)>]    No record; one or more error messages.
    #
    # @see #db_update
    # @see #update_in_index
    #
    # @note Currently unused.
    #
    # @note From UploadWorkflow::External#upload_edit
    #
    # === Implementation Notes
    # Compare with #bulk_entry_edit
    #
    def entry_edit: (?index: bool|nil, ?atomic: bool|nil, **untyped data) -> [(Upload | nil), Array[Record::Exceptions::FlashPart]]

    # Remove records from the database and from the index.
    #
    # @param [Array<Upload,String,Array>] items   @see #collect_records
    # @param [Boolean]                    index  *false* -> no index update
    # @param [Boolean]                    atomic *true* == all-or-none
    # @param [Boolean]                    force  Force removal of index entries
    #                                             even if the related database
    #                                             entries do not exist.
    #
    # @return [Array<(Array,Array)>]  Succeeded items and failed item messages.
    #
    # @see #remove_from_index
    #
    # @note Used by #add_to_index and #batch_entry_remove
    #
    # @note From UploadWorkflow::External#upload_remove
    #
    # === Usage Notes
    # Atomicity of the record removal phase rests on the assumption that any
    # database problem(s) would manifest with the very first destruction
    # attempt.  If a later item fails, the successfully-destroyed items will
    # still be removed from the index.
    #
    def entry_remove: (*(Upload|String|Array[Upload|String]) items, ?index: bool|nil, ?atomic: bool|nil, ?force: bool|nil, **untyped opt) -> [Array[String|Model], Array[Record::Exceptions::FlashPart]]

    private

    def item_label: (untyped item) -> String
  end

  private

  THIS_MODULE: Module

  include Record::Submittable::SubmissionMethods

  extend Record::Submittable::SubmissionMethods
end
