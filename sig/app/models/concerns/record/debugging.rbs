# Add debugging support.
#
# == Usage Notes
# Must be included last so that #initialize can be overridden.
#
module Record::Debugging
  extend ActiveSupport::Concern

  include Emma::Debug

  include Record

  # :nocov:
  include Kernel

  # Show instance output.
  #
  # @param [Array<Any>] parts
  # @param [Hash]  opt              Passed to ShowMethods#output.
  #
  def show: (*untyped parts, **untyped opt) -> nil

  # Console output.
  #
  # @param [Array]       parts
  # @param [String, nil] tag
  # @param [String, nil] ldr
  # @param [Integer]     width
  #
  # @return [nil]
  #
  def output: (*untyped parts, ?tag: String?, ?ldr: String?, ?width: Integer) { () -> untyped } -> nil

  def __debug_step: (*untyped args, **untyped opt) { () -> untyped } -> nil

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Debugging

    # :nocov:
    include ActiveRecord::Scoping::Named::ClassMethods

    # Show class output.
    #
    # @param [Array] parts
    # @param [Hash]  opt                Passed to ShowMethods#output.
    #
    def show: (*untyped parts, **untyped opt) -> nil
  end

  # Methods which are only appropriate if the including class is an
  # ApplicationRecord.
  #
  module InstanceMethods
    include Record::Debugging

    # :nocov:
    include ActiveRecord::Core

    # Create a new instance.
    #
    # @param [Hash, ActionController::Parameters, Model, nil] attr
    # @param [Proc, nil] block
    #
    # @note - overrides ActiveRecord::Core#initialize
    #
    def initialize: (?(Model|prmHash)? attr) { () -> untyped } -> void
  end

  private

  include InstanceMethods
end
