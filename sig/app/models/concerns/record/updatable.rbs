# Common methods for ActiveRecord classes that contain columns with values
# constrained to an enumerable list and are intended to be updated dynamically.
#
module Record::Updatable
  extend ActiveSupport::Concern

  include Record

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Updatable

    # Analogous to the instance methods generated by ActiveRecord::Enum#enum,
    # but for a column whose values are strings not integers.
    #
    # @param [Symbol, String, Hash]      cols
    # @param [Array<Symbol,String>, nil] vals
    #
    # @return [void]
    #
    # -
    # == Variations
    # +
    #
    # @overload enum_methods(columns_and_values)
    #   @param [Hash] columns_and_values
    #
    # @overload enum_methods(column, values)
    #   @param [Symbol, String]       column
    #   @param [Array<Symbol,String>] values
    #
    # == Usage Notes
    # This creates instance methods in the class which calls it.  E.g.:
    #
    #   `enum_methods command: %i[pause cancel]`
    #
    # creates:
    #
    #   * valid_command?(value = nil, **)   Is the value of :command legal?
    #   * command_values(...)               All legal :command values.
    #   * self.command_values(...)          All legal :command values.
    #   * set_command!(value, **)           Set :command to the given value.
    #   * clear_command?(...)               Is :command set to NULL ?
    #   * clear_command!(...)               Set :command to NULL.
    #   * pause?(...)                       Is :command set to :pause ?
    #   * pause!(...)                       Set :command to :pause.
    #   * cancel?(...)                      Is :command set to :cancel ?
    #   * cancel!(...)                      Set :command to :cancel.
    #
    # NOTE: The imperative methods update an entry that exists in the database
    # immediately without needing to use #save.
    #
    # @see #set_fields_direct
    #
    def enum_methods: ((symHash|Symbol|String) cols, ?(Array[Symbol|String]|nil) vals) -> void
  end

  # Methods to be added to the including record class.
  #
  module InstanceMethods
    include Record::Updatable

    # :nocov:
    include ActiveRecord::Core

    include ActiveRecord::AttributeMethods

    # Get the current value of a database column.
    #
    # @note This does not currently get the "real-time" value.  In the absence
    #   of a strategy for plucking the current column value a reload of the
    #   database record is required first.
    #
    # @param [Symbol, String] column  Database field name.
    #
    # @return [*]
    #
    def get_field_direct: ((Symbol|String) column) -> untyped

    # Directly update a database column, by-passing validations and other
    # callbacks.
    #
    # @param [String, Symbol] column
    # @param [Any, nil]       new_value
    #
    # @raise [ActiveRecord::ReadOnlyRecord]   If the record is not writable.
    #
    # @return [Boolean, nil]            Nil if the record has been deleted.
    #
    def set_field_direct: ((Symbol|String) column, untyped new_value) -> (bool | nil)

    # Directly update multiple database columns, by-passing validations and
    # other callbacks.
    #
    # If the record does not yet exist in the database, only the model object
    # is updated.  If the record does exist then it is updated dynamically in
    # the database as well.
    #
    # @param [Hash] pairs
    #
    # @raise [ActiveRecord::ReadOnlyRecord]   If the record is not writable.
    #
    # @return [Boolean, nil]            Nil if the record has been deleted.
    #
    def set_fields_direct: (symHash pairs) -> (bool | nil)
  end

  private

  THIS_MODULE: Module

  include InstanceMethods
end
