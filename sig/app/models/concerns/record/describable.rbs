# Textual record descriptions.
#
module Record::Describable
  extend ActiveSupport::Concern

  include Record

  include Record::EmmaIdentification

  extend ::Record::Describable

  # Extract the interpolation methods defined in the current context indexed by
  # their respective interpolation keys.
  #
  # E.g.: The method #describe_repo is added as { repo: :describe_repo }.
  #
  # @return [Hash{Symbol=>Symbol}]
  #
  # @note Currently used only by #interpolations.
  #
  def interpolation_table: () -> Hash[Symbol,Symbol]

  @interpolation_table: Hash[Symbol,Symbol]

  # Replace #sprintf named references with the matching values extracted from
  # *model* or *opt*.
  #
  # If the name is capitalized or all uppercase (e.g. "%{Name}" or "%{NAME}")
  # then the interpolated value will follow the same case.
  #
  # @param [any, nil] text
  # @param [any, nil] model           Model
  # @param [Hash]     opt
  #
  # @return [String]                  A (possibly modified) copy of *text*.
  #
  # @see Kernel#sprintf
  #
  # @note Currently used only by #process_note.
  #
  def interpolations: (untyped text, untyped model, **untyped opt) -> String

  # Process a lambda or method reference and return a final result string.
  #
  # @param [String, Symbol, Proc, nil] note
  # @param [any, nil]                  model  Model
  # @param [Hash]                      opt
  #
  # @option opt [String, Symbol, Proc] :note  Only used if *note* is *nil*.
  #
  # @return [String]                  From #interpolations.
  # @return [nil]                     If *note* is *nil*.
  #
  # @see Kernel#sprintf
  #
  # @note Currently unused.
  #
  def process_note: (?(String|Symbol|Proc|nil) note, untyped model, **untyped opt) -> (String | nil)

  # Extract the interpolation methods defined in the current context indexed by
  # their respective interpolation keys.
  #
  # E.g.: The method #describe_repo is added as { repo: :describe_repo }.
  #
  # @param [any, nil] mod             Default self or self.class.
  #
  # @return [Hash{Symbol=>Symbol}]
  #
  # @see InterpolationMethods
  #
  # @note Currently used only by #interpolation_table.
  #
  def generate_interpolation_table: (?untyped mod) -> Hash[Symbol,Symbol]

  # Common interpolation methods.
  #
  # @see #generate_interpolation_table
  #
  # === Implementation Notes
  # These are encapsulated in their own module to support extendability.
  #
  module InterpolationMethods
    include Record::Describable

    extend ::Record::Describable::InterpolationMethods

    # A replacement value for '%{id}' in #sprintf formats.
    #
    # @param [any, nil] model         Model
    # @param [Hash]     opt
    #
    # @return [String, nil]
    #
    # @see Record::Identification#id_value
    #
    # @note Currently unused.
    #
    def describe_id: (?untyped model, **untyped opt) -> (String | nil)

    # A replacement value for '%{repo}' or '%{repository}' in #sprintf formats.
    #
    # @param [any, nil] model         Model
    # @param [Hash]     opt
    #
    # @return [String, nil]
    #
    # @see Record::EmmaIdentification#repository_name
    #
    # @note Currently unused.
    #
    def describe_repo: (?untyped model, **untyped opt) -> (String | nil)

    # A replacement value for '%{sid}' in #sprintf formats.
    #
    # @param [any, nil] model         Model
    # @param [Hash]     opt
    #
    # @return [String, nil]
    #
    # @see Record::EmmaIdentification#sid_value
    #
    # @note Currently used only by #describe_submission.
    #
    def describe_sid: (?untyped model, **untyped opt) -> (String | nil)

    # A replacement value for '%{submission}' in #sprintf formats.
    #
    # @param [any, nil] model         Model
    # @param [Hash]     opt
    #
    # @return [String, nil]
    #
    # @see Record::EmmaIdentification#sid_value
    #
    # @note Currently unused.
    #
    def describe_submission: (?untyped model, **untyped opt) -> (String | nil)

    # A replacement value for '%{user}' in #sprintf formats.
    #
    # @param [any, nil] model         Model
    # @param [Hash]     _opt          Unused.
    #
    # @return [String, nil]
    #
    # @note Currently unused.
    #
    def describe_user: (?untyped model, **untyped _ignored) -> (String | nil)

    # A replacement value for '%{user_id}' in #sprintf formats.
    #
    # @param [any, nil] model           Model
    # @param [Hash]            _opt   Unused.
    #
    # @return [String, nil]
    #
    # @see User#id_value
    #
    # @note Currently unused.
    #
    def describe_user_id: (?untyped model, **untyped _ignored) -> (String | nil)

    # A textual description of the type of the Model instance for use as a
    # replacement value for '%{text}' in #sprintf formats.
    #
    # @param [any, nil] model         Model
    # @param [Hash]     opt
    #
    # @return [String]
    #
    # === Usage Notes
    # The including class is expected to define an overriding class method.
    #
    # @note Currently unused.
    #
    def describe_type: (?untyped model, **untyped opt) -> String

    # A textual description of the status of the Model instance.
    #
    # @param [any, nil] model         Model
    # @param [Hash]     opt
    #
    # @return [String]
    #
    # === Usage Notes
    # The including class is expected to define an overriding class method.
    #
    # @note Currently unused.
    #
    def describe_status: (?untyped model, **untyped opt) -> String

    # self_for_instance_method
    #
    # @param [Symbol] meth            Calling method.
    #
    # @raise [RuntimeError]           If a class method is being defined.
    #
    # @return [self]                  If an instance method is being defined.
    #
    # @note Currently used only by unused methods.
    #
    def self_for_instance_method: (Symbol meth) -> self
  end

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Describable

    include Record::Describable::InterpolationMethods

    # Creates an override to InterpolationMethods which includes all of its
    # methods along with the methods defined within the block.
    #
    # @return [void]
    #
    # @note Currently unused.
    #
    def interpolation_methods: () { () -> untyped } -> void
  end

  # Methods which are only appropriate if the including class is an
  # ApplicationRecord.
  #
  module InstanceMethods
    include Record::Describable

    include Record::Describable::InterpolationMethods

    # @see Record::Describable#interpolation_table
    def interpolation_table: () -> Hash[Symbol,Symbol]

    # @see Record::Describable#interpolations
    def interpolations: (untyped text, ?untyped model, **untyped opt) -> String
  end

  private

  THIS_MODULE: Module

  include InstanceMethods
end
