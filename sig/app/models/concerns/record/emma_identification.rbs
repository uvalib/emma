# Record utility methods related to identifiers for EMMA submissions.
#
module Record::EmmaIdentification
  extend ActiveSupport::Concern

  include Record

  include Record::Identification

  extend ::Record::EmmaIdentification

  SID_COLUMN: Symbol

  # @type [String]
  SID_PREFIX: String

  # @type [(Integer,Integer)]
  SID_LETTERS: [Integer, Integer]

  # @type [Integer]
  SID_LETTER_SPAN: Integer

  # @type [String]
  SID_LETTER_MATCH: String

  # @type [Regexp]
  SID_PATTERN: Regexp

  # Column name for the submission ID.
  #
  # @return [Symbol, nil]
  #
  def sid_column: () -> (Symbol | nil)

  @sid_column: Symbol | nil

  # Extract the submission ID from the given item.
  #
  # @param [any, nil] item            Model, Hash, String
  # @param [Hash]     opt
  #
  # @option opt [Symbol] :sid_key     Default: `#sid_column`.
  #
  # @return [String]                  The submission ID.
  # @return [nil]                     No submission ID could be determined.
  #
  def sid_value: (untyped item, **untyped opt) -> (String | nil)

  # Indicate whether *value* could be an EMMA submission ID.
  #
  # @param [any, nil] value           String
  #
  def valid_sid?
    : (untyped value) -> false
    | (String  value) -> bool

  # Indicate whether *value* could be an EMMA submission ID.
  #
  # (Unlike #valid_sid? this is not overridden in InstanceMethods so it is not
  # subject to problems with recursive definitions.)
  #
  # @param [any, nil] value
  #
  def match_sid?
    : (String  value) -> bool
    | (untyped value) -> false

  # Indicate whether the record is an EMMA-native item.
  #
  # @param [any, nil] item            Model, Hash, String, Symbol
  #
  def emma_native?: (untyped item) -> bool

  # Indicate whether the item should involve requests queued through an
  # S3 bucket.
  #
  # @param [any, nil] item            Model, Hash, String, Symbol
  #
  def s3_queue?: (untyped item) -> bool

  # Extract the repository associated with the item.
  #
  # @param [any, nil] item            Model, Hash, String, Symbol
  #
  # @return [String]                  One of EmmaRepository#values.
  # @return [nil]                     If *item* did not indicate a repository.
  #
  # === Usage Notes
  # Depending on the context, the caller may need to validate the result with
  # EmmaRepository#valid?.
  #
  def repository_value: (untyped item) -> (String | nil)

  # The full name of the indicated repository.
  #
  # @param [any, nil] item            Model, Hash, String, Symbol
  #
  # @return [String]                  The name of the associated repository.
  # @return [nil]                     If *src* did not indicate a repository.
  #
  def repository_name: (untyped item) -> (String | nil)

  # Extract the EMMA index entry identifier from the item.
  #
  # @param [any, nil] item            Model, Hash, String, Symbol
  #
  # @return [String]
  # @return [nil]
  #
  # === Usage Notes
  # If *item* is a String, it is assumed to be good.  Depending on the context,
  # the caller may need to validate the result with #valid_record_id?.
  #
  def record_id: (untyped item) -> (String | nil)

  # Indicate whether *item* is or contains a valid EMMA index record ID.
  #
  # @param [any, nil]              item       Model, Hash, String, Symbol
  # @param [String, Array<String>] add_repo
  # @param [String, Array<String>] add_fmt
  #
  def valid_record_id?: (untyped item, ?add_repo: String|strArray|nil, ?add_fmt: String|strArray|nil) -> bool

  # Create a unique submission item identifier.
  #
  # @param [Time, DateTime, nil] time
  # @param [String, Boolean] prefix   Character(s) leading the numeric portion,
  #                                     *true* for the default prefix, or
  #                                     *false* for no prefix.
  #
  # @return [String]
  #
  # @see #sid_counter
  #
  # === Implementation Notes
  # The result is a (single-character) prefix followed by 8 hexadecimal digits
  # which represent seconds into the epoch followed by a single random letter
  # from 'g' to 'z', followed by two decimal digits from "00" to "99" based on
  # a randomly initialized counter.  This arrangement allows bulk upload (which
  # occurs on a single thread) to be able to generate unique IDs in rapid
  # succession.
  #
  # Leading with a non-hex-digit guarantees that submission ID's are distinct
  # from database ID's (which are only decimal digits).
  #
  def generate_submission_id: (?(Time|DateTime|nil) time, ?prefix: bool|String) -> String

  # Counter for the trailing portion of the generated submission ID.
  #
  # This provides a per-thread value in the range 0..99 which can be used to
  # differentiate submission IDs which are generated in rapid succession (e.g.,
  # for bulk upload).
  #
  # @return [Integer]
  #
  def sid_counter: () -> Integer

  # Return with the specified record or *nil* if one could not be found.
  # If *item* is a *self*, it is returned; otherwise an instance is generated
  # from a database lookup.
  #
  # @param [any, nil]    item         String, Integer, Hash, Model
  # @param [Boolean]     fatal        If *false*, do not raise exceptions.
  # @param [Symbol, nil] meth         Calling method (for logging).
  # @param [Hash]        opt          Used if *item* is *nil* except for:
  #
  # @option opt [Symbol] :id_key      Default: `#id_column`.
  # @option opt [Symbol] :sid_key     Default: `#sid_column`.
  # @option opt [Symbol] :alt_id_key  E.g. :entry_id
  #
  # @raise [Record::StatementInvalid]   If :id/:sid not given.
  # @raise [Record::NotFound]           If *item* was not found.
  #
  # @return [ApplicationRecord<Model>]  A new instance or *item*.
  # @return [nil]                       Only if *fatal* is *false*.
  #
  # @note From UploadWorkflow::External#find_record
  #
  def find_record: (untyped item, ?fatal: bool, ?meth: Symbol|nil, **untyped opt) -> (ApplicationRecord | nil)

  # Interpret an identifier as either an :id or :submission_id, generating a
  # field/value pair for use with #find_by or #where.
  #
  # If :sid_key set to *nil* then the result will always be in terms of :id_key
  # (which cannot be set to *nil*).
  #
  # @param [String, Symbol, Integer, Hash, Model, nil] v
  # @param [Hash]                                      opt
  #
  # @option opt [Symbol] :id_key      Default: `#id_column`.
  # @option opt [Symbol] :sid_key     Default: `#sid_column`.
  #
  # @return [Hash{Symbol=>Integer,String,nil}] Exactly one key-value pair.
  #
  def id_term: (?(symHash|Symbol|String|Integer|Model|nil) v, **untyped opt) -> Hash[Symbol,(String|Integer|nil)]

  # Interpret an ID string as a range of IDs if possible.
  #
  # The method supports a mixture of database IDs (which are comprised only of
  # decimal digits) and submission IDs (which always start with a non-digit),
  # however a submission ID cannot be part of a range.
  #
  # @param [String, Integer, Model] id
  # @param [Hash]                   opt
  #
  # @return [Array<String>]
  #
  def expand_id_range: ((String|Integer|Model) id, **untyped opt) -> strArray

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::EmmaIdentification
  end

  # Methods which are only appropriate if the including class is an
  # ApplicationRecord.
  #
  module InstanceMethods
    include Record::EmmaIdentification

    # @see Record::EmmaIdentification#sid_value
    #
    def sid_value: (?untyped item, **untyped opt) -> (String | nil)

    # @see Record::EmmaIdentification#valid_sid?
    #
    def valid_sid?: (?untyped value) -> bool

    # @see Record::EmmaIdentification#emma_native?
    #
    def emma_native?: (?untyped item) -> bool

    # @see Record::EmmaIdentification#s3_queue?
    #
    def s3_queue?: (?untyped item) -> bool

    # @see Record::EmmaIdentification#repository_value
    #
    def repository_value: (?untyped item) -> (String | nil)

    # @see Record::EmmaIdentification#repository_name
    #
    def repository_name: (?untyped item) -> (String | nil)

    # @see Record::EmmaIdentification#record_id
    #
    def record_id: (?untyped item) -> (String | nil)

    # @see Record::EmmaIdentification#valid_record_id?
    #
    def valid_record_id?: (?untyped item, **untyped opt) -> bool
  end

  private

  THIS_MODULE: Module

  include InstanceMethods

  public

  # A unique identifier for this model instance.
  #
  # @return [String]
  #
  def identifier: () -> String
end
