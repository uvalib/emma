# Common methods for ActiveRecord classes that are used to track outcomes
# across multiple steps.
#
# NOTE: This was originally part of a refactoring to support asynchronous
#   submission workflows.  Although that approach has been abandoned, this is
#   being retained in commented-out form for possible use in a refactoring of
#   the Upload class that would include removal of the "workflow" gem.
#
# #@!attribute [rw] state
#  #Database :state column.
#  #@return [String]
#
# === Usage Notes
# If the including class does not define a STATE_TABLE constant before the
# include of this module, #generate_state_methods will need to be run
# explicitly with a Hash with state values as keys.
#
module Record::Steppable
  #extend ActiveSupport::Concern

  #include Record

  #extend ::Record::Steppable

  # The default state column name.
  #
  # @type [Symbol]
  #
  # @note From Upload::WorkflowMethods#STATE_COLUMNS
  #
  #STATE_COLUMN: Symbol

  # Workflow state configurations.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  # @see file:config/locales/state_table.en.yml
  #
  #STATE_TABLES: Hash[Symbol,symHash]

  # Groupings of states related by theme.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  # @see file:config/locales/controllers/upload.en.yml
  #
  # @note From Upload::WorkflowMethods#STATE_GROUP
  #
  #STATE_GROUP: Hash[Symbol,symHash]

  # Mapping of workflow state to category.
  #
  # @type [Hash{Symbol=>Symbol}]
  #
  # @note From Upload::WorkflowMethods#REVERSE_STATE_GROUP
  #
  #REVERSE_STATE_GROUP: Hash[Symbol,Symbol]

  # The database column currently associated with the workflow state of the
  # record.
  #
  # @return [Symbol]
  #
  # @note From Upload::WorkflowMethods#state_column
  #
  #def state_column: () -> untyped

  # Workflow state table associated with *item*.
  #
  # @param [Model, Class<Model>] item
  #
  # @return [Hash]
  #
  #def state_table: ((Model|Class) item) -> symHash

  # Workflow state configuration for *item*.
  #
  # @param [Model, Class<Model>] item
  # @param [Boolean]             fatal
  #
  # @return [Hash, nil]
  #
  #def get_state_table: ((Model|Class) item, ?fatal: bool) -> (symHash | nil)

  # All valid workflow states for *item*.
  #
  # @param [Model, Class<Model>] item
  #
  # @return [Array<Symbol>]
  #
  #def get_state_names: ((Model|Class) item) -> symArray

  # Cast value in a form for comparison.
  #
  # @param [Model, Symbol, String, nil] item
  #
  # @return [Symbol, nil]
  #
  #def state_value: ((Model|Symbol|String|nil) item) -> (Symbol | nil)

  # Get the configured descriptive note for the state.
  #
  # @param [Model, Symbol, String, nil] item
  #
  # @return [String, nil]
  #
  #def state_note: ((Model|Symbol|String|nil) item) -> (String | nil)

  # Get a natural-language description for the state.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @return [String, nil]
  #
  #def state_description: ((Model|Symbol|String|nil) item) -> (String | nil)

  # Indicate whether this record represents an existing EMMA entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#existing_entry?
  #
  #def existing_entry?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record represents a submission that has not yet
  # become an EMMA entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#new_submission?
  #
  #def new_submission?: ((Model|Symbol|String|nil) item) -> bool

  # Return the group of the given state.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @return [Symbol]  Defaults to :all if *target_state* is invalid.
  #
  # @note From Upload::WorkflowMethods#state_group
  #
  #def state_group: ((Model|Symbol|String|nil) item) -> Symbol

  # Return the label for the given state group.
  #
  # @param [Model, String, Symbol, nil] group
  #
  # @return [String]
  # @return [nil]                     If *group* is invalid.
  #
  #def state_group_label: ((Model|Symbol|String|nil) group) -> (String | nil)

  # Indicate whether this record is involved in a workflow step related to
  # the creation of a new EMMA entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#being_created?
  #
  #def being_created?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a workflow step related to
  # the modification of an existing EMMA entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#being_modified?
  #
  #def being_modified?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a workflow step related to
  # the removal of an existing EMMA entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#being_removed?
  #
  #def being_removed?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a workflow step related to
  # the review process.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#under_review?
  #
  #def under_review?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a workflow step related to
  # transmission to a partner repository.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#being_submitted?
  #
  #def being_submitted?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a workflow step related to
  # ingest into the EMMA Unified Index.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#being_indexed?
  #
  #def being_indexed?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a terminal workflow step.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#done?
  #
  #def done?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record has become a finalized EMMA entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#completed?
  #
  #def completed?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record will never become a finalized EMMA entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#canceled?
  #
  #def canceled?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a workflow step which leads to
  # a change in the associated EMMA Unified Index entry.
  #
  # @param [Model, String, Symbol, nil] item
  #
  #def in_process?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is involved in a workflow step where
  # non-administrative data (EMMA or file data) could be changed.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#unsealed?
  #
  #def unsealed?: ((Model|Symbol|String|nil) item) -> bool

  # Indicate whether this record is *not* involved in a workflow step where
  # non-administrative data (EMMA or file data) could be changed.
  #
  # @param [Model, String, Symbol, nil] item
  #
  # @note From Upload::WorkflowMethods#sealed?
  #
  #def sealed?: ((Model|Symbol|String|nil) item) -> bool

  # job_class
  #
  # @param [Model, Class<Model>] item
  #
  # @return [Class<ApplicationJob>]
  #
  #def job_class: (Model|Class item) -> Class

  # Class methods automatically added to the including record class.
  #
  #module ClassMethods
    #include Record::Steppable

    #include Record::Updatable::ClassMethods

    # Workflow state table.
    #
    # @param [Model, Class<Model>, nil] item      Default: self.
    #
    # @return [Hash]
    #
    #def state_table: (?(Model|Class|nil) item) -> symHash

    #@state_table: symHash

    # Workflow state configuration.
    #
    # @param [Model, Class<Model>, nil] item      Default: self.
    # @param [Boolean]                  fatal
    #
    # @return [Hash, nil]
    #
    #def get_state_table: (?(Model|Class|nil) item, ?fatal: bool) -> (symHash | nil)

    # All valid workflow states.
    #
    # @param [Model, Class<Model>, nil] item
    #
    # @return [Array<Symbol>]
    #
    #def get_state_names: (?(Model|Class|nil) item) -> symArray

    # Return the class from app/jobs associated with the record class.
    #
    # @param [Model, Class<Model>, nil] item  Default: self.
    #
    # @return [Class<Model::WorkflowJob>]
    #
    #def job_class: (?(Model|Class|nil) item) -> Class

    #@job_class: Class

    # Called from the including class to generate query- and action-methods
    # associated with the column.
    #
    # @param [Array<Symbol,String>, nil] states   Default: #get_state_names
    #
    # @return [void]
    #
    # === Usage Notes
    # If the including class has defined a STATE_TABLE or STATEs constant prior
    # to including this module, this method will be invoked implicitly using
    # that set of state values.  Otherwise, this method will have be invoked
    # explicitly after the state table has been defined.
    #
    #def generate_state_methods: (?(Array[Symbol|String]|nil) states) -> void

    # Validate state table definitions and interconnections.
    #
    # @param [Hash, nil] table   Def: `#state_table`
    #
    # === Usage Notes
    # This is best put at the very end of the class definition so that any
    # methods specified in the table definitions will have been defined.
    #
    #def validate_state_table: (?(symHash|nil) table) -> nil

    # Create an ActiveJob serializer for the given Record class if it does not
    # already exist.
    #
    # @param [Class, Module, *] base
    #
    # @return [void]
    #
    #def generate_job_serializer: (untyped base) -> void
  #end

  # Instance methods to be added to the including record class.
  #
  #module InstanceMethods
    #include Emma::Common

    #include Record::Steppable

    #include Record::Reportable

    # Workflow state table associated with the current record.
    #
    # @param [Model, Class<Model>, nil] item  Default: self.
    #
    # @return [Hash]
    #
    #def state_table: (?(Model|Class|nil) item) -> symHash

    #@state_table: symHash

    # Workflow state configuration associated with the current record.
    #
    # @param [Model, Class<Model>, nil] item      Default: self.
    # @param [Boolean]                  fatal
    #
    # @return [Hash, nil]
    #
    #def get_state_table: (?(Model|Class|nil) item, ?fatal: bool) -> (symHash | nil)

    # All valid workflow states for the current record.
    #
    # @param [Model, Class<Model>, nil] item      Default: self.
    #
    # @return [Array<Symbol>, nil]
    #
    #def get_state_names: (?(Model|Class|nil) item) -> (symArray | nil)

    # Cast value in a form for comparison.
    #
    # @param [Model, Symbol, String, nil] item  Default: `self`.
    #
    # @return [Symbol, nil]
    #
    #def state_value: (?(Model|Symbol|String|nil) item) -> (Symbol | nil)

    # Get the configured descriptive note for the current state.
    #
    # @param [Model, Symbol, String, nil] item  Default: `self`.
    #
    # @return [String, nil]
    #
    #def state_note: (?(Model|Symbol|String|nil) item) -> (String | nil)

    # Get a natural-language description for the current state.
    #
    # @param [Model, Symbol, String, nil] item  Default: `self[state_column]`.
    #
    # @return [String, nil]
    #
    #def state_description: (?(Model|Symbol|String|nil) item) -> (String | nil)

    # Indicate whether this record represents an existing EMMA entry.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def existing_entry?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record represents an existing EMMA entry.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def new_submission?: (?(Model|Symbol|String|nil) item) -> bool

    # Return the state group of the record.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def state_group: (?(Model|Symbol|String|nil) item) -> Symbol

    # Return the label for the state group of the record.
    #
    # @param [Model, String, Symbol, nil] group   Default: `self`.
    #
    # @return [String]
    # @return [nil]                     If *group* is invalid.
    #
    #def state_group_label: (?(Model|Symbol|String|nil) group) -> (String | nil)

    # Indicate whether this record is involved in a workflow step related to
    # the creation of a new EMMA entry.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def being_created?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step related to
    # the modification of an existing EMMA entry.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def being_modified?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step related to
    # the removal of an existing EMMA entry.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def being_removed?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step related to
    # the review process.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def under_review?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step related to
    # transmission to a partner repository.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def being_submitted?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step related to
    # ingest into the EMMA Unified Index.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def being_indexed?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step related to
    # ingest into the EMMA Unified Index.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def completed?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step which leads
    # to a change in the associated EMMA Unified Index entry.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def in_process?: (?(Model|Symbol|String|nil) item) -> bool

    # Indicate whether this record is involved in a workflow step where
    # non-administrative data (EMMA or file data) could be changed.
    #
    # @param [Model, String, Symbol, nil] item  Default: `self`.
    #
    #def unsealed?: (?(Model|Symbol|String|nil) item) -> bool

    # Return the class from app/jobs associated with the record class.
    #
    # @param [Model, Class<Model>, nil] item  Default: self.
    #
    # @return [Class<Model::WorkflowJob>]
    #
    #def job_class: (?(Model|Symbol|String|nil) item) -> Class

    #@job_class: Class

    # Get the next legal state(s).
    #
    # If "emma.state_table.[...].next" is *false*, *nil* or missing, the result
    # is an empty array (indicating a terminal state).
    #
    # @param [Symbol, String, nil] curr_state   Passed to #state_value.
    #
    # @return [Array<Symbol>]
    #
    #def transitions: (?(Symbol|String|nil) curr_state) -> symArray

    # Get the next legal state.
    #
    # @param [Symbol, String, nil] curr_state   Passed to #transitions.
    #
    # @return [Symbol, nil]
    #
    #def next_state: (?(Symbol|String|nil) curr_state) -> (Symbol | nil)

    # Indicate whether the value represents a terminal state.
    #
    # @param [Symbol, String, nil] curr_state  Passed to #transitions.
    #
    #def final_state?: (?(Symbol|String|nil) curr_state) -> bool
  #end

  #private

  #THIS_MODULE: Module

  #include InstanceMethods
end
