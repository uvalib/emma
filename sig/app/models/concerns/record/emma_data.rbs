# Record methods to support processing of EMMA metadata fields.
#
module Record::EmmaData
  extend ActiveSupport::Concern

  include Emma::Common

  include Emma::Json

  include Record

  include Record::EmmaIdentification

  # The default name for the column that holds EMMA metadata values.
  #
  # @type [Symbol]
  #
  EMMA_DATA_COLUMN: Symbol

  # Whether the #EMMA_DATA_COLUMN should be persisted as a Hash.
  #
  # @type [Boolean]
  #
  EMMA_DATA_HASH: bool

  # EMMA data fields configuration.
  #
  # @type [Hash]
  #
  EMMA_DATA_CONFIG: symHash

  # EMMA data field names.
  #
  # @type [Array<Symbol>]
  #
  EMMA_DATA_KEYS: symArray

  # EMMA data fields that default to the current time.
  #
  # @type [Array<Symbol>]
  #
  DEFAULT_TIME_NOW_FIELDS: symArray

  # Create a URL for use with :emma_retrievalLink.
  #
  # @param [String, nil]      rid       EMMA repository record ID.
  # @param [String, Hash nil] base_url  Default: `Upload#BULK_BASE_URL`.
  #
  # @return [String]
  # @return [nil]                       If no repository ID was given.
  #
  # @note From Upload#make_retrieval_link
  #
  def make_retrieval_link: (String? rid, ?(symHash|String|nil) base_url) -> (String | nil)

  # Generate a record to express structured EMMA data.
  #
  # @param [Hash] data
  #
  # @return [Search::Record::MetadataRecord]
  #
  # @note From Upload::EmmaDataMethods#make_emma_record
  #
  def make_emma_record: (symHash data, **untyped _ignored) -> Search::Record::MetadataRecord

  # parse_emma_data
  #
  # @param [Search::Record::MetadataRecord, Model, Hash, String, nil] data
  # @param [Boolean] allow_blank
  #
  # @return [Hash]
  #
  # @note From Upload::EmmaDataMethods#parse_emma_data
  #
  def parse_emma_data: ((Search::Record::MetadataRecord|Model|anyHash|String|nil) data, ?bool allow_blank) -> symHash

  # generate_emma_data
  #
  # @param [Search::Record::MetadataRecord, Model, Hash, String, nil] data
  # @param [Search::Record::MetadataRecord, Model, Hash, String, nil] attr
  #
  # @return [Hash]
  #
  # @note From Upload#assign_attributes (sorta)
  #
  def generate_emma_data: ((Search::Record::MetadataRecord|Model|anyHash|String|nil) data, (Search::Record::MetadataRecord|Model|anyHash|String|nil) attr) -> symHash

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::EmmaData
  end

  # Instance implementations to be included if the schema has an
  # EMMA_DATA_COLUMN column.
  #
  module InstanceMethods
    include Record::EmmaData

    # @see Record::EmmaData#make_retrieval_link
    #
    def make_retrieval_link: (?(String|nil) rid, ?(symHash|String|nil) base_url) -> (String | nil)

    # @see Record::EmmaData#generate_emma_data
    #
    def generate_emma_data: ((Search::Record::MetadataRecord|Model|anyHash|String|nil) data, (Search::Record::MetadataRecord|Model|anyHash|String|nil) attr) -> symHash

    # Present :emma_data as a structured object (if it is present).
    #
    # @param [Boolean] refresh        If *true*, force regeneration.
    #
    # @return [Search::Record::MetadataRecord]
    #
    # @note From Upload::EmmaDataMethods#emma_record
    #
    def emma_record: (?refresh: bool) -> Search::Record::MetadataRecord

    @emma_record: Search::Record::MetadataRecord | nil

    # Present :emma_data as a hash (if it is present).
    #
    # @param [Boolean] refresh        If *true*, force regeneration.
    #
    # @return [Hash{Symbol=>Any}]
    #
    # @note From Upload::EmmaDataMethods#emma_metadata
    #
    def emma_metadata: (?refresh: bool) -> symHash

    @emma_metadata: symHash | nil

    # Set the :emma_data field value (if not #EMMA_DATA_HASH).
    #
    # @param [Search::Record::MetadataRecord, Hash, String, nil] data
    # @param [Boolean]                                           allow_blank
    #
    # @return [String]                New value of :emma_data
    # @return [nil]                   ...if *data* is *nil*.
    #
    # @note From Upload::EmmaDataMethods#set_emma_data
    #
    def set_emma_data: ((anyHash|String|Search::Record::MetadataRecord|nil) data, ?bool allow_blank) -> (String | nil)

    # Selectively modify the :emma_data field value (if not #EMMA_DATA_HASH).
    #
    # @param [Hash]    data
    # @param [Boolean] allow_blank
    #
    # @return [String]                New value of :emma_data.
    # @return [nil]                   If no change and :emma_data was *nil*.
    #
    # @note From Upload::EmmaDataMethods#modify_emma_data
    #
    def modify_emma_data: (symHash data, ?bool allow_blank) -> (String | nil)
  end

  private

  THIS_MODULE: Module

  include InstanceMethods
end
