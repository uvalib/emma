# Common methods for ActiveRecord classes that are part of a Single Table
# Inheritance (STI) hierarchy.  ActiveRecord applies STI to classes whose
# database schema contains a :type column.
#
# @!attribute [rw] type
#   Database :type column.
#   @return [String]
#
module Record::Sti
  extend ActiveSupport::Concern

  include Record

  include Record::Identification

  # The default name for the column which holds the record type.
  #
  # @type [Symbol]
  #
  TYPE_COLUMN: Symbol

  # If *true* the :type column will hold the full name of the subclass.
  # If *false* the :type column will hold only the final portion of the name.
  #
  # @type [Boolean]
  #
  FULL_TYPE_NAME: bool

  # The name of the column which holds the record type.
  #
  # @return [Symbol]
  #
  def type_column: () -> Symbol

  # The STI variant of the current record.
  #
  # @return [Symbol, nil]
  #
  def type_value: () -> (Symbol | nil)

  # The base variant of the current record.
  #
  # @return [Symbol, nil]
  #
  def base_type_value: () -> (Symbol | nil)

  # Indicate whether the :type column holds the full name of the subclass.
  #
  def full_type_name?: () -> bool

  # Indicate whether the current record is associated with a non-leaf class.
  #
  def sti_base?: () -> bool

  # Indicate whether the current record is associated with a leaf class.
  #
  def sti_child?: () -> bool

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Sti

    def type_value: () -> Symbol

    def base_type_value: () -> Symbol

    def sti_base?: () -> bool

    def sti_child?: () -> bool
  end

  private

  THIS_MODULE: Module
end

# To be included in a record class which is a Single Table Inheritance child.
#
module Record::Sti::Leaf
  extend ActiveSupport::Concern

  include Record

  private

  THIS_MODULE: Module

  include Record::Sti

  public

  def self.sti_child?: () -> bool
end

# To be included in a record class which is a parent of a Single Table
# Inheritance child other than the Root.
#
module Record::Sti::Branch
  extend ActiveSupport::Concern

  include Record

  private

  THIS_MODULE: Module

  include Record::Sti
end

# To be included in a record class which is a Single Table Inheritance base.
#
# == Implementation Notes
# Using `validates :type, presence: true` allows instances of the base class
# to be created but prevents them from being persisted to the database.
#
module Record::Sti::Root
  include Record

  private

  extend ActiveSupport::Concern

  THIS_MODULE: Module

  public

  include Record::Sti

  # :nocov:
  #include ActiveRecord::Inheritance

  public

  def self.sti_base?: () -> bool

  # Name of the STI child for records of this type.
  #
  # @param [Symbol, String, Class, Record::Sti, nil] t
  # @param [Boolean]                                 no_raise
  #
  # @return [String]
  # @return [nil]                   Only if *no_raise* is set to *true*.
  #
  # @note (record.type == record.class.type) should always be true.
  #
  def self.type: (?(Symbol|String|Class|Record::Sti)? t, ?no_raise: bool) -> (String | nil)
end
