# Support for "destructive testing".
#
module Record::Testing
  extend ActiveSupport::Concern

  private

  THIS_MODULE: Module

  public

  include Record::Exceptions

  FAULT_INJECTION: bool

  FORCED_EXCEPTION: bool

  # noinspection RubyUnusedLocalVariable
  ALL_FAULTS: Integer
  BAD_PARAM:  Integer

  FAULT_METHOD: Hash[Symbol,(Integer|nil)]

  DEFAULT_EXCEPTION: Class

  EXCEPTION_TYPE: Hash[Class,String]

  EXCEPTION_METHOD: Hash[Symbol,Class]

  # Injection point for "destructive testing", both forced exceptions and
  # fault injection.
  #
  # @param [Model, Hash, nil] item  Data subject to modification.
  #
  # @return [void]
  #
  def fault!: (symHash|Model|nil item) -> void

  # Injection point for "destructive testing" modifications to method
  # parameters.
  #
  # @param [Symbol, nil]      meth  Calling method.
  # @param [Model, Hash, nil] item  Item to be altered.
  #
  # @return [Integer]               Test cases applied.
  # @return [nil]                   If no injection was performed
  #
  def inject_fault!: (Symbol? meth, symHash|Model|nil item) -> (Integer | nil)

  # Injection point for "destructive testing" simulation of exception.
  # If an exception is not specified, the calling method must be included
  # in #EXCEPTION_METHOD.
  #
  # @param [Symbol, nil] meth     Calling method.
  # @param [Class<Record::Error>, Record::Error, String, nil] ex
  # @param [Array]       args     Passed to initializer if *ex* is a class.
  #
  # @return [nil]                 If no exception was generated.
  #
  def inject_exception: (Symbol? meth, ?(Class|Record::Error|String)? ex, *untyped args) -> nil
end
