# Methods for ActiveRecord that involve bulk operations.
#
module Record::Bulk
  extend ActiveSupport::Concern

  include Emma::Common

  include Record

  # :nocov:
  #include Model

  #include Record::Sti

  # Fallback URL base. TODO: ?                                                  # NOTE: from Upload::BulkMethods
  #
  # @type [String]
  #
  BULK_BASE_URL: String

  # Default user for bulk uploads. # TODO: ?                                    # NOTE: from Upload::BulkMethods
  #
  # @type [String]
  #
  BULK_USER: String

  # Fields that used within the instance but are not persisted to the database. # NOTE: from Upload::BulkMethods
  #
  # @type [Array<Symbol>]
  #
  LOCAL_FIELDS: symArray

  # Fields that are expected to be included in :emma_data.                      # NOTE: from Upload::BulkMethods
  #
  # @type [Array<Symbol>]
  #
  INDEX_FIELDS: symArray

  # The default name for the column which holds the record type.
  #
  # @type [Symbol]
  #
  TYPE_COLUMN: Symbol

  # Indicate whether the current record is not involved in bulk operations.
  #
  def single?: () -> bool

  # Indicate whether the current record is involved in bulk operations.
  #
  def bulk?: () -> bool

  # The bulk operation of the current record ('Create', 'Edit', 'Remove').
  #
  # @return [String, nil]
  #
  def bulk_type: () -> (String | nil)

  # Name of the class referenced by the :bulk relation.
  #
  # @return [String]
  #
  def bulk_operation_class: () -> String

  # Name of the class referenced by the :parts relation.
  #
  # @return [String]
  #
  def bulk_part_class: () -> String

  def import_transform: (symHash fields, Module|String importer_name) -> symHash

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Bulk

    # Name of the class referenced by the :bulk relation.
    #
    # @return [String]
    #
    def bulk_operation_class: () -> String

    # Name of the class referenced by the :parts relation.
    #
    # @return [String]
    #
    def bulk_part_class: () -> String
  end
end

# Definitions to be included in a record class which can be a part of a bulk
# operation.
#
# @!attribute [rw] :bulk_id
#   The bulk workflow phase of which is record is a part.
#   (NULL indicates a single-workflow record.)
#
module Record::Bulk::Part
  extend ActiveSupport::Concern

  include Record

  include Record::Bulk

  include Record::Identification

  def bulk?: () -> bool

  def bulk_type: () -> String

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Bulk::ClassMethods

    def bulk_type: () -> String
  end

  private

  include Record::Sti::Branch

  # :nocov:
  #include ActiveRecord::Associations::ClassMethods
end

# Definitions to be included in a record class which represents a bulk
# operation.
#
module Record::Bulk::Operation
  extend ActiveSupport::Concern

  include Record

  include Record::Bulk

  include Record::Identification

  def bulk?: () -> bool

  def bulk_type: () -> String

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Bulk::ClassMethods

    def bulk?: () -> bool

    def bulk_type: () -> String
  end

  private

  include Record::Sti::Branch

  # :nocov:
  #include ActiveRecord::Associations::ClassMethods

  public

  # Source of the bulk upload manifest.                                       # NOTE: from Upload::BulkMethods#file_path
  #
  # @return [String, nil]
  #
  attr_reader manifest_path: String | nil

  # Indicate whether all of the parts of the bulk operation are done.
  #
  def parts_completed?: () -> bool

  # Indicate whether all of the actions associated with the bulk operation
  # have succeeded.
  #
  def actions_succeeded?: () -> bool
end

# Definitions to be included in the base record class for bulk parts or bulk
# operations.
#
module Record::Bulk::Root
  extend ActiveSupport::Concern

  include Record

  include Record::Bulk
end
