# Methods for accessing records.
#
module Record::Searchable
  extend ActiveSupport::Concern

  include Record

  include Record::EmmaIdentification

  include Record::Sortable

  # :nocov:
  #include ActiveRecord::FinderMethods

  # Name of the column on which pagination is based.
  #
  # @return [Symbol, nil]
  #
  # === Implementation Notes
  # This has to be a column with unique values for every record which can be
  # ordered (that is, #minimum_id and #maximum_id have to be non-nil).
  #
  def pagination_column: () -> (Symbol | nil)

  # The database column currently associated with the workflow state of the
  # record.
  #
  # @return [Symbol, nil]
  #
  def state_column: () -> (Symbol | nil)

  # Get a record by either :id or :submission_id.
  #
  # @param [String, Symbol, Integer, Hash, Model, nil] item
  # @param [Hash]                                      opt   Passed to #id_term
  #
  # @return [Model, nil]              A fresh record from the database.
  #
  def fetch_record: ((symHash|String|Symbol|Integer|Model|nil) item, **untyped opt) -> (Model | nil)

  # Get records specified by either :id or :submission_id.
  #
  # @param [Array<Model, String, Integer, Array>] identifiers
  # @param [Hash]                                 opt  Passed to #get_relation
  #
  # @return [Array<Model>]            Fresh records from a database query.
  #
  def fetch_records: (*(String|Symbol|Integer|Model|nil) identifiers, **untyped opt) -> Array[Model]

  # Local options consumed by #search_records.
  #
  # @type [Array<Symbol>]
  #
  SEARCH_RECORDS_OPTIONS: symArray

  # URL parameters that are not directly used in searches.
  #
  # @type [Array<Symbol>]
  #
  NON_SEARCH_PARAMS: symArray

  # Get the records specified by either :id or :submission_id.
  #
  # Additional constraints may be supplied via *opt*.  If no *identifiers* are
  # supplied then this method is essentially an invocation of #where which
  # returns the matching records.
  #
  # @param [Array<Model, String, Integer, Array>] items
  # @param [Hash]                                 opt  To #get_relation except
  #                                                    #SEARCH_RECORDS_OPTIONS:
  #
  # @option opt [String,Symbol,Hash,Boolean,nil] :sort No sort if nil or false.
  # @option opt [Integer,nil]    :offset
  # @option opt [Integer,nil]    :limit
  # @option opt [Integer,nil]    :page
  # @option opt [Boolean,Symbol] :groups  Return state group counts; if :only
  #                                        then do not return :list.
  # @option opt [String,Symbol]  :meth    Calling method for diagnostics.
  #
  # @raise [RangeError]                   If :page is not valid.
  #
  # @return [Paginator::Result]
  #
  # @see ActiveRecord::Relation#where
  #
  def search_records: (*(String|Integer|Model|Array[String|Integer|Model]|nil) items, **untyped opt) -> Paginator::Result

  # Local options consumed by #get_relation.
  #
  # @type [Array<Symbol>]
  #
  GET_RELATION_OPT: symArray

  # Generate an ActiveRecord relation for records specified by either
  # :id or :submission_id.
  #
  # Additional constraints may be supplied via *opt*.  If no *items* are
  # supplied then this method is essentially an invocation of #where which
  # returns the matching records.
  #
  # @param [Array<Model, String, Integer, Array>] items
  # @param [Hash]                                 opt  To #make_relation except
  #
  # @option opt [Symbol, nil] :id_key   Default: `#id_column`.
  # @option opt [Symbol, nil] :sid_key  Default: `#sid_column`.
  #
  # @return [ActiveRecord::Relation]
  #
  # @see Record::EmmaIdentification#expand_ids
  #
  def get_relation: (*(String|Integer|Model|Array[String|Integer|Model]|nil) items, **untyped opt) -> ActiveRecord::Relation

  # Local options consumed by #make_relation.
  #
  # @type [Array<Symbol>]
  #
  # @note From Upload::SearchMethods#MAKE_RELATION_OPTIONS
  #
  MAKE_RELATION_OPTIONS: symArray

  # make_relation
  #
  # @param [Array<String,Array,Hash>] terms
  # @param [Hash,String,Boolean,nil]  sort  No sort if *nil*, *false* or blank.
  # @param [Hash]                     opt   Passed to #where except:
  #
  # @option opt [Integer, nil]      :offset
  # @option opt [Integer, nil]      :limit
  # @option opt [String, Date]      :start_date   Earliest :updated_at.
  # @option opt [String, Date]      :end_date     Latest :updated_at.
  # @option opt [String, Date]      :after        All :updated_at after this.
  # @option opt [String, Date]      :before       All :updated_at before this.
  # @option opt [String,Symbol,nil] :meth         Caller for diagnostics.
  #
  # @return [ActiveRecord::Relation]
  #
  # @note From Upload::SearchMethods#make_relation
  #
  def make_relation: (*(String|strArray|symHash|nil) terms, sort: symHash|String|bool|nil, **untyped opt) -> ActiveRecord::Relation

  # A table of counts for items in each state group.
  #
  # @param [ActiveRecord::Relation] relation
  # @param [Symbol]                 column
  #
  # @raise [RuntimeError] If the current model does not have a :state_column.
  #
  # @return [Hash{Symbol=>Integer}]
  #
  # @note From Upload::SearchMethods#group_counts
  #
  def group_counts: (ActiveRecord::Relation relation, ?(Symbol|nil) column) -> Hash[Symbol,Integer]

  # Generate a Date-parseable string from a string that indicates either a day,
  # (YYYYMMDD), a month (YYYYMM), or a year (YYYY) -- with or without date
  # separator punctuation.
  #
  # @param [any, nil] value
  #
  # @return [nil,    false, false]    If *value* is not a date string.
  # @return [String, false, false]    If *value* specifies a day.
  # @return [String, true,  false]    If *value* specifies a month.
  # @return [String, false, true]     If *value* specifies a year
  #
  def day_string
    : (String  value) -> ([String, bool, bool] | [nil, false, false])
    | (untyped value) -> [nil, false, false]

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Searchable

    # Locate records matching the submission ID given as either *sid* or
    # `opt[:submission_id]`.
    #
    # @param [Model, Hash, String, Symbol, nil] sid
    # @param [Integer, nil]    max      Log error if matches exceed this.
    # @param [Boolean, Symbol] log      Calling method for logging.
    # @param [Boolean]         fatal    If *false*, return *nil* on error.
    # @param [Hash]            opt      Passed to #where.
    #
    # @raise [Record::StatementInvalid] If *sid*/opt[:submission_id] invalid.
    # @raise [Record::NotFound]         If record not found.
    #
    # @return [ActiveRecord::Relation]
    # @return [nil]                     If invalid and *fatal* is *false*.
    #
    # @note From Upload#matching_sid
    #
    def matching_sid
      : (?(Model|symHash|String|Symbol|nil) sid, ?max: Integer|nil, ?log: bool|Symbol, ?fatal: true,  **untyped opt) -> ActiveRecord::Relation
      | (?(Model|symHash|String|Symbol|nil) sid, ?max: Integer|nil, ?log: bool|Symbol,  fatal: false, **untyped opt) -> (ActiveRecord::Relation | nil)

    # Get the latest record matching the submission ID given as either *sid* or
    # `opt[:submission_id]`.
    #
    # @param [Model, Hash, String, Symbol, nil] sid
    # @param [Symbol, String] sort    In case of multiple SIDs (:created_at).
    # @param [Hash]           opt     Passed to #matching_sid.
    #
    # @raise [Record::StatementInvalid]   If *sid*/opt[:submission_id] invalid.
    # @raise [Record::NotFound]           If record not found.
    #
    # @return [Model]
    # @return [nil]                       On error if `opt[:fatal]` is *false*.
    #
    # @note From Upload#latest_for_sid
    #
    def latest_for_sid: (?(symHash|String|Symbol|Model|nil) sid, ?sort: Symbol|String|nil, **untyped opt) -> (Model | nil)
  end

  private

  THIS_MODULE: Module
end
