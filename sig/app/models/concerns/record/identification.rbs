# Record utility methods related to identifiers.
#
module Record::Identification
  extend ActiveSupport::Concern

  include Emma::Common

  include Record::Exceptions

  extend ::Record::Identification

  # The type of record for the current context.
  #
  # (This will be Upload unless within an instance of another type of Record.)
  #
  # @return [Class<ApplicationRecord>]
  #
  def record_class: () -> Class

  @record_class: Class

  # Name of the type of record for the current context.
  #
  # @return [String]
  #
  def record_name: () -> String

  @record_name: String

  # The type of record for the given item.
  #
  # @param [*] item
  #
  # @return [Class<ApplicationRecord>]
  #
  def record_class_for: (untyped item) -> Class

  # Name of the type of record for the given item.
  #
  # @param [*] item
  #
  # @return [String]
  #
  def record_name_for: (untyped item) -> String

  # Column name for the record identifier.
  #
  # @return [Symbol]
  #
  def id_column: () -> Symbol

  # Indicate whether the value could be a valid #id_column value.
  #
  # @param [*] value
  #
  # @note From Upload::IdentifierMethods#valid_id?
  #
  def valid_id?: (untyped value) -> bool

  # Extract the database ID from the given item.
  #
  # @param [Model, Hash, String, *] item
  # @param [Hash]                   opt
  #
  # @option opt [Symbol] :id_key      Default: `#id_column`.
  #
  # @return [String]                  Record ID Array<(:id)>.
  # @return [nil]                     No valid :id specified.
  #
  # @note From Upload::IdentifierMethods#id_for
  #
  def id_value: (untyped item, **untyped opt) -> (String | nil)

  # Column name for the identifier of the associated user.
  #
  # @return [Symbol]
  #
  def user_column: () -> Symbol

  # Get the indicated value from an object accessed as either a Hash key or
  # an instance method.
  #
  # The value of *default* is returned if *item* doesn't respond to *key*.
  #
  # @param [Model, Hash, String, Symbol, *]       item
  # @param [Symbol, String, Array<Symbol,String>] key
  # @param [*]                                    default
  #
  # @return [*]
  #
  # @note From Upload#get_value
  #
  def get_value: (untyped item, (Symbol|String|Array[Symbol|String]) key, ?default: untyped, **untyped _ignored) -> untyped?

  # A foreign-key reference to the current record.
  #
  # @param [Hash{Symbol=>*}] opt
  #
  # E.g., :entry_id would indicate an Entry ID.
  #
  # @return [Symbol]
  #
  def alt_id_key: (symHash opt) -> Symbol

  # Return with the specified record or *nil* if one could not be found.
  #
  # @param [String, Integer, Hash, Model, *] item
  # @param [Boolean]     fatal        If *false*, do not raise exceptions.
  # @param [Symbol, nil] meth         Calling method (for logging).
  # @param [Hash]        opt          Used if *item* is *nil* except for:
  #
  # @option opt [Symbol] :id_key      Default: `#id_column`.
  # @option opt [Symbol] :alt_id_key  E.g. :entry_id
  #
  # @raise [Record::StatementInvalid]   If :id/:sid not given.
  # @raise [Record::NotFound]           If *item* was not found.
  #
  # @return [ApplicationRecord<Model>]
  # @return [nil]                       Only if *fatal* is *false*.
  #
  # @note From UploadWorkflow::External#get_record
  #
  def find_record: (untyped item, ?fatal: bool, ?meth: Symbol|nil, **untyped opt) -> (ApplicationRecord | nil)

  # Find all of the specified records (return records if none were specified).
  #
  # @param [Array<Model,String,Array>] items
  # @param [Symbol]                    id_key       Default: `#id_column`.
  # @param [Symbol, nil]               alt_id_key   E.g. :entry_id
  # @param [Hash]                      opt          Passed to #collect_records
  #
  # @option opt []
  #
  # @return [Array<Model>]
  #
  # @note From UploadWorkflow::External#find_records
  #
  def find_records: (*(Model|String|strArray) items, ?id_key: Symbol|nil, ?alt_id_key: Symbol|nil, **untyped opt) -> Array[Model]

  # Transform a mixture of record objects and record identifiers into a list of
  # record objects.
  #
  # @param [Array<Model,String,Array>] items  @see #expand_ids
  # @param [Boolean]                   all    If *true*, empty *items* is OK.
  # @param [Boolean]                   force  See Usage Notes
  # @param [Class<Record>]             type   Default: `#record_class`.
  # @param [Hash]                      opt
  #
  # @raise [StandardException] If *all* is *true* and *items* were supplied.
  #
  # @return [Array<(Array<Model>,Array)>]      Record instances and failed ids.
  # @return [Array<(Array<Model,String>,[])>]  If *force* is *true*.
  #
  # @see Record::Searchable#get_records
  #
  # @note From UploadWorkflow::External#collect_records
  #
  # === Usage Notes
  # If *force* is true, the returned list of failed records will be empty but
  # the returned list of items may contain a mixture of Model and String
  # elements.
  #
  def collect_records: (*(Model|String|strArray) items, ?all: bool, ?force: bool, ?type: Class|nil, **untyped opt) -> ([Array[Model], anyArray] | [Array[Model|String], []])

  # Interpret an identifier as either an :id or :submission_id, generating a
  # field/value pair for use with #find_by or #where.
  #
  # If :sid_key set to *nil* then the result will always be in terms of :id_key
  # (which cannot be set to *nil*).
  #
  # @param [String, Symbol, Integer, Hash, Model, nil] v
  # @param [Hash]                                      opt
  #
  # @option opt [Symbol] :id_key      Default: `#id_column`.
  # @option opt [Symbol] :sid_key     Default: nil.
  #
  # @return [Hash{Symbol=>Integer,String,nil}] Exactly one key-value pair.
  #
  # @note From Upload::IdentifierMethods#id_term
  #
  def id_term: (?(symHash|Symbol|String|Integer|Model|nil) v, **untyped opt) -> Hash[Symbol,(Integer|String|nil)]

  # Transform a mixture of ID representations into a set of one or more
  # non-overlapping range representations followed by non-identifiers (if any).
  #
  # @param [Array<String, Integer, Model, Array>] items
  # @param [Hash]                                 opt
  #
  # @option opt [Integer] :min_id     Default: `#minimum_id`
  # @option opt [Integer] :max_id     Default: `#maximum_id`
  #
  # @return [Array<String>]
  #
  # @note From Upload::IdentifierMethods#compact_ids
  #
  def compact_ids: (*(String|Integer|Model|Array[String|Integer|Model]) items, **untyped opt) -> strArray

  # Transform a mixture of ID representations into a list of single IDs.
  #
  # Any parameter may be (or contain):
  # - A single ID as a String or Integer
  # - A set of IDs as a string of the form /\d+(,\d+)*/
  # - A range of IDs as a string of the form /\d+-\d+/
  # - A range of the form /-\d+/ is interpreted as /0-\d+/
  #
  # @param [Array<Model, String, Integer, Array>] ids
  # @param [Hash]                                 opt   For #expand_id_range.
  #
  # @option opt [Integer] :min_id     Default: `#minimum_id`
  # @option opt [Integer] :max_id     Default: `#maximum_id`
  #
  # @return [Array<String>]
  #
  # @note From Upload::IdentifierMethods#id_term
  #
  # === Examples
  #
  # @example Single
  #   expand_ids('123') -> %w[123]
  #
  # @example Sequence
  #   expand_ids('123,789') -> %w[123 789]
  #
  # @example Range
  #   expand_ids('123-126') -> %w[123 124 125 126]
  #
  # @example Mixed
  #   expand_ids('125,789-791,123-126') -> %w[125 789 790 791 123 124 126]
  #
  # @example Implicit range
  #   expand_ids('-3')  -> %w[1 2 3]
  #   expand_ids('*-3') -> %w[1 2 3]
  #
  # @example Open-ended range
  #   expand_ids('3-')  -> %w[3 4 5 6]
  #   expand_ids('3-*') -> %w[3 4 5 6]
  #   expand_ids('3-$') -> %w[3 4 5 6]
  #
  # @example All records
  #   expand_ids('*')   -> %w[1 2 3 4 5 6]
  #   expand_ids('-$')  -> %w[1 2 3 4 5 6]
  #   expand_ids('*-$') -> %w[1 2 3 4 5 6]
  #   expand_ids('1-$') -> %w[1 2 3 4 5 6]
  #
  # @example Last record only
  #   expand_ids('$')   -> %w[6]
  #   expand_ids('$-$') -> %w[6]
  #
  def expand_ids: (*(String|Integer|Model|Array[String|Integer|Model]) ids, **untyped opt) -> strArray

  # Condense an array of identifiers by replacing runs of contiguous number
  # values like "first", "first+1", "first+2", ..., "last" with "first-last".
  #
  # If the array represents all identifiers, ['*'] is returned.
  #
  # @param [Array<String>] ids
  # @param [Integer, nil]  min_id     Default: `#minimum_id`
  # @param [Integer, nil]  max_id     Default: `#maximum_id`
  #
  # @return [Array<String>]
  #
  # @note From Upload::IdentifierMethods#group_ids
  #
  def group_ids: (*String ids, ?min_id: Integer|nil, ?max_id: Integer|nil, **untyped _ignored) -> strArray

  # A valid ID range term for interpolation into a Regexp.
  #
  # @type [String]
  #
  # @note From Upload::IdentifierMethods#RANGE_TERM
  #
  RNG_TERM: String

  # Interpret an ID string as a range of IDs if possible.
  #
  # The method supports a mixture of database IDs (which are comprised only of
  # decimal digits) and submission IDs (which always start with a non-digit),
  # however a submission ID cannot be part of a range.
  #
  # @param [String, Integer, Model] id
  # @param [Hash]                   opt
  #
  # @option opt [Integer]     :min_id   Default: `#minimum_id`.
  # @option opt [Integer]     :max_id   Default: `#maximum_id`.
  # @option opt [Symbol]      :id_key   Default: `#id_column`.
  # @option opt [Symbol, nil] :sid_key  Default: nil.
  #
  # @return [Array<String>]
  #
  # @see #expand_ids
  #
  # @note From Upload::IdentifierMethods#expand_id_range
  #
  def expand_id_range: ((String|Integer|Model) id, **untyped opt) -> strArray

  # The database ID of the first record associated with the including class.
  #
  # @param [Symbol, nil] id_key       Default: `#id_column`.
  #
  # @return [Integer]                 If 0 then the table is empty.
  # @return [nil]                     Not supported by the current schema.
  #
  # @note From Upload::IdentifierMethods#minimum_id
  #
  def minimum_id: (?id_key: Symbol|nil) -> (Integer | nil)

  # The database ID of the last record associated with the including class.
  #
  # @param [Symbol, nil] id_key       Default: `#id_column`.
  #
  # @return [Integer]                 If 0 then the table is empty.
  # @return [nil]                     Not supported by the current schema.
  #
  # @note From Upload::IdentifierMethods#maximum_id
  #
  def maximum_id: (?id_key: Symbol|nil) -> (Integer | nil)

  # Class methods automatically added to the including record class.
  #
  module ClassMethods
    include Record::Identification
  end

  # Methods which are only appropriate if the including class is an
  # ApplicationRecord.
  #
  module InstanceMethods
    include Record::Identification

    extend Record::Identification

    # @see Record::Identification#record_class
    #
    def self.record_class: () -> Class

    # @see Record::Identification#record_class
    #
    def record_class: () -> Class

    # @see Record::Identification#id_value
    #
    def id_value: (?untyped item, **untyped opt) -> (String | nil)

    # @see Record::Identification#get_value
    #
    def get_value: (*untyped item_key, **untyped opt) -> (untyped | nil)

    # @see Record::Identification#minimum_id
    #
    def minimum_id: (**untyped opt) -> (Integer | nil)

    # @see Record::Identification#maximum_id
    #
    def maximum_id: (**untyped opt) -> (Integer | nil)
  end

  private

  THIS_MODULE: Module

  #include InstanceMethods

  include InstanceMethods

  # :nocov:
  #include Model

  public

  # A unique identifier for this model instance.
  #
  # @return [String]
  #
  def identifier: () -> String
end
