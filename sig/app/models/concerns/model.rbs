# Common model methods.
#
module Model
  extend ActiveSupport::Concern

  include Emma::Common

  include Emma::Constants

  # A unique identifier for this model instance.
  #
  # @return [String]
  #
  def identifier: () -> String

  # Indicate whether *name* is a field defined by this model.
  #
  # @param [any, nil] name            Symbol, String
  #
  def include?: (untyped name) -> bool

  # The fields defined by this model.
  #
  # @return [Array<Symbol>]
  #
  def field_names: () -> symArray

  # The data fields defined by this model plus synthetic field values.
  #
  # @return [Array<Symbol>]
  #
  def synthetic_field_names: () -> symArray

  # The data fields defined by this model plus synthetic fields.
  #
  # @return [Array<Symbol>]
  #
  def extended_field_names: () -> symArray

  # The fields and values for this model instance.
  #
  # @param [Array<Symbol>] only       Only these names if provided.
  #
  # @return [Hash]
  #
  def fields: (*(Symbol|nil) only) -> symHash

  # The data and synthetic fields/values for this model instance.
  #
  # @param [Array<Symbol>] only       Only these names if provided.
  #
  # @return [Hash]
  #
  def synthetic_fields: (*(Symbol|nil) only) -> symHash

  # The data and synthetic fields/values for this model instance.
  #
  # @param [Array<Symbol>] only       Only these names if provided.
  #
  # @return [Hash]
  #
  def extended_fields: (*(Symbol|nil) only) -> symHash

  # The fields and values for this instance as a Hash.
  #
  # @return [Hash]
  #
  def to_h: () -> symHash

  # Get configured record fields for a model/controller.
  #
  # @param [any, nil] type    Model/controller type (Symbol,String,Class,Model)
  # @param [Boolean]  fatal
  #
  # @raise [RuntimeError]             If *type* does not map on to a model.
  #
  # @return [ModelConfig]             Frozen result.
  # @return [nil]                     Only if *fatal* is *false*.
  #
  def self.configuration_fields
    : (untyped `type`,  fatal: false) -> (ModelConfig | nil)
    | (untyped `type`, ?fatal: true)  -> ModelConfig

  # Keys under "en.emma.record.*" beginning with an underscore, which represent
  # the control directive for specifying the base configuration.
  #
  # @type [Array<Symbol>]
  #
  BASE_DIRECTIVE: symArray

  # Keys under "en.emma.record.*" beginning with an underscore, which define
  # display fields which are filled dynamically.
  #
  # @type [Array<Symbol>]
  #
  SYNTHETIC_FIELDS: symArray

  # Keys under "en.emma.record.*" beginning with an underscore, which do not
  # map on to actual database columns.
  #
  # @type [Array<Symbol>]
  #
  DIRECTIVES: symArray

  # Configured record fields for each model/controller.
  #
  # @return [Hash{Symbol=>ModelConfig}]
  #
  def self.fields_table: () -> Hash[Symbol,ModelConfig]

  # Combine configuration settings for a given model/controller.
  #
  # @param [Symbol, String] type
  #
  # @return [ModelConfig]
  #
  def self.configured_fields_for: (Symbol|String `type`) -> ModelConfig

  # For pages that specify their own :display_fields section, *fields* may
  # define the order of fields or simply modify the properties of the fields.
  #
  # If *fields* is a Hash then each key represents a field (*all_fields* key)
  # and one or more property overrides.  Field order is not affected by the
  # ordering of the keys in this case.
  #
  # If *fields* is an Array, each entry represents a field position.  If the
  # entry is a simple String or Symbol then it inherits all properties of the
  # matching *all_fields* entry.  Per Field#normalize, if the entry is a Hash
  # with a String value, the value overrides the fields :label property; if the
  # entry has a Hash value, these are treated as property overrides.
  #
  # @param [Hash]                   all_fields      Baseline field definitions.
  # @param [Hash, Array, :all, nil] display_fields  Field overrides.
  #
  # @return [Hash]                                  The modified *all_fields*.
  #
  def self.display_config!: (symHash all_fields, (nil|:all|symHash|Array[ String | Symbol | Hash[Symbol,String] | Hash[Symbol,symHash] ]) display_fields) -> symHash

  # @private
  # @type [Regexp, String]
  CONFIG_PREFIX: Regexp

  # Return the model class associated with *item*.
  #
  # @param [any, nil] item             Symbol, String, Class, Model
  #
  # @return [Class, nil]
  #
  def self.class_for: (untyped item) -> (Class | nil)

  # Return the name of the model associated with *item*.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  #
  # @return [Symbol, nil]
  #
  def self.model_for: (untyped item) -> (Symbol | nil)

  # Return the name of the model associated with *item*.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  #
  # @return [Symbol, nil]
  #
  def self.for: (untyped item) -> (Symbol | nil)

  private

  def self.namespace_for: (untyped v) -> String

  def self.namespaced?: (untyped v) -> bool

  public

  # Get configured record fields for the indicated model/controller.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  #
  # @return [ModelConfig]             Frozen result.
  # @return [nil]
  #
  def self.config_for: (untyped item) -> (ModelConfig | nil)

  # Get configured record fields relevant to the given context for the
  # indicated model/controller.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  # @param [Symbol]   action
  #
  # @return [ActionConfig, nil]
  #
  def self.context_fields: (untyped? item) -> (ActionConfig | nil)

  # Get configured record fields relevant to an :index action for the indicated
  # model/controller.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  #
  # @return [ActionConfig]            Frozen result.
  #
  def self.index_fields: (untyped? item) -> ActionConfig

  # Get configured record fields relevant to a :show action for the indicated
  # model/controller.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  #
  # @return [ActionConfig]            Frozen result.
  #
  def self.show_fields: (untyped? item) -> ActionConfig

  # Get all configured record fields for the indicated model.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  #
  # @return [ActionConfig]            Frozen result.
  #
  def self.database_fields: (untyped? item) -> ActionConfig

  # Get all configured record fields relevant to a create/update form for the
  # indicated model.
  #
  # @param [any, nil] item            Symbol, String, Class, Model
  #
  # @return [ActionConfig]            Frozen result.
  #
  def self.form_fields: (untyped? item) -> ActionConfig

  # Methods for the including class or its instances.
  #
  module Methods
    include Emma::Common

    # Indicate whether instances of the including class are composed of other
    # Model instances.
    #
    def aggregate?: () -> bool

    # The type for constituent Model elements for a class whose instances are
    # aggregates.
    #
    # @return [Class<Model>, nil]
    #
    def aggregate_type: () -> (Class | nil)

    # The field holding constituent Model elements for a class which supports
    # aggregates.
    #
    # @return [Symbol, nil]
    #
    def aggregate_field: () -> (Symbol | nil)

    # Indicate whether the including class is primarily a container for a list
    # of other Model instances.
    #
    def collection?: () -> bool

    # The type for constituent Model elements for a class whose instances are
    # collections.
    #
    # @return [Class<Model>, nil]
    #
    def collection_type: () -> (Class | nil)

    # The field holding constituent Model elements for a class whose instances
    # are collections.
    #
    # @return [Symbol, nil]
    #
    def collection_field: () -> (Symbol | nil)

    # The constituent Model elements related to this Model instance.
    #
    # @return [Array]   Possibly empty.
    # @return [nil]     If the instance is not an aggregate or collection.
    #
    def elements: () -> (symArray | nil)

    # Get configured record fields relevant to an :index action for the model.
    #
    # @param [any, nil] item          Symbol,String,Class,Model; def.: `self`.
    #
    # @return [ActionConfig]          Frozen result.
    #
    def index_fields: (?untyped? item) -> ActionConfig

    # Get configured record fields relevant to a :show action for the model.
    #
    # @param [any, nil] item          Symbol,String,Class,Model; def.: `self`.
    #
    # @return [ActionConfig]          Frozen result.
    #
    def show_fields: (?untyped? item) -> ActionConfig

    # Get all configured record fields for the model.
    #
    # @param [any, nil] item          Symbol,String,Class,Model; def.: `self`.
    #
    # @return [ActionConfig]          Frozen result.
    #
    def database_fields: (?untyped? item) -> ActionConfig

    # Get all configured record fields relevant to a create/update form for the
    # model.
    #
    # @param [any, nil] item          Symbol,String,Class,Model; def.: `self`.
    #
    # @return [ActionConfig]          Frozen result.
    #
    def form_fields: (?untyped? item) -> ActionConfig
  end

  # Methods which extend the including class.
  #
  module ClassMethods
    include Methods

    # Create a :LIST_FIELD or :BASE_FIELD constant for a class if it defines
    # :LIST_ELEMENT or :BASE_ELEMENT (respectively).
    #
    # @param [Symbol, String] field_name
    # @param [Class, nil]     field_type
    #
    # @return [Symbol, nil]
    #
    # @see Api::Record::Associations::ClassMethods#has_many
    #
    def set_relation_field: ((Symbol|String) field_name, (Class|nil) field_type) -> (Symbol | nil)

    # Validate the including aggregate/collection class.
    #
    # If a record class is intended to be an aggregate it should both include
    # Api::Shared::AggregateMethods and define :BASE_ELEMENT.
    #
    # If a record class is intended to be a collection it should both include
    # Api::Shared::CollectionMethods and define :LIST_ELEMENT.
    #
    # @raise [SyntaxError]            A problem was detected in development.
    #
    # @return [TrueClass]
    #
    def validate_relations: () -> true

  end

  # Methods for instances of the including class.
  #
  module InstanceMethods
    include Methods
  end

  @field_names: symArray

  @synthetic_field_names: symArray

  @extended_field_names: symArray

  private

  THIS_MODULE: Module
end
