module ManifestItem::Assignable
  include ManifestItem::Config

  include ManifestItem::StatusMethods

  include ManifestItem::Validatable

  # :nocov:
  #include Record::Assignable

  #include Record::InstanceMethods

  # Pattern by which strings are split into arrays.
  #
  # @type [String,Regexp]
  #
  LINE_SPLIT: String | Regexp

  # String by which arrays are combined into strings.
  #
  # @type [String,RegExp]
  #
  LINE_JOIN: String

  # Ensure that blanks are allowed and that input values are normalized.
  #
  # @param [Model, Hash, ActionController::Parameters, nil] attr
  # @param [Hash, nil]                                      opt
  #
  # @option opt [Boolean] :invalid    Allow invalid values.
  # @option opt [Symbol]  :meth       Caller (for diagnostics).
  #
  # @return [Hash{Symbol=>*}]
  #
  def normalize_attributes: ((Model|prmHash|nil) attr, ?(symHash|nil) opt) -> symHash

  # A mapping of key comparison value to actual database column name.
  #
  # @return [Hash{String=>Symbol}]
  #
  def key_mapping: () -> Hash[String,Symbol]

  @key_mapping: Hash[String,Symbol]

  # The phrase indicating a problematic value. # TODO: I18n
  #
  # @type [String]
  #
  INVALID_FIELD: String

  # Indicate whether the value is valid for *type*.
  #
  # @param [*] v
  # @param [*] type
  #
  def is_invalid?: (untyped v, String|Class `type`) -> bool

  # add_field_error!
  #
  # @param [Hash, String, Symbol] field
  # @param [any, nil]             value
  # @param [Hash, nil]            target  Default: `#field_error`.
  #
  # @return [Hash{Symbol=>Hash{String=>String}}]
  #
  def add_field_error!
    : (String|Symbol field,  ?untyped value, ?(anyHash|nil) target) -> Hash[Symbol, Hash[String,String]]
    | (symHash       errors,                 ?(anyHash|nil) target) -> Hash[Symbol, Hash[String,String]]

  # Include the default repository value if not specified.
  #
  # @param [Hash, nil] attr
  #
  # @return [Hash]
  #
  def default_attributes: (?(symHash|nil) attr) -> symHash

  # normalize_file
  #
  # @param [Hash, String, *] data
  #
  # @return [Hash, nil]
  #
  def normalize_file
    : (anyHash|String data, **untyped _ignored) -> symHash
    | (untyped        data, **untyped _ignored) -> nil

  # normalize_single
  #
  # @param [*]            v
  # @param [String|Class] type
  # @param [Hash]         opt         Passed to normalization method.
  #
  # @return [*]
  #
  def normalize_single: (untyped v) -> (untyped | nil)

  # normalize_bool
  #
  # @param [BoolType, String, *] v
  #
  # @return [true, false, nil]
  #
  def normalize_bool
    : (String  v, **untyped _ignored) -> (bool | nil)
    | (bool    v, **untyped _ignored) -> bool
    | (untyped v, **untyped _ignored) -> nil

  # normalize_number
  #
  # @param [String, Numeric, *] v
  #
  # @return [Numeric, nil]
  #
  def normalize_number
    : (String  v, **untyped _ignored) -> (Numeric | nil)
    | (Numeric v, **untyped _ignored) -> Numeric
    | (untyped v, **untyped _ignored) -> nil

  # normalize_date
  #
  # @param [Date, String, Numeric, *] v
  #
  # @return [Date, String, nil]
  #
  def normalize_date
    : (String|Numeric v, **untyped _ignored) -> (Date | String)
    | (Date           v, **untyped _ignored) -> Date
    | (untyped        v, **untyped _ignored) -> nil

  # normalize_datetime
  #
  # @param [Date, String, Numeric, *] v
  #
  # @return [DateTime, String, nil]
  #
  def normalize_datetime
    : (String|Numeric v, **untyped _ignored) -> (DateTime | String)
    | (Date           v, **untyped _ignored) -> DateTime
    | (untyped        v, **untyped _ignored) -> nil

  # normalize_enum
  #
  # @param [Array, String, Symbol, *] v
  # @param [Class]                    type  EnumType subclass
  # @param [Hash]                     opt   Passed to #cast method.
  #
  # @return [Array, String, nil]
  #
  def normalize_enum
    : (anyArray      v, Class `type`, **untyped opt) -> Array[EnumType]
    | (String|Symbol v, Class `type`, **untyped opt) -> EnumType
    | (untyped       v, Class `type`, **untyped opt) -> nil

  # normalize_json
  #
  # @param [Array<Hash,String>, Hash, String, *] v
  #
  # @return [Array<Hash>, Hash, nil]
  #
  def normalize_json
    : (anyHash  v, **untyped _ignored) -> symHash
    | (anyArray v, **untyped _ignored) -> Array[symHash]
    | (untyped  v, **untyped _ignored) -> (symHash | nil)

  # normalize_text
  #
  # @param [Array, String, Symbol, *] v
  #
  # @return [String, *]
  #
  def normalize_text
    :     (anyArray|String|Symbol v, **untyped _ignored) -> String
    | [T] (T                      v, **untyped _ignored) -> T

  # normalize_copyright
  #
  # @param [Date, String, Numeric, *] v
  #
  # @return [String, nil]
  #
  def normalize_copyright
    : (Date|String|Numeric v, **untyped _ignored) -> String
    | (untyped             v, **untyped _ignored) -> nil

  private

  def self.included: (Module base) -> void
end
