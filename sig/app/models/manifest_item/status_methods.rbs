module ManifestItem::StatusMethods
  # @private
  UPDATE_STATUS_OPTS: symArray

  # Update status field values.
  #
  # @param [ManifestItem,Hash,nil] item   Default: self
  # @param [Boolean]       file
  # @param [Boolean]       data
  # @param [Boolean]       ready
  # @param [Boolean]       overwrite  If *false* only add status values.
  # @param [Hash]          added      Fields that will be added to the item
  #
  # @return [ManifestItem, Hash]
  #
  def update_status!: ( (symHash)          item, file: bool|nil, data: bool|nil, ready: bool|nil, overwrite: bool, **untyped added) -> symHash
                    | (?(ManifestItem|nil) item, file: bool|nil, data: bool|nil, ready: bool|nil, overwrite: bool, **untyped added) -> ManifestItem

  # Evaluate the readiness of ManifestItem for being included in a submission.
  #
  # @param [ManifestItem,Hash,nil] item   Source of field values (def: self).
  # @param [Boolean]               symbol
  # @param [Hash]                  added  Additional field values to use.
  #
  # @return [ReadyStatus]                 If *symbol* is *false*.
  # @return [Symbol]
  #
  def evaluate_ready_status: (?(ManifestItem|symHash|nil) item, ?symbol: true,  **untyped added) -> Symbol
                           | (?(ManifestItem|symHash|nil) item,  symbol: false, **untyped added) -> ReadyStatus

  # Evaluate the readiness of the file upload associated with a ManifestItem.
  #
  # @param [ManifestItem,Hash,nil] item   Source of field values (def: self).
  # @param [Boolean]               symbol
  # @param [Hash]                  added  Additional field values to use.
  #
  # @return [DataStatus]                  If *symbol* is *false*.
  # @return [Symbol]
  #
  def evaluate_file_status: (?(ManifestItem|symHash|nil) item, ?symbol: true,  **untyped added) -> Symbol
                          | (?(ManifestItem|symHash|nil) item,  symbol: false, **untyped added) -> FileStatus

  # Evaluate the readiness of ManifestItem metadata.
  #
  # @param [ManifestItem, Hash] item    The source of current field values.
  # @param [Boolean]            symbol
  # @param [Hash]               added   Additional field values to use.
  #
  # @return [DataStatus]                If *symbol* is *false*.
  # @return [Symbol]
  #
  def evaluate_data_status: (?(ManifestItem|symHash|nil) item, ?symbol: true,  **untyped added) -> Symbol
                          | (?(ManifestItem|symHash|nil) item,  symbol: false, **untyped added) -> DataStatus

  # Evaluate field values for readiness.
  #
  # @param [ManifestItem,Hash,nil] item   Source of field values (def: self).
  #
  # @return [Boolean]
  #
  def ready?: (?(ManifestItem|symHash|nil) item) -> bool

  # Indicate whether the item has been associated with a file.
  #
  # @param [ManifestItem,Hash,nil] item   Source of field values (def: self).
  #
  # @return [Boolean]
  #
  def file_ok?: (?(ManifestItem|symHash|nil) item) -> bool

  # Indicate whether the item has valid data.
  #
  # @param [ManifestItem,Hash,nil] item   Source of field values (def: self).
  #
  # @return [Boolean]
  #
  def data_ok?: (?(ManifestItem|symHash|nil) item) -> bool

  # Indicate whether the given status is OK.
  #
  # @param [*]      item     Field values, or a value to check (default: self).
  # @param [Symbol] column   Field name.
  #
  def status_ok?: (?(ManifestItem|symHash|String|Symbol|nil) item, column: Symbol) -> bool

  # Indicate whether the item's :file_data field references a local asset.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @example File at a local location
  #   { "name" => "my_file.zip", ... }
  #
  def file_name?: (?(ManifestItem|symHash|nil) item) -> bool

  # Indicate whether the item's :file_data field references a remote asset.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @example File at a remote location
  #   { "url" => "https://host/path/file...", ... }
  #
  def file_url?: (?(ManifestItem|symHash|nil) item) -> bool

  # Indicate whether the item contains encoded file data in the :file_data
  # field.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @example Literal (encoded) file data
  #   { "data" => "STRING_OF_CHARACTERS", ... }
  #
  def file_literal?: (?(ManifestItem|symHash|nil) item) -> bool

  # Indicate whether the item's :file_data field contains information from a
  # Shrine upload to AWS.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @example Original syntax
  #   { "id" => "...", "storage" => "cache", ... }
  #
  # @example New syntax # TODO: alternate :file_data format
  #   { "shrine" => { "id" => "...", "storage" => "cache", ... } ... }
  #
  def file_uploaded?: (?(ManifestItem|symHash|nil) item) -> bool

  # Return with the local filename that has been associated with the item.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @return [String, nil]
  #
  def pending_file_name: (?(ManifestItem|symHash|nil) item) -> (String | nil)

  # Return with the remote filename that has been associated with the item.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @return [String, nil]
  #
  def pending_file_url: (?(ManifestItem|symHash|nil) item) -> (String | nil)

  # Return with encoded file data that has been associated with the item.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @return [String, nil]
  #
  def encoded_file_data: (?(ManifestItem|symHash|nil) item) -> (String | nil)

  # Return with uploader data that has been associated with the item.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @return [Hash, nil]
  #
  def file_upload_data: (?(ManifestItem|symHash|nil) item) -> (symHash | nil)

  # Return the named file associated with the item along with a value
  # indicating its mode of access.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @return [Array<(String,Symbol)>, nil]
  #
  def file_name_type: (?(ManifestItem|symHash|nil) item) -> ([String,Symbol] | nil)

  # get_file_data
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  # @return [Hash]
  #
  def get_file_data: (?(ManifestItem|symHash|nil) item) -> symHash

  # Indicate whether the item is now in the Unified Index.
  #
  # @param [ManifestItem, Hash, nil] item   Default: self.
  #
  def in_index?: (?(ManifestItem|symHash|nil) item) -> bool

  private

  def self.included: (Module base) -> void
end
