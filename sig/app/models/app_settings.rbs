class AppSettings < AppGlobal
  CACHE_KEY: Symbol

  # Boolean configuration values.
  #
  # @type [Array<Symbol,nil>]
  #
  FLAGS: Array[Symbol|nil]

  # Other configuration values.
  #
  # @type [Array<Symbol,nil>]
  #
  VALUES: Array[Symbol|nil]

  # Configuration field types.
  #
  # @type [Hash{Symbol=>Array<Symbol,nil>}]
  #
  TYPE_KEYS: Hash[Symbol,Array[Symbol|nil]]

  # An AppSettings value instance.
  #
  class Value
    # Sources for AppSettings values.
    #
    # @type [Array<Symbol>]
    #
    # @see "en.emma.term.sys.from_*"
    #
    ORIGIN: symArray

    # Either :flag or :setting.
    #
    # @return [Symbol]
    #
    attr_reader type: Symbol

    # The source of the value.
    #
    # @return [Symbol, nil]           An element of Value#ORIGIN.
    #
    attr_reader origin: Symbol?

    # The value itself.
    #
    # @return [any, nil]
    #
    attr_reader content: untyped?

    # Whether this instance represents a *nil* value.
    #
    # @return [Boolean]
    #
    attr_reader null: bool?

    # Whether this instance represents a non-value which can be used to
    # indicate a break between related groups of values.
    #
    # @return [Boolean]
    #
    attr_reader spacer: bool?

    # Create a new instance which may represent either a value set from ENV,
    # a value set from a constant, a *nil* value, or a spacer.
    #
    # @param [Symbol, String, nil] type_key   Required if :type is not present.
    # @param [Hash]                opt
    #
    # @option opt [Symbol, String] :type
    # @option opt [any, nil]       :env
    # @option opt [any, nil]       :cred
    # @option opt [any, nil]       :yaml
    # @option opt [any, nil]       :const
    # @option opt [any, nil]       :other
    # @option opt [Boolean]        :null
    # @option opt [Boolean]        :spacer
    #
    def initialize: (?(Symbol|String|nil) type_key, **untyped opt) -> void

    # Indicate whether this instance represents a *nil* value.
    #
    def nil?: () -> bool

    # Indicate whether this instance represents a *nil* value.
    #
    def null?: () -> bool

    # Indicate whether this instance represents a non-value which can be used
    # to indicate a break between related groups of values.
    #
    def spacer?: () -> bool
  end

  # A table of AppSettings value instances.
  #
  class Values
    include Emma::Common

    # Create a new instance with values acquired for the named keys.
    #
    # @param [Array] keys
    #
    def initialize: (Array[Symbol|String|nil]|anyHash keys) -> void

    # Set the value at index *k* from either the associated `ENV` variable or
    # an associated constant.
    #
    # @param [Symbol, String, nil] k
    #
    # @return [Value]
    #
    def acquire_value: (Symbol|String|nil k) -> Value

    # Return the module that defines a constant with the given name.
    #
    # @param [Symbol, String, nil] const
    #
    # @return [Module, nil]
    #
    def module_defining: (Symbol|String|nil const) -> Module?

    # Return the GoodJob configuration value associated with the given
    # environment name.
    #
    # @param [Symbol, String, nil] k
    #
    # @return [any, nil]
    #
    def good_job_value: (Symbol|String|nil k) -> untyped?

    def type_key: () -> Symbol

    def spacer_key: () -> Symbol

    def storage_value: (untyped v) -> untyped

    def self.type_key: () -> Symbol

    def self.spacer_key: () -> Symbol

    def self.storage_value: (untyped v) -> untyped

    def self.constant_map: () -> Hash[Symbol,Module]

    self.@constant_map: Hash[Symbol,Module]
  end

  # A table of AppSettings flag values.
  #
  class FlagValues < Values
    def self.type_key: () -> Symbol

    def self.spacer_key: () -> Symbol

    def self.storage_value: (untyped v) -> (bool | nil)
  end

  # A table of AppSettings non-flag settings values.
  #
  class SettingValues < Values
    def self.type_key: () -> Symbol

    def self.spacer_key: () -> Symbol

    def self.storage_value: (untyped v) -> untyped
  end

  module Methods
    include AppGlobal::Methods

    include Emma::Json

    # The value returned if global application settings were not present.
    #
    # @return [Hash]
    #
    def default: () -> symHash

    # Get global application settings values.
    #
    # @return [Hash]
    #
    def get_item: (**untyped opt) -> symHash

    # Set global application settings values.
    #
    # @param [Hash]    values
    # @param [Boolean] replace        If *true* erase current settings first.
    #
    # @return [Hash]                  The new settings.
    # @return [nil]                   If the `write` failed.
    #
    def set_item: (symHash values, ?replace: bool, **untyped opt) -> (symHash | nil)

    # Initialize global application settings.
    #
    # @param [Hash, nil] values
    #
    # @return [Hash]                  The new settings.
    # @return [nil]                   If the `write` failed.
    #
    def reset_item: (?(symHash|nil) values) -> (symHash | nil)

    # The key defined by the subclass.
    #
    # @return [Symbol]
    #
    def cache_key: () -> Symbol

    # filter_all
    #
    # @param [Hash]                       values
    # @param [Symbol, nil]                type
    # @param [Boolean]                    spacers
    # @param [Array<Symbol>, Symbol, nil] only
    #
    # @return [Hash]
    #
    def filter_all: (symHash values, ?type: Symbol|nil, ?spacers: bool, ?only: symArray|Symbol|nil) -> symHash

    # prepare_all
    #
    # @param [Hash, nil] values
    # @param [Hash]      opt          Passed to #filter_all.
    #
    # @return [Hash, nil]
    #
    def prepare_all: (symHash|nil values, **untyped opt) -> (symHash | nil)

    # Recursively prepare a single item.
    #
    # @param [any, nil] item
    #
    # @return [any, nil]
    #
    def prepare
      :     (anyHash  item) -> symHash
      |     (anyArray item) -> anyArray
      |     (String   item) -> (String | bool)
      |     (nil      item) -> nil
      | [T] (T        item) -> T

    # Render application settings for display (showing symbols appropriately).
    #
    # @param [Hash, nil] values       Default: all items.
    # @param [Hash]      opt          Passed to #filter_all.
    #
    # @return [String]
    #
    # @note Currently unused.
    #
    def inspect_all: (?(symHash|nil) values, **untyped opt) -> String

    # Preserve symbols for resolution with #decode_symbols.
    #
    # @param [any, nil] item
    #
    # @return [any, nil]
    #
    # @note Currently used only by #inspect_all.
    #
    def encode_symbols
      :     (Symbol item) -> String
      |     (nil    item) -> nil
      | [T] (T      item) -> T

    # encode_symbol
    #
    # @param [Symbol] symbol
    #
    # @return [String]
    #
    # @note Currently used only by #encode_symbols.
    #
    def encode_symbol: (Symbol symbol) -> String

    # decode_symbols
    #
    # @param [String] string
    #
    # @return [String]
    #
    # @note Currently used only by #inspect_all.
    #
    def decode_symbols: (String string) -> String

    alias get_all get_item

    alias set_all set_item

    alias reset_all reset_item

    alias clear_all clear_item

    # Retrieve an individual setting.
    #
    # @param [Symbol, String] name
    #
    # @return [any, nil]
    #
    def []: (Symbol|String name) -> (untyped | nil)

    # Assign an individual setting.
    #
    # @param [Symbol, String] name
    # @param [any, nil]       value
    #
    # @return [any, nil]
    #
    def []=: [T] (Symbol|String name, T value) -> T

    # Iterate over each configuration flag.
    #
    # @param [Hash] opt               Passed to #each_pair
    #
    def each_flag: (?spacers: bool) { (Symbol name, bool value) -> void } -> void

    # Iterate over each configuration setting.
    #
    # @param [Hash] opt               Passed to #each_pair
    #
    def each_setting: (**untyped opt) { (Symbol name, untyped value) -> void } -> void

    # Iterate over each configuration value.
    #
    # @param [Hash] opt               Passed to #get_item.
    #
    # @yield [name, value] Operate on a configuration value.
    # @yieldparam [Symbol]   name
    # @yieldparam [any, nil] value
    #
    def each_pair: (**untyped opt) { (Symbol name, untyped value) -> void } -> void

    alias each each_pair

    # Update global settings.
    #
    # @param [Hash, String, nil] values
    #
    # @return [Hash, nil]
    #
    def update: (symHash|String|nil values) -> (symHash | nil)

    private

    def self.included: (Module base) -> void
  end

  include Methods
end
