# Item presenter for "/member" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Bs::Record::UserAccount]
#
class MemberDecorator < BookshareDecorator
  module Paths
    include BookshareDecorator::Paths
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module Methods
    include BookshareDecorator::Methods
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module InstanceMethods
    include BookshareDecorator::InstanceMethods

    include Paths

    include Methods
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module ClassMethods
    include BookshareDecorator::ClassMethods

    include Paths

    include Methods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module Common
    def self.included: (Module base) -> void
  end

  include Common

  # history_data
  #
  # @return [Bs::Message::TitleDownloadList, nil]
  #
  def history_data: () -> (Bs::Message::TitleDownloadList | nil)

  @history_data: Bs::Message::TitleDownloadList | nil

  # downloads
  #
  # @return [Array<Bs::Record::TitleDownload>]
  #
  def downloads: () -> Array[Bs::Record::TitleDownload]

  @dl: Array[Bs::Record::TitleDownload]

  # preference_data
  #
  # @return [Bs::Message::MyAccountPreferences, nil]
  #
  def preference_data: () -> (Bs::Message::MyAccountPreferences | nil)

  @preference_data: Bs::Message::MyAccountPreferences | nil

  # preferences
  #
  # @return [Bs::Message::MyAccountPreferences, nil]
  #
  def preferences: () -> (Bs::Message::MyAccountPreferences | nil)

  # Configured member history record fields.
  #
  # @return [Hash{Symbol=>Hash}]      Frozen result.
  #
  def history_fields: (*untyped _ignored) ?{ () -> untyped } -> symHash

  # Configured member preference record fields.
  #
  # @return [Hash{Symbol=>Hash}]      Frozen result.
  #
  def preference_fields: (*untyped _ignored) ?{ () -> untyped } -> symHash

  # Create a link to the details show page for the given item.
  #
  # NOTE: Over-encoded to allow ID's with '.' to be passed to Rails.
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # This is specifically for the sake of "emma.member.*.display_fields" which
  # expect the view helper to have defined :member_link.
  alias member_link link

  # Render a metadata listing of a member account.
  #
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def details: (?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a listing of member preferences.
  #
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to #render_field_values.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def preference_list: (?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Create a decorator variant for preference values.
  #
  # @param [Bs::Message::MyAccountPreferences, nil] prefs
  #
  # @return [BookshareDecorator, nil]
  #
  def preference_decorator: ((Bs::Message::MyAccountPreferences|nil) prefs) -> (BookshareDecorator | nil)

  # CSS class for the container of the history lis.
  #
  # @type [String]
  #
  HISTORY_CSS_CLASS: String

  # history_title
  #
  # @param [String, nil] label
  # @param [Hash]        opt          Passed to #html_tag except for:
  #
  # @option opt [Integer] :level      If missing, defaults to 'div'.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def history_title: ((String|nil) label, ?(symHash|nil) opt) -> ActiveSupport::SafeBuffer

  # history_control
  #
  # @param [String] id                Control ID (@see #history_list)
  # @param [Hash]   opt               Passed to PanelHelper#toggle_button.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def history_control: (id: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render of list of member activity entries.
  #
  # @param [String]    id             Control ID (@see #history_control)
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to #render_field_values.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def history_list: (id: String, ?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Create a decorator variant which will handle the :title field appropriately
  # for history entries.
  #
  # @param [Bs::Record::TitleDownload, nil] download
  #
  # @return [BookshareDecorator, nil]
  #
  def history_decorator: ((Bs::Record::TitleDownload|nil) download) -> (BookshareDecorator | nil)

  # Render a single entry for use within a list of items.
  #
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def list_item: (?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # form_action_link
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_action_link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # form_target_description
  #
  # @param [Symbol] action
  #
  # @return [String]
  #
  def form_target_description: (?action: Symbol|nil, **untyped _ignored) -> String
end
