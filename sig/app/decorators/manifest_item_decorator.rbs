# Item presenter for "/manifest_item" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [ManifestItem]
#
class ManifestItemDecorator < BaseDecorator
  # Indicates whether cells in the 'file_data' column include the ability to
  # upload a file associated with the manifest item.
  #
  # @type [Boolean]
  #
  # @see file:assets/javascripts/controllers/manifest-edit.js *saveUpdates()*
  #
  EMBED_UPLOADER: bool

  module SharedPathMethods
    include BaseDecorator::SharedPathMethods

    def show_select_path:   (*untyped _ignored) -> nil
    def edit_select_path:   (*untyped _ignored) -> nil
    def delete_select_path: (*untyped _ignored) -> nil
    def upload_path:        (*untyped _ignored,                  **untyped opt) -> String
    def bulk_new_path:      (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String
    def bulk_create_path:   (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String
    def bulk_edit_path:     (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String
    def bulk_update_path:   (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String
    def bulk_delete_path:   (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String
    def bulk_destroy_path:  (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String

    # manifest_for
    #
    # @param [String,Model,Hash,Array,nil] item
    # @param [Hash]                        opt
    #
    # @return [String, nil]
    #
    def manifest_for: (?(String | Model | anyHash | anyArray | nil) item, **untyped opt) -> (String | nil)

    # path_for
    #
    # @param [Model,Hash,Array,nil] item
    # @param [Hash]                 opt
    #
    # @return [String]
    #
    def path_for: (?(Model | anyHash | anyArray | nil) item, **untyped opt) -> String
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module SharedGenericMethods
    include BaseDecorator::SharedGenericMethods

    include BaseDecorator::Grid

    include BaseDecorator::Lookup

    # Bulk grid configuration values.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    BULK_GRID_CFG: Hash[Symbol,symHash]
    INPUT_CONTROL_CFG: Hash[Symbol,symHash]

    # Get all configured record fields for the model.
    #
    # @return [ActionConfig]
    #
    def model_form_fields: (**untyped _ignored) -> ActionConfig

    # Control icon definitions.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    # @see BaseDecorator::Controls#ICON_PROPERTIES
    #
    ICONS: Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Icon definitions for this decorator.
    #
    # @return [Hash{Symbol=>Hash}]
    #
    def icon_definitions: () -> Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # control_icon_button
    #
    # @param [Symbol]             action    One of #icon_definitions.keys.
    # @param [GridIndex, Integer] index
    # @param [String]             unique
    # @param [Hash]               opt       Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer, nil]
    #
    def control_icon_button: (Symbol action, ?index: BaseDecorator::Grid::GridIndex|Integer|nil, ?unique: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

    # Bibliographic lookup control which engages #lookup_modal.
    #
    # @param [Hash] opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def lookup_control: (**untyped opt) -> ActiveSupport::SafeBuffer

    # The options to create a toggle button to activate the bibliographic
    # lookup popup.
    #
    # @param [Hash] opt
    #
    # @option opt [Hash] :label       Override the default button label.
    #
    # @return [Hash]
    #
    def lookup_button_options: (**untyped opt) -> symHash

    # Render a single entry for use within a list of items.
    #
    # @param [Hash] opt                 Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def list_item: (**untyped opt) -> ActiveSupport::SafeBuffer

    # Include control icons below the entry number.
    #
    # @param [Hash] opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def list_item_number: (**untyped opt) -> ActiveSupport::SafeBuffer

    # Don't display an item number in manifest listings.
    #
    # @return [nil]
    #
    def list_item_number_label: (**untyped _ignored) -> nil

    def config_button_values: ((String|Symbol) action) -> Hash[Symbol,Hash[Symbol,String|symHash]]

    # Form action button configuration.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    def generate_form_actions: (?symArray actions) -> Hash[Symbol,symHash]

    # Render a single label/value pair, modifying the treatment of :file_data
    # depending on the value of #EMBED_UPLOADER.
    #
    # @param [String, Symbol] label
    # @param [any, nil]       value
    # @param [Hash]           opt     Passed to super
    #
    # @return [ActiveSupport::SafeBuffer, nil]
    #
    def render_form_pair: ((String|Symbol) label, untyped value, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

    # This is a variation for ensuring that the `<div>` enclosing the checkbox
    # list element is not given `role='group'`.
    #
    # @param [String] name
    # @param [Array]  value
    # @param [Class]  range
    # @param [Hash]   opt               Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def render_form_menu_multi: (String name, anyArray value, range: Class, **untyped opt) -> ActiveSupport::SafeBuffer

    SKIPPED_FIELDS: symArray

    # The fields which are displayed in the expandable "Item Details" panel and
    # the HTML element type used to contain its value(s).
    #
    # @type [Array<Symbol>]
    #
    DETAILS_FIELDS: symArray

    HIDDEN_FIELDS: symArray

    UNDISPLAYED_FIELDS: symArray

    FIELD: String

    REQUIRED: String

    # The names of ManifestItem columns that are not rendered.
    #
    # @return [Array<Symbol>]
    #
    def row_skipped_columns: () -> symArray

    # The names of each grid data column which is not displayed.
    #
    # @return [Array<Symbol>]
    #
    def grid_row_skipped_columns: () -> symArray

    # The names of each grid data column which is rendered but not visible.
    #
    # @return [Array<Symbol>]
    #
    def grid_row_undisplayed_columns: () -> symArray

    # Show a button for expanding/contracting the controls column in the top
    # left grid cell.
    #
    # @param [String] css               Characteristic CSS class/selector.
    # @param [Hash]   opt
    #
    # @return [Array<ActiveSupport::SafeBuffer>]
    #
    def grid_head_control_headers: (?css: String|nil, **untyped opt) -> Array[ActiveSupport::SafeBuffer]

    # Render a grid header cell.
    #
    # @param [Symbol, nil] col        Data column.
    # @param [Hash]        opt        Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @yield Leading content
    # @yieldreturn [String, Array]
    #
    def grid_head_cell: ((Symbol|nil) col, **untyped opt) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

    # Generate a <detail> element describing a field.
    #
    # @param [Symbol]           col
    # @param [FieldConfig, nil] prop
    # @param [Proc]             blk   Passed to #html_details
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def field_details: ((Symbol|nil) col, ?(FieldConfig|nil) prop, **untyped opt) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

    # Generate a <detail> element describing a type.
    #
    # @param [Symbol]           col
    # @param [FieldConfig, nil] prop
    # @param [Proc]             blk   Passed to #html_details
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def type_details: ((Symbol|nil) col, ?(FieldConfig|nil) prop, **untyped opt) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

    # A button for expanding/contracting the controls column.
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt             Passed to #grid_control
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def column_expander: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # A button for expanding/contracting the head row.
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt             Passed to #grid_control
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def header_expander: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Column/header expand/contract controls.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    GRID_HEADER: Hash[Symbol,symHash]

    # A button for controlling overall grid behavior.
    #
    # @param [Symbol]  type           Either :column or :row.
    # @param [Boolean] expanded       If *true* start expanded.
    # @param [String]  css            Characteristic CSS class/selector.
    # @param [Hash]    opt            Passed to #html_button except:
    #
    # @option opt [String] :label     Override default label.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def grid_control: (Symbol `type`, ?expanded: bool, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Submission status type keys and column labels.
    #
    # (The steps associated with the unique labels of #SUBMIT_STEPS_TABLE.)
    #
    # @type [Hash{Symbol=>Hash}]
    #
    SUBMIT_STEPS: Hash[Symbol,symHash]

    # Submission status grid column names.
    #
    # @type [Array<Symbol>]
    #
    SUBMIT_COLUMNS: symArray

    # Submission status value CSS classes and labels.
    #
    # @type [Hash{Symbol=>Hash{Symbol=>String}}]
    #
    SUBMIT_STATUS: Hash[Symbol,Hash[Symbol,String]]

    # Mapping of submission status CSS class on to label.
    #
    # @type [Hash{String=>String}]
    #
    SUBMIT_STATUS_LABELS: Hash[String,String]

    S_OK: Symbol

    S_BLANK: Symbol

    S_UNSAVED: Symbol

    S_DATA_MISSING: Symbol

    S_FILE_MISSING: Symbol

    S_FILE_NEEDED: Symbol

    # Statuses whose displays show an Edit button.
    #
    # @type [Array<Symbol>]
    #
    STATUS_SHOW_EDIT: symArray

    # Statuses whose label is a <details> instead of a <div>.
    #
    # @type [Array<Symbol>]
    #
    STATUS_SHOW_DETAILS: symArray

    # The row number of the grid header.
    #
    # @type [Integer]
    #
    HEADER_ROW: Integer

    # The header row of the submission status grid.
    #
    # @param [Integer] row
    # @param [String]  css
    # @param [Hash]    opt
    #
    # @option opt [Boolean] :wrap     If *false* don't wrap in `<thead>`.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @see #submit_status_element
    #
    def submission_status_header: (?row: Integer, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

    # Generate a row of the submission grid.
    #
    # @param [String, nil]          ctrl
    # @param [String, ManifestItem] item
    # @param [Hash]                 statuses
    # @param [Integer]              row
    # @param [Integer]              col
    # @param [Symbol]               tag       Default: :tr.
    # @param [String]               css
    # @param [Hash]                 opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def submit_status_element: ((String|nil) ctrl, (String|ManifestItem) item, Hash[Symbol,(String|Symbol|bool|nil)] statuses, ?row: Integer, ?col: Integer, ?tag: Symbol|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

    # Generate the checkbox selection control for a row of the submission grid.
    #
    # @param [String, nil]  ctrl
    # @param [Integer, nil] col
    # @param [Symbol]       tag
    # @param [String]       css
    # @param [Hash]         opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def submit_status_ctls: (?(String|nil) ctrl, ?col: Integer|nil, tag: Symbol|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

    # Generate the item name cell for a row of the submission grid.
    #
    # @param [String, ManifestItem] item
    # @param [Integer, nil]         col
    # @param [Symbol]               tag
    # @param [String]               css
    # @param [Hash]                 opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def submit_status_item: ((String|ManifestItem) item, ?col: Integer|nil, tag: Symbol|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

    # Generate a status value cell for a row of the submission grid.
    #
    # @param [Symbol]       type
    # @param [Symbol, nil]  status
    # @param [Integer, nil] col
    # @param [Integer, nil] row
    # @param [Symbol]       tag
    # @param [String]       css
    # @param [Hash]         opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def submit_status_value: (Symbol `type`, Symbol|nil status, ?col: Integer|nil, ?row: Integer|nil, tag: Symbol|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

    # The text on the status element.
    #
    # @param [Symbol]      type
    # @param [Symbol, nil] status
    # @param [String]      css
    # @param [Hash]        opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def submit_status_text: (Symbol `type`, Symbol|nil status, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

    # Control for fixing a condition resulting in a given status.
    #
    # @param [Symbol]       _type
    # @param [Symbol, nil]  status
    # @param [Integer, nil] row
    # @param [String]       css
    # @param [Hash]         opt
    #
    # @return [ActiveSupport::SafeBuffer, nil]
    #
    # @see file:javascripts/controllers/manifest-edit.js *scrollToCenter()*
    #
    def submit_status_link: (Symbol _type, Symbol|nil status, ?css: String, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

    # The URL path to the edit page scrolled to the indicated row.
    #
    # @param [Integer, nil] row
    # @param [Hash]         opt       Options for #edit_manifest_path.
    #
    # @return [String]
    #
    def edit_row_path: (Integer|nil row, **untyped opt) -> String

    # A set of status indicator icons and descriptive labels.
    #
    # @param [ManifestItem] item
    # @param [Integer]      row
    # @param [String]       unique
    # @param [String]       css       Characteristic CSS class/selector.
    # @param [Hash]         opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @see file:assets/javascripts/controllers/manifest-edit.js *statusData()*
    #
    def row_indicators: (ManifestItem item, ?row: Integer|nil, ?unique: String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # A collapsible element listing values for ManifestItem fields that are not
    # related to grid columns.
    #
    # @param [ManifestItem] item
    # @param [Integer]      row
    # @param [String]       unique
    # @param [String]       css       Characteristic CSS class/selector.
    # @param [Hash]         opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def row_details: (ManifestItem item, ?row: Integer|nil, ?unique: String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    LABEL_CLASS: String

    VALUE_CLASS: String

    # row_indicator
    #
    # @param [String,Symbol] value
    # @param [String]        css
    # @param [Hash]          opt
    #
    # @option opt [String]        :id                 Required
    # @option opt [String,Symbol] :'data-field'       Required
    # @option opt [String]        :'aria-describedby' Required
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def row_indicator: (String|Symbol value, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # row_indicator_label
    #
    # @param [String,Symbol] label
    # @param [String]        css
    # @param [Hash]          opt
    #
    # @option opt [String]   :id      Required
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def row_indicator_label: (String|Symbol label, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # row_detail_value_label
    #
    # @param [String,Symbol] label
    # @param [String]        css
    # @param [Hash]          opt
    #
    # @option opt [String]   :id      Required
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def row_detail_value_label: (String|Symbol label, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # row_detail_value
    #
    # @param [Hash,Array,String,nil] value
    # @param [String]                css
    # @param [Hash]                  opt
    #
    # @option opt [String]        :id                 Required
    # @option opt [String,Symbol] :'data-field'       Required
    # @option opt [String]        :'aria-describedby' Required
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def row_detail_value: (symHash|strArray|String|nil value, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # row_field_error_details
    #
    # @param [Hash]   value
    # @param [String] css
    # @param [Hash]   opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @see file:javascripts/controllers/manifest-edit.js *updateRowDetails*
    #
    def row_field_error_details: (symHash value, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module SharedInstanceMethods
    include BaseDecorator::SharedInstanceMethods

    include SharedPathMethods

    include SharedGenericMethods

    # options
    #
    # @return [ManifestItem::Options]
    #
    def options: () -> ManifestItem::Options

    # row_indicators
    #
    # @param [ManifestItem, nil] item   Default: `#object`.
    # @param [Hash]              opt    Passed to super
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def row_indicators: (?(ManifestItem|nil) item, **untyped opt) -> ActiveSupport::SafeBuffer

    # row_details
    #
    # @param [ManifestItem, nil] item   Default: `#object`.
    # @param [Hash]              opt    Passed to super
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def row_details: (?(ManifestItem|nil) item, **untyped opt) -> ActiveSupport::SafeBuffer
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module SharedClassMethods
    include BaseDecorator::SharedClassMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end

end

class ManifestItemDecorator
  include SharedDefinitions
  include SharedInstanceMethods
  extend  SharedClassMethods

  # The ID of the Manifest associated with the decorated ManifestItem.
  #
  # @param [String] id                Override the normal value.
  #
  # @return [String]
  #
  def manifest_id: (?(String|nil) id) -> String

  @manifest_id: String

  # Transform a field value for HTML rendering.
  #
  # @param [any, nil]    value
  # @param [Symbol, nil] field
  # @param [Hash]        opt          Passed to the render method or super.
  #
  # @return [Field::Type]
  # @return [String]
  # @return [nil]
  #
  def list_field_value: (untyped value, field: Symbol|nil, **untyped opt) -> (Field::Type | String | nil)

  # Generate the interior of the controls grid cell.
  #
  # @param [Array]   added            Optional elements after the buttons.
  # @param [Integer] row              Associated grid row.
  # @param [String]  unique
  # @param [Hash]    opt              Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Additional content if provided.
  # @yieldreturn [Array,ActiveSupport::SafeBuffer,nil]
  #
  # @see file:javascripts/controllers/manifest-edit.js *toggleControlsColumn*
  #
  def grid_row_control_contents: (*ActiveSupport::SafeBuffer added, ?row: Integer|nil, ?unique: String|nil, **untyped opt) ?{ () -> (Array[ActiveSupport::SafeBuffer] | ActiveSupport::SafeBuffer | nil) } -> ActiveSupport::SafeBuffer

  # Render a single grid item.
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def grid_item: (**untyped opt) -> ActiveSupport::SafeBuffer

  # The CSS class for the element containing feedback elements generated by
  # Uppy plugins.
  #
  # @type [String]
  #
  # @see file:javascripts/shared/uploader.js *MultiUploader.DISPLAY_CLASS*
  #
  UPLOADER_DISPLAY_CLASS: String

  # Render a single label/value pair in a grid cell.
  #
  # @param [String, Symbol, nil] label
  # @param [any, nil]            value
  # @param [Symbol]              field
  # @param [FieldConfig]         prop
  # @param [Integer, nil]        col
  # @param [Hash]                opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  # @see file:javascripts/controllers/manifest-edit.js *updateFileUploaderCols*
  #
  def grid_data_cell_render_pair: ((String|Symbol|nil) label, untyped value, field: Symbol, prop: FieldConfig, ?col: Integer|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # The edit element for a grid data cell.
  #
  # @param [Symbol]           field   For 'data-field' attribute.
  # @param [any, nil]         value
  # @param [FieldConfig, nil] prop    Default: from field/model.
  # @param [Hash]             opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def grid_data_cell_edit: (Symbol field, untyped value, (FieldConfig|nil) prop, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # @see EMBED_UPLOADER
  # @type [Hash{Symbol=>Hash}]
  FILE_TYPE_CFG: Hash[Symbol,symHash]

  # @see EMBED_UPLOADER
  # @type [Array<Symbol>]
  FILE_TYPES: symArray

  # @see EMBED_UPLOADER
  FILE_INPUT_TYPES: symArray

  # @see EMBED_UPLOADER
  PREPEND_CONTROLS_CLASS: String

  # @see EMBED_UPLOADER
  APPEND_CONTROLS_CLASS: String

  # For the :file_data column, display the path to the file if present or an
  # upload button if not.
  #
  # This also generates a hidden container for buttons that can be added
  # client-side to .uppy-FileInput-container after it is created by Uppy.
  #
  # @param [String]   _name
  # @param [any, nil] _value
  # @param [String]   css             Characteristic CSS class/selector.
  # @param [Hash]     opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see EMBED_UPLOADER
  # @see file:controllers/manifest-edit.js  *initializeAddedControls*
  #
  def render_grid_file_input: (String _name, untyped _value, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate an alternate file input control as a button with a hidden popup.
  #
  # @param [Symbol] src               One of #FILE_INPUT_TYPES.
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see EMBED_UPLOADER
  #
  def file_input_popup: (src: Symbol, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a visible button of an alternate file input control.
  #
  # @param [Symbol] src               One of #FILE_INPUT_TYPES.
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see EMBED_UPLOADER
  #
  def file_input_ctrl: (src: Symbol, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a hidden panel to prompt for a file name.
  #
  # @param [String] id                HTML ID of the visible button.
  # @param [Symbol] src               One of #FILE_INPUT_TYPES.
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see EMBED_UPLOADER
  #
  def file_input_panel: (id: String, src: Symbol, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # details_container
  #
  # @param [Array] before             Optional elements before the details.
  # @param [Hash]  opt                Passed to super except:
  #
  # @option opt [Symbol, Array<Symbol>] :skip   Display aspects to avoid.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def details_container: (*String before, **untyped opt) ?{ () -> (ActiveSupport::SafeBuffer | nil) } -> ActiveSupport::SafeBuffer

  # Submission status row for a single manifest item submission.
  #
  # @param [Integer, nil] row
  # @param [Integer]      col
  # @param [Integer, nil] index
  # @param [Hash]         opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #submit_status_element
  #
  def submission_status: (?row: Integer|nil, ?col: Integer, ?index: Integer|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Client-side scripting which are supplied via 'assets:precompile'.
  #
  # @return [Hash]
  #
  # @see file:app/assets/javascripts/shared/assets.js.erb  *Emma.ManifestItem*
  #
  def self.js_properties: () -> symHash
end
