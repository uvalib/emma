# Methods supporting managed downloads.
#
module BaseDecorator::Retrieval
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Links

  # Configuration for Bookshare download control properties.
  #
  # @type [Hash{Symbol=>*}]
  #
  DOWNLOAD_CONFIG: symHash

  # Default link tooltip.
  #
  # @type [String]
  #
  DOWNLOAD_TOOLTIP: String

  # Default completed link tooltip.
  #
  # @type [String]
  #
  DOWNLOAD_COMPLETE_TIP: String

  # Artifact download progress indicator element CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_CLASS: String

  # Artifact download progress indicator tooltip.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_TIP: String

  # Artifact download progress indicator relative asset path.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_ASSET: String

  # Artifact download progress indicator alt text.
  #
  # @type [String]
  #
  DOWNLOAD_PROGRESS_ALT_TEXT: String

  # Artifact download failure message element CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_FAILURE_CLASS: String

  # Artifact probe control CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_PROBE_CLASS: String

  # Artifact download link element CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_LINK_CLASS: String

  # Artifact download button element CSS class.
  #
  # @type [String]
  #
  DOWNLOAD_BUTTON_CLASS: String

  # Artifact download button label.
  #
  # @type [String]
  #
  DOWNLOAD_BUTTON_LABEL: String

  # Generic reference to format type for label construction.
  #
  # @type [String]
  #
  THIS_FORMAT: String

  # Produce a link-like control for the retrieval of an Internet Archive file
  # that utilizes the "Printdisabled Unencrypted Ebook API".
  #
  # @param [String] url
  # @param [Hash]   opt               Passed to #download_control
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ia_retrieval_link: (String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve an ACE file that utilizes the Internet Archive
  # "Printdisabled Unencrypted Ebook API".
  #
  # @param [String] url
  # @param [Hash]   opt               Passed to #ia_retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ace_retrieval_link: (String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Produce a link to retrieve a file from an EMMA publisher collection.
  #
  # @param [String] url
  # @param [Hash]   opt               Passed to #retrieval_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def bv_retrieval_link: (String url, **untyped opt) -> ActiveSupport::SafeBuffer

  # Create an element containing a link-like control to probe for availability
  # of an item for download along with (hidden) elements used during the
  # probing process and to actually download the requested item.
  #
  # @param [Model, nil]          item     Default: `object`.
  # @param [String, nil]         url      Def: derived from *item*.
  # @param [String, nil]         file     Name of the file to download.
  # @param [String, Symbol, nil] format   Def: derived from *item*.
  # @param [Boolean]             plain    If *true*, just the download link.
  # @param [String]              css      Characteristic CSS class.
  # @param [Hash]                opt      Passed to #model_link.
  #
  # @return [ActiveSupport::SafeBuffer]   The HTML link element.
  # @return [nil]                         No link URL was provided or found.
  #
  def download_control: (?item: Model|nil, ?url: String|nil, ?file: String|nil, ?format: String|Symbol|nil, ?plain: bool, ?css: String, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # The link-like download probe control.
  #
  # @param [String] url
  # @param [String] label
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #model_link.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def download_probe: (String url, label: String, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # An element to be shown while an artifact is being acquired.
  #
  # @param [String, nil] image        Default: 'loading-balls.gif'
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          Passed to #image_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def download_progress: (?image: String|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # An element to indicate failure.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #html_span.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/download.js *showFailureMessage()*
  #
  def download_failure: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # An element for direct download of an artifact.
  #
  # @param [String, nil]         label
  # @param [String, nil]         file   File name.
  # @param [String, Symbol, nil] fmt
  # @param [Boolean]             plain  If *true* do not use *css*.
  # @param [String]              css    Characteristic CSS class/selector.
  # @param [Hash]                opt    Passed to LinkHelper#make_link.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def download_button: (?label: String|nil, ?file: String|nil, ?fmt: String|Symbol|nil, ?plain: bool, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Prepare a format name for use in a tooltip or label.
  #
  # @param [String, Symbol, nil] fmt
  #
  # @return [String]
  #
  def download_format: (String|Symbol|nil fmt) -> String

  private

  def self.included: (Module base) -> void
end
