# Common methods supporting display of Model instances (both database items and
# API messages).
#
module BaseDecorator::Controls
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Links

  # Valid properties for entries under #ICONS.
  #
  # * :icon     [String]                Unicode character.
  # * :spoken   [String]                Textual description of the character.
  # * :tooltip  [String]                Tooltip on hover.
  # * :path     [String, Symbol, Proc]  Activation action (see below).
  # * :auto     [Boolean]               If *true* authorization is not checked.
  # * :enabled  [Boolean, Proc]         If *false* do not show.
  # * :visible  [Boolean, Proc]         If *false* make opaque.
  #
  ICON_PROPERTIES: symArray

  # Control icon definitions.
  #
  # @type [Hash{Symbol=>Hash{Symbol=>*}}]
  #
  # @see BaseDecorator::Controls#ICON_PROPERTIES
  #
  ICONS: Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

  # The name of the attribute indicating the action of a control button.
  #
  # @type [Symbol]
  #
  ACTION_ATTR: Symbol

  # Icon definitions relative to the decorator subclass.
  #
  # @return [Hash{Symbol=>Hash{Symbol=>*}}]
  #
  def icon_definitions: () -> Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

  # The configuration entry for the named icon.
  #
  # @param [Symbol,String,nil] action #icon_definitions key.
  #
  # @return [Hash]                    Empty if *action* not found.
  #
  def icon_definition: (Symbol|String|nil action) -> Hash[Symbol,(String|Symbol|Proc|bool|nil)]

  # Control icon definitions.
  #
  # @param [Boolean] authorized       If *true* show all enabled icons.
  #
  # @return [Hash{Symbol=>Hash{Symbol=>*}}]
  #
  # @see #icon_definitions
  #
  def control_icons: (?authorized: bool) -> Hash[Symbol, symHash]

  # Generate an element with icon controls for the operation(s) the user is
  # authorized to perform on the item.
  #
  # @param [Array, Symbol, nil] except
  # @param [String]             css     Characteristic CSS class/selector.
  # @param [Hash]               opt     Passed to #control_icon_button
  #
  # @return [ActiveSupport::SafeBuffer]   An HTML element.
  # @return [nil]                         If no operations are authorized.
  #
  # @see #control_icons
  #
  def control_icon_buttons: (?except: symArray|Symbol|nil, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Produce an action icon based on either :path or :id.
  #
  # If :path is :button then the generated item is a button (which is expected
  # to be handled client-side.)
  #
  # @param [Symbol]             action    One of #icon_definitions.keys.
  # @param [GridIndex, Integer] index
  # @param [String]             unique
  # @param [String]             css       Characteristic CSS class/selector.
  # @param [Hash]               opt       To LinkHelper#make_link except for
  #                                         #ICON_PROPERTIES.
  #
  # @return [ActiveSupport::SafeBuffer]   An HTML link element.
  # @return [nil]                         If *item* unrelated to a submission.
  #
  def control_icon_button: (Symbol action, ?index: BaseDecorator::Grid::GridIndex|Integer|nil, ?unique: String|nil, ?css: String|nil, **untyped opt) ?{ (String|Symbol|Proc path, symHash opt) -> (ActiveSupport::SafeBuffer | nil) } -> (ActiveSupport::SafeBuffer | nil)

  # Make a Unicode character (sequence) into a decorative element that is not
  # pronounced by screen readers.
  #
  # @param [String,Symbol] icon       Unicode character or #ICON key.
  # @param [Hash]          opt        Passed to HtmlHelper#symbol_icon.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def symbol_icon: (String|Symbol icon, **untyped opt) -> ActiveSupport::SafeBuffer

  # Wrapper for a group of one or more focusables.
  #
  # @param [String, nil] id
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def control_group: (?(String|nil) id, ?css: String, **untyped opt) { () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
