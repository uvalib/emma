# Methods supporting display of individual Model instances.
#
module BaseDecorator::List
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Fields

  include BaseDecorator::Pagination

  # The default CSS class for wrapping label/values pairs (when requested).
  #
  # @type [String]
  #
  PAIR_WRAPPER: String

  # Heading element for lists of model items.
  #
  # @param [Array, nil]       list
  # @param [Integer]          level
  # @param [String, nil]      title
  # @param [Integer, Boolean] count   Default: `object.size`.
  # @param [String]           css     Characteristic CSS class/selector.
  # @param [Hash]             opt     Passed to heading element.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def list_heading: (?(anyArray|nil) list, ?level: Integer, ?title: String|nil, ?count: Integer|bool, ?css: String, ?skip: symArray, **untyped opt) -> ActiveSupport::SafeBuffer

  # Append a parenthesized count to a label.
  #
  # @param [String]      label
  # @param [Integer]     count        Wrapped in a `<span>`.
  # @param [String, nil] unit         Appended to the displayed count value.
  # @param [String]      css          CSS class/selector for count element.
  # @param [Hash]        opt          Passed to count element.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def label_with_count: (String label, Integer count, ?unit: String|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # thumbnail_data
  #
  # @return [String, nil]
  #
  def thumbnail_data: () -> (String | nil)

  # cover_data
  #
  # @return [String, nil]
  #
  def cover_data: () -> (String | nil)

  # Render field/value pairs.
  #
  # @param [String, nil] separator    Default: #DEFAULT_ELEMENT_SEPARATOR.
  # @param [Hash]        opt          To #render_pair or #property_pairs.
  #
  # @option opt [Integer] :index      Offset to make unique element IDs passed
  #                                     to #render_pair.
  #
  # @option opt [Hash] :fake_upload_file  Special data only for Uploads passed
  #                                         through #list_field_values to
  #                                         #property_pairs and on to
  #                                         UploadDecorator#value_pairs.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_field_values: (?separator: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single label/value pair in a list item.
  #
  # @param [String, Symbol, nil] label
  # @param [any, nil]            value
  # @param [Symbol]              field
  # @param [FieldConfig]         prop
  # @param [Hash]                opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  # === Implementation Notes
  # Compare with BaseDecorator::Grid#grid_data_cell_render_pair
  #
  def list_render_pair: ((String|Symbol|nil) label, untyped value, field: Symbol, prop: FieldConfig, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  DEF_LABEL_CLASS: String

  DEF_VALUE_CLASS: String

  # Fields which, when formatting, should be rendered as 'textarea' values.
  #
  # @type [Array<Symbol>]
  #
  TEXTAREA_FIELDS: symArray

  # Render a single label/value pair.
  #
  # @param [String, Symbol, nil]  label
  # @param [any, nil]             value
  # @param [FieldConfig, nil]     prop      Default: from field/model.
  # @param [Symbol, nil]          field
  # @param [String, Integer]      index     Offset to make unique element IDs.
  # @param [Integer, nil]         row       Display row.
  # @param [Integer, nil]         col       Display column.
  # @param [Integer, nil]         pos       Ordinal alternative to row or col.
  # @param [String, nil]          separator Between parts if *value* is array.
  # @param [String, nil]          wrap      Class for outer wrapper.
  # @param [Symbol]               tag       @see #HTML_TABLE_TAGS
  # @param [Boolean,Symbol,Array] no_fmt
  # @param [Boolean]              no_code
  # @param [Boolean]              no_label
  # @param [Boolean]              no_help
  # @param [String, nil]          label_css
  # @param [String, nil]          value_css
  # @param [Hash]                 opt       Passed to each #html_div except:
  #
  # @option opt [String]         :base              Passed to #field_html_id.
  # @option opt [String, Symbol] :group             Passed to #field_html_id.
  #
  # @option opt [String]         :role              To outer wrapper only.
  # @option opt [any, nil]       :'aria-level'      To outer wrapper only.
  # @option opt [any, nil]       :'aria-colindex'   To outer wrapper only.
  #
  # @option opt [String]         :label_id          Specify label element ID.
  # @option opt [String]         :value_id          Specify value element ID.
  # @option opt [Hash, nil]      :field_error       Special for ManifestItem
  # @option opt [any, nil]       :'data-raw-value'  Override for value element.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  # @yield [fld, val, prp, **o] To supply part(s) after the .value element.
  # @yieldparam [Symbol]      fld     The field.
  # @yieldparam [any, nil]    val     The raw value.
  # @yieldparam [FieldConfig] prp     The adjusted field properties.
  # @yieldparam [Hash]        o       Options for #html_div.
  # @yieldreturn [Array, ActiveSupport::SafeBuffer, nil]
  #
  # === Usage Notes
  # If *label* is HTML then no ".field-???" class is included for the ".label"
  # and ".value" elements.
  #
  # While the base implementation of this method does not actually return *nil*
  # callers should be prepared to handle that possibility, since subclass
  # override(s) may return *nil*.
  #
  def render_pair: ((String|Symbol|nil) label, untyped value, ?prop: FieldConfig|nil, ?field: Symbol|nil, ?index: String|Integer|nil, ?row: Integer|nil, ?col: Integer|nil, ?pos: Integer|nil, ?separator: String|nil, ?wrap: String|nil, ?tag: Symbol|nil, ?no_fmt: symArray|Symbol|bool|nil, ?no_code: bool|nil, ?no_label: bool|nil, ?no_help: bool|nil, ?label_css: String|nil, ?value_css: String|nil, **untyped opt) ?{ (Symbol fld, untyped val, FieldConfig prp, **untyped o) -> (nil|ActiveSupport::SafeBuffer|Array[ActiveSupport::SafeBuffer])} -> (ActiveSupport::SafeBuffer | nil)

  # Apply formatting appropriate to *field*.
  #
  # @param [Symbol]      field
  # @param [any, nil]    value
  # @param [Hash]        opt          Options for #mark_invalid_languages.
  #
  # @return [Array<String>, String, nil]
  #
  def render_format: (Symbol field, untyped value, **untyped opt) -> (strArray|String|nil)

  # Generate a help icon relevant to *field*.
  #
  # @param [Symbol]               field
  # @param [any, nil]             value
  # @param [Array<Symbol,String>] help    Help topic(s).
  # @param [String, Symbol, nil]  topic
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # === Implementation Notes
  # To accommodate ACE items, an assumption is being made that this method is
  # only ever called for the decorator's object (and not for an arbitrary
  # label/value pair outside of that context).
  #
  def render_help_icon: (Symbol field, untyped value, *(Symbol|String) help, ?topic: String|Symbol|nil, **untyped _ignored) -> ActiveSupport::SafeBuffer

  # Displayed in place of a results list.
  #
  # @type [String]
  #
  NO_RESULTS: String

  # An indicator that can be used to stand for an empty list.
  #
  # @param [String] message           Default: #NO_RESULTS.
  # @param [Hash]   opt               To #render_pair.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_empty_value: (?String message, **untyped opt) -> ActiveSupport::SafeBuffer

  # Fields and configurations augmented with a :value entry containing the
  # current field value.
  #
  # @param [Boolean] limited          Do not include fields that are :ignored
  #                                     or have the wrong :role.
  # @param [Hash]    opt              Passed to #property_pairs and
  #                                     #list_field_value.
  #
  # @return [Hash{Symbol=>FieldConfig}]
  #
  def list_field_values: (?limited: bool, **untyped opt) -> Hash[Symbol,FieldConfig]

  # Transform a field value for HTML rendering.
  #
  # @param [any, nil]    value
  # @param [Symbol, nil] field
  # @param [Hash]        opt          Passed to #access.
  #
  # @return [any]                     HTML or scalar value.
  # @return [nil]                     If *value* or *object* is *nil*.
  #
  def list_field_value: (untyped value, field: Symbol|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | untyped | nil)

  # Enable to log attempts to render a field which fail.
  #
  # @type [Boolean]
  #
  DEBUG_DECORATOR_EXECUTE: bool

  # Attempt to interpret *method* as an *item* method or as a method defined
  # in the current context.
  #
  # @param [Model, Hash, nil] item    Default: `#object`.
  # @param [Symbol]           m
  # @param [Hash, nil]        opt     Options (used only if appropriate).
  #
  # @return [any]                     HTML or scalar value.
  # @return [nil]                     If executed method returned *nil*.
  #
  def field_value: ((Model|symHash|nil) item, Symbol m, ?(symHash|nil) opt) -> (ActiveSupport::SafeBuffer | untyped | nil)

  # Render a metadata listing of a model instance.
  #
  # @param [Hash]        outer        HTML options for outer div.
  # @param [String, nil] css          Default: "#(model_type)-details"
  # @param [Hash]        opt          Passed to #render_field_values except:
  #
  # @option opt [String] :class       Passed to outer #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def details: (?outer: symHash|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # details_container
  #
  # @param [Array]               before   Optional elements before the details.
  # @param [Integer, nil]        level
  # @param [String, Symbol, nil] role
  # @param [String, nil]         css      Default: "#(model_type)-container"
  # @param [Hash]                opt      Passed to #details.
  # @param [Proc, nil]           blk      Passed to #capture.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def details_container: (*String before, level: Integer|nil, role: String|Symbol|nil, ?css: String|nil, **untyped opt) ?{ () -> (ActiveSupport::SafeBuffer | nil) } -> ActiveSupport::SafeBuffer

  # A complete list item entry.
  #
  # @param [Hash, nil]     add        Additional label/value pairs.
  # @param [Array<Symbol>] skip       Display aspects to avoid.
  # @param [Hash]          opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def list_row: (?skip: Symbol|symArray|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Method options which are processed internally and not passed on as HTML
  # options.
  #
  # @type [Array<Symbol>]
  #
  ITEM_ENTRY_OPT: symArray

  # Render an element containing the ordinal position of an entry within a list
  # based on the provided *offset* and *index*.
  #
  # *1* Use :inner to pass additional element(s) to go inside the container; if
  #     given as *true* this specifies that elements from the block will go
  #     inside the container (this is the default unless :outer is given).
  #
  # *2* Use :outer to pass additional element(s) to go after the container
  #     element; if given as *true* this specifies that elements from the block
  #     will go after the container.
  #
  # @param [Integer]                index   Index number.
  # @param [Integer, nil]           level   Heading tag level (@see #html_tag).
  # @param [String, nil]            group   Sets :'data-group' for outer div.
  # @param [Integer, nil]           row
  # @param [Boolean, String, Array] inner   *1* above.
  # @param [Boolean, String, Array] outer   *2* above.
  # @param [String]                 css     Characteristic CSS class/selector.
  # @param [Hash]                   opt     Passed to inner #html_tag.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield To supply additional parts within .number element.
  # @yieldreturn [Array<ActiveSupport::SafeBuffer>,ActiveSupport::SafeBuffer]
  #
  def list_item_number: (index: Integer, ?level: Integer|nil, ?group: String|nil, ?row: Integer|nil, ?inner: (bool|String|strArray|nil) inner, ?outer: (bool|String|strArray|nil), ?css: String|nil, **untyped opt) ?{ () -> (Array[ActiveSupport::SafeBuffer] | ActiveSupport::SafeBuffer | nil) } -> ActiveSupport::SafeBuffer

  ONE_ENTRY: String

  NO_ENTRIES: String

  # list_item_number_label
  #
  # @param [Integer,nil] index
  # @param [String]      label        Alternate label contents.
  # @param [String]      value        Alternate value contents.
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def list_item_number_label: (index: Integer|nil, ?label: String|nil, ?value: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single entry for use within a list of items.
  #
  # @param [String, Array] before     Optional leading column(s).
  # @param [String, Array] after      Optional trailing columns(s).
  # @param [Hash]          outer      HTML options for outer div container.
  # @param [Symbol]        tag        If :tr, generate <tr>.
  # @param [Symbol]        render     Default: #render_field_values.
  # @param [Integer, nil]  level
  # @param [String]        css        Default: .(model_type)-list-item
  # @param [String]        id         Passed to :outer div.
  # @param [Hash]          opt        Passed to the render method except or
  #                                     #list_field_values.
  #
  # @option opt [Integer] :row        Sets "row-#{row}" in :outer div.
  # @option opt [Integer] :col        Sets "col-#{col}" in :outer div.
  # @option opt [Integer] :pos        Sets "pos-#{pos}" in :outer div.
  # @option opt [Symbol]  :group      May set :'data-group' for :outer div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def list_item: (?before: String|strArray|nil, ?after: String|strArray|nil, ?outer: symHash|nil, ?tag: Symbol, ?render: Symbol|nil, ?level: Integer|nil, ?css: String|nil, ?id: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # The number of columns needed if *item* will be displayed horizontally.
  #
  # @param [any, nil] item            Model, Hash, Array; default: `#object`.
  #
  # @return [Integer]
  #
  def list_item_columns: (?(Model|anyHash|anyArray|nil) item) -> Integer

  # Thumbnail element for the given catalog title.
  #
  # @param [Boolean, String] link         If *true* make the image a link to
  #                                         the show page for the item.
  # @param [Boolean]         placeholder  If *false*, return *nil* if an image
  #                                         could not be determined.
  # @param [String]          css          Characteristic CSS class/selector.
  # @param [Hash]            opt          To ImageHelper#image_element except:
  #
  # @option opt [Symbol] :meth            Passed to #get_thumbnail_image
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def thumbnail
    : (?link: bool|String, ?placeholder: true,  ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer
    | (?link: bool|String,  placeholder: false, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  @thumbnail: String | nil

  # Cover image element for the given catalog title.
  #
  # @param [Boolean, String] link         If *true* make the image a link to
  #                                         the show page for the item.
  # @param [Boolean]         placeholder  If *false*, return *nil* if an image
  #                                         could not be determined.
  # @param [String]          css          Characteristic CSS class/selector.
  # @param [Hash]            opt          To ImageHelper#image_element except:
  #
  # @option opt [Symbol] :meth            Passed to #get_cover_image
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def cover
    : (?link: bool|String, ?placeholder: true,  ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer
    | (?link: bool|String,  placeholder: false, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  @cover_image: String | nil

  # An "empty" element that can be used as a placeholder.
  #
  # @param [String, nil] comment      Text for an interior HTML comment.
  # @param [Symbol]      tag          The HTML tag to use for the element.
  # @param [Hash]        opt          Passed to #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def placeholder_element: (?comment: String|nil, ?tag: Symbol, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a standardized (base) element identifier from the object.
  #
  # @param [Hash] opt                 Passed to #html_id.
  #
  # @return [String]
  #
  def model_item_id: (**untyped opt) ?{ () -> untyped } -> String

  # All :emma_titleId value(s) associated with the object.
  #
  # @return [String,nil]
  #
  def title_id_values: () -> (String | nil)

  # state_group
  #
  # @return [Symbol, nil]
  #
  def state_group: (*untyped _ignored) ?{ () -> untyped } -> (Symbol | nil)

  # get_thumbnail_image
  #
  # @param [Symbol, nil] meth
  #
  # @return [String, nil]
  #
  def get_thumbnail_image: (?meth: Symbol|nil, **untyped _ignored) -> (String | nil)

  # get_cover_image
  #
  # @param [Symbol, nil] meth
  #
  # @return [String, nil]
  #
  def get_cover_image: (?meth: Symbol|nil, **untyped _ignored) -> (String | nil)

  private

  def self.included: (Module base) -> void
end
