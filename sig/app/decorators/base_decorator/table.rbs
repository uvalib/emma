# Methods supporting tabular display of Model instances.
#
module BaseDecorator::Table
  include BaseDecorator::Common

  include BaseDecorator::List

  include BaseDecorator::Row

  # Make the heading row stick to the top of the table when scrolling.
  #
  # @type [Boolean]
  #
  # @see file:stylesheets/layouts/controls/_tables.scss "CSS class .sticky-head"
  #
  STICKY_HEAD: bool

  # Give the heading row a background.
  #
  # @type [Boolean]
  #
  # @see file:stylesheets/layouts/controls/_tables.scss "CSS class .dark-head"
  #
  DARK_HEAD: bool

  # Options used by some or all of the methods involved in rendering items in
  # a tabular form.
  #
  # @type [Array<Symbol>]
  #
  MODEL_TABLE_OPTIONS:    symArray
  MODEL_TABLE_HEAD_OPT:   symArray
  MODEL_TABLE_ENTRY_OPT:  symArray
  MODEL_TABLE_ROW_OPT:    symArray
  MODEL_TABLE_PART_OPT:   symArray

  # Default number of rows per table page.
  #
  # @type [Integer]
  #
  TABLE_PAGE_SIZE: Integer

  # The collection of items to be presented in tabular form.
  #
  # @return [Array<Model>]
  # @return [ActiveRecord::Relation]
  # @return [ActiveRecord::Associations::CollectionAssociation]
  #
  def table_row_items: () -> decoratorRowItems

  # The #model_type of individual associated items for iteration.
  #
  # @return [Symbol]
  #
  # @see BaseCollectionDecorator::SharedClassMethods#decorator_class
  #
  def table_row_model_type: () -> Symbol

  # The default CSS class for a table element.
  #
  # @return [String]
  #
  def table_css_class: () -> String

  # Indicate whether a table presents as an element with the HTML 'table' role.
  #
  def table_role?: () -> bool

  # The HTML role of the table element.
  #
  # @param [Boolean] table
  #
  # @return [String]
  #
  def table_role: (?table: bool) -> String

  # The HTML role of cells within the table.
  #
  # @param [Boolean] table
  #
  # @return [String]
  #
  def table_cell_role: (?table: bool) -> String

  # The number of rows of associated items per table page.
  #
  # @return [Integer]
  #
  def table_page_size: () -> Integer

  # Get a subset of associated items.
  #
  # @param [Hash] opt                 #ROW_PAGE_PARAMS passed to #row_page.
  #
  # @return [Array<Model>]
  #
  def table_row_page: (**untyped opt) -> Array[Model]

  # Render the object for use within a table of items.
  #
  # @param [Integer] row
  # @param [Integer] col
  # @param [Hash]    opt              To column except:
  #
  # @option opt [Symbol]                :outer_tag  Default: :tr
  # @option opt [Symbol]                :inner_tag  Default: :td
  # @option opt [Symbol, String, Array] :columns    To #table_values
  # @option opt [String, Regexp, Array] :filter     To #table_values
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #table_headings
  #
  def table_entry: (?row: Integer, ?col: Integer, **untyped opt) { (Model, symHash) -> symHash } -> ActiveSupport::SafeBuffer

  # Table values associated with the current decorator.
  #
  # @param [Hash] opt                 Passed to #model_field_values
  #
  # @return [Hash]
  #
  def table_values: (**untyped opt) -> anyHash

  # Setup row/column HTML options.
  #
  # @param [Symbol, String] field
  # @param [Integer, nil]   row
  # @param [Integer, nil]   col
  # @param [Hash, nil]      opt
  #
  # @return [Hash]
  #
  def model_rc_options: ((Symbol|String) field, ?(Integer|nil) row, ?(Integer|nil) col, ?(symHash|nil) opt) -> symHash

  private

  def self.included: (Module base) -> void
end
