# Methods supporting tabular display of Model instances.
#
module BaseDecorator::Table
  include BaseDecorator::List

  # Make the heading row stick to the top of the table when scrolling.
  #
  # @type [Boolean]
  #
  # @see file:stylesheets/layouts/controls/_tables.scss "CSS class .sticky-head"
  #
  STICKY_HEAD: bool

  # Give the heading row a background.
  #
  # @type [Boolean]
  #
  # @see file:stylesheets/layouts/controls/_tables.scss "CSS class .dark-head"
  #
  DARK_HEAD: bool

  # Options used by some or all of the methods involved in rendering items in
  # a tabular form.
  #
  # @type [Array<Symbol>]
  #
  MODEL_TABLE_OPTIONS:    symArray
  MODEL_TABLE_FIELD_OPT:  symArray
  MODEL_TABLE_HEAD_OPT:   symArray
  MODEL_TABLE_ENTRY_OPT:  symArray
  MODEL_TABLE_ROW_OPT:    symArray
  MODEL_TABLE_TABLE_OPT:  symArray

  # Render the object for use within a table of items.
  #
  # @param [Integer]                                   row
  # @param [Integer]                                   col
  # @param [Symbol, Integer, nil]                      outer_tag
  # @param [Symbol, Integer, nil]                      inner_tag
  # @param [String, Symbol, Array<String,Symbol>, nil] columns
  # @param [String, Regexp, Array<String,Regexp>, nil] filter
  # @param [Hash]                                      opt
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [Array<ActiveSupport::SafeBuffer>]  If nil :outer_tag.
  # @return [Array<String>]                     If nil :inner_tag, :outer_tag.
  #
  def table_entry: (?row: Integer, ?col: Integer, ?outer_tag: Symbol|Integer, ?inner_tag: Symbol|Integer, ?columns: String|Symbol|Array[String|Symbol]|nil, ?filter: String|Regexp|Array[String|Regexp]|nil, **untyped opt) { (Model, symHash) -> symHash } -> ActiveSupport::SafeBuffer
                 | (?row: Integer, ?col: Integer,  outer_tag: nil,            ?inner_tag: Symbol|Integer, ?columns: String|Symbol|Array[String|Symbol]|nil, ?filter: String|Regexp|Array[String|Regexp]|nil, **untyped opt) { (Model, symHash) -> symHash } -> Array[ActiveSupport::SafeBuffer]
                 | (?row: Integer, ?col: Integer,  outer_tag: nil,             inner_tag: nil,            ?columns: String|Symbol|Array[String|Symbol]|nil, ?filter: String|Regexp|Array[String|Regexp]|nil, **untyped opt) { (Model, symHash) -> symHash } -> Array[String]

  # table_columns
  #
  # @param [Hash] opt                 Passed to #model_field_values
  #
  # @return [Hash]
  #
  def table_columns: (**untyped opt) -> anyHash

  # Specified field selections from the given model instance.
  #
  # @param [Model, Hash, nil]                                         item
  # @param [String, Symbol, Array<String,Symbol>, nil]                columns
  # @param [String, Symbol, Array<String,Symbol>, nil]                default
  # @param [String, Symbol, Regexp, Array<String,Symbol,Regexp>, nil] filter
  #
  # @return [Hash{Symbol=>Any}]
  #
  def model_field_values: (?(Model|symHash|nil) item, ?columns: String|Symbol|Array[String|Symbol]|nil, ?default: String|Symbol|Array[String|Symbol]|nil, ?filter: String|Symbol|Regexp|Array[String|Symbol|Regexp]|nil) -> symHash

  # Setup row/column HTML options.
  #
  # @param [Symbol, String] field
  # @param [Integer, nil]   row
  # @param [Integer, nil]   col
  # @param [Hash, nil]      opt
  #
  # @return [Hash]
  #
  def model_rc_options: ((Symbol|String) field, ?(Integer|nil) row, ?(Integer|nil) col, ?(symHash|nil) opt) -> symHash

  private

  def self.included: (Module base) -> void
end
