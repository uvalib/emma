# View helper methods supporting the hierarchical display of model records.
#
# @note In use with Search items but untested with any other Model class.
#
module BaseDecorator::Hierarchy
  include BaseDecorator::List

  # Render field/value pairs of a title-level record.
  #
  # @param [String, Symbol, nil] action
  # @param [Hash, nil]           pairs        Except for #render_pair options.
  # @param [Integer, nil]        row_offset   Def: 0.
  # @param [String, nil]         separator    Def: #DEFAULT_ELEMENT_SEPARATOR.
  # @param [Hash]                opt
  #
  # @option opt [Integer] :index              Offset to make unique element IDs
  #                                             passed to #render_pair.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #item_lines
  # @see Search::Record::TitleRecord#field_hierarchy
  #
  # -
  # noinspection RubyNilAnalysis, RubyMismatchedArgumentType
  # +
  def render_field_hierarchy: (?action: String|Symbol|nil, ?pairs: symHash?, ?row_offset: Integer?, ?separator: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # The term used for a file instance instead of 'file'. # TODO: I18n
  #
  # @type [String, nil]
  #
  FILE_TERM: String

  # Data for all of the lines that represent a hierarchical entry.
  #
  # @param [Hash] hierarchy           From `object.field_hierarchy`.
  # @param [Hash] opt
  #
  # @return [Array<Hash,ActiveSupport::SafeBuffer>]
  #
  # @see *en.emma.search.field_hierarchy*
  #
  def item_lines: (symHash hierarchy, symHash opt) -> Array[symHash|ActiveSupport::SafeBuffer]

  # Data for the lines of title-level information which relates to the overall
  # creative work.
  #
  # @param [Hash]  main_section
  # @param [Array] main_index
  # @param [Hash]  main_prop
  # @param [Hash]  opt
  #
  # @return [Array<Hash,ActiveSupport::SafeBuffer>]
  #
  # @see "en.emma.search.field_hierarchy.title"
  #
  def title_level_lines: (symHash main_section, anyArray main_index, symHash main_prop, symHash opt) -> Array[symHash|ActiveSupport::SafeBuffer]

  # Data for the lines representing all portions of a work (e.g. volumes) as
  # indicated by bibliographic metadata across all of the related file-level
  # records.
  #
  # Each portion is represented in the return value by an HTML heading entry
  # (indicating the volume number) followed by multiple Hash/HTML entries for
  # each format available for that portion.
  #
  # @param [Array<Hash>] main_section
  # @param [Array]       main_index
  # @param [Hash]        main_prop
  # @param [Hash]        opt
  #
  # @return [Array<Hash,ActiveSupport::SafeBuffer>]
  #
  # @see "en.emma.search.field_hierarchy.parts"
  #
  def part_level_lines: (Array[symHash] main_section, anyArray main_index, symHash main_prop, symHash opt) -> Array[symHash|ActiveSupport::SafeBuffer]

  # Data for the lines representing a specific portion of a work (e.g. volume).
  #
  # @param [Hash]  part
  # @param [Array] part_index
  # @param [Hash]  part_prop
  # @param [Hash]  opt
  #
  # @return [Array<Hash,ActiveSupport::SafeBuffer>]
  #
  # @see "en.emma.search.field_hierarchy.parts.*"
  #
  def part_section_lines: (symHash part, anyArray part_index, symHash part_prop, symHash opt) -> Array[symHash|ActiveSupport::SafeBuffer]

  # Data for the lines representing all of the available formats for a specific
  # portion of a work (e.g. volume).
  #
  # Each format is represented in the return value by an HTML heading entry
  # (indicating the format) followed by multiple Hash/HTML entries for that
  # format.
  #
  # @param [Array<Hash>] part_section
  # @param [Symbol]      part_key
  # @param [Array]       part_index
  # @param [Hash]        part_prop
  # @param [Hash]        opt
  #
  # @option opt [String] :term        Override #FILE_TERM.
  #
  # @return [Array<Hash,ActiveSupport::SafeBuffer>]
  #
  # @see "en.emma.search.field_hierarchy.parts.files"
  #
  def part_lines: (Array[symHash] part_section, Symbol part_key, anyArray part_index, symHash part_prop, symHash opt) -> Array[symHash|ActiveSupport::SafeBuffer]

  # Data for the lines representing all of the copies of a specific format of a
  # portion of a work.
  #
  # @param [Hash]  format
  # @param [Array] format_index
  # @param [Hash]  format_prop
  # @param [Hash]  opt
  #
  # @return [Array<Hash,ActiveSupport::SafeBuffer>]
  #
  # @see "en.emma.search.field_hierarchy.parts.files"
  #
  def format_section_lines: (symHash format, anyArray format_index, symHash format_prop, symHash opt) -> Array[symHash|ActiveSupport::SafeBuffer]

  # Data for the lines representing each copy of a specific format of a portion
  # of a work.
  #
  # Each copy is represented in the return value by an HTML heading entry
  # followed by multiple Hash entries for that copy.
  #
  # @param [Array<Hash>] files
  # @param [Symbol]      section_key
  # @param [Array]       section_index
  # @param [Hash]        section_prop
  # @param [Hash]        opt
  #
  # @return [Array<Hash,ActiveSupport::SafeBuffer>]
  #
  def file_lines: (Array[symHash] files, Symbol section_key, anyArray section_index, symHash section_prop, symHash opt) -> Array[symHash|ActiveSupport::SafeBuffer]

  # Data for the lines representing all of the sets of metadata items of a
  # unique copy of a specific format of a portion of a work.
  #
  # @param [Hash]  section
  # @param [Array] section_index
  # @param [Hash]  section_prop
  # @param [Hash]  opt
  #
  # @return [Array<Hash>]
  #
  # @see "en.emma.search.field_hierarchy.title.*"
  # @see "en.emma.search.field_hierarchy.parts.*"
  # @see "en.emma.search.field_hierarchy.parts.formats.*"
  # @see "en.emma.search.field_hierarchy.parts.formats.files.*"
  #
  def file_section_lines: (symHash section, anyArray section_index, symHash section_prop, symHash opt) -> Array[symHash]

  # Data for the lines representing a set of metadata items of a unique copy
  # of a specific format of a portion of a work.
  #
  # @param [Hash] pairs
  # @param [Hash] field_prop
  # @param [Hash] opt
  #
  # @return [Array<Hash>]
  #
  # @see "en.emma.search.field_hierarchy.**.bibliographic"
  # @see "en.emma.search.field_hierarchy.**.repository"
  # @see "en.emma.search.field_hierarchy.**.index"
  # @see "en.emma.search.field_hierarchy.**.remediation"
  # @see "en.emma.search.field_hierarchy.**.accessibility"
  #
  def field_lines: (symHash pairs, symHash field_prop, symHash opt) -> Array[symHash]

  # Render a single field label and value.
  #
  # @param [Hash] line
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_field: (symHash line, symHash opt) -> ActiveSupport::SafeBuffer

  # A heading/divider between sections within a compound search item, which is
  # rendered as a toggle for a collapsible container.
  #
  # @note SIDE EFFECT: `opt[:row]` will be incremented.
  #
  # @param [Symbol, String] type
  # @param [Any]            name        Distinct section indicator.
  # @param [Any, nil]       data_value  For 'data-value'.
  # @param [Any, nil]       details
  # @param [Any]            index       Unique line indicator.
  # @param [Hash]           prop
  # @param [Hash]           opt         Passed to #render_line.
  #
  # @option opt [String] :term          Override #FILE_TERM.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def new_section: (Symbol|String `type`, untyped name, untyped? data_value, untyped? details, untyped index, symHash prop, symHash opt) -> ActiveSupport::SafeBuffer

  # Render a single label/value line.
  #
  # @param [String, Symbol, nil] label
  # @param [Any, nil]            value
  # @param [Hash]                opt        Passed #render_pair.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_line: (String|Symbol|nil label, untyped? value, **untyped opt) -> ActiveSupport::SafeBuffer

  # Indicate whether a section should be ignored, either because its name
  # starts with an underscore (indicating "out-of-band" information) or because
  # it was indicated by the :except parameter.
  #
  # @param [Symbol]              key
  # @param [Any]                 value
  # @param [Symbol]              meth
  # @param [Hash, Array, Symbol] except
  #
  def skip_entry?: (Symbol key, untyped value, ?meth: Symbol?, ?except: Symbol|symArray|symHash|nil) -> bool

  # Create a copy of the Hash where *scope* is appended to the :scopes value.
  #
  # @param [Hash]   item
  # @param [Symbol] scope
  # @param [Hash]   opt               Additional key/value pairs.
  #
  # @return [Hash]                    A modified copy of *item*.
  #
  def add_scope: (symHash item, Symbol scope, **untyped opt) -> symHash

  # count_unique
  #
  # @param [Array<Hash,ActiveSupport::SafeBuffer>] lines
  # @param [String, Symbol]                        type
  # @param [String, nil]                           term
  #
  # @return [String]
  #
  def count_unique: (Array[symHash|ActiveSupport::SafeBuffer] lines, String|Symbol `type`, ?term: String?) -> String
end
