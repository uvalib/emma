# Methods supporting selectable lists of Model instances.
#
module BaseDecorator::Menu
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Links

  # Generate a menu of database item entries.
  #
  # @param [Symbol, String, nil] action      Default: `context[:action]`
  # @param [Hash, nil]           constraints
  # @param [Hash, nil]           sort
  # @param [String, nil]         prompt
  # @param [Hash{Symbol=>Hash}]  table
  # @param [String, nil]         id
  # @param [String, Symbol]      name
  # @param [String, Hash]        ujs         JavaScript selection action.
  # @param [String]              css         Characteristic CSS class/selector.
  # @param [Hash]                opt         Passed to #html_form.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see RouteHelper#get_path_for
  #
  def items_menu: (?action: Symbol|String|nil, ?constraints: symHash|nil, ?sort: symHash|nil, ?prompt: String|nil, ?table: symHash|nil, ?id: String|nil, ?name: String|Symbol, ?ujs: String|symHash, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # The name of the controller used in generating link paths.
  #
  # @return [Symbol]
  #
  def items_menu_controller: () -> Symbol

  # Generate a prompt for #items_menu.
  #
  # @return [String]
  #
  def items_menu_prompt: () -> String

  # Generate a label for a specific menu entry.
  #
  # @param [Model]       item
  # @param [String, nil] label        Override label.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def items_menu_label: (Model item, ?label: String|nil) -> ActiveSupport::SafeBuffer

  # Descriptive term for an item of the given type.
  #
  # @param [Symbol, String, nil] model        Default: `#model_type`.
  # @param [Boolean]             capitalize
  #
  # @return [String]
  #
  def model_item_name: (?model: Symbol|String|nil, ?capitalize: bool) -> String

  # Update `opt[:constraints]` based on the role of the user.
  #
  # @param [Hash] opt
  #
  # @return [Hash]                    The possibly-modified *opt* argument.
  #
  def items_menu_role_constraints!: (symHash opt) -> symHash

  private

  def self.included: (Module base) -> void
end
