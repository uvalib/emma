# Definitions to support inclusion of helpers.
#
# === Implementation Notes
# This approach avoids `include Draper::LazyHelpers` because this can make it
# difficult to pin down where problems with the use of Draper::ViewContext
# originate when including /app/helpers/**.
#
module BaseDecorator::Helpers

  include Draper::ViewHelpers

  include BaseDecorator::Common

  # Explicit overrides for the sake of those helpers which still rely on direct
  # access to controller-related items.
  #
  # @!method cookies
  # @!method params
  # @!method request
  # @!method session
  # @!method current_ability
  # @!method current_user
  #
  CONTROLLER_METHODS: symArray

  # Direct access to the controller.
  #
  # @return [ApplicationController]
  #
  # === Implementation Notes
  # This probably isn't "cricket" but app/helpers/**.rb generally expect access
  # to controller values, and while the decorator subclasses are relying on
  # including these helpers, there is a need to access these values directly.
  #
  # While you *can* access these from Draper::ViewContext#current (via
  # Draper::ViewHelpers#helpers [i.e., prefixing with "h."] or via
  # Draper::LazyHelpers#method_missing), the values don't seem to be coming
  # back correctly.
  #
  def controller_context: () -> ApplicationController

  # Helper methods explicitly generated for the sake of avoiding LazyHelpers.
  #
  # @!method asset_path(*args)
  #   @see ActionView::Helpers::AssetUrlHelper#asset_path
  #
  # @!method safe_join(*args)
  #   @see ActionView::Helpers::OutputSafetyHelper#safe_join
  #
  HELPER_METHODS: symArray

  # Helper methods explicitly generated for the sake of avoiding LazyHelpers.
  #
  # @!method button_tag(*args, &blk)
  #   @see ActionView::Helpers::FormTagHelper#button_tag
  #
  # @!method content_tag(*args, &blk)
  #   @see ActionView::Helpers::TagHelper#content_tag
  #
  # @!method form_tag(*args, &blk)
  #   @see ActionView::Helpers::FormTagHelper#form_tag
  #
  # @!method image_tag(*args, &blk)
  #   @see ActionView::Helpers::AssetTagHelper#image_tag
  #
  # @!method link_to(*args, &blk)
  #   @see ActionView::Helpers::UrlHelper#link_to
  #
  # @!method submit_tag(*args, &blk)
  #   @see ActionView::Helpers::FormTagHelper#submit_tag
  #
  VIEW_HELPER_METHODS: symArray

  # Defined here for the sake of RepositoryHelper.
  #
  def retrieval_path: (*untyped args) -> String

  # @private
  FORM_WITH_OPT: symArray

  # Due to #html_options_for_form_with only certain #form_with options are
  # actually passed on to the <form> element.
  #
  # Data attributes of the form `opt['data-xxx']` are expected to be passed as
  # `opt[:data][:xxx]`, and HTML element options are expected to be passed via
  # `opt[:html]`.
  #
  # This shim coalesces 'data-xxx' options into opt[:data], and other non-form
  # options into opt[:html], creating either as needed.
  #
  # @param [Model, nil]           model
  # @param [Symbol, String, nil]  scope
  # @param [String, Hash, nil]    url
  # @param [Symbol, String, nil]  format
  # @param [Hash]                 opt
  #
  # @option opt [Hash] :html
  # @option opt [Hash] :data
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield form
  # @yieldparam [ActionView::Helpers::FormBuilder] form
  # @yieldreturn ActiveSupport::SafeBuffer
  #
  def form_with: (?model: Model|nil, ?scope: Symbol|String|nil, ?url: String|symHash|nil, ?format: Symbol|String|nil, **untyped opt) { (ActionView::Helpers::FormBuilder form) -> ActiveSupport::SafeBuffer } -> ActiveSupport::SafeBuffer

  include ConfigurationHelper

  include FormHelper

  include HtmlHelper

  include IdentityHelper

  include ImageHelper

  include LinkHelper

  include PanelHelper

  include PopupHelper

  include RecaptchaHelper

  include RepositoryHelper

  include ScrollHelper

  include SearchModesHelper

  include SessionDebugHelper

  include TreeHelper

  private

  def self.included: (Module base) -> void
end
