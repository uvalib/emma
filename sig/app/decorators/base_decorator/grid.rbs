# Methods supporting grid-based displays.
#
module BaseDecorator::Grid
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Controls

  include BaseDecorator::Form

  include BaseDecorator::List

  include BaseDecorator::Pagination

  include BaseDecorator::Row

  # The collection of items to be presented in grid form.
  #
  # @param [Hash] opt                 Modifies *object* results.
  #
  # @return [Array<Model>]
  # @return [ActiveRecord::Relation]
  # @return [ActiveRecord::Associations::CollectionAssociation]
  #
  # @see BaseDecorator::Row#row_items
  #
  def grid_row_items: (**untyped opt) -> decoratorRowItems

  # The total number of associated items.
  #
  # @return [Integer]
  #
  def grid_row_items_total: () -> Integer

  # The #model_type of individual associated items for iteration.
  #
  # @return [Symbol]
  #
  # @see BaseDecorator::Row#row_model_type
  #
  def grid_row_model_type: () -> Symbol

  # The class of individual associated items for iteration.
  #
  # @return [Class]
  #
  def grid_row_model_class: () -> Class

  # The default CSS class for the container of a grid element.
  #
  # @return [String]
  #
  def grid_container_css_class: () -> String

  # The default CSS class for a grid element.
  #
  # @return [String]
  #
  def grid_css_class: () -> String

  # The default CSS class for a grid row element.
  #
  # @return [String]
  #
  def grid_row_css_class: () -> String

  # Indicate whether a grid presents as an element with the HTML 'grid' role.
  #
  def grid_role?: () -> bool

  # The HTML role of the grid element.
  #
  # @param [Boolean] grid
  #
  # @return [String]
  #
  def grid_role: (?grid: bool) -> String

  # The HTML role of cells within the grid.
  #
  # @param [Boolean] grid
  #
  # @return [String]
  #
  def grid_cell_role: (?grid: bool) -> String

  # The names and configurations for each possible grid data column (whether
  # displayed or not).
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def grid_row_fields: () -> Hash[Symbol,symHash]

  # The names of each grid data column for display.
  #
  # @return [Array<Symbol>]
  #
  def grid_row_columns: () -> symArray

  # The names of each grid data column which is not rendered.
  #
  # @return [Array<Symbol>]
  #
  def grid_row_skipped_columns: () -> symArray

  # The names of each grid data column which is rendered but not visible.
  #
  # @return [Array<Symbol>]
  #
  def grid_row_undisplayed_columns: () -> symArray

  # This is the number of <tr> rows within <thead>.
  #
  # @return [Integer]
  #
  def grid_header_rows: () -> Integer

  # The number of rows of associated items per grid page.
  #
  # @return [Integer]
  #
  def grid_page_size: () -> Integer

  # Get a subset of associated items.
  #
  # @param [Hash] opt                 #ROW_PAGE_PARAMS passed to #row_page.
  #
  # @return [Array<Model>]
  #
  def grid_row_page: (**untyped opt) -> Array[Model]

  # Generate grid header/column controls and top/bottom pagination controls.
  #
  # @param [Integer, nil] row
  # @param [Hash]         opt             Passed to #page_content_controls.
  #
  # @return [Array(ActiveSupport::SafeBuffer,ActiveSupport::SafeBuffer)]
  #
  def grid_controls: (?row: Integer|nil, **untyped opt) -> [ActiveSupport::SafeBuffer, ActiveSupport::SafeBuffer]

  # Render associated items.
  #
  # @param [Integer] row              Starting row number.
  # @param [Integer] index            Starting index number.
  # @param [Array]   cols             Default: `#grid_row_columns`.
  # @param [Symbol]  tag              Potential alternative to :table.
  # @param [String]  css              Default: `#grid_css_class`.
  # @param [Hash]    opt              Passed to container element except for
  #                                     #MODEL_TABLE_PART_OPT and
  #                                     #ROW_PAGE_PARAMS to #grid_row_page.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grid: (?row: Integer|nil, ?index: Integer|nil, ?cols: symArray|nil, ?tag: Symbol|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a header row from field names in the order they are emitted.
  #
  # @param [Array]   cols             Default: `#grid_row_columns`.
  # @param [Integer] row              Starting row number.
  # @param [Symbol]  tag              Potential alternative to :tr.
  # @param [String]  css              Default: `#grid_row_css_class`.
  # @param [Hash]    opt              Passed to outer div.
  #
  # @option opt [Boolean] :wrap       Specify whether to wrap with :thead.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grid_head_row: (?cols: symArray|nil, ?row: Integer|nil, ?tag: Symbol|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate the data row(s) for a grid.
  #
  # @param [Array<Model>,nil] items   Default: `#grid_row_page`.
  # @param [Integer]          row
  # @param [Integer]          index
  # @param [Hash]             opt     Passed to #grid_row.
  #
  # @option opt [Boolean] :wrap       Specify whether to wrap with :thead.
  # @option opt [Symbol]  :tag        Also used by this method.
  # @option opt [Hash]    :outer      Augmented by this method.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grid_data_rows: (?(Array[Model]|nil) items, ?row: Integer|nil, ?index: Integer|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # A data row generated by the *item* decorator.
  #
  # @param [Model] item               Provided by the subclass override.
  # @param [Hash]  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grid_data_row: (Model item, **untyped opt) -> ActiveSupport::SafeBuffer

  # An additional row -- always hidden -- which can be used as a template for
  # adding a new row.
  #
  # @param [Model, nil] model
  # @param [Hash]       opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grid_template_row: (?(Array[Model]|nil) model, **untyped opt) -> ActiveSupport::SafeBuffer

  CONTROLS_LABEL: String

  CONTROLS_CELL_CLASS: String

  # Properties that need to be conveyed to the grid header columns.
  #
  # @type [Array<Symbol>]
  #
  FIELD_PROPERTIES: symArray

  # Generate grid header row column header elements.
  #
  # @param [Hash] **opt
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def grid_head_headers: (**untyped opt) -> Array[ActiveSupport::SafeBuffer]

  # Render the control column header (the top left grid cell).
  #
  # By default, this is just a spacer for the control column.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #grid_head_cell.
  # @param [Proc]   blk               Passed to #grid_head_cell.
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def grid_head_control_headers: (?css: String|nil, **untyped opt) ?{ () -> (strArray|String|nil) } -> Array[ActiveSupport::SafeBuffer]

  # Render data column headers.
  #
  # @param [Array] cols               Default: `#grid_row_columns`.
  # @param [Hash]  opt                Passed to #grid_head_cell.
  # @param [Proc]  blk                Passed to #grid_head_cell.
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def grid_head_data_headers: (?cols: symArray|nil, **untyped opt) ?{ () -> (strArray|String|nil) } -> Array[ActiveSupport::SafeBuffer]

  # Render a grid header cell.
  #
  # @param [Symbol, nil] col          Data column.
  # @param [Integer]     row          Starting row.
  # @param [Symbol]      tag          Potential alternative to :th.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          Passed to #html_tag except:
  #
  # @option opt [String]      :label  Overrides default label.
  # @option opt [FieldConfig] :prop   Field configuration.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def grid_head_cell: ((Symbol|nil) col, ?row: Integer|nil, ?tag: Symbol|nil, ?css: String|nil, **untyped opt) ?{ () -> (strArray|String|nil) } -> ActiveSupport::SafeBuffer

  # Render a grid header cell label element.
  #
  # @param [String, nil] text
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          Passed to #html_span.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def grid_head_label
    : (?nil   text, ?css: String, **untyped opt) { () -> String } -> ActiveSupport::SafeBuffer
    | (String text, ?css: String, **untyped opt)                  -> ActiveSupport::SafeBuffer

  ROW_CONTROLS: String

  # Generate a grid data row.
  #
  # @param [Hash]    control          Options for #grid_row_controls.
  # @param [String]  unique
  # @param [Symbol]  tag              Potential alternative to :tr.
  # @param [Hash]    opt              Passed to #grid_item
  #
  # @option opt [Integer] :row
  # @option opt [Integer] :index
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def grid_row: (?control: symHash, ?unique: String|nil, ?tag: Symbol|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate controls for an item grid row.
  #
  # @param [Hash]    button           Passed to #grid_row_control_contents.
  # @param [Symbol]  tag              Potential alternative to :th.
  # @param [String]  css              Characteristic CSS class/selector.
  # @param [Hash]    opt              Passed to outer div.
  #
  # @option opt [String] :unique      Moved into a copy of :button hash.
  # @option opt [String] :label       Screen-reader label for container.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def grid_row_controls: (?button: symHash, ?tag: Symbol|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate the interior of the controls grid cell.
  #
  # @param [Array]   added            Optional elements after the buttons.
  # @param [Integer] row              Associated grid row.
  # @param [Hash]    opt              Passed to #control_icon_buttons.
  #
  # @option opt [String] :label       Screen-reader label for container.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield Additional content if provided.
  # @yieldreturn [Array,ActiveSupport::SafeBuffer,nil]
  #
  def grid_row_control_contents: (*ActiveSupport::SafeBuffer added, ?row: Integer|nil, **untyped opt) ?{ () -> (Array[ActiveSupport::SafeBuffer] | ActiveSupport::SafeBuffer | nil) } -> ActiveSupport::SafeBuffer

  # Render a single grid item.
  #
  # @param [Array] cols               Default: `#grid_row_columns`.
  # @param [Hash]  opt                @see BaseDecorator::List#list_item
  #
  # @option opt [Symbol] :tag         Set for #list_item if required.
  # @option opt [String] :unique
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def grid_item: (?cols: symArray|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a grid data cell with value display element and an edit element.
  #
  # @param [Symbol]      tag          Potential alternative to :td.
  # @param [String, nil] separator    Default: #DEFAULT_ELEMENT_SEPARATOR.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          To #render_pair or #property_pairs.
  #
  # @option opt [Integer] :index      Offset to make unique element IDs passed
  #                                     to #render_pair.
  # @option opt [any,nil] :row        Deleted to avoid propagation so that
  #                                     individual elements don't have CSS
  #                                     class "row-*".
  # @option opt [any,nil] :unique     Deleted to avoid propagation.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def grid_data_cell: (?tag: Symbol|nil, ?separator: String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Fields and configurations augmented with a `:value` entry containing the
  # current field value.
  #
  # @param [Hash] opt         Passed to #property_pairs and #grid_field_value.
  #
  # @return [Hash{Symbol=>FieldConfig}]
  #
  def grid_field_values: (**untyped opt) -> Hash[Symbol, FieldConfig]

  # Transform a field value for rendering in a table.
  #
  # @param [any, nil]    value        Passed to #list_field_value.
  # @param [Symbol, nil] field        Passed to #list_field_value.
  # @param [Hash]        opt          Passed to #list_field_value.
  #
  # @return [any, nil]
  #
  def grid_field_value: (untyped value, field: Symbol|nil, **untyped opt) -> (Field::Type | String | nil)

  # Render a single label/value pair in a grid cell.
  #
  # @param [String, Symbol, nil] label
  # @param [any, nil]            value
  # @param [Symbol]              field
  # @param [FieldConfig]         prop
  # @param [Integer, nil]        col
  # @param [Hash]                opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  # === Implementation Notes
  # Compare with BaseDecorator::List#list_render_pair
  #
  def grid_data_cell_render_pair: ((String|Symbol|nil) label, untyped value, field: Symbol, prop: FieldConfig, ?col: Integer|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # The edit element for a grid data cell.
  #
  # @param [Symbol]           field   For 'data-field' attribute.
  # @param [any, nil]         value
  # @param [FieldConfig, nil] prop    Default: from field/model.
  # @param [String]           css     Characteristic CSS class/selector.
  # @param [Hash]             opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def grid_data_cell_edit: (Symbol field, untyped value, (FieldConfig|nil) prop, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Indicate whether the field is one whose elements should be invisible.
  #
  # @param [any, nil] field
  #
  def undisplayed?: (untyped field) -> bool

  # Return the fields which contribute to the count of visible grid columns.
  #
  # @param [Array<Symbol>, Symbol] fields
  #
  # @return [Array<Symbol>]
  #
  def visible: (symArray|Symbol fields) -> symArray

  # Create an object that can be used to unambiguously indicate whether an
  # index value has been adjusted from its original raw value.
  #
  # @param [GridIndex, Symbol, Integer, String, nil] item
  #
  # @return [GridIndex, nil]
  #
  def grid_index: ((GridIndex|String|Integer|nil) item) -> (GridIndex | nil)

  # This is a special variation which causes a <textarea> to be created for
  # retrieving single text strings instead of <input type="text">.
  #
  # (This is the only way to cause the placeholder text to be wrapped in the
  # grid cell.  For a simple input, the width of the <input> placeholder does
  # not contribute to the width of the invisible edit element, so the grid
  # column does not get created wide enough to see the whole placeholder text.)
  #
  # @param [String]   name
  # @param [any, nil] value
  # @param [Hash]     opt             Passed to #render_form_input.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grid_input: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer

  class GridIndex
    NONE: Symbol
    attr_reader base: Integer
    attr_reader offset: Integer
    attr_reader none: bool
    def initialize
      : ((String|Integer|nil) item, ?(Integer|nil) starting_offset) -> void
      | ((GridIndex|Symbol)   item                                ) -> void
    def value: () -> Integer
    alias to_i value
    def to_s: () -> String
    def +: ((GridIndex|String|Integer|nil) item) -> GridIndex
    def next: () -> (GridIndex | nil)
  end

  private

  def self.included: (Module base) -> void
end
