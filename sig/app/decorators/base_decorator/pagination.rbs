# Methods pagination of Model instance lists.
#
module BaseDecorator::Pagination
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Links

  # Configuration for pagination control properties.
  #
  # @type [Hash]
  #
  PAGINATION_CONFIG: symHash

  # Separator between pagination controls.
  #
  # @type [ActiveSupport::SafeBuffer]
  #
  PAGINATION_SEPARATOR: ActiveSupport::SafeBuffer

  # Nominal default page size.
  #
  # @type [Integer]
  #
  DEFAULT_PAGE_SIZE: Integer

  # Properties for the "start over" pagination control.
  #
  # @type [Hash{Symbol=>String}]
  #
  # === Usage Notes
  # To link to the base search without any search terms (a.k.a. "null search").
  #
  START_OVER: Hash[Symbol,String]

  # Properties for the "first page" pagination control.
  #
  # @type [Hash{Symbol=>String}]
  #
  FIRST_PAGE: Hash[Symbol,String]

  # Properties for the "last page" pagination control.
  #
  # @type [Hash{Symbol=>String}]
  #
  LAST_PAGE: Hash[Symbol,String]

  # Properties for the "previous page" pagination control.
  #
  # @type [Hash{Symbol=>String}]
  #
  PREV_PAGE: Hash[Symbol,String]

  # Properties for the "next page" pagination control.
  #
  # @type [Hash{Symbol=>String}]
  #
  NEXT_PAGE: Hash[Symbol,String]

  # Generic top/bottom pagination controls.
  #
  # @param [Array<ActiveSupport::SafeBuffer>] ctrls
  # @param [Integer, nil] row
  # @param [Hash]         opt         Passed to #page_count_and_number
  #
  # @return [Array(ActiveSupport::SafeBuffer,ActiveSupport::SafeBuffer)]
  #
  def page_content_controls: (*ActiveSupport::SafeBuffer ctrls, ?row: Integer|nil, **untyped opt) -> [ActiveSupport::SafeBuffer, ActiveSupport::SafeBuffer]

  # Used to supply pagination- and content-specific controls for display above
  # the content.
  #
  # @param [Array<ActiveSupport::SafeBuffer>] parts
  # @param [Integer, nil]                     row
  # @param [String]                           css   Characteristic CSS class.
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_top: (*ActiveSupport::SafeBuffer parts, ?row: Integer|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Used to supply pagination- and content-specific controls for display below
  # the content.
  #
  # @param [Array<ActiveSupport::SafeBuffer>] parts
  # @param [Integer, nil]                     row
  # @param [String]                           css   Characteristic CSS class.
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_bottom: (*ActiveSupport::SafeBuffer parts, ?row: Integer|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Page count along with the page number when appropriate.
  #
  # @param [Array,   nil] list        Page items.
  # @param [Integer, nil] count       Default: *list* size.
  # @param [Integer, nil] total       Default: `paginator.total_items`.
  # @param [Integer, nil] records     Default: `paginator.record_count`.
  # @param [Integer, nil] page        Default: `paginator.page_number`.
  # @param [Integer, nil] size        Default: `paginator.page_size`.
  # @param [String,  nil] unit        Name for one page item.
  # @param [String]       css         Characteristic CSS class/selector.
  # @param [Hash]         opt         Passed to the outer div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def page_count_and_number: (?list: anyArray|nil, ?count: Integer|nil, ?total: Integer|nil, ?records: Integer|nil, ?page: Integer|nil, ?size: Integer|nil, ?unit: String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Page number display element.
  #
  # @param [Integer] page
  # @param [String]  css              Characteristic CSS class/selector.
  # @param [Hash]    opt              Options to .page-count wrapper element.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                         If *count* is negative.
  #
  def page_number: (Integer page, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Page count display element.
  #
  # The text of elements with these selectors are notable:
  #
  # * ".page-items"   The number of items displayed on the page.
  # * ".total-items"  The total number of items across all pages.
  #
  # @param [Integer, nil] count
  # @param [Integer, nil] total
  # @param [String,  nil] unit        Name for one page item.
  # @param [String]       css         Characteristic CSS class/selector.
  # @param [Hash]         opt         Options to .search-count wrapper.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_count: ((Integer|nil) count, ?(Integer|nil) total, ?unit: String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Placeholder for an item that would have been a link if it had a path.
  #
  # @param [String, Hash, nil] fp     Passed to #pagination_first.
  # @param [String, Hash, nil] pp     Passed to #pagination_prev.
  # @param [String, Hash, nil] np     Passed to #pagination_next.
  # @param [String, nil]       sep    Passed to #pagination_separator.
  # @param [String]            css    Characteristic CSS class/selector.
  # @param [Hash]              opt    For .pagination-controls container.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # === Implementation Notes
  # Capybara test seem to have a consistent problem when Turbolinks is allowed
  # to manage the "next page" link, so it is explicitly avoided during tests.
  #
  def pagination_controls: (?fp: String|symHash|nil, ?pp: String|symHash|nil, ?np: String|symHash|nil, ?sep: String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Page number label for the model type.
  #
  # @param [Hash] opt               Passed to #config_lookup
  #
  # @return [String]                The specified value.
  # @return [nil]                   No non-empty value was found.
  #
  def get_page_number_label: (**untyped opt) -> (String | nil)

  # Page count label for the model type.
  #
  # @param [Hash] opt               Passed to #config_lookup
  #
  # @option opt [Integer] :count
  # @option opt [String]  :unit
  #
  # @return [String]                The specified value.
  # @return [nil]                   No non-empty value was found.
  #
  def get_page_count_label: (**untyped opt) -> (String | nil)

  # The element used to visually separate pagination control icons.
  #
  # @param [String, nil] content      Default: `#PAGINATION_SEPARATOR`.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_separator: (?(String|nil) content, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # The object used to support movement within a set of results.
  #
  # @return [Paginator]
  #
  def paginator: () -> Paginator

  @paginator: Paginator

  # A control for moving to the first page of a set of results.
  #
  # @param [String, Hash, nil] path   Default: `#paginator.first_page`.
  # @param [String]            css    Characteristic CSS class/selector.
  # @param [Hash]              opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_first: (?(String|symHash|nil) path, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # A control for moving to the previous page of a set of results.
  #
  # @param [String, Hash, nil] path   Default: `#paginator.prev_page`.
  # @param [String]            css    Characteristic CSS class/selector.
  # @param [Hash]              opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_prev: (?(String|symHash|nil) path, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # A control for moving to the next page of a set of results.
  #
  # @param [String, Hash, nil] path   Default: `#paginator.next_page`.
  # @param [String]            css    Characteristic CSS class/selector.
  # @param [Hash]              opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_next: (?(String|symHash|nil) path, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # A control for moving to the last page of a set of results.
  #
  # @param [String, Hash, nil] path   Default: `#paginator.last_page`.
  # @param [String]            css    Characteristic CSS class/selector.
  # @param [Hash]              opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @note Currently unused.
  #
  def pagination_last: (?(String|symHash|nil) path, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # A pagination control link or a non-actionable placeholder if *path* is not
  # valid.
  #
  # @param [String, Hash]      label
  # @param [String, Hash, nil] path
  # @param [Hash]              opt    Passed to #make_link or "span" except:
  #
  # @option [String] :prefix
  # @option [String] :suffix
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_control: ((String|symHash) label, (String|symHash|nil) path, **untyped opt) -> ActiveSupport::SafeBuffer

  # The icon for a control for moving to the first page of a set of results.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_first_icon: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # The icon for a control for moving to the previous page of a set of results.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/stylesheets/layouts/controls/_shapes.scss
  #
  def pagination_prev_icon: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # The icon for a control for moving to the next page of a set of results.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/stylesheets/layouts/controls/_shapes.scss
  #
  def pagination_next_icon: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # The icon for a control for moving to the last page of a set of results.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/stylesheets/layouts/controls/_shapes.scss
  #
  # @note Currently used only by #pagination_last.
  #
  def pagination_last_icon: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # A decorative visual representation of a control action.
  #
  # @param [String, nil] content
  # @param [Hash]        opt
  #
  # @option opt [String] :css         Appended to CSS classes.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_icon: (?(String|nil) content, **untyped opt) -> ActiveSupport::SafeBuffer

  # The element displayed when there are no items to list.
  #
  # @param [String] css             Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def no_items: (?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  private

  def self.included: (Module base) -> void
end
