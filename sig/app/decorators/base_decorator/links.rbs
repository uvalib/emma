# Common methods supporting display of Model instances (both database items and
# API messages).
#
module BaseDecorator::Links
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  # :nocov:
  #include BaseDecorator::SharedInstanceMethods # for link_to_action override

  # Separator for a list formed by HTML elements.
  #
  # @type [ActiveSupport::SafeBuffer]
  #
  DEFAULT_ELEMENT_SEPARATOR: ActiveSupport::SafeBuffer

  # @type [Array<Symbol>]
  MODEL_LINK_OPTIONS: symArray

  # Create a link to the details show page for the given model instance.
  #
  # @param [Model, nil] item          Default: `#object`.
  # @param [Hash]       opt           Passed to LinkHelper#make_link except:
  #
  # @option opt [Boolean]        :no_link       If *true*, create a *span*.
  # @option opt [String]         :tooltip
  # @option opt [String, Symbol] :label         Default: `item.label`.
  # @option opt [String, Proc]   :path          Default: from block.
  # @option opt [Symbol]         :path_method
  # @option opt [String, Symbol] :scope
  # @option opt [String, Symbol] :controller
  #
  # @return [ActiveSupport::SafeBuffer]   HTML link or text element.
  #
  # @yield [terms] To supply a path based on *terms* to use instead of *path*.
  # @yieldparam  [String] terms
  # @yieldreturn [String]
  #
  def model_link: ((Model|nil) item, **untyped opt) ?{ (String) -> String } -> ActiveSupport::SafeBuffer

  # Create a link to the details show page for the given model instance.
  #
  # @param [String, Array, nil] css   Optional CSS class(es) to include.
  # @param [Hash]               opt   Passed to #model_link.
  #
  # @return [ActiveSupport::SafeBuffer]   HTML link or text element.
  #
  def link: (?css: String|strArray|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Create a link to the details show page for the given model instance.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #link
  #
  # @return [ActiveSupport::SafeBuffer]   HTML link or text element.
  #
  def button_link: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # show_tooltip
  #
  # @return [String, nil]
  #
  def show_tooltip: () -> (Symbol | nil)

  # TODO: I18n
  #
  # @type [String]
  #
  ANOTHER: String

  # List controller actions.  If the current action is provided, the associated
  # action link will be appear at the top of the list.
  #
  # @param [String, Symbol, nil]     current      Def: `context[:action]`
  # @param [Hash{Symbol=>Hash}, nil] table        Def: `#action_links`.
  # @param [String]                  css          Characteristic CSS selector.
  # @param [Hash]                    opt          Passed to #action_links.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def action_list: (?current: String|Symbol|nil, ?table: Hash[Symbol,symHash]|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # action_entry
  #
  # @param [String, Symbol, nil]     action   The target controller action.
  # @param [String, Symbol, nil]     current  Def: current `params[:action]`.
  # @param [Hash{Symbol=>Hash}, nil] table    Def: `#action_links`.
  # @param [Hash]                    opt      Passed to #action_links.
  #
  # @return [Hash{Symbol=>String}]
  #
  def action_entry: (?(String|Symbol|nil) action, ?current: String|Symbol|nil, ?table: Hash[Symbol,symHash]|nil, **untyped opt) -> Hash[Symbol,String]

  # action_link
  #
  # @param [String, Symbol, nil] action   The target controller action.
  # @param [String, Symbol, nil] current  Def: current `params[:action]`.
  # @param [String, nil]         label    Override configured label.
  # @param [String]              css      Characteristic CSS class/selector.
  # @param [Hash]                opt      Passed to #action_entry.
  #
  # @option opt [String] :action          Overrides argument if present.
  #
  # @return [ActiveSupport::SafeBuffer]   An HTML link element.
  # @return [nil]                         If *action* not configured.
  #
  def action_link: (?(String|Symbol|nil) action, ?current: String|Symbol|nil, ?label: String|nil, ?css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Action links configured for the controller.
  #
  # @param [String, Symbol, nil] action   Default: :index.
  # @param [Hash]                opt      Passed to #config_lookup.
  #
  # @return [Hash]
  #
  def action_links: (?action: String|Symbol|nil, **untyped opt) -> symHash

  # Control icon definitions.
  #
  # @type [Hash{Symbol=>Hash{Symbol=>Any}}]
  #
  CONTROL_ICONS: Hash[Symbol, symHash]

  # Control icon definitions.
  #
  # @param [Hash{Symbol=>Hash{Symbol=>Any}}] icons
  # @param [Boolean]                         authorized
  #
  # @return [Hash{Symbol=>Hash{Symbol=>Any}}]
  #
  def control_icons: (?icons: Hash[Symbol, symHash], ?authorized: bool) -> Hash[Symbol, symHash]

  # Generate an element with icon controls for the operation(s) the user is
  # authorized to perform on the item.
  #
  # @param [Hash] opt                   Passed to #control_icon_button
  #
  # @return [ActiveSupport::SafeBuffer] An HTML element.
  # @return [nil]                       If no operations are authorized.
  #
  # @see #control_icons
  #
  def control_icon_buttons: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Produce an action icon based on either :path or :id.
  #
  # @param [Symbol] action                One of #CONTROL_ICONS.keys.
  # @param [Hash]   opt                   To LinkHelper#make_link except for:
  #
  # @option opt [String, Proc]  :path
  # @option opt [String]        :icon
  # @option opt [String]        :tip
  # @option opt [Boolean, Proc] :enabled
  #
  # @return [ActiveSupport::SafeBuffer]   An HTML link element.
  # @return [nil]                         If *item* unrelated to a submission.
  #
  def control_icon_button: (Symbol action, **untyped opt) ?{ (String, symHash) -> (ActiveSupport::SafeBuffer | nil) } -> (ActiveSupport::SafeBuffer | nil)

  # Create a link to the details show page for the given item.
  #
  # @param [Hash] opt                 Passed to #link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def show_link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Create a link to the edit page for the given item.
  #
  # @param [Hash] opt                 Passed to #icon_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def edit_link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Create a link to remove the given item.
  #
  # @param [Hash] opt                 Passed to #icon_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def delete_link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Create an icon button link.
  #
  # @param [Hash] opt                 Passed to #button_link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def icon_link: (untyped `type`, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
