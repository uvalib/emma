# Methods supporting the creation and modification of Model instances.
#
module BaseDecorator::Form
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Fields

  include BaseDecorator::List

  # Configuration-related values which are available to either the class or the
  # instance.
  #
  module Values


    # Model-specific field group configuration.
    #
    # @return [Hash{Symbol=>Hash}]
    #
    def field_groups: () -> Hash[Symbol,symHash]

    @field_groups: Hash[Symbol,symHash]

    # Model-specific status marker configuration.
    #
    # @return [Hash{Symbol=>Hash}]
    #
    def status_markers: () -> Hash[Symbol,symHash]

    @status_markers: Hash[Symbol,symHash]

    # Form action button configuration.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    def form_actions: () -> Hash[Symbol,symHash]

    @form_actions: Hash[Symbol,symHash]

    # Form action button configuration.
    #
    # @param [Array<Symbol>] actions
    #
    # @type [Hash{Symbol=>Hash}]
    #
    def generate_form_actions: (?symArray actions) -> Hash[Symbol,symHash]
  end

  include Values

  # @private # TODO: I18n
  UNMODIFIABLE: String

  # Render field/value pairs.
  #
  # @param [String, Symbol, nil] action
  # @param [Hash, nil]           pairs        Except #render_form_pair options.
  # @param [String, nil]         separator    Def: #DEFAULT_ELEMENT_SEPARATOR.
  # @param [Hash]                opt
  #
  # @option opt [Integer] :index              Offset to make unique element IDs
  #                                             passed to #render_form_pair.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # == Implementation Notes
  # Compare with BaseDecorator::List#render_field_values
  #
  # Special handling for :effective_id based on the Hash value set up in
  # AccountDecorator#form_fields.
  #
  def render_form_fields: (?action: Symbol|String|nil, ?pairs: anyHash|nil, ?separator: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single label/value pair.
  #
  # @param [String, Symbol] label
  # @param [*]              value
  # @param [Hash, nil]      prop        Default: from field/model.
  # @param [Symbol]         field       For 'data-field' attribute.
  # @param [Integer]        index       Offset for making unique element IDs.
  # @param [Integer]        row         Display row.
  # @param [Boolean]        disabled
  # @param [Boolean]        required    For 'data-required' attribute.
  # @param [Boolean]        no_label    Don't generate the label element.
  # @param [Boolean]        no_help     Don't add help icon to the label.
  # @param [String, nil]    label_css
  # @param [String, nil]    value_css
  # @param [Hash]           opt         To label/value except:
  #
  # @option opt [Symbol] :render        Force render method.
  #
  # @return [ActiveSupport::SafeBuffer] HTML label and value elements.
  # @return [nil]                       If *field* is :ignored or disallowed
  #                                       for the current user.
  #
  # == Implementation Notes
  # Compare with BaseDecorator::List#render_pair
  #
  def render_form_pair: ((String|Symbol) label, untyped value, ?prop: symHash|nil, ?field: Symbol|nil, ?index: Integer|nil, ?row: Integer|nil, ?disabled: bool|nil, ?required: bool|nil, ?no_label: bool|nil, ?no_help: bool|nil, ?label_css: String|nil, ?value_css: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Render the label for a label/value pair.
  #
  # @param [Symbol]                field
  # @param [String, nil]           label
  # @param [Symbol, Array<Symbol>] status
  # @param [Symbol, String, Array] help
  # @param [String]                css      Characteristic CSS class/selector.
  # @param [Hash]                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_pair_label: (Symbol field, (String|nil) label, ?status: symArray|Symbol|nil, ?help: Array[Symbol|String]|Symbol|String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Single-select menu - drop-down.
  #
  # @param [String]      name
  # @param [Array]       value        Selected value(s) from `range#values`.
  # @param [Class,Array] range        A class derived from EnumType whose
  #                                     #values method will be used to populate
  #                                     the menu.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          Passed to #select_tag except for:
  #
  # @option opt [String] :name        Overrides *name*
  # @option opt [String] :base        Name and id for *select*; default: *name*
  #
  # @raise [RuntimeError]             If *range* is not an EnumType.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/model-form.js *updateMenu()*
  #
  def render_form_menu_single: (String name, anyArray value, range: Class|anyArray, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Multi-select menu - scrollable list of checkboxes.
  #
  # @param [String] name
  # @param [Array]  value             Selected value(s) from `range#values`.
  # @param [Class]  range             A class derived from EnumType whose
  #                                     #values method will be used to populate
  #                                     the menu.
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #field_set_tag except for:
  #
  # @option opt [String] :name        Overrides *name*
  # @option opt [String] :base        Name and id for *select*; default: *name*
  #
  # @raise [RuntimeError]             If *range* is not an EnumType.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:javascripts/feature/model-form.js *updateFieldsetCheckboxes()*
  #
  def render_form_menu_multi: (String name, anyArray value, range: Class, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Multiple single-line inputs.
  #
  # @param [String] name
  # @param [Array]  value
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to :field_set_tag except for:
  #
  # @option [Boolean] :disabled       Passed to :render_form_input
  # @option [Integer] :count
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:javascripts/feature/model-form.js *updateFieldsetInputs()*
  #
  def render_form_input_multi: (String name, anyArray value, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # render_form_input
  #
  # @param [String] name
  # @param [*]      value
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:javascripts/feature/model-form.js *updateTextInputField()*
  #
  def render_form_input: (String name, untyped value, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # render_form_email
  #
  # @param [String] name
  # @param [*]      value
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_email: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer

  # render_form_password
  #
  # @param [String] name
  # @param [*]      value
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_password: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generates a line in the form associated with *opt[:'data-field']*.
  #
  # @param [String, nil] note
  # @param [String, nil] label        Blank by default.
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def form_note_pair: ((String|nil) note, ?label: String|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # The leading column associated with a text note immediately below a form
  # input element (in the trailing column).
  #
  # @param [String, nil] filler
  # @param [Hash]        opt          Passed through #form_input_related_opt.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_input_fill: ((String|nil) filler, **untyped opt) -> ActiveSupport::SafeBuffer

  # A text note immediately below a form input element.
  #
  # @param [String, nil] note
  # @param [Hash]        opt          Passed through #form_input_related_opt.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_input_note: ((String|nil) note, **untyped opt) -> ActiveSupport::SafeBuffer

  # Options assumed to be related to a field element which are not retained by
  # elements related to it (for the purpose of field grouping).
  #
  # @type [Array<Symbol>]
  #
  RELATED_IGNORED_KEYS: symArray

  # Modify the provided options for a field related to an form input field.
  # Options that are assumed to be related to the actual field element are
  # removed.
  #
  # @param [String, nil] css
  # @param [Hash]        opt
  #
  # @return [Hash]
  #
  # @see file:javascripts/feature/model-form.js *updateFieldAndLabel()*
  #
  def form_input_related_opt: (?css: String|nil, **untyped opt) -> symHash

  # Default action for #model_form if #context[:action] is not present.
  #
  # @type [Symbol]
  #
  DEFAULT_FORM_ACTION: Symbol

  # The CSS class which indicates that the element or its descendent(s) involve
  # file uploading.
  #
  # @type [String]
  #
  # @see file:javascripts/shared/uploader.js *BaseUploader.UPLOADER_CLASS*
  #
  UPLOADER_CLASS: String

  # The CSS class for the element displaying the name of an uploaded file.
  #
  # @type [String]
  #
  # @see file:javascripts/shared/uploader.js *BaseUploader.FILE_NAME_CLASS*
  #
  FILE_NAME_CLASS: String

  # Generate a form with controls for entering field values and submitting.
  #
  # @param [String]         label     Label for the submit button.
  # @param [String, Symbol] action    Either :new or :edit.
  # @param [String]         cancel    URL for cancel button action (def: :back)
  # @param [Boolean]        uploader  If *true*, active client-side logic for
  #                                     supporting file upload.
  # @param [Hash]           outer     Passed to outer div.
  # @param [String]         css       Characteristic CSS class/selector.
  # @param [Hash]           opt       Passed to #form_with.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/model-form.js *isFileUploader()*
  #
  def model_form: (?label: String|nil, ?action: String|Symbol|nil, ?cancel: String|nil, ?uploader: bool|nil, ?outer: symHash|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Label for line-editor update button. # TODO: I18n
  #
  # @type [String]
  #
  UPDATE_LABEL: String

  UPDATE_CSS: String

  # Label for line-editor cancel button. # TODO: I18n
  #
  # @type [String]
  #
  CANCEL_LABEL: String

  CANCEL_CSS: String

  # Generate a form for inline use.
  #
  # @param [Hash, nil]      pairs     Fields/values; default #model_form_fields
  # @param [String, Symbol] action    Either :new or :edit.
  # @param [String]         css       Characteristic CSS class/selector.
  # @param [Hash]           opt       Passed to #form_with.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def model_line_editor: (?pairs: symHash|nil, ?action: String|Symbol|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Modify a form options hash based on form action.
  #
  # @param [Hash, nil]      opt       The hash to modify (or create)
  # @param [String, Symbol] action    Either :new or :edit.
  # @param [Hash]           other     Values to add to the hash.
  #
  # @return [Hash]                    The modified (or created) hash.
  #
  def model_form_options!: (?(symHash|nil) opt, ?action: String|Symbol|nil, **untyped opt) -> symHash

  # @private
  FORM_BUTTON_OPTIONS: symArray

  # Control elements always visible at the top of the input form.
  #
  # @param [ActionView::Helpers::FormBuilder, nil] f
  # @param [Array<ActiveSupport::SafeBuffer>]      buttons
  # @param [String]                                css
  # @param [Hash]                                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield [parts] Extend or replace control elements.
  # @yieldparam [Array<ActiveSupport::SafeBuffer>] parts
  # @yieldreturn [Array<ActiveSupport::SafeBuffer>]
  #
  def form_top_controls: (?(ActionView::Helpers::FormBuilder|nil) f, *ActiveSupport::SafeBuffer buttons, ?css: String|nil, **untyped opt) ?{ (Array[ActiveSupport::SafeBuffer]) -> (untyped|anyArray) } -> ActiveSupport::SafeBuffer

  # form_top_button_tray
  #
  # @param [ActionView::Helpers::FormBuilder, nil] f
  # @param [Array<ActiveSupport::SafeBuffer>]      buttons
  # @param [Hash]                                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #form_button_tray
  #
  def form_top_button_tray: (?(ActionView::Helpers::FormBuilder|nil) f, *ActiveSupport::SafeBuffer buttons, **untyped opt) ?{ (Array[ActiveSupport::SafeBuffer]) -> (untyped|anyArray) } -> ActiveSupport::SafeBuffer

  # Convenience submit and cancel buttons below the fields.
  #
  # @param [ActionView::Helpers::FormBuilder, nil] f
  # @param [Array<ActiveSupport::SafeBuffer>]      buttons
  # @param [String]                                css
  # @param [Hash]                                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield [parts] Extend or replace control elements.
  # @yieldparam [Array<ActiveSupport::SafeBuffer>] parts
  # @yieldreturn [Array<ActiveSupport::SafeBuffer>]
  #
  def form_bottom_controls: (?(ActionView::Helpers::FormBuilder|nil) f, *ActiveSupport::SafeBuffer buttons, ?css: String|nil, **untyped opt) ?{ (Array[ActiveSupport::SafeBuffer]) -> (untyped|anyArray) } -> ActiveSupport::SafeBuffer

  # form_bottom_button_tray
  #
  # @param [ActionView::Helpers::FormBuilder, nil] f
  # @param [Array<ActiveSupport::SafeBuffer>]      buttons
  # @param [Hash]                                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #form_button_tray
  #
  def form_bottom_button_tray: (?(ActionView::Helpers::FormBuilder|nil) f, *ActiveSupport::SafeBuffer buttons, **untyped opt) ?{ (Array[ActiveSupport::SafeBuffer]) -> (untyped|anyArray) } -> ActiveSupport::SafeBuffer

  # form_button_tray
  #
  # @param [ActionView::Helpers::FormBuilder, nil] f
  # @param [Array<ActiveSupport::SafeBuffer>]      buttons
  # @param [String]                                css
  # @param [Hash]                                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield [parts] Extend or replace button tray elements.
  # @yieldparam [Array<ActiveSupport::SafeBuffer>] parts
  # @yieldreturn [Array<ActiveSupport::SafeBuffer>]
  #
  def form_button_tray: (?(ActionView::Helpers::FormBuilder|nil) f, *ActiveSupport::SafeBuffer buttons, ?css: String|nil, **untyped opt) ?{ (Array[ActiveSupport::SafeBuffer]) -> (untyped|anyArray) } -> ActiveSupport::SafeBuffer

  # Basic form controls.
  #
  # @param [String] label             Label for the submit button.
  # @param [String] cancel            URL for cancel button action (def: :back)
  # @param [Hash]   opt               Passed to button methods
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  # @yield [parts] Extend or replace results.
  # @yieldparam [Array<ActiveSupport::SafeBuffer>] parts
  # @yieldreturn [Array<ActiveSupport::SafeBuffer>]
  #
  def form_buttons: (?label: String|nil, ?cancel: String|nil, **untyped opt) ?{ (Array[ActiveSupport::SafeBuffer]) -> Array[ActiveSupport::SafeBuffer] } -> Array[ActiveSupport::SafeBuffer]

  # Form submit button.
  #
  # @param [Hash] opt                 Passed to #form_button.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/model-form.js    *submitButton()*
  # @see file:app/assets/stylesheets/feature/_model_form.scss ".submit-button"
  #
  def submit_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Form cancel button.
  #
  # @param [Hash] opt                 Passed to #form_button.
  #
  # @option opt [String] :url         Passed to #make_link
  # @option opt [String] :'data-path' Passed to #html_button (supersedes :url)
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/model-form.js    *cancelButton()*
  # @see file:app/assets/stylesheets/feature/_model_form.scss ".cancel-button"
  #
  def cancel_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Generic form button.
  #
  # @param [Symbol]              type     The button configuration name.
  # @param [String, Symbol, nil] action
  # @param [Symbol]              state    Start state (:enabled/:disabled).
  # @param [String, nil]         label    Override button label.
  # @param [String, Hash, nil]   url      Invokes #make_link if present.
  # @param [String]              css      Characteristic CSS class/selector.
  # @param [Hash]                opt      Passed to #submit_tag.
  #
  # @option opt [Symbol] :type            Input type (default *type*).
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/model-form.js *submitButton()*
  #
  def form_button: (Symbol `type`, ?action: String|Symbol|nil, ?state: Symbol|nil, ?label: String|nil, ?url: anyHash|String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # file_input_button
  #
  # @param [String] label
  # @param [String] id          For input field
  # @param [String] type        Input field type
  # @param [Hash]   opt         To outer div except for #file_field_tag options
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def file_input_button: (String label, ?id: String|nil, ?type: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Data for hidden form fields.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [Hash{Symbol=>*}]
  #
  # @yield [result] Add field value attributes.
  # @yieldparam [Hash] result
  # @yieldreturn [Hash]
  #
  def form_hidden: (?css: String|nil, **untyped opt) ?{ (symHash) -> symHash } -> symHash

  # Hidden form fields.
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Hash]                             opt   Passed to #form_hidden.
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def form_hidden_fields: (ActionView::Helpers::FormBuilder f, **untyped opt) -> Array[ActiveSupport::SafeBuffer]

  # Form fields are wrapped in an element for easier grid manipulation.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def field_container: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render pre-populated form fields.
  #
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to #render_form_fields.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_fields: (?pairs: anyHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Element name for field group radio buttons.
  #
  # @type [String]
  #
  FIELD_GROUP_NAME: String

  # Control for filtering which fields are displayed.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #html_div for outer *div*.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #FIELD_GROUP
  # @see file:javascripts/feature/model-form.js *fieldDisplayFilterSelect()*
  # @see file:app/assets/stylesheets/layouts/_root.scss *.wide-screen*, etc.
  #
  def field_group_controls: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Text for #no_fields_row. # TODO: I18n
  #
  # @type [String]
  #
  NO_FIELDS: String

  # Hidden row that is shown only when no field rows are being displayed.
  #
  # @param [String]       label
  # @param [Boolean, nil] enable      If *true*, generate the element (enabled
  #                                     by default if #field_groups are used).
  # @param [String]       css         Characteristic CSS class/selector.
  # @param [Hash]         opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def no_fields_row: (label: String, ?enable: bool|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a marker which can indicate the status of an input field.
  #
  # @param [Symbol, Array<Symbol>] status   One or more of %[invalid required].
  # @param [String, Symbol]        label    Used with :required.
  # @param [String]                css      Characteristic CSS class/selector.
  # @param [Hash]                  opt      Passed to #html_span.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def status_marker: (?status: symArray|Symbol|nil, ?label: String|Symbol|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  def self.included: (Module base) -> void
end
