# Common base for collection decorator classes.
#
class BaseCollectionDecorator < Draper::CollectionDecorator
  include BaseCollectionDecorator::Common

  include BaseCollectionDecorator::Configuration

  include BaseCollectionDecorator::Controls

  include BaseCollectionDecorator::Fields

  include BaseCollectionDecorator::Form

  include BaseCollectionDecorator::Grid

  include BaseCollectionDecorator::Helpers

  include BaseCollectionDecorator::Hierarchy

  include BaseCollectionDecorator::Links

  include BaseCollectionDecorator::List

  include BaseCollectionDecorator::Lookup

  include BaseCollectionDecorator::Menu

  include BaseCollectionDecorator::Pagination

  include BaseCollectionDecorator::Row

  include BaseCollectionDecorator::Submission

  include BaseCollectionDecorator::Table

  # Methods for each collection decorator class instance.
  #
  # @!attribute [r] object_class
  #   @return [Class]
  #
  module SharedInstanceMethods
    include BaseDecorator::SharedInstanceMethods

    # Modify the inspection to limit the size of individual element results.
    #
    # @param [Integer] max            Maximum characters per element.
    #
    # @return [String]
    #
    def inspect: (?max: Integer) -> String

    # Create a value for #context based on the parameters supplied through the
    # initializer.
    #
    # @param [Hash] opt
    #
    # @return [Hash]                  Suitable for assignment to #context.
    #
    # @see #MODEL_TABLE_DATA_OPT
    #
    def initialize_context: (**untyped opt) -> symHash
  end

  # Methods for each collection decorator class.
  #
  module SharedClassMethods
    include BaseDecorator::SharedClassMethods

    @model_type: Symbol

    # The decorator class for list elements.
    #
    # @return [Class]
    #
    def decorator_class: () -> Class

    @decorator_class: Class

    # The Draper::Decorator#object_class for list elements.
    #
    # @return [Class]
    #
    def object_class: () -> Class
  end

  module SharedDefinitions
    def self.included: (Module base) -> void
  end

end

class BaseCollectionDecorator
  include SharedDefinitions

  include SharedInstanceMethods

  extend  SharedClassMethods

  # @private
  # @type [Symbol, String]
  DEFAULT_ACTION: Symbol

  # Create a new collection decorator, by default based on the paginator passed
  # in through the *opt* parameter.
  #
  # @param [ActiveRecord::Relation, Paginator, Array, nil] obj
  # @param [Hash]                                          opt
  #
  def initialize: (?(ActiveRecord::Relation|Paginator|Array[ActiveRecord::Base]|ActiveRecord::Base|nil) obj, **untyped opt) -> void

  # Set to *true* to see how each collection decorator overrides Array methods.
  #
  # @type [Boolean]
  #
  # @see BaseDecorator#DEBUG_DECORATOR_INHERITANCE
  #
  DEBUG_COLLECTION_INHERITANCE: bool

  # Define the association between a collection decorator and the decorator for
  # its elements.
  #
  # This also causes the element decorator's SharedDefinitions module to be
  # included so that the collection decorator acquires the same definitions.
  #
  # @param [Class] base
  #
  # @return [void]
  #
  def self.collection_of: (Class base) -> void
end
