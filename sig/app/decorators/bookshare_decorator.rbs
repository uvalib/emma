# Base item presenter for Bookshare-related models.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Bs::Api::Record]
#
class BookshareDecorator < BaseDecorator
  module Paths
    include BaseDecorator::Paths
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module Methods
    include BaseDecorator::Methods

    BOOKSHARE_SITE: String

    BOOKSHARE_CMS: String

    BOOKSHARE_CATALOG: String

    BOOKSHARE_USER: String

    # Bookshare actions.
    #
    # Any action not explicitly listed (or listed without a :url value) is
    # implicitly assumed to be a #BOOKSHARE_SITE endpoint.
    #
    # @type [Hash{Symbol=>Hash,String}]
    #
    BOOKSHARE_ACTION: Hash[Symbol,String|Hash[Symbol,String]]

    # Mapping of application URL parameters to Bookshare URL parameters.
    #
    # @type [Hash{Symbol=>Hash{Symbol=>Symbol}}]
    #
    PARAM_MAPPING: Hash[Symbol,Hash[Symbol,Symbol]]

    # Mapping of an application action (expressed as "controller-action") to the
    # associated Bookshare action (expressed as a #BOOKSHARE_ACTION key).
    #
    # @type [Hash{Symbol=>Hash}]
    #
    ACTION_MAPPING: Hash[Symbol,Hash[Symbol,Symbol|symArray]]

    # A direct link to a Bookshare page to open in a new browser tab.
    #
    # @param [Bs::Api::Record, String] item
    # @param [String]                  path
    # @param [Hash]                    path_opt   Passed to #bookshare_url.
    #
    # @return [ActiveSupport::SafeBuffer]         HTML link element.
    # @return [nil]                               If no *path* was found.
    #
    # -
    # == Variations
    # +
    #
    # @overload bookshare_link(item)
    #   @param [Bs::Api::Record] item
    #
    # @overload bookshare_link(item, path, **path_opt)
    #   @param [String] item      Link label.
    #   @param [String] path      Passed as #bookshare_url *path* parameter
    #   @param [Hash]   path_opt
    #
    # @see LinkHelper#external_link
    #
    def bookshare_link: ((Bs::Api::Record|String) item, ?path: String|nil, **untyped path_opt) -> (ActiveSupport::SafeBuffer | nil)

    # Generate a Bookshare URL.  If *path* is not given, infer it from the
    # originating controller and action.
    #
    # @param [Hash, String, nil] path
    # @param [Hash]              prm    Passed to #make_path.
    #
    # @return [String]                  A full URL.
    # @return [nil]                     If the URL could not be determined.
    #
    # -
    # == Variations
    # +
    #
    # @overload bookshare_url(url, **path_opt)
    #   @param [String, nil] url        Full or partial URL.
    #   @param [Hash]        prm
    #
    # @overload bookshare_url(hash, **path_opt)
    #   @param [Hash]        hash       Controller/action.
    #   @param [Hash]        prm
    #
    def bookshare_url: ((symHash|String|nil) path, **untyped prm) -> (String | nil)

    # This is a kludge
    #
    # @param [Model] item
    # @param [Hash]  opt            Passed to ArtifactDecorator#download_links
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def artifact_links: (Model item, **untyped opt) -> ActiveSupport::SafeBuffer
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module InstanceMethods
    include BaseDecorator::InstanceMethods

    include Paths

    include Methods

    # The current action is implied.
    #
    # @param [Hash, String, nil] path
    # @param [Hash]              prm
    #
    # @return [String, nil]
    #
    def bookshare_url: ((symHash|String|nil) path, **untyped prm) -> (String | nil)

    # This is a kludge
    #
    # @param [Model, nil] item
    # @param [Hash]       opt       Passed to ArtifactDecorator#download_links
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def artifact_links: (?(Model|nil) item, **untyped opt) -> ActiveSupport::SafeBuffer
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module ClassMethods
    include BaseDecorator::ClassMethods

    include Paths

    include Methods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module Common
    def self.included: (Module base) -> void
  end

  include Common

  # A direct link to a Bookshare page to open in a new browser tab.
  #
  # @param [Hash] path_opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def bookshare_link: (**untyped path_opt) -> (ActiveSupport::SafeBuffer | nil)

  # Creator field categories.
  #
  # @type [Array<Symbol>]
  #
  CREATOR_FIELDS: symArray

  # @private
  # @type [Array<Symbol>]
  SEARCH_LINK_OPTIONS: symArray

  # Create a link to the search results index page for the given term(s).
  #
  # @param [Model, String] terms
  # @param [Hash]          opt                To LinkHelper#make_link except:
  #
  # @option opt [Symbol]         :field       Default: :title.
  # @option opt [Boolean]        :all_words
  # @option opt [Boolean]        :no_link
  # @option opt [Symbol, String] :scope
  # @option opt [Symbol, String] :controller
  #
  # @return [ActiveSupport::SafeBuffer]       An HTML link element.
  # @return [nil]                             If no *terms* were provided.
  #
  def search_link: ((Model|String) terms, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # @private
  # @type [Array<Symbol>]
  SEARCH_LINKS_OPTIONS: symArray

  # Catalog item search links.
  #
  # Items in returned in two separately sorted groups: actionable links ('<a>'
  # elements) followed by items which are not linkable ('<span>' elements).
  #
  # @param [Hash] opt                   Passed to :link_method except for:
  #
  # @option opt [Symbol] :field
  # @option opt [Symbol] :method
  # @option opt [Hash]   :method_opt    Passed to *method* call.
  # @option opt [String] :separator     Default: #DEFAULT_ELEMENT_SEPARATOR
  # @option opt [Symbol] :link_method   Default: :search_link
  #
  # @return [ActiveSupport::SafeBuffer] HTML link element(s).
  # @return [nil]                       If access method unsupported by *item*.
  #
  def search_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item categories as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def category_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item formats as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def format_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item languages as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def language_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item countries as search links.
  #
  # NOTE: This is apparently not working in Bookshare.
  # Although an invalid country code will result in no results, all valid
  # country codes result in the same results.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def country_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item author(s) as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def author_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item editor(s) as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def editor_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item composer(s) as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def composer_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item narrator(s) as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def narrator_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Item creator(s) as search links.
  #
  # @param [Hash] opt                 Passed to #search_links.
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def creator_links: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Create record links to an external target or via the internal API interface
  # endpoint.
  #
  # @param [Model, Array<String>, String] links
  # @param [Boolean]                      no_link
  # @param [String]                       separator
  # @param [Hash]                         opt         To LinkHelper#make_link.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see BsApiHelper#bs_api_explorer_url
  #
  def record_links: ((Model|String|strArray) links, **untyped opt) -> ActiveSupport::SafeBuffer

  # Transform a field value for HTML rendering.
  #
  # @param [Any]       value
  # @param [Symbol, *] field
  # @param [Hash]      opt            Passed to the render method or super.
  #
  # @return [Any]                     HTML or scalar value.
  # @return [nil]                     If *value* or *object* is *nil*.
  #
  def render_value: (untyped value, field: Symbol|String|Array[Symbol|String]|nil, **untyped opt) -> (Field::Type | String | nil)

  # The type of named field regardless of pluralization or presence of a
  # "_list" suffix.
  #
  # @param [Symbol, String, *] name
  #
  # @return [Symbol]
  #
  def field_category: (untyped name) -> Symbol

  # An external link to the appropriate Bookshare endpoint is displayed in
  # place of a local form for creating/modifying objects that reside on
  # Bookshare.
  #
  # Originally this was just a placeholder at a time when it was assumed that
  # the Bookshare API was being created with the intent of supporting the full
  # range of EMMA requirements.  If, at some point, there is a need to have
  # full CRUD access to certain Bookshare-only data objects then this method
  # might be overridden in that particular case.
  #
  # @param [String, Symbol] action    Either :new or :edit.
  # @param [Hash]           opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def model_form: (?action: String|Symbol|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # form_action
  #
  # @param [Hash] opt
  #
  # @option opt [Symbol] :action      Default: :new
  #
  # @return [String]
  #
  def form_action: (**untyped opt) -> String

  # form_action_link
  #
  # @param [String] label
  # @param [Hash]   opt               Passed to #link_to_action.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_action_link: (label: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # form_action_description
  #
  # @param [Symbol, nil] action
  #
  # @return [String]
  #
  def form_action_description: (?action: String|nil, **untyped) -> String

  # form_target_description
  #
  # @return [String]
  #
  def form_target_description: (**untyped) -> String
end
