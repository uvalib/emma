# Item presenter for "/account" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [User]
#
class AccountDecorator < BaseDecorator
  module SharedPathMethods
    include BaseDecorator::SharedPathMethods

    def index_path:         (*untyped _ignored,         **untyped opt)  -> String
    def show_path:          (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def new_path:           (*untyped _ignored,         **untyped opt)  -> String
    def create_path:        (*untyped _ignored,         **untyped opt)  -> String
    def edit_select_path:   (*untyped _ignored,         **untyped opt)  -> String
    def edit_path:          (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def update_path:        (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def delete_select_path: (*untyped _ignored,         **untyped opt)  -> String
    def delete_path:        (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def destroy_path:       (?(Model|anyHash|nil) item, **untyped opt)  -> String
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module SharedGenericMethods
    include BaseDecorator::SharedGenericMethods

    # Control icon definitions.
    #
    # @type [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    # @see BaseDecorator::Controls#ICON_PROPERTIES
    #
    ICONS: Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Icon definitions for this decorator.
    #
    # @return [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    def icon_definitions: () -> Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Render details of an account.
    #
    # @param [Hash, nil] pairs        Additional field mappings.
    # @param [Hash]      opt          Passed to super except:
    #
    # @option opt [String, Symbol, Array<String,Symbol>] :columns
    # @option opt [String, Regexp, Array<String,Regexp>] :filter
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @see #model_field_values
    #
    def details: (?pairs: symHash | nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Render a single entry for use within a list of items.
    #
    # @param [Hash, nil] pairs        Additional field mappings.
    # @param [Hash]      opt          Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def list_item: (?pairs: symHash | nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Generate a prompt for #items_menu.
    #
    # @return [String]
    #
    def items_menu_prompt: () -> String

    # Descriptive term for an item of the given type.
    #
    # @param [Symbol, String, nil] model        Default: `#model_type`.
    # @param [Boolean]             capitalize
    #
    # @return [String]
    #
    def model_item_name: (?model: Symbol|String|nil, ?capitalize: bool) -> String

    EMAIL_FIELD_READONLY: String

    PASSWORD_PLACEHOLDER: String | nil

    MINIMUM_PASSWORD_LENGTH: Integer | nil

    MAXIMUM_PASSWORD_LENGTH: Integer | nil
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module SharedInstanceMethods
    include BaseDecorator::SharedInstanceMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module SharedClassMethods
    include BaseDecorator::SharedClassMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end

end

class AccountDecorator
  include SharedDefinitions

  include SharedInstanceMethods

  extend  SharedClassMethods

  # Create a link to the details show page for the given item.
  #
  # @param [Hash] opt                 Passed to #link
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def show_control: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Transform a field value for HTML rendering.
  #
  # @param [*]         value
  # @param [Symbol, *] field
  # @param [Hash]      opt            Passed to the render method or super.
  #
  # @return [Any]                     HTML or scalar value.
  # @return [nil]                     If *value* or *object* is *nil*.
  #
  def render_value: (untyped value, field: Symbol|String|Array[Symbol|String]|nil, **untyped opt) -> (Field::Type | String | nil)

  # Create a list of User roles.
  #
  # @param [Hash] opt                 Passed to #html_tag
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def roles: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Create a single term which describes the role level of *item*.
  #
  # @param [Hash] opt                 Passed to #html_tag
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def role_prototype: (**untyped opt) -> ActiveSupport::SafeBuffer

  # table_columns
  #
  # @param [Hash] opt
  #
  # @return [Hash]
  #
  def table_columns: (**untyped opt) -> anyHash

  # Patterns for User record columns which are not included for
  # non-developers.
  #
  # @type [Array<String,Symbol,Regexp>]
  #
  FIELD_FILTERS: Array[String|Symbol|Regexp]

  # Specified field selections from the given User instance.
  #
  # @param [User, Hash, nil] item     Default: `#object`.
  # @param [Hash]            opt      Passed to super.
  #
  # @return [Hash{String=>ActiveSupport::SafeBuffer}]
  #
  def model_field_values: (?(User|symHash|nil) item, **untyped opt) -> Hash[String,ActiveSupport::SafeBuffer]

  # Render pre-populated form fields, manually adding password field(s) (which  # unless BS_AUTH
  # are not in "emma.account.record").
  #
  # Render pre-populated form fields, manually adding password field(s) (which  # if BS_AUTH
  # are not in "emma.account.record") and overriding the :effective_id field
  # (which is) for the administrator to set/modify the effective Bookshare
  # account associated with the EMMA account.
  #
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to #render_form_fields.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_fields: (?pairs: anyHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # render_form_email
  #
  # @param [String] name
  # @param [*]      value
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_email: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer
  # render_form_password
  #
  # @param [String] name
  # @param [*]      value
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_password: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate data for :effective_id rendered as a menu instead of a fixed       # if BS_AUTH
  # value.
  #
  # @param [Integer, nil] selected    Default: `object.effective_id`
  # @param [String, nil]  default
  #
  # @return [Hash]
  #
  def bookshare_user_menu: (?selected: Integer|nil, ?default: String|nil) -> symHash

  # min_length_note
  #
  # @param [String, nil] note
  # @param [Integer, nil] min
  # @param [Hash]         opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def min_length_note: (?(String|nil) note, ?min: Integer|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # current_password_note
  #
  # @param [String, nil] note
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def current_password_note: (?(String|nil) note, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)
end
