# Item presenter for "/account" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [User]
#
class AccountDecorator < BaseDecorator
  module SharedPathMethods
    include BaseDecorator::SharedPathMethods
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module SharedGenericMethods
    include BaseDecorator::SharedGenericMethods

    # @private
    # @type [String]
    ITEM_NAME: String

    # Control icon definitions.
    #
    # @type [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    # @see BaseDecorator::Controls#ICON_PROPERTIES
    #
    ICONS: Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Icon definitions for this decorator.
    #
    # @return [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    def icon_definitions: () -> Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Control icon definitions.
    #
    # @param [Boolean] authorized       If *true* show all enabled icons.
    #
    # @return [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    # @see #icon_definitions
    #
    def control_icons: (?authorized: bool) -> Hash[Symbol, symHash]

    # Render a single label/value pair, ensuring :email is fixed if editing
    # the user's own account.
    #
    # @param [String, Symbol] label
    # @param [*]              value
    # @param [Hash]           opt     Passed to super
    #
    # @return [ActiveSupport::SafeBuffer, nil]
    #
    def render_form_pair: ((String|Symbol) label, untyped value, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

    # Generate a menu of user instances.
    #
    # @param [Hash] opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def items_menu: (**untyped opt) -> ActiveSupport::SafeBuffer

    # Generate a prompt for #items_menu.
    #
    # @return [String]
    #
    def items_menu_prompt: () -> String

    # Descriptive term for an item of the given type.
    #
    # @param [Symbol, String, nil] model        Default: `#model_type`.
    # @param [Boolean]             capitalize
    #
    # @return [String]
    #
    def model_item_name: (?model: Symbol|String|nil, ?capitalize: bool) -> String

    EMAIL_FIELD_READONLY: String

    PASSWORD_PLACEHOLDER: String | nil

    MINIMUM_PASSWORD_LENGTH: Integer | nil

    MAXIMUM_PASSWORD_LENGTH: Integer | nil
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module SharedInstanceMethods
    include BaseDecorator::SharedInstanceMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module SharedClassMethods
    include BaseDecorator::SharedClassMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end

end

class AccountDecorator
  include SharedDefinitions

  include SharedInstanceMethods

  extend  SharedClassMethods

  # Table values associated with the current decorator.
  #
  # @param [Hash] opt
  #
  # @return [Hash]
  #
  #def table_values: (**untyped opt) -> anyHash

  # Fields and configurations augmented with a :value entry containing the
  # current field value.
  #
  # @param [Hash] opt                 Passed to super.
  #
  # @return [Hash{Symbol=>FieldConfig}]
  #
  def table_field_values: (**untyped opt) -> Hash[Symbol, FieldConfig]

  # Patterns for User record columns which are not included for
  # non-developers.
  #
  # @type [Array<String,Symbol,Regexp>]
  #
  FIELD_FILTERS: Array[String|Symbol|Regexp]

  # Render pre-populated form fields, manually adding password field(s) (which
  # are not in "emma.account.record").
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_field_rows: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Single-select menu - drop-down.
  #
  # @param [String]      name
  # @param [Array]       value
  # @param [Hash]        opt          Passed to super
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_menu_single: (String name, anyArray value, **untyped opt) -> ActiveSupport::SafeBuffer

  # render_form_email
  #
  # @param [String] name
  # @param [*]      value
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_email: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer

  # render_form_password
  #
  # @param [String] name
  # @param [*]      value
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_password: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer

  # min_length_note
  #
  # @param [String, nil] note
  # @param [Integer, nil] min
  # @param [Hash]         opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def min_length_note: (?(String|nil) note, ?min: Integer|nil, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # current_password_note
  #
  # @param [String, nil] note
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def current_password_note: (?(String|nil) note, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  ABILITY_ACTIONS: symArray

  ABILITY_COLUMNS: Hash[Symbol, String]

  # A table of abilities.
  #
  # @param [User, Ability, nil] target      Default: #current_ability.
  # @param [Hash]               columns:    Default: #ABILITY_COLUMNS.
  # @param [Hash]               table_opt   To outer `<table>` element.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ability_table: (?(User|Ability|nil) user, ?symHash columns, **untyped table_opt) -> ActiveSupport::SafeBuffer

  # A table of models where each value is a sub-table of rows for each action.
  #
  # @param [User, Ability, nil] target    Default: #current_ability.
  # @param [Array<Class>, nil]  models    Default: Ability#models.
  # @param [Array<Symbol>, nil] actions   Default: #ABILITY_ACTIONS
  # @param [Integer]            start     First row number.
  #
  # @return [Hash{Class=>Hash{Symbol=>ActiveSupport::SafeBuffer}}]
  #
  def ability_table_rows: (?(User|Ability|nil) user, ?models: Array[Class]|nil, ?actions: symArray|nil, ?start: Integer) -> Hash[Class, Hash[Symbol, ActiveSupport::SafeBuffer]]

  # A table row to visually separate groups of rows.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def ability_table_divider: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

end
