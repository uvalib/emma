# Item presenter for "/org" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Org]
#
class OrgDecorator < BaseDecorator
  module SharedPathMethods
    include BaseDecorator::SharedPathMethods
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module SharedGenericMethods
    include BaseDecorator::SharedGenericMethods

    # Render a value for use on an input form.
    #
    # @param [String]   name
    # @param [any, nil] value
    # @param [Hash]     opt           Passed to super
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def render_form_field_item: (String name, untyped value, **untyped opt) -> ActiveSupport::SafeBuffer

    # Render a single label/value pair, forcing :ip_domain to be a single
    # input field.
    #
    # @param [String, Symbol] label
    # @param [any, nil]       value
    # @param [Hash]           opt     Passed to super
    #
    # @return [ActiveSupport::SafeBuffer, nil]
    #
    def render_form_pair: ((String|Symbol) label, untyped value, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

    # Generate a menu of org instances.
    #
    # @param [Hash] opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def items_menu: (**untyped opt) -> ActiveSupport::SafeBuffer

    # Generate a prompt for #items_menu.
    #
    # @return [String]
    #
    def items_menu_prompt: (**untyped _ignored) -> String

    # Descriptive term for an item of the given type.
    #
    # @param [Symbol, String, nil] model        Default: `#model_type`.
    # @param [Boolean]             capitalize
    #
    # @return [String]
    #
    def model_item_name: (?model: Symbol|String|nil, ?capitalize: bool) -> String
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module SharedInstanceMethods
    include BaseDecorator::SharedInstanceMethods

    include SharedPathMethods

    include SharedGenericMethods

    # options
    #
    # @return [Org::Options]
    #
    def options: () -> Org::Options

    # help_topic
    #
    # @param [Symbol, nil] sub_topic  Default: `context[:action]`.
    # @param [Symbol, nil] topic      Default: #model_type.
    #
    # @return [Array<Symbol>]
    #
    def help_topic: (?(Symbol|nil) sub_topic, ?(Symbol|nil) topic) -> symArray
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module SharedClassMethods
    include BaseDecorator::SharedClassMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end
end

class OrgDecorator
  include SharedDefinitions

  # Fields and configurations augmented with a :value entry containing the
  # current field value.
  #
  # @param [Hash] opt   Passed to #property_pairs and #table_field_value.
  #
  # @return [Hash{Symbol=>FieldConfig}]
  #
  def table_field_values: (**untyped opt) -> Hash[Symbol, FieldConfig]
end
