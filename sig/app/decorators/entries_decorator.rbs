# Collection presenter for "/entry" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Array<Entry>]
#
class EntriesDecorator < BaseCollectionDecorator

  attr_reader group_counts: Hash[Symbol,Integer]

  # group_counts
  #
  # @return [Hash{Symbol=>Integer}]
  #
  def group_counts: () -> Hash[Symbol,Integer]

  # Select records based on workflow state group.
  #
  # @param [Hash] counts              A table of group names associated with
  #                                     their overall totals (default:
  #                                     `#group_counts`).
  # @param [Hash] opt                 Passed to inner #html_div except for:
  #
  # @option opt [String]        :curr_path    Default: `request.fullpath`
  # @option opt [String,Symbol] :curr_group   Default from `request_parameters`
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #STATE_GROUP
  # @see file:app/assets/javascripts/feature/records.js *filterPageDisplay()*
  #
  def state_group_select: (?counts: Hash[Symbol,Integer]?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Control for filtering which records are displayed.
  #
  # @param [Hash] counts              A table of group names associated with
  #                                     their overall totals (default:
  #                                     `#group_counts`).
  # @param [Hash] opt                 Passed to inner #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                       If #LIST_FILTERING is *false*.
  #
  # @see #STATE_GROUP
  # @see file:app/assets/javascripts/feature/records.js *filterPageDisplay()*
  #
  def list_filter: (?counts:  Hash[Symbol,Integer]?, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Control the selection of filters displayed by #list_filter.
  #
  # @param [Hash] opt                 Passed to #html_div for outer <div>.
  #
  # @option opt [Array] :records      List of upload records for display.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/records.js *filterOptionToggle()*
  #
  def list_filter_options: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Button information for upload actions.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  def form_actions: () -> symHash

  # Labels for inputs associated with transmitted parameters. # TODO: I18n
  #
  # @type [Hash{Symbol=>String}]
  #
  DELETE_LABEL: Hash[Symbol,String]

  # delete_submit_option_keys
  #
  # @return [Array<Symbol>]
  #
  def delete_submit_option_keys: () -> symArray

  # delete_submit_path
  #
  # @param [Array<Entry,String>, Entry, String, nil] ids
  # @param [Hash]                                    opt
  #
  # @return [String, nil]
  #
  def delete_submit_path: (?(Entry|String|Array[Entry|String])? ids, **untyped opt) -> (String | nil)

  # Cancel button for the delete upload form.
  #
  # @param [Hash] opt                 Passed to super
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/feature/download.js *cancelAction()*
  #
  def delete_cancel_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # item_ids
  #
  # @param [Array<Entry,String>, Entry, String, nil] items  Def: `#object`
  # @param [Hash]                                    opt
  #
  # @return [Array<String>]
  #
  def item_ids: (?(Entry|String|Array[Entry|String])? items, **untyped opt) -> strArray

  # records_or_sid_ranges
  #
  # @param [Array<Model,String>, nil] list
  #
  # @return [Array<Model,String>, nil]
  #
  def records_or_sid_ranges: (Array[Model|String]? list) -> (Array[Model|String] | nil)

  # find_in_index
  #
  # @param [Array<String,Entry>] items
  #
  # @return [Array<(Array<Search::Record::MetadataRecord>,Array)>]
  #
  def find_in_index: (*(String|Entry) items) -> [Array[Search::Record::MetadataRecord], Array[String|Entry]]

  # record_map
  #
  # @param [Array<Model>] records
  #
  # @return [Hash{String=>String}]
  #
  def record_map: (Array[Model] records) -> Hash[String,String]

  # Initially hidden container used by the client to display intermediate
  # results during a bulk operation.
  #
  # @param [Hash] opt                 Passed to #html_div.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def bulk_op_results: (**untyped opt) -> ActiveSupport::SafeBuffer

  # An option checkbox for a bulk operation form.
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Symbol]                           param
  # @param [Any, nil]                         value
  # @param [Hash{Symbol=>String}]             labels
  # @param [Boolean]                          debug_only
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def bulk_option: (ActionView::Helpers::FormBuilder f, Symbol param, ?untyped? value, labels: Hash[Symbol,String], ?debug_only: bool) -> ActiveSupport::SafeBuffer

  # An input element for a bulk operation form.
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Symbol]                           param
  # @param [Any, nil]                         value
  # @param [Hash{Symbol=>String}]             labels
  # @param [Symbol]                           meth
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def bulk_input: (ActionView::Helpers::FormBuilder f, Symbol param, ?untyped? value, labels: Hash[Symbol,String], ?meth: Symbol, **untyped opt) -> ActiveSupport::SafeBuffer

  # Labels for inputs associated with transmitted parameters. # TODO: I18n
  #
  # @type [Hash{Symbol=>String}]
  #
  BULK_LABEL: Hash[Symbol,String]

  BULK_OPTIONS: symArray

  BULK_FORM_OPTIONS: symArray

  # Generate a form with controls for uploading a file, entering metadata, and
  # submitting.
  #
  # @param [String]         label     Label for the submit button.
  # @param [String, Symbol] action    Either :new or :edit.
  # @param [Hash]           opt       Passed to #form_with except for:
  #
  # @option opt [String]  :prefix     String to prepend to each title.
  # @option opt [Integer] :batch      Size of upload batches.
  # @option opt [String]  :cancel     URL for cancel button action.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see Record::Properties#title_prefix
  # @see Record::Properties#batch_size
  #
  def bulk_op_form: (?label: String?, ?action: Symbol|String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # An option checkbox for a bulk new/edit form.
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Symbol]                           param
  # @param [Any, nil]                         value
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #bulk_option
  #
  def bulk_op_option: (ActionView::Helpers::FormBuilder f, Symbol param, ?untyped? value, **untyped opt) -> ActiveSupport::SafeBuffer

  # An input element for a bulk new/edit form.
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Symbol]                           param
  # @param [Any, nil]                         value
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #bulk_input
  #
  def bulk_op_input: (ActionView::Helpers::FormBuilder f, Symbol param, ?untyped? value, **untyped opt) -> ActiveSupport::SafeBuffer

  # bulk_op_file_select
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Symbol]                           meth
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see ActionView::Helpers::FormBuilder#label
  # @see ActionView::Helpers::FormBuilder#file_field
  #
  def bulk_op_file_select: (ActionView::Helpers::FormBuilder f, Symbol meth, **untyped opt) -> ActiveSupport::SafeBuffer

  BULK_DELETE_LABEL: Hash[Symbol,String]

  # Generate a form with controls for getting a list of identifiers to pass on
  # to the "/entry/delete" page.
  #
  # @param [String] label                 Label for the submit button.
  # @param [Hash]   opt                   Passed to #form_with except for:
  #
  # @option opt [Boolean] :force          Force index delete option
  # @option opt [Boolean] :truncate       Reset database ID option
  # @option opt [Boolean] :emergency      Emergency force delete option
  # @option opt [String]  :cancel         URL for cancel button action.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def bulk_delete_form: (?label: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # An option checkbox for a bulk delete form.
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Symbol]                           param
  # @param [Any, nil]                         value
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #bulk_option
  #
  def bulk_delete_option: (ActionView::Helpers::FormBuilder f, Symbol param, ?untyped? value, **untyped opt) -> ActiveSupport::SafeBuffer

  # An input element for a bulk delete form.
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Symbol]                           param
  # @param [Any, nil]                         value
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #bulk_input
  #
  def bulk_delete_input: (ActionView::Helpers::FormBuilder f, Symbol param, ?untyped? value, **untyped opt) -> ActiveSupport::SafeBuffer
end
