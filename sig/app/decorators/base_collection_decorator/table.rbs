# Methods supporting tabular display of Model instances.
#
module BaseCollectionDecorator::Table
  include BaseDecorator::Table

  include BaseCollectionDecorator::Common

  include BaseCollectionDecorator::Row

  # Render model items as a table.
  #
  # @param [Symbol] tag               Potential alternative to :table.
  # @param [String] css               Default: `#table_css_class`.
  # @param [Hash]   opt               Passed to outer #html_tag except
  #                                     #RENDER_TABLE_OPT to render methods.
  #
  # @option opt [ActiveSupport::SafeBuffer] :thead  Pre-generated *thead*.
  # @option opt [ActiveSupport::SafeBuffer] :tbody  Pre-generated *tbody*.
  # @option opt [ActiveSupport::SafeBuffer] :tfoot  Pre-generated *tfoot*.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #STICKY_HEAD
  # @see #DARK_HEAD
  #
  def render_table: (?tag: Symbol|nil, ?css: String|nil, **untyped opt) { (symHash, Array[Model], symHash) -> void } -> ActiveSupport::SafeBuffer

  ALL_RECORDS: String

  ROWS_HERE: String

  # Render a link to a page for access to the full contents of a table.
  #
  # @param [String, nil]  path        Default: `#table_path`.
  # @param [Integer, nil] rows        Number of records currently rows.
  # @param [String]       css         Characteristic CSS class/selector.
  # @param [Hash]         opt         Passed to enclosing element.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_full_table_link: (?path: String|nil, ?rows: Integer|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # The URL path needed to reconstruct the current table.
  #
  # @param [Hash, nil] prm            Default: `#param_values`.
  # @param [Hash]      opt            Optional added URL parameters.
  #
  # @return [String]
  #
  def table_path: (?(anyHash|nil) prm, **untyped opt) -> String

  # Render one or more entries for use within a *tbody*.
  #
  # @param [Integer]     row          Current row (prior to first entry).
  # @param [String, nil] separator
  # @param [Hash]        opt          Passed to #table_entry except
  #                                     #MODEL_TABLE_DATA_OPT
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [Array<ActiveSupport::SafeBuffer>]  If :separator is *nil*.
  #
  def table_entries
    : (?row: Integer, ?separator: String, **untyped opt) { (Model, symHash) -> ActiveSupport::SafeBuffer } -> ActiveSupport::SafeBuffer
    | (?row: Integer,  separator: nil,    **untyped opt) { (Model, symHash) -> ActiveSupport::SafeBuffer } -> Array[ActiveSupport::SafeBuffer]

  # Render column headings for a table of model items.
  #
  # @param [Boolean, nil] dark
  # @param [Hash]         opt         Passed to #render_table_row except
  #                                     #MODEL_TABLE_DATA_OPT
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def table_heading: (?dark: bool|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a heading element for the given column.
  #
  # @param [Symbol, String]  field
  # @param [FieldConfig]     prop
  # @param [Boolean]         sortable
  # @param [String]          css      Characteristic CSS class/selector.
  # @param [Hash]            opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def table_column_label: (Symbol|String field, FieldConfig prop, sortable: bool, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a sort toggle element for a colum header.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def table_column_sorter: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Render a hidden row which spans the table.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def table_spanner: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # The collection of items to be presented in tabular form.
  #
  # @param [Hash] opt                 Modifies *object* results.
  #
  # @return [Array<Model>]
  # @return [ActiveRecord::Relation]
  # @return [ActiveRecord::Associations::CollectionAssociation]
  #
  def table_row_items: (**untyped opt) -> decoratorRowItems

  # The #model_type of individual associated items for iteration.
  #
  # @return [Symbol]
  #
  # @see BaseCollectionDecorator::SharedClassMethods#decorator_class
  #
  def table_row_model_type: () -> Symbol

  private

  def self.included: (Module base) -> void
end
