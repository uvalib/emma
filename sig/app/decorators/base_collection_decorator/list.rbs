# View helper methods supporting display of Model instances (both database
# items and API messages).
#
module BaseCollectionDecorator::List
  include BaseDecorator::List

  # Render list items.
  #
  # @param [Integer]       index      Starting index number.
  # @param [Integer]       row        Starting row number.
  # @param [Array<Symbol>] skip       Passed to #list_row.
  # @param [String, nil]   separator  If *nil*, return an array of lines.
  # @param [Hash]          opt        Passed to #list_row.
  #
  # @return [Array<ActiveSupport::SafeBuffer>]  If *separator* set to *nil*.
  # @return [ActiveSupport::SafeBuffer]
  #
  def render: (?index: Integer, ?row: Integer, ?skip: symArray?, ?separator: String, **untyped opt) -> ActiveSupport::SafeBuffer
            | (?index: Integer, ?row: Integer, ?skip: symArray?, separator: nil,     **untyped opt) -> Array[ActiveSupport::SafeBuffer]

  # Text for #no_records_row. # TODO: I18n
  #
  # @type [String]
  #
  NO_RECORDS: String

  # Hidden row that is shown only when no field rows are being displayed.
  #
  # @param [Hash] opt                 Passed to created elements.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def no_records_row: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Options used with template :locals.
  #
  # @type [Array<Symbol>]
  #
  VIEW_TEMPLATE_OPT: symArray

  # Generate applied search terms and top/bottom pagination controls.
  #
  # @param [Integer, #to_i, nil] count    Default: *list* size.
  # @param [Integer, #to_i, nil] total    Default: count.
  # @param [Integer, #to_i, nil] records  Number of API records for this page.
  # @param [Integer, #to_i, nil] page     Default: 1.
  # @param [Integer, #to_i, nil] size     Default: TODO: default page size
  # @param [Integer, #to_i, nil] row      Default: 1.
  # @param [Hash]    opt                  Passed to #list_controls.
  #
  # @return [Array<(ActiveSupport::SafeBuffer,ActiveSupport::SafeBuffer)>]
  #
  def index_controls: (?count: Integer?, ?total: Integer?, ?records: Integer?, ?page: Integer?, ?size: Integer?, ?row: Integer?, **untyped opt) -> [ActiveSupport::SafeBuffer, ActiveSupport::SafeBuffer]

  # Page number display element.
  #
  # @param [Integer]   page
  # @param [Hash, nil] opt            Options to .page-count wrapper element.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                         If *count* is negative.
  #
  def page_number: (Integer page, ?symHash? opt) -> (ActiveSupport::SafeBuffer | nil)

  # Page count display element.
  #
  # @param [Integer, nil] count
  # @param [Integer, nil] total
  # @param [String]       unit
  # @param [Hash]         opt         Options to .search-count wrapper element.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_count: (Integer? count, ?Integer? total, ?unit: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Placeholder for an item that would have been a link if it had a path.
  #
  # @param [String, Hash, nil] fp     Passed to #pagination_first.
  # @param [String, Hash, nil] pp     Passed to #pagination_prev.
  # @param [String, Hash, nil] np     Passed to #pagination_next.
  # @param [String, nil]       sep    Passed to #pagination_separator.
  # @param [Hash]              opt    For .pagination-controls container.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_controls: (?fp: (String|symHash)?, ?pp: (String|symHash)?, ?np: (String|symHash)?, ?sep: String?, **untyped opt) -> ActiveSupport::SafeBuffer

  # Page number label for the model type.
  #
  # @param [Hash] opt               Passed to ConfigurationHelper#config_lookup
  #
  # @return [String]                The specified value.
  # @return [nil]                   No non-empty value was found.
  #
  def get_page_number_label: (**untyped opt) -> (String | nil)

  # Page count label for the model type.
  #
  # @param [Hash] opt               Passed to ConfigurationHelper#config_lookup
  #
  # @option opt [Integer] :count
  #
  # @return [String]                The specified value.
  # @return [nil]                   No non-empty value was found.
  #
  def get_page_count_label: (**untyped opt) -> (String | nil)

  # pagination_separator
  #
  # @param [String, nil] content      Default: `#PAGINATION_SEPARATOR`.
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_separator: (?String? content, **untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_first
  #
  # @param [String, Hash, nil] path   Default: `#paginator.first_page`.
  # @param [Hash]              opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #pagination_control
  #
  def pagination_first: (?(String|symHash)? path, **untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_prev
  #
  # @param [String, Hash, nil] path   Default: `#paginator.prev_page`.
  # @param [Hash]              opt
  #
  # @see #pagination_control
  #
  def pagination_prev: (?(String|symHash)? path, **untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_next
  #
  # @param [String, Hash, nil] path   Default: `#paginator.next_page`.
  # @param [Hash]              opt
  #
  # @see #pagination_control
  #
  def pagination_next: (?(String|symHash)? path, **untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_last
  #
  # @param [String, Hash, nil] path   Default: `#paginator.last_page`.
  # @param [Hash]              opt
  #
  # @see #pagination_control
  #
  def pagination_last: (?(String|symHash)? path, **untyped opt) -> ActiveSupport::SafeBuffer

  # A pagination control link or a non-actionable placeholder if *path* is not
  # valid.
  #
  # @param [String, Hash]      label
  # @param [String, Hash, nil] path
  # @param [Hash]              opt    Passed to #link_to or <span> except for:
  #
  # @option [String] :prefix
  # @option [String] :suffix
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_control: (String|symHash label, String|symHash|nil path, **untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_first_icon
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #pagination_icon
  # @see file:app/assets/stylesheets/layouts/controls/_shapes.scss
  #
  def pagination_first_icon: (**untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_prev_icon
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #pagination_icon
  # @see file:app/assets/stylesheets/layouts/controls/_shapes.scss
  #
  def pagination_prev_icon: (**untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_next_icon
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #pagination_icon
  # @see file:app/assets/stylesheets/layouts/controls/_shapes.scss
  #
  def pagination_next_icon: (**untyped opt) -> ActiveSupport::SafeBuffer

  # pagination_last_icon
  #
  # @param [Hash] opt
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see #pagination_icon
  # @see file:app/assets/stylesheets/layouts/controls/_shapes.scss
  #
  def pagination_last_icon: (**untyped opt) -> ActiveSupport::SafeBuffer

  # A decorative visual representation of a control action.
  #
  # @param [String, nil] content
  # @param [Hash]        opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def pagination_icon: (?String? content, **untyped opt) -> ActiveSupport::SafeBuffer

  # Optional controls to modify the display or generation of the item list in
  # the order of display.
  #
  # @type [Array<Symbol>]
  #
  LIST_CONTROL_METHODS: symArray

  # Optional controls to modify the display or generation of the item list in
  # the order of display.
  #
  # @return [Array<Symbol>]
  #
  def list_control_methods: () -> symArray

  # Optional controls to modify the display or generation of the item list.
  #
  # @param [Hash] opt
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def list_controls: (**untyped opt) -> Array[ActiveSupport::SafeBuffer]

  # Optional list style controls in line with the top pagination control.
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def list_styles: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Optional list result type controls in line with the top pagination control.
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def list_results: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # An optional list filter control in line with the top pagination control.
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def list_filter: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)
end
