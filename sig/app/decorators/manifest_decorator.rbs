# Item presenter for "/manifest" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Manifest]
#
class ManifestDecorator < BaseDecorator
  module SharedPathMethods
    include BaseDecorator::SharedPathMethods

    def upload_path:        (*untyped _ignored,         **untyped opt)  -> String
    def remit_select_path:  (*untyped _ignored,         **untyped opt)  -> String
    def remit_path:         (?(Model|anyHash|nil) item, **untyped opt)  -> String
    #def start_path:         (?(Model|anyHash|nil) item, **untyped opt)  -> String
    #def stop_path:          (?(Model|anyHash|nil) item, **untyped opt)  -> String
    #def pause_path:         (?(Model|anyHash|nil) item, **untyped opt)  -> String
    #def resume_path:        (?(Model|anyHash|nil) item, **untyped opt)  -> String
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module SharedGenericMethods
    include BaseDecorator::SharedGenericMethods

    include BaseDecorator::Grid

    extend Emma::Common::FormatMethods

    # @private
    # @type [String]
    ITEM_NAME: String

    # Bulk submission configuration values.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    BULK_SUBMIT_CFG: Hash[Symbol,symHash]

    # Control icon definitions.
    #
    # @type [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    # @see BaseDecorator::Controls#ICON_PROPERTIES
    #
    ICONS: Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Icon definitions for this decorator.
    #
    # @return [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    def icon_definitions: () -> Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Include control icons below the entry number.
    #
    # @param [Hash] opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def list_item_number: (**untyped opt) -> ActiveSupport::SafeBuffer

    # Don't display an item number in manifest listings.
    #
    # @return [nil]
    #
    def list_item_number_label: (**untyped _ignored) -> nil

    # Form action button configuration.
    #
    # @param [Array<Symbol>] actions
    #
    # @type [Hash{Symbol=>Hash}]
    #
    def generate_form_actions: (?symArray actions) -> Hash[Symbol,symHash]

    # Generate a prompt for #items_menu.
    #
    # @param [User, Symbol, nil] user
    #
    # @return [String]
    #
    def items_menu_prompt: (?user: User|Symbol|nil) -> String

    # Generate a label for a specific menu entry.
    #
    # @param [Manifest]    item
    # @param [String, nil] label      Override label.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def items_menu_label: (Manifest item, ?label: String|nil) -> ActiveSupport::SafeBuffer

    # The element displayed when the user has no Manifests to list.
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def no_items: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # The button displayed when the user has no Manifests to list.
    #
    # @param [String, nil] label
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt             Passed to #make_link.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def new_button: (?(String|nil) label, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module SharedInstanceMethods
    include BaseDecorator::SharedInstanceMethods

    include SharedPathMethods

    include SharedGenericMethods

    # Create a value for #context based on the parameters supplied through the
    # initializer
    #
    # @param [Hash] opt
    #
    # @return [Hash]                  Suitable for assignment to #context.
    #
    def initialize_context: (**untyped opt) -> symHash

    # options
    #
    # @return [Manifest::Options]
    #
    def options: () -> Manifest::Options

    # help_topic
    #
    # @param [Symbol, nil] sub_topic  Default: `context[:action]`.
    # @param [Symbol, nil] topic      Default: `model_type`.
    #
    # @return [Array<Symbol>]
    #
    def help_topic: (?(Symbol|nil) sub_topic, ?(Symbol|nil) topic) -> symArray
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module SharedClassMethods
    include BaseDecorator::SharedClassMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end

end

class ManifestDecorator
  include SharedDefinitions
  include SharedInstanceMethods
  extend  SharedClassMethods

  # Transform a field value for HTML rendering.
  #
  # @param [*]         value
  # @param [Symbol, *] field
  # @param [Hash]      opt            Passed to the render method or super.
  #
  # @return [Field::Type]
  # @return [String]
  # @return [nil]
  #
  def list_field_value: (untyped value, field: untyped, **untyped opt) -> (Field::Type | String | nil)

  # Page count label for manifest items.
  #
  # @param [Hash] opt               Passed to #config_lookup
  #
  # @option opt [Integer] :count
  #
  # @return [String]                The specified value.
  # @return [nil]                   No non-empty value was found.
  #
  def get_page_count_label: (**untyped opt) -> (String | nil)

  # The collection of rows associated with the manifest.
  #
  # @return [ManifestItem::Paginator]
  #
  def paginator: () -> ManifestItem::Paginator

  # The #model_type of individual associated items for iteration.
  #
  # @return [Symbol]
  #
  def row_model_type: () -> Symbol

  # The class of individual associated items for iteration.
  #
  # @return [Class]
  #
  def row_model_class: () -> Class

  # The collection of rows associated with the manifest.
  #
  # @return [ActiveRecord::Associations::HasManyAssociation]
  #
  def row_items: () -> ActiveRecord::Associations::HasManyAssociation

  # The names of each ManifestItem column which is not displayed.
  #
  # @return [Array<Symbol>]
  #
  def row_skipped_columns: () -> symArray

  # Fields and configurations augmented with a :value entry containing the
  # current field value.
  #
  # @param [Hash] opt                 Passed to super.
  #
  # @return [Hash{Symbol=>FieldConfig}]
  #
  def table_field_values: (**untyped opt) -> Hash[Symbol, FieldConfig]

  # Render associated items.
  #
  # @param [Hash] opt                 Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_grid: (**untyped opt) -> ActiveSupport::SafeBuffer

  # The names of each grid data column which is not displayed.
  #
  # @return [Array<Symbol>]
  #
  def grid_row_skipped_columns: () -> symArray

  # The names of each grid data column which is rendered but not visible.
  #
  # @return [Array<Symbol>]
  #
  def grid_row_undisplayed_columns: () -> symArray

  # Show a button for expanding/contracting the controls column in the top
  # left grid cell.
  #
  # @param [Hash] opt
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  def grid_head_control_headers: (**untyped opt) -> Array[ActiveSupport::SafeBuffer]

  # Single-select menu - drop-down.
  #
  # @param [String]      name
  # @param [Array]       value
  # @param [Hash]        opt          Passed to super
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def render_form_menu_single: (String name, anyArray value, **untyped opt) -> ActiveSupport::SafeBuffer

  # Basic form controls, including #import_button if appropriate.
  #
  # @param [Hash] opt
  #
  # @return [Array<ActiveSupport::SafeBuffer>]
  #
  # @yield [parts] Extend or replace results.
  # @yieldparam [Array<ActiveSupport::SafeBuffer>] parts
  # @yieldreturn [Array<String>, nil]
  #
  def form_buttons: (**untyped opt) ?{ (Array[ActiveSupport::SafeBuffer]) -> Array[ActiveSupport::SafeBuffer]? } -> Array[ActiveSupport::SafeBuffer]

  # Form submit button.
  #
  # @param [Hash] opt                 Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submit_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Submit cancel button.
  #
  # @param [Hash] opt                 Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def cancel_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # A consistent HTML element ID for the page heading.
  #
  # @return [String]
  #
  def page_heading_id: () -> String

  # For use on view templates in place of LayoutHelper#page_heading to support
  # editing the Manifest title.
  #
  # @param [ActiveSupport::SafeBuffer, Array<Symbol>, Symbol, nil] help
  # @param [Hash]                                                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def manifest_page_heading: (?help: Symbol|symArray|ActiveSupport::SafeBuffer|nil, **untyped opt) ?{ () -> (ActiveSupport::SafeBuffer|String|Array[ActiveSupport::SafeBuffer|String]) } -> ActiveSupport::SafeBuffer

  # Import manifest items from an external source.
  #
  # @param [Hash] opt                 Passed to #form_button.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/controllers/manifest-edit.js *importRows*
  # @see file:app/assets/stylesheets/feature/_model_form.scss ".import-button"
  #
  def import_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Export manifest items to an external file.
  #
  # @param [Hash] opt                 Passed to #form_button.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:app/assets/javascripts/controllers/manifest-edit.js *exportRows*
  # @see file:app/assets/stylesheets/feature/_model_form.scss ".export-button"
  #
  def export_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Submit this manifest.
  #
  # @param [Hash] opt                 Passed to #form_button.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Pre-defined status messages for #comm_status.
  #
  # @type [Hash{Symbol=>String}]
  #
  STATUS_MESSAGE: Hash[Symbol,String]

  # An area for transient status messages updated by the client if there are
  # problems communicating with the server.
  #
  # @param [String]              css      Characteristic CSS class/selector.
  # @param [Symbol, String, nil] status   Initial status.
  # @param [Hash]                opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def comm_status: (?css: String|nil, ?status: Symbol|String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Submission button types.
  #
  # @type [Array<Symbol>]
  #
  SUBMISSION_BUTTONS: symArray

  # ManifestItem entries to be submitted.
  #
  # @param [Boolean] limit            If *true* select only eligible items.
  #
  # @return [ActiveRecord::Relation<ManifestItem>]
  #
  def submit_items: (?limit: bool) -> ActiveRecord::Relation

  # Primary submission controls.
  #
  # @param [Array<ActiveSupport::SafeBuffer>] added
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               To #form_button_tray
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_button_tray: (*ActiveSupport::SafeBuffer added, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Submission process control button.
  #
  # @param [Symbol] type
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               To #form_button
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_control: (Symbol `type`, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Submission count types.
  #
  # @type [Hash{Symbol=>String}]
  #
  SUBMISSION_COUNTS: Hash[Symbol,String]

  # Submission counts display.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_counts: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Submission count.
  #
  # @param [Symbol]      type
  # @param [Integer]     count
  # @param [String, nil] label        Default: from #SUBMISSION_COUNTS.
  # @param [String]      css          Characteristic CSS class/selector.
  # @param [Hash]        opt          To #form_button
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_count: (Symbol `type`, ?(Integer|nil) count, ?label: String|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Submission auxiliary buttons.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  SUBMISSION_AUXILIARY: Hash[Symbol,symHash]

  # auxiliary_button_tray
  #
  # @param [Array<ActiveSupport::SafeBuffer>] added
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               To #form_button_tray
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def auxiliary_button_tray: (*ActiveSupport::SafeBuffer added, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # A button and text panel to display to resolve items whose :file_data
  # indicates a local file that needs to be acquired in order to proceed with
  # automated batch submission.
  #
  # @param [String]  css              Characteristic CSS class/selector.
  # @param [Hash]    opt              Passed to #submission_files.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_local: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # A button and text panel to display to resolve items whose :file_data
  # indicates a remote file that needs to be acquired in order to proceed with
  # automated batch submission.
  #
  # @param [String]  css              Characteristic CSS class/selector.
  # @param [Hash]    opt              Passed to #submission_files.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_remote: (?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # A button and text panel.
  #
  # @param [Boolean] hidden           If *false* show initially.
  # @param [String]  css              Characteristic CSS class/selector.
  # @param [Hash]    config           Configuration properties.
  # @param [Hash]    opt              Button options.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_files: (?hidden: bool, ?css: String|nil, ?config: symHash, **untyped opt) -> ActiveSupport::SafeBuffer

  # The row number of the grid header.
  #
  # @type [Integer]
  #
  HEADER_ROW: Integer

  # @private
  STATUS_COLUMN_COUNT: Integer

  # @private
  STATUS_LABELS: String

  # The live table of in-progress and completed submissions.
  #
  # @param [Integer, nil] row
  # @param [Integer, nil] index
  # @param [Symbol]       tag         Default: :table
  # @param [String]       css         Characteristic CSS class/selector.
  # @param [Hash]         opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def submission_status_grid: (?row: Integer|nil, ?index: Integer|nil, ?tag: Symbol|nil, ?css: String, **untyped opt) -> ActiveSupport::SafeBuffer

  # Client-side scripting which are supplied via 'assets:precompile'.
  #
  # @param [Hash{Symbol=>*}]
  #
  # @see file:app/assets/javascripts/shared/assets.js.erb  *Emma.Manifest*
  #
  def self.js_properties: () -> symHash
end
