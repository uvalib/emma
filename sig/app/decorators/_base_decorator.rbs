# Common base for decorator classes.
#
class BaseDecorator < Draper::Decorator
  include BaseDecorator::Common

  include BaseDecorator::Configuration

  include BaseDecorator::Controls

  include BaseDecorator::Fields

  include BaseDecorator::Form

  include BaseDecorator::Grid

  include BaseDecorator::Helpers

  include BaseDecorator::Hierarchy

  include BaseDecorator::Links

  include BaseDecorator::List

  include BaseDecorator::Lookup

  include BaseDecorator::Menu

  include BaseDecorator::Pagination

  include BaseDecorator::Row

  include BaseDecorator::Submission

  include BaseDecorator::Table

  # Generic path helper methods.
  #
  module SharedPathMethods
    include BaseDecorator::Helpers

    def index_path:         (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def show_select_path:   (*untyped _ignored,         **untyped opt)  -> String
    def show_path:          (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def new_path:           (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def create_path:        (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def edit_select_path:   (*untyped _ignored,         **untyped opt)  -> String
    def edit_path:          (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def update_path:        (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def delete_select_path: (*untyped _ignored,         **untyped opt)  -> String
    def delete_path:        (?(Model|anyHash|nil) item, **untyped opt)  -> String
    def destroy_path:       (?(Model|anyHash|nil) item, **untyped opt)  -> String

    # id_for
    #
    # @param [String,Model,Hash,Array,nil] item
    # @param [Hash]                        opt
    #
    # @return [String, Model, Hash, nil]
    #
    def id_for: (?(String|Model|anyHash|anyArray|nil) item, **untyped opt) -> (String | Model | anyHash | nil)

    # path_for
    #
    # @param [Model,Hash,Array,nil] item
    # @param [Hash]                 opt
    #
    # @return [String]
    #
    def path_for: (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String
  end

  # Methods available to every decorator class and decorator class instance.
  #
  module SharedGenericMethods
    include BaseDecorator::Common

    include BaseDecorator::Configuration

    include BaseDecorator::Controls

    include BaseDecorator::Fields

    include BaseDecorator::Form

    include BaseDecorator::Grid

    include BaseDecorator::Helpers

    include BaseDecorator::Hierarchy

    include BaseDecorator::Links

    include BaseDecorator::List

    include BaseDecorator::Lookup

    include BaseDecorator::Menu

    include BaseDecorator::Pagination

    include BaseDecorator::Row

    include BaseDecorator::Submission

    include BaseDecorator::Table

    def list_css_class:  () -> String
    def can?: ((Symbol|String|nil) action, ?untyped target, *untyped extra_args) -> bool
    def config_button_values: ((String|Symbol) action) -> Hash[Symbol,Hash[Symbol,String|symHash]]
    def link_to_action: ((String|nil) label, **untyped opt) -> ActiveSupport::SafeBuffer
  end

  # Methods for every decorator class instance.
  #
  module SharedInstanceMethods
    include SharedPathMethods

    include SharedGenericMethods

    def current_user: () -> (User | nil)

    def model_type: () -> Symbol
    def ar_class: () -> (Class | nil)
    def null_object: () -> Object
    def config_lookup: (*(String|strArray) path, **untyped opt) -> (untyped | nil)

    def nil?: () -> bool
    def blank?: () -> bool
    def present?: () -> bool

    # This makes the assumption that duplicating the decorator is intended to
    # produce a new "wrapper" around the associated object and not to also
    # create a new object as well (which can lead to unexpected results).
    #
    def dup: () -> BaseDecorator

    # This makes the assumption that duplicating the decorator is intended to
    # produce a new "wrapper" around the associated object and not to also
    # create a new object as well (which can lead to unexpected results).
    #
    def deep_dup: () -> BaseDecorator

    def inspect: (?max: Integer) -> String

    def initialize_context: (**untyped opt) -> symHash
    def context_value: (*Symbol keys) -> untyped
    def options: () -> Options

    def request_values: (*Symbol keys) -> symHash
    def request_value: (Symbol key) -> (untyped | nil)
    def param_values: () -> symHash
    def session_values: () -> strHash
    def referrer: (?(symHash|nil) opt) -> (untyped | nil)
    def local_request?: (?(symHash|nil) opt) -> bool
    def same_request?: (?(symHash|nil) opt) -> bool
    def back_path: (?(symHash|nil) opt, ?fallback: String|nil) -> (String | nil)
    def root_url: () -> String

    def object_class:    () -> Class
    def decorate:        (Model item, **untyped opt) -> BaseDecorator

    # help_topic
    #
    # @param [Symbol, nil] sub_topic  Def: :sub_topic or :action from `context`
    # @param [Symbol, nil] topic      Default: `model_type`.
    #
    # @return [Array<Symbol>]
    #
    def help_topic:      (?(Symbol|nil) sub_topic, ?(Symbol|nil) topic) -> symArray

    # Title string for use with the '<head><title>' element.
    #
    # @param [String, nil]     value    Value to use if given.
    # @param [Boolean, String] default  Passed to #page_value.
    # @param [Hash]            opt      Passed to #page_value.
    #
    # @return [String]
    #
    def page_meta_title: (?(String|nil) value, ?default: bool|String, **untyped opt) -> String

    @page_meta_title: String | nil

    # Title string for use with the main heading on the displayed page.
    #
    # @param [String, nil]     value    Value to use if given.
    # @param [Boolean, String] default  Passed to #page_value.
    # @param [Hash]            opt      Passed to #page_value.
    #
    # @return [String]
    #
    def page_title: (?(String|nil) value, ?default: bool|String, **untyped opt) -> String

    @page_title: String | nil

    # Configuration value for this controller/action.
    #
    # @param [Symbol, String, nil] value    Value or configuration item.
    # @param [Boolean, String]     default  Fallback if config item missing.
    # @param [Hash]                opt      Optional interpolation values.
    #
    # @return [String, nil]
    #
    def page_value
      : (String|Symbol|nil value, ?default: true|String, **untyped opt) -> String
      | (String|Symbol|nil value,  default: false|nil,   **untyped opt) -> (String | nil)
  end

  # Methods for every decorator class.
  #
  # @!attribute [r] object_class
  #   Draper::Decorator#object_class
  #   @return [Class]
  #
  module SharedClassMethods
    include SharedPathMethods

    include SharedGenericMethods

    @other_class: Array[Class]

    # The model associated with instances of this decorator.
    #
    # @return [Symbol]
    #
    # @see #decorator_for
    #
    def model_type:  () -> Symbol

    @model_type: Symbol

    # The ActiveRecord subclass associated with instances of this decorator.
    #
    # @return [Class, nil]
    #
    def ar_class: () -> (Class | nil)

    @ar_class: Class | nil

    # null_object
    #
    # @return [Object]
    #
    def null_object: () -> Object

    @null_object: Object

    # Override Draper::Decorator#decorate to ensure that the right decorator
    # instance is generated for *item*.
    #
    # @param [Model, nil] item
    # @param [Hash]       opt         Passed to the decorator initializer.
    #
    # @return [BaseDecorator]
    #
    def decorate: ((Model|nil) item, **untyped opt) -> BaseDecorator

    # Generate a decorator instance.
    #
    # @param [Class, Object, nil] item
    # @param [Boolean]            force
    # @param [Hash]               opt   Passed to the decorator initializer.
    #
    # @raise [RuntimeError]           If no decorator could be determined.
    #
    # @return [BaseDecorator]
    #
    def generate: ((Class|Object|nil) item, ?force: bool, **untyped opt) -> BaseDecorator

    # Show how a decorator handles the methods of the object that it wraps.
    #
    # @return [void]
    #
    def debug_inheritance: () -> void

    def self.included: (Module base) -> void
  end

  # Used by BaseCollectionDecorator#collection_of to supply shared definitions
  # with the associated collection decorator.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end

  include SharedDefinitions

  # @private
  DEFAULT_ACTION: Symbol

  # initialize
  #
  # @param [*]    obj
  # @param [Hash] opt
  #
  def initialize: (?untyped obj, **untyped opt) -> void

  # In this scheme #decorates is required for any subclass that is not
  # abstract.
  #
  # @param [Class] object_class
  #
  # @return [void]
  #
  def self.decorates: (Class object_class) -> void

  # Set to *true* to see how each decorator handles the methods of the object
  # type that it decorates.
  #
  # @type [Boolean]
  #
  # @see BaseCollectionDecorator#DEBUG_COLLECTION_INHERITANCE
  #
  DEBUG_DECORATOR_INHERITANCE: bool

  # Takes the place of Draper::Decorator#decorates and is required for any
  # decorator subclass that is not abstract.
  #
  # @param [Array<Class, Symbol, Hash>] args
  #
  # @return [void]
  #
  def self.decorator_for
    : (Hash[Symbol,Class]) -> void
    | (Symbol, ?Class)     -> void
    | (Class)              -> void


  @ar_class:    Class | nil
  @other_class: Array[Class]

  # set_model_type
  #
  # @param [Class, Symbol, String, nil] mt
  #
  # @return [Symbol, nil]
  #
  def self.set_model_type: ((Class|Symbol|String|nil) mt) -> (Symbol | nil)

  @model_type: Symbol

  # set_object_class
  #
  # @param [Class, Symbol, String, nil]        obj
  # @param [Array<Class, Symbol, String, nil>] other
  #
  # @return [Class, nil]
  #
  def self.set_object_class: ((Class|Symbol|String|nil) obj, *(Class|Symbol|String|nil) other) -> (Class | nil)

  @object_class: Class

  # to_class
  #
  # @param [*]              c
  # @param [String, Symbol] meth
  #
  # @return [Class, nil]
  #
  def self.to_class: (untyped c, (Symbol|String) meth) -> (Class | nil)

  def self.map_warn: (Class map, untyped key, (Symbol|String) meth) -> nil

  # Methods for mapping unique key values to decorator classes.
  #
  module Mapper

    def table: () -> Hash[untyped,Class]

    @table: Hash[untyped,Class]

    def get: (untyped key) -> (Class | nil)

    def set: (untyped key, Class dec, ?force: bool) -> (untyped | nil)

    alias [] get

    def normalize: (untyped key) -> untyped
  end

  # Methods for mapping model types to decorator classes.
  #
  module TypeMapper
    include Mapper

    def normalize: (untyped key) -> (Symbol | nil)
  end

  # Methods for mapping classes to decorator classes.
  #
  module ClassMapper
    include Mapper

    def normalize: (untyped key) -> (Class | nil)
  end

  public

  # A singleton table of model types and their associated decorator classes.
  #
  class ModelTypeMap
    include TypeMapper
  end

  # A singleton table of object classes and their associated decorator classes.
  #
  class ObjectClassMap
    include ClassMapper
  end

  # A singleton table of ActiveRecord classes and their associated decorators.
  #
  class ARClassMap
    include ClassMapper
  end

  # A singleton table of secondary mappings to decorator classes.
  #
  class OtherClassMap
    include ClassMapper
  end

  # The pattern used within #js_properties Path values to indicate that the
  # ID of the item should be interpolated at that point.
  #
  # @type [String]
  #
  # @see file:app/assets/javascripts/shared/strings.js *interpolate()*
  #
  JS_ID: String

  # Client-side scripting which are supplied via 'assets:precompile'.
  #
  # @param [Hash{Symbol=>*}]
  #
  # @see file:app/assets/javascripts/shared/assets.js.erb
  #
  def self.js_properties: () -> symHash

  # fetch_property
  #
  # @param [*] item
  #
  # @return [*]
  #
  def self.fetch_property: (untyped item) -> untyped

  # Invoke #fetch_property on each Hash value.
  #
  # @param [Hash] hash
  #
  # @return [Hash]
  #
  def self.fetch_properties: (symHash hash) -> symHash
end
