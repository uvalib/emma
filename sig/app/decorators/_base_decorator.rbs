# Common base for decorator classes.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Model]
#
class BaseDecorator < Draper::Decorator

  # Definitions to support inclusion of helpers.
  #
  # == Implementation Notes
  # This approach avoids `include Draper::LazyHelpers` because this can make it
  # difficult to pin down where problems with the use of Draper::ViewContext
  # originate when including /app/helpers/**.
  #
  module Helpers
    include Draper::ViewHelpers

    # Direct access to the controller.
    #
    # @return [ApplicationController]
    #
    # == Implementation Notes
    # This probably isn't "cricket", but app/helpers/**.rb generally expect
    # access to controller values, and while the decorator subclasses are
    # relying on including these helpers, there is a need to access these
    # values directly.
    #
    # While you *can* access these from Draper::ViewContext#current (via
    # Draper::ViewHelpers#helpers [i.e., prefixing with "h."] or via
    # Draper::LazyHelpers#method_missing), the values don't seem to be coming
    # back correctly.
    #
    def controller_context: () -> ApplicationController

    # Defined here for the sake of RepositoryHelper.
    #
    def retrieval_path: (*untyped args) -> String

    include ConfigurationHelper
    include FormHelper
    include HtmlHelper
    include ImageHelper
    include LinkHelper
    include PanelHelper
    include PopupHelper
    include RepositoryHelper
    include RoleHelper
    include ScrollHelper
    include SearchModesHelper
    include SessionDebugHelper
    include TreeHelper
  end

  # Generic path helper methods.
  #
  module Paths
    include Helpers

    def index_path:         (**untyped opt)                 -> String
    def show_path:          (?untyped item, **untyped opt)  -> String
    def new_path:           (**untyped opt)                 -> String
    def create_path:        (**untyped opt)                 -> String
    def edit_select_path:   (**untyped opt)                 -> String
    def edit_path:          (?untyped item, **untyped opt)  -> String
    def update_path:        (?untyped item, **untyped opt)  -> String
    def delete_select_path: (**untyped opt)                 -> String
    def delete_path:        (?untyped item, **untyped opt)  -> String
    def destroy_path:       (?untyped item, **untyped opt)  -> String

    # id_for
    #
    # @param [String,Model,Hash,Array,nil] item
    # @param [Hash]                        opt
    #
    # @return [String, Model, Hash, nil]
    #
    def id_for: (?(String|Model|anyHash|anyArray|nil) item, **untyped opt) -> (String | Model | anyHash | nil)

    # path_for
    #
    # @param [Model,Hash,Array,nil] item
    # @param [Hash]                 opt
    #
    # @return [String]
    #
    def path_for: (?(Model|anyHash|anyArray|nil) item, **untyped opt) -> String
  end

  # Model/controller related configuration information relative to model_type.
  #
  module Configuration
    include Helpers

    def model_type: () -> Symbol
    def ar_class: () -> (Class | nil)
    def null_object: () -> Object
    def model_config_base: () -> Symbol
    def controller_config_base: () -> Symbol
    def controller_config: (?(Symbol|nil) `type`) -> Hash[Symbol,symHash]
    def model_config: () -> Hash[Symbol,symHash]
    def model_index_fields: () -> Hash[Symbol,symHash]
    def model_show_fields: () -> Hash[Symbol,symHash]
    def model_database_fields: () -> Hash[Symbol,symHash]
    def model_form_fields: () -> Hash[Symbol,symHash]
    def field_for: (Symbol field, ?value: untyped|nil, ?config: symHash|nil) -> (Field::Type | nil)
    def field_configuration: ((Symbol|String|nil) field, ?(Symbol|String|nil) action) -> Hash[Symbol,symHash]
    def field_configuration_for_label: ((String|Symbol|nil) label, ?(Symbol|String|nil) action) -> Hash[Symbol,symHash]
    def action_config: () -> symHash
    def show_tooltip: () -> (Symbol | nil)
    def config_lookup: (*(String|strArray) path, **untyped opt) -> untyped
  end

  # Methods available to each decorator class and class instance.
  #
  module Methods
    include Configuration

    def css_list_class:  () -> String
    def can?: (Symbol action, ?(untyped|nil) target) -> bool
    def config_button_values: ((String|Symbol) action) -> Hash[Symbol,Hash[Symbol,String|symHash]]
    def link_to_action: ((String|nil) label, **untyped opt) -> ActiveSupport::SafeBuffer
  end

  # Methods for each decorator class instance.
  #
  # @!attribute [r] object
  #   Set in Draper#initialize
  #   @return [Model]
  #
  # @!attribute [r] context
  #   Set in Draper#initialize
  #   @return [Hash{Symbol=>*}]
  #
  module InstanceMethods
    include Paths

    include Methods

    def current_user: () -> (User | nil)

    def model_type: () -> Symbol
    def ar_class: () -> (Class | nil)
    def null_object: () -> Object
    def config_lookup: (*(String|strArray) path, **untyped opt) -> (untyped | nil)

    def nil?: () -> bool
    def blank?: () -> bool
    def present?: () -> bool
    def dup: () -> BaseDecorator
    def deep_dup: () -> BaseDecorator
    def inspect: (?max: Integer) -> String

    def initialize_context: (**untyped opt) -> symHash
    def context_value: (*Symbol keys) -> untyped
    def options: () -> Options

    def request_values: (*Symbol keys) -> symHash
    def request_value: (Symbol key) -> (untyped | nil)
    def param_values: () -> symHash
    def session_values: () -> strHash
    def referrer: (?(symHash|nil) opt) -> (untyped | nil)
    def local_request?: (?(symHash|nil) opt) -> bool
    def same_request?: (?(symHash|nil) opt) -> bool
    def back_path: (?(symHash|nil) opt) -> (String | nil)
    def root_url: () -> String

    def object_class:    () -> Class
    def decorate:        (Model item, **untyped opt) -> BaseDecorator

    def help_topic:      () -> symArray
    def page_meta_title: (?default: bool|String, **untyped opt) -> String
    def page_heading:    (?default: bool|String, **untyped opt) -> String

    def page_value:      (Symbol item, ?default: bool|String, **untyped opt) -> String
  end

  # Methods for each decorator class.
  #
  # @!attribute [r] object_class
  #   Draper::Decorator#object_class
  #   @return [Class]
  #
  module ClassMethods
    include Paths

    include Methods

    @model_type:  Symbol
    @ar_class:    Class | nil
    @null_object: Object
    @other_class: Array[Class]

    def model_type:  () -> Symbol
    def ar_class:    () -> (Class | nil)
    def null_object: () -> Object

    def decorate: ((Model|nil) item, **untyped opt) -> BaseDecorator
    def generate: ((Class|Object|nil) item, ?force: bool, **untyped opt) -> BaseDecorator

    def debug_inheritance: () -> void

    def self.included: (Module base) -> void
  end

  module Common
    def self.included: (Module base) -> void
  end

  include Common

  # @private
  DEFAULT_ACTION: Symbol

  # initialize
  #
  # @param [Any, nil] obj
  # @param [Hash]     opt
  #
  def initialize: (?(untyped|nil) obj, **untyped opt) -> void

  # In this scheme #decorates is required for any subclass that is not
  # abstract.
  #
  # @param [Class] object_class
  #
  # @return [void]
  #
  def self.decorates: (Class object_class) -> void

  # Set to *true* to see how each decorator handles the methods of the object
  # type that it decorates.
  #
  # @type [Boolean]
  #
  # @see BaseCollectionDecorator#DEBUG_COLLECTION_INHERITANCE
  #
  DEBUG_DECORATOR_INHERITANCE: bool

  # Takes the place of Draper::Decorator#decorates and is required for any
  # decorator subclass that is not abstract.
  #
  # @param [Array<Class, Symbol, Hash>] args
  #
  # @return [void]
  #
  def self.decorator_for: (Hash[Symbol,Class]) -> void
                        | (Symbol, ?Class)     -> void
                        | (Class)              -> void


  @model_type:   Symbol
  @object_class: Class
  @ar_class:     Class | nil
  @other_class:  Array[Class]

  # set_model_type
  #
  # @param [Class, Symbol, String, nil] mt
  #
  # @return [Symbol, nil]
  #
  def self.set_model_type: ((Class|Symbol|String|nil) mt) -> (Symbol | nil)

  # set_object_class
  #
  # @param [Class, Symbol, String, nil]        obj
  # @param [Array<Class, Symbol, String, nil>] other
  #
  # @return [Class, nil]
  #
  def self.set_object_class: ((Class|Symbol|String|nil) obj, *(Class|Symbol|String|nil) other) -> (Class | nil)

  # to_class
  #
  # @param [*]              c
  # @param [String, Symbol] meth
  #
  # @return [Class, nil]
  #
  def self.to_class: (untyped c, (Symbol|String) meth) -> (Class | nil)

  def self.map_warn: (Class map, untyped key, (Symbol|String) meth) -> nil

  # Methods for mapping unique key values to decorator classes.
  #
  module Mapper

    @table: Hash[untyped,Class]

    def table: () -> Hash[untyped,Class]
    def get: (untyped key) -> (Class | nil)
    def set: (untyped key, Class dec, ?force: bool) -> (untyped | nil)

    alias [] get

    def normalize: (untyped key) -> (untyped | nil)
  end

  # Methods for mapping model types to decorator classes.
  #
  module TypeMapper
    include Mapper

    def normalize: (untyped key) -> (Symbol | nil)
  end

  # Methods for mapping classes to decorator classes.
  #
  module ClassMapper
    include Mapper

    def normalize: (untyped key) -> (Class | nil)
  end

  public

  # A singleton table of model types and their associated decorator classes.
  #
  class ModelTypeMap
    include TypeMapper
  end

  # A singleton table of object classes and their associated decorator classes.
  #
  class ObjectClassMap
    include ClassMapper
  end

  # A singleton table of ActiveRecord classes and their associated decorators.
  #
  class ARClassMap
    include ClassMapper
  end

  # A singleton table of secondary mappings to decorator classes.
  #
  class OtherClassMap
    include ClassMapper
  end

  # The pattern used within #js_properties Path values to indicate that the
  # ID of the item should be interpolated at that point.
  #
  # @type [String]
  #
  # @see file:app/assets/javascripts/shared/strings.js *interpolate()*
  #
  JS_ID: String

  # Client-side scripting which are supplied via 'assets:precompile'.
  #
  # @param [Hash{Symbol=>Any}]
  #
  # @see file:app/assets/javascripts/shared/assets.js.erb
  #
  def self.js_properties: () -> symHash

  # fetch_property
  #
  # @param [Any, nil] item
  #
  # @return [Any, nil]
  #
  def self.fetch_property: (untyped item) -> untyped

  # Invoke #fetch_property on each Hash value.
  #
  # @param [Hash] hash
  #
  # @return [Hash]
  #
  def self.fetch_properties: (symHash hash) -> symHash
end
