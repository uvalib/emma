# Item presenter for "/reading_list" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Bs::Record::ReadingListUserView]
#
class ReadingListDecorator < BookshareDecorator
  module Paths
    include BookshareDecorator::Paths
  end

  module Methods
    include BookshareDecorator::Methods
  end

  module InstanceMethods
    include BookshareDecorator::InstanceMethods
    include Paths
    include Methods
  end

  module ClassMethods
    include BookshareDecorator::ClassMethods
    include Paths
    include Methods
  end

  module Common
    def self.included: (Module base) -> void
  end

  include Common

  # titles_data
  #
  # @return [Bs::Message::ReadingListTitlesList, nil]
  #
  def titles_data: () -> (Bs::Message::ReadingListTitlesList | nil)

  attr_reader titles: Array[Bs::Record::ReadingListTitle]

  # titles
  #
  # @return [Array<Bs::Record::ReadingListTitle>]
  #
  def titles: () -> Array[Bs::Record::ReadingListTitle]

  # Create a link to the details show page for the given item.
  #
  # @param [Hash] opt                 Passed to super except for:
  #
  # @option opt [String] :readingListId
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Transform a field value for HTML rendering.
  #
  # @param [Any]       value
  # @param [Symbol, *] field
  # @param [Hash]      opt            Passed to the render method or super.
  #
  # @return [Any]                     HTML or scalar value.
  # @return [nil]                     If *value* or *object* is *nil*.
  #
  def render_value: (untyped value, field: Symbol|String|Array[Symbol|String]|nil, **untyped opt) -> (Field::Type | String | nil)

  # Show reading list subscriptions.
  #
  # NOTE: The Bookshare API doesn't seem to provide useful information here.
  #
  # @param [Hash] opt                 Passed to #record_links.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]
  #
  def subscriptions: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Render a metadata listing of a reading list.
  #
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to super
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def details: (?pairs: symHash?, **untyped opt) -> ActiveSupport::SafeBuffer

  def details_element: (?level: Integer|nil, ?role: String|Symbol|nil, **untyped opt) { () -> untyped } -> ActiveSupport::SafeBuffer

  def title_list: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Render a single entry for use within a list of items.
  #
  # @param [Hash, nil] pairs          Additional field mappings.
  # @param [Hash]      opt            Passed to super
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def list_item: (?pairs: symHash?, **untyped opt) -> ActiveSupport::SafeBuffer

  FIND_THUMBNAIL: bool

  # get_thumbnail_image
  #
  # NOTE: ReadingListTitle does not (currently) include a thumbnail link.
  #
  # As long as this is still the case, this method will discover the link by
  # explicitly by fetching the catalog item.
  #
  # If #FIND_THUMBNAIL is *false*, this method always returns *nil*.
  #
  # @return [String, nil]
  #
  def get_thumbnail_image: () -> (String | nil)

  # Attempt to fetch the thumbnail image associated with the item.
  #
  # @param [Bs::Api::Record] item
  #
  # @return [String, nil]
  #
  def find_thumbnail: (?Bs::Api::Record? item) -> (String | nil)

  def form_action_link: (**untyped opt) -> ActiveSupport::SafeBuffer

  def form_target_description: (?action: Symbol|nil) -> String
end
