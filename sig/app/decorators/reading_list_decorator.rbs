# Item presenter for "/reading_list" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Bs::Record::ReadingListUserView]
#
class ReadingListDecorator < BookshareDecorator
  module SharedPathMethods
    include BookshareDecorator::SharedPathMethods
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module SharedGenericMethods
    include BookshareDecorator::SharedGenericMethods

    # Render a metadata listing of a reading list.
    #
    # @param [Hash, nil] pairs        Additional field mappings.
    # @param [Hash]      opt          Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def details: (?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Render a single entry for use within a list of items.
    #
    # @param [Hash, nil] pairs        Additional field mappings.
    # @param [Hash]      opt          Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def list_item: (?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module SharedInstanceMethods
    include BookshareDecorator::SharedInstanceMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module SharedClassMethods
    include BookshareDecorator::SharedClassMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end

end

class ReadingListDecorator
  include SharedDefinitions

  include SharedInstanceMethods

  extend SharedClassMethods

  # titles_data
  #
  # @return [Bs::Message::ReadingListTitlesList, nil]
  #
  def titles_data: () -> (Bs::Message::ReadingListTitlesList | nil)

  # titles
  #
  # @return [Array<Bs::Record::ReadingListTitle>]
  #
  def titles: () -> Array[Bs::Record::ReadingListTitle]

  @titles: Array[Bs::Record::ReadingListTitle]

  # Create a link to the details show page for the given item.
  #
  # @param [Hash] opt                 Passed to super except for:
  #
  # @option opt [String] :readingListId
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Transform a field value for HTML rendering.
  #
  # @param [*]         value
  # @param [Symbol, *] field
  # @param [Hash]      opt            Passed to the render method or super.
  #
  # @return [Any]                     HTML or scalar value.
  # @return [nil]                     If *value* or *object* is *nil*.
  #
  def render_value: (untyped value, field: Symbol|String|Array[Symbol|String]|nil, **untyped opt) -> (Field::Type | String | nil)

  # Show reading list subscriptions.
  #
  # NOTE: The Bookshare API doesn't seem to provide useful information here.
  #
  # @param [Hash] opt                 Passed to #record_links.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]
  #
  def subscriptions: (**untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # details_container
  #
  # @param [Array]         added      Optional elements after the details.
  # @param [Array<Symbol>] skip       Display aspects to avoid.
  # @param [Hash]          opt        Passed to super
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def details_container: (*ActiveSupport::SafeBuffer added, ?skip: Symbol|symArray|nil, **untyped opt) ?{ () -> (ActiveSupport::SafeBuffer | nil) } -> ActiveSupport::SafeBuffer

  # A sub-section displaying the titles in the reading list.
  #
  # @param [Integer, nil]  level
  # @param [Integer, nil]  count      Default: `titles.size`.
  # @param [Array<Symbol>] skip       Display aspects to avoid.
  # @param [String]        css        Characteristic CSS class/selector.
  # @param [Hash]          opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def title_list: (?level: Integer|nil, ?count: Integer|nil, ?skip: Symbol|symArray|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Control whether thumbnails are shown for reading list entries.
  #
  # @type [Boolean]
  #
  FIND_THUMBNAIL: bool

  # get_thumbnail_image
  #
  # NOTE: ReadingListTitle does not (currently) include a thumbnail link.
  #
  # As long as this is still the case, this method will discover the link by
  # explicitly by fetching the catalog item.
  #
  # If #FIND_THUMBNAIL is *false*, this method always returns *nil*.
  #
  # @return [String, nil]
  #
  def get_thumbnail_image: () -> (String | nil)

  # Attempt to fetch the thumbnail image associated with the item.
  #
  # @param [Bs::Api::Record] item
  #
  # @return [String, nil]
  #
  def find_thumbnail: (?(Bs::Api::Record|nil) item) -> (String | nil)

  # form_action_link
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_action_link: (**untyped opt) -> ActiveSupport::SafeBuffer

  # form_target_description
  #
  # @param [Symbol] action
  #
  # @return [String]
  #
  def form_target_description: (?action: Symbol|nil, **untyped _ignored) -> String
end
