# Item presenter for "/entry" pages.
#
# @!attribute [r] object
#   Set in Draper#initialize
#   @return [Entry]
#
class EntryDecorator < BaseDecorator
  module SharedPathMethods
    include BaseDecorator::SharedPathMethods

    def renew_path:         (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def reedit_path:        (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def cancel_path:        (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def check_path:         (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def upload_path:        (*untyped _ignored,         **untyped opt)  -> String
    def bulk_index_path:    (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def bulk_new_path:      (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def bulk_create_path:   (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def bulk_edit_path:     (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def bulk_update_path:   (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def bulk_delete_path:   (?(Entry|anyHash|nil) item, **untyped opt)  -> String
    def bulk_destroy_path:  (?(Entry|anyHash|nil) item, **untyped opt)  -> String
  end

  # Definitions available to both classes and instances of either this
  # decorator or its related collection decorator.
  #
  module SharedGenericMethods
    include BaseDecorator::SharedGenericMethods

    # Uploader properties.
    #
    # @type [Hash{Symbol=>String}]
    #
    UPLOADER: Hash[Symbol,String]

    # Groupings of states related by theme.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    # @see file:config/locales/controllers/entry.en.yml *en.emma.entry.state_group*
    #
    STATE_GROUP: symHash

    # CSS class for the state selection panel.
    #
    # @type [String]
    #
    GROUP_PANEL_CLASS: String

    # CSS class for the state group controls container.
    #
    # @type [String]
    #
    GROUP_CLASS: String

    # CSS class for a control within the state selection panel.
    #
    # @type [String]
    #
    GROUP_CONTROL_CLASS: String

    # Control whether display list filtering is allowed.
    #
    # @type [Boolean]
    #
    LIST_FILTERING: bool

    # CSS class for the state group list filter panel.
    #
    # @type [String]
    #
    LIST_FILTER_CLASS: String

    # CSS class for the state group controls container.
    #
    # @type [String]
    #
    FILTER_GROUP_CLASS: String

    # CSS class for a control within the state group controls container.
    #
    # @type [String]
    #
    FILTER_CONTROL_CLASS: String

    # CSS class for the debug-only panel of checkboxes to control filter
    # visibility.
    #
    # @type [String]
    #
    FILTER_OPTIONS_CLASS: String

    # Get all configured record fields for the model.
    #
    # @return [Hash{Symbol=>Hash}]
    #
    def model_form_fields: () -> Hash[Symbol,symHash]

    # Indicate whether the state group described by *properties* should be an
    # active state group selection.
    #
    # @param [Symbol, nil]       group
    # @param [Hash, nil]         properties
    # @param [Array<Entry>, nil] list
    #
    def active_state_group?: ((Symbol|nil) group, (symHash|nil) properties, (Array[Entry]|nil) list) -> bool

    # Control icon definitions.
    #
    # @type [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    # @see BaseDecorator::Controls#ICON_PROPERTIES
    #
    ICONS: Hash[Symbol,Hash[Symbol,(String|Symbol|Proc|bool|nil)]]

    # Control icon definitions.
    #
    # @return [Hash{Symbol=>Hash{Symbol=>*}}]
    #
    def control_icons: () -> Hash[Symbol,symHash]

    # Render item attributes.
    #
    # @param [Hash, nil] pairs        Additional field mappings.
    # @param [Hash]      opt          Passed to super except:
    #
    # @option opt [String, Symbol, Array<String,Symbol>] :columns
    # @option opt [String, Regexp, Array<String,Regexp>] :filter
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @see #model_field_values
    #
    def details: (?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Render a single entry for use within a list of items.
    #
    # @param [Hash, nil] pairs        Additional field mappings.
    # @param [Hash]      opt          Passed to super.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def list_item: (?pairs: symHash|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Include control icons below the entry number.
    #
    # @param [Hash] opt
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def list_item_number: (**untyped opt) -> ActiveSupport::SafeBuffer

    # Generate a prompt for #items_menu.
    #
    # @param [User, Symbol, nil] user
    #
    # @return [String]
    #
    def items_menu_prompt: (?user: User|Symbol|nil) -> String

    # The CSS class selector associated with bibliographic lookup buttons.
    #
    # @type [String]
    #
    # @see file:javascripts/shared/modal-dialog.js ModalDialog.SELECTOR_ATTR
    #
    LOOKUP_CLASS: String

    # The JavaScript ModalDialog subclass for bibliographic lookup popups.
    #
    # @type [String]
    #
    # @see file:javascripts/shared/modal-dialog.js ModalDialog.CLASS_ATTR
    # @see file:javascripts/shared/lookup-modal.js LookupModal
    #
    LOOKUP_JS_CLASS: String

    # Bibliographic lookup control which engages #lookup_modal.
    #
    # In addition to creating the control, this method also adds the modal to
    # the page modals (unless it already has been added).
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt             Passed to #lookup_modal except for:
    #
    # @option opt [Hash] :button      Options for #lookup_button_options.
    #
    # @see LayoutHelper::PageModals#add_page_modal
    #
    def lookup_control: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # A modal popup for bibliographic lookup.
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt             Passed to #modal_popup except for:
    #
    # @option opt [Hash] :container   Options for #lookup_container.
    #
    def lookup_modal: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # @private
    FILE_NAME_CLASS: String

    # Element for displaying the name of the file that was uploaded.
    #
    # @param [String] leader          Text preceding the filename.
    # @param [Hash]   opt             Passed to #html_div for outer *div*.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def uploaded_filename_display: (?leader: String|nil, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Bibliographic lookup popup.
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt             Passed to #inline_popup except for:
    #
    # @option opt [Hash] :button      Options for #lookup_button_options.
    # @option opt [Hash] :container   Options for #lookup_container.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @see file:app/assets/javascripts/feature/model-form.js *lookupButton()*
    #
    def lookup_popup: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # lookup_commit_button
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt
    #
    # @option opt [Hash] :label       Override the default button label.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    def lookup_commit_button: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # lookup_cancel_options
    #
    # @param [Hash] opt
    #
    # @return [Hash]
    #
    def lookup_cancel_options: (**untyped opt) -> symHash

    # The options to create a toggle button to activate the bibliographic
    # lookup popup.
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt
    #
    # @option opt [Hash] :label       Override the default button label.
    #
    # @return [Hash]
    #
    # @see PopupHelper#inline_popup
    #
    def lookup_button_options: (?css: String|nil, **untyped opt) -> symHash

    # The content element of the bibliographic lookup popup.
    #
    # @param [String] css             Characteristic CSS class/selector.
    # @param [Hash]   opt             Passed to the outermost #html_div.
    #
    # @return [ActiveSupport::SafeBuffer]
    #
    # @note This does not address dynamic results entries.
    #
    # @see file:app/assets/javascripts/shared/lookup-modal.js *LookupModal*
    #
    def lookup_container: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

    # Form action button configuration.
    #
    # @type [Hash{Symbol=>Hash}]
    #
    def generate_form_actions: () -> Hash[Symbol,symHash]
  end

  # Definitions available to instances of either this decorator or its related
  # collection decorator.
  #
  # (Definitions that are only applicable to instances of this decorator but
  # *not* to collection decorator instances are not included here.)
  #
  module SharedInstanceMethods
    include BaseDecorator::SharedInstanceMethods

    include SharedPathMethods

    include SharedGenericMethods

    # options
    #
    # @return [Entry::Options]
    #
    def options: () -> Entry::Options
  end

  # Definitions available to both this decorator class and the related
  # collector decorator class.
  #
  # (Definitions that are only applicable to this class but *not* to the
  # collection class are not included here.)
  #
  module SharedClassMethods
    include BaseDecorator::SharedClassMethods

    include SharedPathMethods

    include SharedGenericMethods
  end

  # Cause definitions to be included here and in the associated collection
  # decorator via BaseCollectionDecorator#collection_of.
  #
  module SharedDefinitions
    def self.included: (Module base) -> void
  end

end

class EntryDecorator
  include SharedDefinitions

  include SharedInstanceMethods

  extend SharedClassMethods

  # Display preview of Shrine uploads.  NOTE: Not currently enabled.
  #
  # @type [Boolean]
  #
  PREVIEW_ENABLED: bool

  # Indicate whether preview is enabled.
  #
  # == Usage Notes
  # Uppy preview is only for image files.
  #
  def preview_enabled?: () -> bool

  # Supply an element to contain a preview thumbnail of an image file.
  #
  # @param [Boolean] force
  #
  # @return [ActiveSupport::SafeBuffer]   An HTML element.
  # @return [nil]                         If preview is not enabled.
  #
  def preview: (?bool force) -> (ActiveSupport::SafeBuffer | nil)

  # Transform a field value for HTML rendering.
  #
  # @param [*]         value
  # @param [Symbol, *] field
  # @param [Hash]      opt            Passed to the render method or super.
  #
  # @return [Field::Type]
  # @return [String]
  # @return [nil]
  #
  def render_value: (untyped value, field: Symbol|String|Array[Symbol|String]|nil, **untyped opt) -> (Field::Type | String | nil)

  # details_container
  #
  # @param [Array]         added      Optional elements after the details.
  # @param [Array<Symbol>] skip       Display aspects to avoid.
  # @param [Hash]          opt        Passed to super
  # @param [Proc]          block      Passed to super
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def details_container: (*ActiveSupport::SafeBuffer added, ?skip: Symbol|symArray|nil, **untyped opt) ?{ () -> (ActiveSupport::SafeBuffer | nil) } -> ActiveSupport::SafeBuffer

  # Called by SearchDecorator#edit_controls.
  #
  # @param [Model, Hash, String, Symbol] item
  # @param [Hash]                        opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def self.controls_for: ((Model|symHash|String|Symbol) item, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)

  # Produce an action icon based on either :path or :id.
  #
  # @param [Symbol] action
  # @param [Hash]   opt
  #
  # @return [ActiveSupport::SafeBuffer, nil]
  #
  def control_icon_button: (Symbol action, **untyped opt) ?{ (String|Symbol|Proc, symHash) -> (ActiveSupport::SafeBuffer | nil) } -> (ActiveSupport::SafeBuffer | nil)

  # Create a container with the repository ID displayed as a link but acting as
  # a popup toggle button and a popup panel which is initially hidden.
  #
  # @param [String, Symbol]  path
  # @param [String, Integer] id       Object identifier.
  # @param [String]          css      Characteristic CSS class/selector.
  # @param [Hash]            opt      To PopupHelper#inline_popup except:
  #
  # @option opt [Hash] :attr          Options for deferred content.
  # @option opt [Hash] :placeholder   Options for transient placeholder.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see file:javascripts/shared/modal-base.js *ModalBase.toggleModal()*
  #
  def check_status_popup: ((String|Symbol) path, id: String|Integer, ?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Generate a form with controls for uploading a file, entering metadata, and
  # submitting.
  #
  # @param [Hash] opt                 Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def model_form: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Screen-reader-only label for file input.  (This is to satisfy accessibility
  # checkers which don't ignore the file input which is made invisible in favor
  # of the Uppy file input control).
  #
  # @type [String]
  #
  FILE_LABEL: String

  # Control elements always visible at the top of the input form.
  #
  # @param [ActionView::Helpers::FormBuilder, nil] f
  # @param [Array<ActiveSupport::SafeBuffer>]      buttons
  # @param [Hash]                                  opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_top_controls: (ActionView::Helpers::FormBuilder|nil f, *ActiveSupport::SafeBuffer buttons, **untyped opt) -> ActiveSupport::SafeBuffer

  # form_top_button_tray
  #
  # @param [ActionView::Helpers::FormBuilder] f
  # @param [Array<ActiveSupport::SafeBuffer>] buttons
  # @param [Hash]                             opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def form_top_button_tray: (ActionView::Helpers::FormBuilder f, *ActiveSupport::SafeBuffer buttons, **untyped opt) -> ActiveSupport::SafeBuffer

  # Upload cancel button.
  #
  # @param [Hash] opt                 Passed to super.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def cancel_button: (**untyped opt) -> ActiveSupport::SafeBuffer

  # Data for hidden form fields.
  #
  # @param [Hash] opt
  #
  # @return [Hash{Symbol=>*}]
  #
  def form_hidden: (**untyped opt) -> symHash

  # Element for prompting for the EMMA index entry of the member repository
  # item which was the basis for the remediated item which is being submitted.
  #
  # @param [String] css               Characteristic CSS class/selector.
  # @param [Hash]   opt               Passed to #html_div for outer *div*.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @see LayoutHelper::SearchBar#search_input
  # @see LayoutHelper::SearchBar#search_button_label
  # @see file:javascripts/feature/model-form.js *monitorSourceRepository()*
  #
  def parent_entry_select: (?css: String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Client-side scripting which are supplied via 'assets:precompile'.
  #
  # @param [Hash{Symbol=>Any}]
  #
  # @see file:app/assets/javascripts/shared/assets.js.erb  *Emma.Entry*
  #
  def self.js_properties: () -> symHash
end
