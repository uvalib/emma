# Handle Bookshare-only "/periodical" pages.
#
# @see PeriodicalDecorator
# @see PeriodicalsDecorator
# @see file:app/views/periodical/**
#
# @note These endpoints are not currently presented as a part of EMMA.
#
class PeriodicalController < ApplicationController
  include UserConcern

  include ParamsConcern

  include SessionConcern

  include RunStateConcern

  include PaginationConcern

  include SerializationConcern

  include BookshareConcern

  # :nocov:
  #include AbstractController::Callbacks

  @list: Bs::Message::PeriodicalSeriesMetadataSummaryList
  @item: Bs::Message::PeriodicalSeriesMetadataSummary
  @page: Paginator

  # == GET /periodical
  #
  # List all periodicals.
  #
  # @see #periodical_index_path       Route helper
  # @see BookshareService::Request::Periodicals#get_periodicals
  #
  def index: () -> void

  # == GET /periodical/:id
  #
  # Display details of an existing periodical.
  #
  # @see #periodical_path             Route helper
  # @see BookshareService::Request::Periodicals#get_periodical
  # @see BookshareService::Request::Periodicals#get_periodical_editions
  #
  def show: () -> void

  # == GET /periodical/new[?id=:id]
  #
  # Add metadata for a new periodical.
  #
  # @see #new_periodical_path         Route helper
  #
  def new: () -> void

  # == POST /periodical/:id
  #
  # Create an entry for a new periodical.
  #
  # @see #periodical_path             Route helper
  #
  def create: () -> void

  # == GET /periodical/:id/edit
  #
  # Modify metadata of an existing periodical entry.
  #
  # @see #edit_periodical_path        Route helper
  #
  def edit: () -> void

  # == PUT   /periodical/:id
  # == PATCH /periodical/:id
  #
  # Update the entry for an existing periodical.
  #
  # @see #periodical_path             Route helper
  #
  def update: () -> void

  # == DELETE /periodical/:id
  #
  # Remove an existing periodical entry.
  #
  # @see #periodical_path             Route helper
  #
  def destroy: () -> void

  # Response values for de-serializing the index page to JSON or XML.
  #
  # @param [Bs::Message::PeriodicalSeriesMetadataSummaryList] list
  # @param [Hash]                                             opt
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def index_values: (?Bs::Message::PeriodicalSeriesMetadataSummaryList list, **untyped opt) -> symHash

  # Response values for de-serializing the show page to JSON or XML.
  #
  # @param [Hash, nil] result
  # @param [Hash]      opt
  #
  # @return [Hash{Symbol=>Hash,Array}]
  #
  def show_values: (?(anyHash|nil) result, **untyped opt) -> symHash
end
