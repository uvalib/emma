# Handle Bookshare-only "/edition" pages.
#
# @see EditionDecorator
# @see EditionsDecorator
# @see file:app/views/edition/**
#
# @note These endpoints are not currently presented as a part of EMMA.
#
# == Usage Notes
# The abilities to retrieve or modify editions (instances of remediated
# content) is dependent on the role(s) of the authenticated user.
#
class EditionController < ApplicationController
  include UserConcern

  include ParamsConcern

  include SessionConcern

  include RunStateConcern

  include PaginationConcern

  include SerializationConcern

  include BookshareConcern

  include BsDownloadConcern

  # :nocov:
  #include AbstractController::Callbacks

  @list: Bs::Message::PeriodicalEditionList
  @item: Bs::Record::PeriodicalEdition | nil
  @page: Paginator

  # == GET /edition?seriesId=:seriesId
  #
  # List all editions for a periodical.
  #
  # @see #edition_index_path          Route helper
  # @see BookshareService::Request::Periodicals#get_periodical_editions
  #
  def index: () -> void

  # == GET /edition/:id?seriesId=:seriesId
  # == GET /edition/:editionId?seriesId=:seriesId
  #
  # Display details of an existing edition.
  #
  # @see #edition_path                Route helper
  # @see BookshareService::Request::Periodicals#get_periodical_edition
  #
  def show: () -> void

  # == GET /edition/new[?id=:id]
  # == GET /edition/new[?editionId=:editionId]
  #
  # Add metadata for a new edition.
  #
  # @see #new_edition_path            Route helper
  #
  def new: () -> void

  # == POST /edition/:id
  # == POST /edition/:editionId
  #
  # Upload a new edition.
  #
  # @see #edition_path                Route helper
  #
  def create: () -> void

  # == GET /edition/:id/edit
  # == GET /edition/:editionId/edit
  #
  # Modify metadata of an existing edition entry.
  #
  # @see #edit_edition_path           Route helper
  #
  def edit: () -> void

  # == PUT   /edition/:id
  # == PUT   /edition/:editionId
  # == PATCH /edition/:id
  # == PATCH /edition/:editionId
  #
  # Upload a replacement for an existing edition.
  #
  # @see #edition_path                Route helper
  #
  def update: () -> void

  # == DELETE /edition/:id
  # == DELETE /edition/:editionId
  #
  # Remove an existing edition entry.
  #
  # @see #edition_path                Route helper
  #
  def destroy: () -> void

  # == GET /edition/:id/:fmt?seriesId=:seriesId&member=BS_ACCOUNT_ID
  # == GET /edition/:editionId/:fmt?seriesId=:seriesId&member=BS_ACCOUNT_ID
  #
  # Download a periodical edition.
  #
  # @see #edition_download_path
  # @see BookshareService::Request::Periodicals#download_periodical_edition
  #
  def download: () -> void

  # Response values for de-serializing the index page to JSON or XML.
  #
  # @param [Bs::Message::PeriodicalEditionList] list
  # @param [Hash]                               opt
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def index_values: (?Bs::Message::PeriodicalEditionList list, **untyped opt) -> symHash

  # Response values for de-serializing the show page to JSON or XML.
  #
  # @param [Bs::Record::PeriodicalEdition, Hash] item
  # @param [Hash]                                opt
  #
  # @return [Hash{Symbol=>Bs::Record::PeriodicalEdition,Hash}]
  #
  def show_values: (?(Bs::Record::PeriodicalEdition|symHash|nil) item, **untyped opt) -> Hash[Symbol,(Bs::Record::PeriodicalEdition|symHash)]
end
