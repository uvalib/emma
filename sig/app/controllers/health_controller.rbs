# Handle health-check requests.
#
# @see file:app/views/health/**
#
# === Usage Notes
# The endpoints implemented by this controller render only JSON and do not
# require authentication of the requester.
#
class HealthController < ApplicationController
  include ParamsConcern

  include RunStateConcern

  include LogConcern

  include HealthConcern

  @state: RunState

  # === GET /version
  # === GET /health/version
  #
  # @see #version_path                Route helper
  # @see #version_health_path         Route helper
  #
  def version: () -> void

  # === GET /healthcheck[?logging=true]
  # === GET /health/check[?logging=true]
  # === GET /health/check/:subsystem[?logging=true]
  #
  # @see #healthcheck_path            Route helper
  # @see #check_health_path           Route helper
  # @see #check_subsystem_health_path Route helper
  # @see HealthConcern#render_check
  #
  def check: () -> void

  # === GET /health/run_state
  #
  # @see #run_state_health_path       Route helper
  # @see #system_unavailable_path     Route helper
  # @see HealthConcern#show_run_state
  #
  def run_state: () -> void

  # === PUT /health/run_state
  #
  # @see #set_run_state_health_path   Route helper
  # @see HealthConcern#update_run_state
  #
  # === Usage Notes
  # Does nothing unless RunState::CLEARABLE or RunState::DYNAMIC.
  #
  def set_run_state: () -> void

  # Excess logging is turned off for the standard all-subsystems health check
  # (which is hit frequently by automated processes) unless the URL parameter
  # 'logging=true' is included.
  #
  # If one or more comma-delimited subsystems is specified, full logging is
  # performed unless the URL parameter 'logging=false' is included.
  #
  def suppress_logger: () -> void
end
