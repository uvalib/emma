# Individual EMMA user account maintenance.
#
# @see file:app/views/user/registrations/**
#
class User::RegistrationsController < Devise::RegistrationsController
  include UserConcern

  include SessionConcern

  include RunStateConcern

  include ParamsConcern

  ANON_OPS: symArray

  NEW_OPS: symArray

  EDIT_OPS: symArray

  SCOPED_OPS: symArray

  @item: User | nil

  # === GET /users/sign_up
  #
  # @see #new_user_path               Route helper
  # @see #new_user_registration_path  Route helper
  #
  def new: () -> void

  # === POST /users
  #
  # @see #create_user_path                Route helper
  # @see #create_user_registration_path   Route helper
  #
  def create: () -> void

  # === GET /users/edit/:id
  # === GET /users/edit
  #
  # @see #edit_user_path                Route helper
  # @see #edit_user_registration_path   Route helper
  #
  def edit: () -> void

  # === POST  /users/update/:id
  # === PATCH /users/update/:id
  # === PUT   /users/update/:id
  # === PUT   /users
  #
  # @see #update_user_path            Route helper
  # @see #user_registration_path      Route helper
  #
  def update: () -> void

  # === GET /users/resign
  #
  def delete: () -> void

  # === DELETE /users
  #
  def destroy: () -> void

  # === GET /users/cancel
  #
  # Forces the session data which is usually expired after sign in to be
  # expired now. This is useful if the user wants to cancel oauth signing in/up
  # in the middle of the process, removing all OAuth session data.
  #
  # @see #cancel_user_registration_path   Route helper
  #
  def cancel: () -> void

  # Include User attributes to allowed parameters for account creation.
  #
  def configure_create_params: () -> void

  # Include User attributes to allowed parameters for account modification.
  #
  def configure_update_params: () -> void

  # Specify acceptable URL parameters.
  #
  # @param [Symbol]                     action  Devise action name.
  # @param [Array<Symbol>, Symbol, nil] keys    Default: `User.field_names`
  # @param [Array<Symbol>, Symbol, nil] except  Default: [:id, :email]
  #
  # @return [ActiveSupport::HashWithIndifferentAccess]
  #
  # @yield [params]
  # @yieldparam [ActionController::Parameters] params
  # @yieldreturn [Hash,nil]
  #
  # === Usage Notes
  # Due to the current uniqueness constraint on 'index_users_on_email', the
  # email address can't be updated.
  #
  def allow_params: (Symbol action, ?keys: Symbol|symArray|nil, ?except: Symbol|symArray|nil) ?{ (ActionController::Parameters) -> (anyHash | nil) } -> ActiveSupport::HashWithIndifferentAccess[untyped, untyped]
end
