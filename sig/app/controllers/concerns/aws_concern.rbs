# Controller support methods for access to the AWS S3 API service.
#
module AwsConcern
  extend ActiveSupport::Concern

  include ParamsHelper

  include ApiConcern

  REPOSITORY_PARAMS: symArray

  DEPLOYMENT_PARAMS: symArray

  NON_AWS_PARAMS: symArray

  # Access the AWS S3 API service.
  #
  # @return [AwsS3Service]
  #
  # @note Currently unused.
  #
  def aws_api: () -> AwsS3Service

  # get_aws_repositories
  #
  # - If :emma is included it will be moved to the end of the list.
  # - If :ace is included it is replaced with :internetArchive since ACE items
  #   are transferred via Internet Archive through the 'ia' bucket.
  #
  # @param [String, Symbol, Array, nil] default   Default: '*'
  # @param [Hash]                       prm       Passed to #params_values.
  #
  # @return [Array<Symbol>]
  #
  def get_aws_repositories: (?default: String|Symbol|Array[String|Symbol]|nil, **untyped prm) -> symArray

  # get_aws_deployments
  #
  # @param [String, Symbol, Array, nil] default   Default: '*'
  # @param [Hash]                       prm       Passed to #params_values.
  #
  # @return [Array<Symbol>]
  #
  def get_aws_deployments: (?default: String|Symbol|Array[String|Symbol]|nil, **untyped prm) -> symArray

  # Get a list of values from one of the indicated parameter keys.
  #
  # @param [Hash, nil]     opt        Default: `#url_parameters`.
  # @param [Array<Symbol>] keys
  #
  # @return [Array<String>]
  #
  def params_values: (anyHash opt, *Symbol keys) -> strArray

  # aws_params
  #
  # @param [Hash, nil] opt            Default: `#url_parameters`.
  #
  # @return [Hash{Symbol=>*}]
  #
  def aws_params: (?(anyHash|nil) opt) -> symHash

  # repo_bucket
  #
  # @param [Symbol, String]      repository
  # @param [Symbol, String, nil] deployment   Def: `#aws_deployment`.
  # @param [AwsS3Service, nil]   service      Def: `AwsS3Service.instance`.
  #
  # @return [String]
  #
  def repo_bucket: ((Symbol|String) repository, ?(Symbol|String|nil) deployment, ?service: AwsS3Service|nil, **untyped _ignored) -> String

  # get_repo_bucket
  #
  # @param [Symbol, String]      repository
  # @param [Symbol, String, nil] deployment   Def: `#aws_deployment`.
  # @param [Hash]   opt                       Passed to #get_s3_bucket
  #
  # @option opt [AwsS3Service] :service       Default: `AwsS3Service.instance`
  #
  # @return [Aws::S3::Bucket]
  #
  # @note Currently unused.
  #
  def get_repo_bucket: ((Symbol|String) repository, ?(Symbol|String|nil) deployment, **untyped opt) -> Aws::S3::Bucket

  # get_repo_objects
  #
  # @param [Symbol, String]      repository
  # @param [Symbol, String, nil] deployment   Def: `#aws_deployment`.
  # @param [Hash]   opt                       Passed to #get_s3_objects
  #
  # @option opt [AwsS3Service] :service       Default: `AwsS3Service.instance`
  #
  # @return [Array<Aws::S3::Object>]
  #
  # @note Currently unused.
  #
  def get_repo_objects: ((Symbol|String) repository, ?(Symbol|String|nil) deployment, **untyped opt) -> Array[Aws::S3::Object]

  # get_s3_bucket_table
  #
  # @param [Hash] opt
  #
  # @option opt [AwsS3Service, nil] :service  Default: `AwsS3Service.instance`
  #
  # @return [Hash{String=>Aws::S3::Bucket}]
  #
  # @note Currently unused.
  #
  def get_s3_bucket_table: (**untyped opt) -> Hash[String,Aws::S3::Bucket]

  # get_s3_object_table
  #
  # @param [Hash] opt
  #
  # @option opt [AwsS3Service, nil] :service  Default: `AwsS3Service.instance`
  #
  # @return [Hash{String=>Array<Aws::S3::Object>}]
  #
  def get_s3_object_table: (**untyped opt) -> Hash[String,Array[Aws::S3::Object]]

  # get_s3_bucket
  #
  # @param [String] bucket
  # @param [Hash]   opt                       Passed to #s3_bucket except for:
  #
  # @option opt [AwsS3Service, nil] :service  Default: `AwsS3Service.instance`
  #
  # @return [Aws::S3::Bucket]
  #
  def get_s3_bucket: (String bucket, **untyped opt) -> Aws::S3::Bucket

  # get_s3_objects
  #
  # @param [String, Aws::S3::Bucket] bucket
  # @param [Hash]   opt                       Passed to #s3_bucket except for:
  #
  # @option opt [AwsS3Service, nil] :service  Default: `AwsS3Service.instance`
  #
  # @return [Array<Aws::S3::Object>]
  #
  def get_s3_objects: ((String|Aws::S3::Bucket) bucket, **untyped opt) -> Array[Aws::S3::Object]

  private

  THIS_MODULE: Module
end
