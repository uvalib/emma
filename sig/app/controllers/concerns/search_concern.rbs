# Support methods for the "/search" controller.
#
module SearchConcern
  extend ActiveSupport::Concern

  include ApiConcern

  include EngineConcern

  include PaginationConcern

  include SearchCallConcern

  include LayoutHelper

  # :nocov:
  #include PaginationConcern

  # Access the EMMA Unified Search API service.
  #
  # @return [SearchService]
  #
  def search_api: () -> SearchService

  # @private
  DEF_TITLE_SEARCH: bool

  # @private
  GENERATE_SCORES: bool

  # index_search
  #
  # @param [Boolean] titles           If *false*, return records not titles.
  # @param [Boolean] save             If *false*, do not save search terms.
  # @param [Boolean] scores           Calculate experimental relevancy scores.
  # @param [Boolean] canonical        Passed to SearchTitleList#initialize.
  # @param [Hash]    opt              Passed to SearchService#get_records.
  #
  # @return [Search::Message::SearchRecordList]
  # @return [Search::Message::SearchTitleList]    If :titles is *true*.
  #
  # == Usage Notes
  # If :titles is *true* then :canonical defaults to *true* on the production
  # service and *false* everywhere else.
  #
  def index_search: (?titles: true?, ?save: bool, ?scores: bool?, ?canonical: bool?, **untyped opt) -> Search::Message::SearchTitleList
                  | (titles:  false, ?save: bool, ?scores: bool?, ?canonical: bool?, **untyped opt) -> Search::Message::SearchRecordList

  # index_record
  #
  # @param [Hash] **opt
  #
  # @return [Search::Message::SearchRecord]
  #
  # @see SearchService::Request::Records#get_record
  #
  def index_record: (**untyped opt) -> Search::Message::SearchRecord

  # Indicate whether search calls should be recorded by default.
  #
  # @type [Boolean]
  #
  SAVE_SEARCHES: bool

  # Indicate whether the current search should be recorded.
  #
  # @param [User, nil] user           Default: `#current_user`.
  #
  def save_search?: (?(User|nil) user) -> bool

  # Record a search call.
  #
  # @param [User, nil]    user        Default: `#current_user`.
  # @param [Array, #to_a] result      Default: @list.
  # @param [Boolean]      force       Save even if #save_search? is *false*.
  # @param [Hash]         parameters  Default: `#search_call_params`.
  #
  # @return [SearchCall]              New record.
  # @return [nil]                     If saving was not possible.
  #
  def save_search: (?user: User?, ?result: (anyArray|_ToA[untyped])?, ?force: bool, **untyped parameters) -> (SearchCall | nil)

  # Analyze the *list* object to generate the path for the next page of
  # results.
  #
  # @param [Search::Message::SearchTitleList, Array<Search::Record::MetadataRecord>, nil] list
  # @param [Hash, nil] url_params     Current request parameters.
  #
  # @return [String]                  Path to generate next page of results.
  # @return [nil]                     If there is no next page.
  #
  # @see PaginationConcern#next_page_path
  #
  # -
  # noinspection RubyNilAnalysis
  # +
  def next_page_path: (?list: (Search::Message::SearchTitleList|Array[Search::Record::MetadataRecord])?, **untyped url_params) -> (String | nil)

  # Eliminate values from keys that would be problematic when rendering the
  # hash as JSON or XML.
  #
  # @param [Any] value
  #
  # @return [Any]                     Same type as *value*.
  #
  def sanitize_keys: (anyHash value)  -> anyHash
                   | (anyArray value) -> (anyArray | untyped)
                   | (String value)   -> (String | strArray)
                   | (untyped value)  -> untyped

  # Indicate whether the argument contains only valid identifiers.
  #
  # @param [String, Array<String>] value
  #
  # @note Currently unused.
  #
  def valid_identifiers?: (String|strArray value) -> bool

  # Indicate whether the argument contains only valid identifiers and provide
  # a list of individual validation problems.
  #
  # @param [String, Array<String>] value
  #
  # @return [Hash]
  #
  def validate_identifiers: (String|strArray value) -> { valid: bool, ids: strArray, errors: strArray }

  attr_reader record_id: String | nil

  # Extract the URL parameter which specifies an index record.
  #
  # @return [String]                  Value of `params[:id]`.
  # @return [nil]                     No :id, :recordId found.
  #
  def set_record_id: () -> (String | nil)

  # Re-cast URL parameters which are aliases for :identifier and redirect to
  # the modified URL if found.
  #
  # @return [void]
  #
  def identifier_alias_redirect: () -> void

  # Translate an identifier query to a keyword query if the search term does
  # not look like a valid identifier.
  #
  # @return [void]
  #
  def invalid_identifier_redirect: () -> void

  # Translate a keyword query for an identifier into an identifier query.
  # For other query types, queries that include a standard identifier prefix
  # (e.g. "isbn:...") are re-cast as :identifier queries.
  #
  # @return [void]
  #
  def identifier_keyword_redirect: () -> void

  # Process the URL parameter for setting the immediate searches.
  #
  # @return [void]
  #
  def set_immediate_search: () -> void

  # Process the URL parameter for setting the search engine URL.
  #
  # @return [void]
  #
  def set_search_engine: () -> void

  # Process the URL parameter for setting the search results type (i.e.,
  # title-level display or file-level display).
  #
  # @param [Symbol, String, nil] type
  #
  # @return [void]
  #
  # == Usage Notes
  # Either run manually or as a controller action, the method will update
  # `session['app.search.style']`.  In the latter case, if *style* is taken
  # from the URL parameter a redirect will occur.
  #
  def set_search_results: (?(String|Symbol)? `type`) -> void

  # Process the URL parameter for setting the search style.
  #
  # @param [Symbol, String, nil] style
  #
  # @return [void]
  #
  # == Usage Notes
  # Either run manually or as a controller action, the method will update
  # `session['app.search.style']`.  In the latter case, if *style* is taken
  # from the URL parameter a redirect will occur.
  #
  def set_search_style: (?(String|Symbol)? style) -> void

  private

  # set_search_feature
  #
  # @param [Symbol]               param_key
  # @param [Any,nil]              value
  # @param [Array<Symbol>,Symbol] valid_values
  # @param [String]               session_key
  # @param [Symbol]               meth
  #
  # @return [void]
  #
  def set_search_feature: (Symbol param_key, untyped value, Symbol|symArray valid_values, ?session_key: String?, ?meth: Symbol) -> void

  THIS_MODULE: Module
end
