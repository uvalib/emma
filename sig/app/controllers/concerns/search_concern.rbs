# Support methods for the "/search" controller.
#
# @!method paginator
#   @return [SearchPaginator]
#
module SearchConcern
  extend ActiveSupport::Concern

  include FlashHelper

  include ParamsHelper

  include SearchModesHelper

  include SearchTermsHelper

  include ApiConcern

  include EngineConcern

  include PaginationConcern

  include SerializationConcern

  include SearchCallConcern

  # Access the EMMA Unified Search API service.
  #
  # @return [SearchService]
  #
  def search_api: () -> SearchService

  # Indicate whether search results scoring is displayed when debugging.
  #
  # @type [Boolean]
  # @private
  #
  SEARCH_GENERATE_SCORES: bool

  # Get search result records from the EMMA Unified Index.
  #
  # @param [Boolean] titles           If *false*, return records not titles.
  # @param [Boolean] save             If *false*, do not save search terms.
  # @param [Boolean] scores           Calculate experimental relevancy scores.
  # @param [Boolean] canonical        Passed to SearchTitleList#initialize.
  # @param [Hash]    opt              Passed to SearchService#get_records.
  #
  # @return [Search::Message::SearchRecordList]
  # @return [Search::Message::SearchTitleList]    If :titles is *true*.
  #
  # === Usage Notes
  # If :titles is *true* then :canonical defaults to *true* on the production
  # service and *false* everywhere else.
  #
  def index_search
    : (?titles: true|nil, ?save: bool, ?scores: bool|nil, ?canonical: bool|nil, **untyped opt) -> Search::Message::SearchTitleList
    | ( titles: false,    ?save: bool, ?scores: bool|nil, ?canonical: bool|nil, **untyped opt) -> Search::Message::SearchRecordList

  # Get a single search result record from the EMMA Unified Index.
  #
  # @param [Hash] **opt
  #
  # @return [Search::Message::SearchRecord]
  #
  # @see SearchService::Action::Records#get_record
  #
  # @note This method is not actually functional because it depends on an EMMA
  #   Unified Search endpoint which does not exist.
  #
  def index_record: (**untyped opt) -> Search::Message::SearchRecord

  # Indicate whether search calls should be recorded by default.
  #
  # @type [Boolean]
  #
  SEARCH_SAVE_SEARCHES: bool

  # Indicate whether the current search should be recorded.
  #
  # @param [User, nil] _user          Default: `#current_user`.
  #
  def save_search?: (?(User|nil) _user) -> bool

  # Record a search call.
  #
  # @param [User, nil]    user        Default: `#current_user`.
  # @param [Array]        result      Default: @list or `paginator.page_items`.
  # @param [Boolean]      force       Save even if #save_search? is *false*.
  # @param [Hash]         parameters  Default: `#search_call_params`.
  #
  # @return [SearchCall]              New record.
  # @return [nil]                     If saving was not possible.
  #
  def save_search: (?user: User|nil, ?result: anyArray|_ToA[untyped]|nil, ?force: bool, **untyped parameters) -> (SearchCall | nil)

  # Eliminate values from keys that would be problematic when rendering the
  # hash as JSON or XML.
  #
  # @param [any, nil] value
  #
  # @return [any, nil]
  #
  # @note Currently used only by #show_values.
  #
  def sanitize_keys
    :     (anyHash  value) -> symHash
    |     (anyArray value) -> (anyArray | untyped)
    |     (String   value) -> (strArray | String)
    | [T] (T        value) -> T

  # Indicate whether the argument contains only valid identifiers and provide
  # a list of individual validation problems.
  #
  # @param [String, Array<String>] value
  #
  # @return [Hash]
  #
  def validate_identifiers: ((String|strArray) value) -> { valid: bool, ids: strArray, errors: strArray }

  # Extract the URL parameter which specifies an index record.
  #
  # @return [String]                  Value of `params[:id]`.
  # @return [nil]                     No :id, :recordId found.
  #
  # @note Currently used only by SearchController#show.
  #
  def set_record_id: () -> (String | nil)

  @record_id: String | nil

  # Re-cast URL parameters which are aliases for :identifier and redirect to
  # the modified URL if found.
  #
  # @return [void]
  #
  def identifier_alias_redirect: () -> void

  # Translate an identifier query to a keyword query if the search term does
  # not look like a valid identifier.
  #
  # @return [void]
  #
  def invalid_identifier_redirect: () -> void

  # Translate a keyword query for an identifier into an identifier query.
  # For other query types, queries that include a standard identifier prefix
  # (e.g. "isbn:...") are re-cast as :identifier queries.
  #
  # @return [void]
  #
  def identifier_keyword_redirect: () -> void

  # Process the URL parameter for setting the immediate searches.
  #
  # @return [void]
  #
  def set_immediate_search: () -> void

  # Process the URL parameter for setting the search engine URL.
  #
  # @return [void]
  #
  def set_search_engine: () -> void

  # Process the URL parameter for setting the search results type (i.e.,
  # title-level display or file-level display).
  #
  # @param [Symbol, String, nil] type
  #
  # @return [void]
  #
  # === Usage Notes
  # Either run manually or as a controller action, the method will update
  # `session['app.search.style']`.  In the latter case, if *style* is taken
  # from the URL parameter a redirect will occur.
  #
  def set_search_results: (?(String|Symbol|nil) `type`) -> void

  # Process the URL parameter for setting the search style.
  #
  # @param [Symbol, String, nil] style
  #
  # @return [void]
  #
  # === Usage Notes
  # Either run manually or as a controller action, the method will update
  # `session['app.search.style']`.  In the latter case, if *style* is taken
  # from the URL parameter a redirect will occur.
  #
  def set_search_style: (?(String|Symbol|nil) style) -> void

  private

  # Persist the `*param_key*` setting in the session.
  #
  # @param [Symbol]               param_key
  # @param [any, nil]             value
  # @param [Array<Symbol>,Symbol] valid_values
  # @param [String]               session_key
  # @param [Symbol]               meth
  #
  # @return [void]
  #
  def set_search_feature: (Symbol param_key, untyped value, (Symbol|symArray) valid_values, ?session_key: String|nil, ?meth: Symbol|nil) -> void

  public

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [SearchPaginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> SearchPaginator

  # Response values for de-serializing the index page to JSON or XML.
  #
  # @param [Search::Message::SearchRecordList, Search::Message::SearchTitleList] list
  # @param [Hash] opt
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def index_values: (?(Search::Message::SearchRecordList | Search::Message::SearchTitleList) list, **untyped opt) -> symHash

  # Response values for de-serializing the show page to JSON or XML.
  #
  # @param [Search::Message::SearchRecord, Hash] item
  # @param [Hash]                                opt
  #
  # @return [Hash{Symbol=>Hash}]
  #
  # @note Currently used only by SearchController#show.
  #
  def show_values: (?(Search::Message::SearchRecord|anyHash) item, **untyped opt) -> symHash

  THIS_MODULE: Module
end
