# Support methods for the "/account" controller.
#
# @!method model_options
#   @return [User::Options]
#
# @!method paginator
#   @return [User::Paginator]
#
module AccountConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include SerializationConcern

  include ModelConcern

  include MailConcern

  # Columns searched for generic (:like) matches.
  #
  # @type [Array<Symbol>]
  #
  ACCT_MATCH_KEYS: symArray

  # Parameter keys related to password management.
  #
  # @type [Array<Symbol>]
  #
  PASSWORD_KEYS: symArray

  # Indicate whether request parameters (explicitly or implicitly) reference
  # the current user.
  #
  # @param [any, nil] id
  #
  def current_id?: (?untyped id) -> bool

  # The identifier of the current model instance which #CURRENT_ID represents
  # in the context of AccountController actions.
  #
  # @return [Integer, nil]
  #
  def current_id: () -> (Integer | nil)

  # URL parameters associated with model record(s).
  #
  # @return [Array<Symbol>]
  #
  def id_param_keys: () -> symArray

  # Option keys involved in filtering record searches.
  #
  # @return [Array<Symbol>]
  #
  def find_or_match_keys: () -> symArray

  # Return with the specified User record.
  #
  # @param [any, nil] item      String, Integer, Hash, Model; def: #identifier.
  # @param [Hash]     opt       Passed to Record::Identification#find_record.
  #
  # @raise [Record::StatementInvalid] If :id not given.
  # @raise [Record::NotFound]         If *item* was not found.
  #
  # @return [User, nil]         A fresh record unless *item* is a #model_class.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [User] record
  # @yieldreturn [void]
  #
  def find_record: (?(String|Integer|Model|symHash|nil) item, **untyped opt) ?{ (User record) -> void } -> (User | nil)

  # Start a new User.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [User]                    An un-persisted User instance.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def new_record: (?symHash? prm, **untyped opt) ?{ (symHash attr) -> void } -> User

  # Add a new User record to the database.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Boolean]   fatal          If *false*, use #save not #save!.
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [User]                    The new User record.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def create_record: (?symHash? prm, ?fatal: bool, **untyped opt) ?{ (symHash attr) -> void } -> User

  # Start editing an existing User record.
  #
  # @param [any, nil] item            Default: the record for #identifier.
  # @param [Hash]     opt             Passed to #find_record.
  #
  # @raise [Record::StatementInvalid] If :id not given.
  # @raise [Record::NotFound]         If *item* was not found.
  #
  # @return [User, nil]               A fresh instance unless *item* is a User.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [User] record         May be altered by the block.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def edit_record: (?(String|Integer|Model|symHash|nil) item, **untyped opt) ?{ (User record) -> void } -> (User | nil)

  # Update the indicated User record, ensuring that :email and :org_id are not
  # changed unless authorized.
  #
  # @param [any, nil] item            Def.: record for ModelConcern#identifier.
  # @param [Boolean]  fatal           If *false* use #update not #update!.
  # @param [Hash]     opt             Field values (default: `#current_params`)
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [User, nil]               The updated User record.
  #
  # @yield [record, attr] Raise an exception if the record is not acceptable.
  # @yieldparam [User] record         May be altered by the block.
  # @yieldparam [Hash] attr           New field(s) to be assigned to *record*.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def update_record: (?(String|Integer|Model|symHash|nil) item, ?fatal: bool, **untyped opt) ?{ (User record, symHash attr) -> void } -> (User | nil)

  # Retrieve the indicated User record(s) for the '/delete' page.
  #
  # @param [any, nil] items           To #search_records
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [RangeError]               If :page is not valid.
  #
  # @return [Paginator::Result]
  #
  # @yield [items, opt] Raise an exception unless the `*items*` are acceptable.
  # @yieldparam [Array] items         Identifiers of items to be deleted.
  # @yieldparam [Hash]  options       Options to #search_records.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def delete_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, **untyped opt) ?{ (Array[Model|String|Integer] items, symHash options) -> void } -> Paginator::Result

  # Remove the indicated User record(s).
  #
  # @param [any, nil] items
  # @param [Boolean]  fatal           If *false* do not #raise_failure.
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Destroyed User records.
  #
  # @yield [record] Called for each record before deleting.
  # @yieldparam [User] record
  # @yieldreturn [String,nil]         Error message if *record* unacceptable.
  #
  def destroy_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, ?fatal: bool, **untyped opt) ?{ (User record) -> (String | nil) } -> Array[User]

  # Get matching User account records or all records if no terms are given.
  #
  # @param [Array<String,Hash,Array,nil>] terms
  # @param [Array<Symbol>]                columns
  # @param [Hash]                         hash_terms  Added to *terms* except
  #                                                     #MAKE_RELATION_OPT
  #
  # @return [ActiveRecord::Relation<User>]
  #
  def get_accounts: (*(String|anyArray|anyHash|nil) terms, ?columns: symArray, **untyped hash_terms) -> ActiveRecord::Relation # _ActiveRecord_Relation[User, Integer]

  # The default redirect path for #redirect_back_or_to.
  #
  # @return [String]
  #
  def default_fallback_location: () -> String

  # Display the failure on the screen -- immediately if modal, or after a
  # redirect otherwise.
  #
  # @param [Exception, User, String] error
  # @param [String, nil]             redirect   Def: *fallback*
  # @param [String, nil]             fallback   Def: #default_fallback_location
  # @param [Hash]                    opt        To #flash_failure/#flash_status
  #
  # @return [void]
  #
  def error_response: (Exception|User|String error, ?(String|nil) redirect, ?fallback: String|nil, **untyped opt) -> void

  # Create an Options instance from the current parameters.
  #
  # @return [User::Options]
  #
  def get_model_options: () -> User::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [User::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> User::Paginator

  module DeviseMethods

    # devise_mapping
    #
    # @return [Devise::Mapping]
    #
    # @see DeviseController#devise_mapping
    #
    def devise_mapping: () -> Devise::Mapping

    @devise_mapping: Devise::Mapping

    # resource_class
    #
    # @return [Class]
    #
    # @see DeviseController#resource_class
    # @see Devise::Mapping#to
    #
    def resource_class: () -> Class

    # resource_name
    #
    # @return [String]
    #
    # @see DeviseController#resource_name
    # @see Devise::Mapping#name
    #
    def resource_name: () -> String

    alias scope_name resource_name

    # resource
    #
    # @return [User, nil]
    #
    # @see DeviseController#resource
    #
    def resource: () -> (User | nil)

    # resource=
    #
    # @param [User, nil] new_resource
    #
    # @return [User, nil]
    #
    # @see DeviseController#resource=
    #
    def resource=: ((User|nil) new_resource) -> (User | nil)

    private

    def self.included: (Module base) -> void
  end

  private

  THIS_MODULE: Module

  include DeviseMethods
end
