# Support methods for the "/account" controller.
#
# @!method model_options
#   @return [User::Options]
#
# @!method paginator
#   @return [User::Paginator]
#
module AccountConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include SerializationConcern

  include ModelConcern

  # Columns searched for generic (:like) matches.
  #
  # @type [Array<Symbol>]
  #
  ACCT_MATCH_KEYS: symArray

  # Parameter keys related to password management.
  #
  # @type [Array<Symbol>]
  #
  PASSWORD_KEYS: symArray

  # The identifier of the current model instance which #CURRENT_ID represents
  # in the context of AccountController actions.
  #
  # @return [Integer, nil]
  #
  def current_id: () -> (Integer | nil)

  # URL parameters associated with model record(s).
  #
  # @return [Array<Symbol>]
  #
  def id_param_keys: () -> symArray

  def find_or_match_keys: () -> symArray

  # Start a new (un-persisted) User.
  #
  # @param [Hash, nil]       prm        Field values (def: `#current_params`).
  # @param [Boolean, String] force_id   If *true*, allow setting of :id.
  #
  # @return [User]                      Un-persisted User instance.
  #
  def new_record: (?symHash? prm, ?force_id: bool|String, **untyped _ignored) -> User

  # Create and persist a new User.
  #
  # @param [Hash, nil]       prm        Field values (def: `#current_params`).
  # @param [Boolean, String] force_id   If *true*, allow setting of :id.
  # @param [Boolean]         fatal      If *false*, use #save not #save!.
  #
  # @return [User]                      A new User instance.
  #
  def create_record: (?symHash? attr, ?force_id: bool|String, ?fatal: bool, **untyped _ignored) -> User

  # Update the indicated User, ensuring that :email and :org_id are not changed
  # unless authorized.
  #
  # @param [any, nil] item            Def.: record for ModelConcern#identifier.
  # @param [Boolean]  fatal           If *false* use #update not #update!.
  # @param [Hash]     prm             Field values (default: `#current_params`)
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [User, nil]               The updated User instance.
  #
  def update_record: (?(String|Integer|Model|symHash|nil) item, ?fatal: bool, **untyped prm) -> (User | nil)

  # Get matching User account records or all records if no terms are given.
  #
  # @param [Array<String,Hash,Array,nil>] terms
  # @param [Array<Symbol>]                columns
  # @param [Hash]                         hash_terms  Added to *terms* except
  #                                                     #MAKE_RELATION_OPTIONS
  #
  # @return [ActiveRecord::Relation<User>]
  #
  def get_accounts: (*(String|anyArray|anyHash|nil) terms, ?columns: symArray, **untyped hash_terms) -> ActiveRecord::Relation # _ActiveRecord_Relation[User, Integer]

  # redirect_success
  #
  # @param [Symbol]            action
  # @param [String, nil]       message
  # @param [User, String, nil] redirect
  # @param [Hash]              opt        Passed to redirect.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def redirect_success: (Symbol action, ?(String|nil) message, ?redirect: User|String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # redirect_failure
  #
  # @param [Symbol]                             action
  # @param [String, nil]                        message
  # @param [String, Array, ActiveModel::Errors] error
  # @param [User, String, nil]                  redirect
  # @param [Hash]                               opt       Passed to redirect.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def redirect_failure: (Symbol action, ?(String|nil) message, ?error: String|anyArray|ActiveModel::Errors|nil, ?redirect: User|String|nil, **untyped opt) -> ActiveSupport::SafeBuffer

  # Configured account record fields.
  #
  # @return [ActionConfig]            Frozen result.
  #
  def account_fields: (*untyped _ignored) ?{ () -> untyped } -> ActionConfig

  # Get the appropriate message to display.
  #
  # @param [Symbol]       action
  # @param [Symbol]       outcome
  # @param [ActionConfig] config
  #
  # @return [String, nil]
  #
  def message_for: (Symbol action, Symbol outcome, ?ActionConfig config) -> (String | nil)

  # Get the appropriate terms for message interpolations.
  #
  # @param [Symbol]       action
  # @param [ActionConfig] config
  #
  # @return [Hash]
  #
  def interpolation_terms: (Symbol action, ?Hash[Symbol,anyHash] config) -> symHash

  # Create an Options instance from the current parameters.
  #
  # @return [User::Options]
  #
  def get_model_options: () -> User::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [User::Paginator]
  #
  def pagination_setup: (?(ApplicationController|nil) ctrlr, **untyped opt) -> User::Paginator

  module DeviseMethods

    # devise_mapping
    #
    # @return [Devise::Mapping]
    #
    # @see DeviseController#devise_mapping
    #
    def devise_mapping: () -> Devise::Mapping

    @devise_mapping: Devise::Mapping

    # resource_class
    #
    # @return [Class]
    #
    # @see DeviseController#resource_class
    # @see Devise::Mapping#to
    #
    def resource_class: () -> Class

    # resource_name
    #
    # @return [String]
    #
    # @see DeviseController#resource_name
    # @see Devise::Mapping#name
    #
    def resource_name: () -> String

    alias scope_name resource_name

    # resource
    #
    # @return [User, nil]
    #
    # @see DeviseController#resource
    #
    def resource: () -> (User | nil)

    # resource=
    #
    # @param [User, nil] new_resource
    #
    # @return [User, nil]
    #
    # @see DeviseController#resource=
    #
    def resource=: ((User|nil) new_resource) -> (User | nil)

    private

    def self.included: (Module base) -> void
  end

  private

  THIS_MODULE: Module

  include DeviseMethods
end
