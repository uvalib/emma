# Support methods for the "/manifest" controller.
#
# @!method model_options
#   @return [Manifest::Options]
#
# @!method paginator
#   @return [Manifest::Paginator]
#
module ManifestConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include SerializationConcern

  include SubmissionConcern

  include ModelConcern

  # Return with the specified Manifest record.
  #
  # @param [Manifest, Hash, String, nil] item  Def `ModelConcern#identifier`
  # @param [Hash]                        opt   To ModelConcern#get_record.
  #
  # @return [Manifest]
  #
  def get_manifest: (?(Manifest|anyHash|String|nil) item, **untyped opt) -> Manifest

  # Locate related ManifestItem records.
  #
  # @param [Manifest, nil] item
  # @param [Hash]          opt
  #
  # @raise [Record::SubmitError]        If :page is not valid.
  #
  # @return [Hash{Symbol=>*}]
  #
  def find_or_match_manifest_items: (?(Manifest|nil) item, **untyped opt) -> symHash

  def find_or_match_records: (*(String|anyArray) items, ?filters: symArray, **untyped opt) -> symHash

  # Start a new (un-persisted) manifest.
  #
  # @param [Hash, nil] attr           Default: `#current_get_params`.
  # @param [Hash]      opt            Passed to super.
  #
  # @return [Manifest]                Un-persisted Manifest instance.
  #
  def new_record: (?symHash? attr, **untyped opt) -> Model

  # Persist changes to an existing manifest and update the saved state of all
  # associated rows.
  #
  # @param [Manifest, Hash, nil] item       If present, used as a template.
  # @param [Hash, nil]           attr       Default: `#current_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]
  #
  # @see file:assets/javascripts/controllers/manifest-edit.js *saveUpdates()*
  #
  def save_changes: (?(Manifest|symHash|nil) item, ?(symHash|nil) attr) -> Manifest

  # Back out of provisional changes to associated rows.
  #
  # @param [Manifest, Hash, nil] item       If present, used as a template.
  # @param [Hash, nil]           attr       Default: `#current_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest, nil]
  #
  # @see file:assets/javascripts/controllers/manifest-edit.js *cancelUpdates()*
  #
  def cancel_changes: (?(Manifest|symHash|nil) item, ?(symHash|nil) attr) -> Manifest

  # Validate readiness of a manifest to start transmission.
  #
  # @param [Manifest, Hash, nil] item       If present, used as a template.
  # @param [Hash, nil]           opt        Default: `#current_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]
  #
  def remit_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Start transmission of a manifest.
  #
  # @param [Manifest, Hash, nil] item       If present, used as a template.
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]
  #
  #def start_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Terminate transmission of a manifest.
  #
  # @param [Manifest, Hash, nil] item       If present, used as a template.
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]
  #
  #def stop_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Pause transmission of a manifest.
  #
  # @param [Manifest, Hash, nil] item       If present, used as a template.
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]
  #
  #def pause_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Resume transmission of a paused manifest.
  #
  # @param [Manifest, Hash, nil] item       If present, used as a template.
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]
  #
  #def resume_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Create an Options instance from the current parameters.
  #
  # @return [Manifest::Options]
  #
  def get_model_options: () -> Manifest::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [Manifest::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> Manifest::Paginator

  private

  THIS_MODULE: Module
end
