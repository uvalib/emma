# Support methods for the "/manifest" controller.
#
# @!method model_options
#   @return [Manifest::Options]
#
# @!method paginator
#   @return [Manifest::Paginator]
#
module ManifestConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include SerializationConcern

  include SubmissionConcern

  include ModelConcern

  # Return with the specified Manifest record.
  #
  # @param [Manifest, Hash, String, nil] item  Default: `#identifier`.
  # @param [Hash]                        opt   Passed to #find_record.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  def find_manifest: (?(Manifest|anyHash|String|nil) item, **untyped opt) -> Manifest

  # Locate related ManifestItem records.
  #
  # @param [Manifest, nil] item
  # @param [Hash]          opt
  #
  # @raise [Record::SubmitError]        If :page is not valid.
  #
  # @return [Paginator::Result]
  #
  def find_or_match_manifest_items: (?(Manifest|nil) item, **untyped opt) -> Paginator::Result

  # Return with the specified Manifest record.
  #
  # @param [any, nil] item      String, Integer, Hash, Model; def: #identifier.
  # @param [Hash]     opt       Passed to Record::Identification#find_record.
  #
  # @raise [Record::StatementInvalid] If :id not given.
  # @raise [Record::NotFound]         If *item* was not found.
  #
  # @return [Manifest, nil]     A fresh record unless *item* is a Manifest.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [Manifest] record
  # @yieldreturn [void]
  #
  def find_record: (?(String|Integer|Model|symHash|nil) item, **untyped opt) ?{ (Manifest record) -> void } -> (Manifest | nil)

  # Start a new Manifest.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [Manifest]                An un-persisted Manifest instance.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def new_record: (?symHash? prm, **untyped opt) ?{ (symHash attr) -> void } -> Manifest

  # Add a new Manifest record to the database.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Boolean]   fatal          If *false*, use #save not #save!.
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [Manifest]                The new Manifest record.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def create_record: (?symHash? prm, ?fatal: bool, **untyped opt) ?{ (symHash attr) -> void } -> Manifest

  # Start editing an existing Manifest record.
  #
  # @param [any, nil] item            Default: the record for #identifier.
  # @param [Hash]     opt             Passed to #find_record.
  #
  # @raise [Record::StatementInvalid]   If :id not given.
  # @raise [Record::NotFound]           If *item* was not found.
  #
  # @return [Manifest, nil]   A fresh instance unless *item* is a #model_class.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [Manifest] record     May be altered by the block.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def edit_record: (?(String|Integer|Model|symHash|nil) item, **untyped opt) ?{ (Manifest record) -> void } -> (Manifest | nil)

  # Update the indicated Manifest record, ensuring that the associated user is
  # not changed unless authorized.
  #
  # @param [any, nil] item            Def.: record for ModelConcern#identifier.
  # @param [Boolean]  fatal           If *false* use #update not #update!.
  # @param [Hash]     opt             Field values (default: `#current_params`)
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [Manifest, nil]           The updated Manifest record.
  #
  # @yield [record, attr] Raise an exception if the record is not acceptable.
  # @yieldparam [Manifest] record     May be altered by the block.
  # @yieldparam [Hash]     attr       New field(s) to be assigned to *record*.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def update_record: (?(String|Integer|Model|symHash|nil) item, ?fatal: bool, **untyped opt) ?{ (Manifest record, symHash attr) -> void } -> (Manifest | nil)

  # Retrieve the indicated Manifest record(s) for the '/delete' page.
  #
  # @param [any, nil] items           To #search_records
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [RangeError]               If :page is not valid.
  #
  # @return [Paginator::Result]
  #
  # @yield [items, opt] Raise an exception unless the *items* are acceptable.
  # @yieldparam [Array] items         Identifiers of items to be deleted.
  # @yieldparam [Hash]  options       Options to #search_records.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def delete_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, **untyped opt) ?{ (Array[Model|String|Integer] items, symHash options) -> void } -> Paginator::Result

  # Remove the indicated Manifest record(s).
  #
  # @param [any, nil] items
  # @param [Boolean]  fatal           If *false* do not #raise_failure.
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Destroyed Manifest records.
  #
  # @yield [record] Called for each record before deleting.
  # @yieldparam [Manifest] record
  # @yieldreturn [String,nil]         Error message if *record* unacceptable.
  #
  def destroy_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, ?fatal: bool, **untyped opt) ?{ (Manifest record) -> (String | nil) } -> Array[Manifest]

  # Persist changes to an existing manifest and update the saved state of all
  # associated rows.
  #
  # @param [Manifest, Hash, nil] item       Default: `#identifier`.
  # @param [Hash, nil]           attr       Default: `#current_params`.
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  # @see file:assets/javascripts/controllers/manifest-edit.js *saveUpdates()*
  #
  def save_changes: (?(Manifest|symHash|nil) item, ?(symHash|nil) attr) -> Manifest

  # Back out of provisional changes to associated rows.
  #
  # @param [Manifest, Hash, nil] item       Default: `#identifier`.
  # @param [Hash, nil]           attr       Default: `#current_params`.
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  # @see file:assets/javascripts/controllers/manifest-edit.js *cancelUpdates()*
  #
  def cancel_changes: (?(Manifest|symHash|nil) item, ?(symHash|nil) attr) -> Manifest

  # Validate readiness of a manifest to start transmission.
  #
  # @param [Manifest, Hash, nil] item       Default: `#identifier`.
  # @param [Hash, nil]           opt        Ignored.
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  def remit_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Start transmission of a manifest.
  #
  # @param [Manifest, Hash, nil] item
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  #def start_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Terminate transmission of a manifest.
  #
  # @param [Manifest, Hash, nil] item
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  #def stop_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Pause transmission of a manifest.
  #
  # @param [Manifest, Hash, nil] item
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  #def pause_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Resume transmission of a paused manifest.
  #
  # @param [Manifest, Hash, nil] item
  # @param [Hash, nil]           opt        Default: `#model_request_params`
  #
  # @raise [Record::NotFound]               If the Manifest could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Manifest record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Manifest record update halted.
  #
  # @return [Manifest]              A fresh record unless *item* is a Manifest.
  #
  #def resume_manifest: (?(Manifest|symHash|nil) item, ?(symHash|nil) opt) -> Manifest

  # Create an Options instance from the current parameters.
  #
  # @return [Manifest::Options]
  #
  def get_model_options: () -> Manifest::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [Manifest::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> Manifest::Paginator

  private

  THIS_MODULE: Module
end
