# Controller callbacks and support methods for working with `session`.
#
module SessionConcern
  extend ActiveSupport::Concern

  include Emma::Debug

  include FlashHelper

  include SerializationHelper

  include ApiConcern

  include AuthConcern

  include ParamsConcern

  # :nocov:
  #include Devise::Controllers::Helpers

  # Keys for session values that should not be touched by #cleanup_session.
  #
  # Note that all 'devise.*', 'omniauth.*' and 'warden.*' entries are preserved
  # because any entry with a '.' in its key name is preserved.
  #
  # @type [Array<String,Regexp>]
  #
  PRESERVE_SESSION_KEYS: Array[String|Regexp]

  # Redirect after a successful authorization operation.
  #
  # @param [String, nil] path         Default: `#after_sign_in_path_for`.
  # @param [User, nil]   user         Default: `#resource`.
  # @param [*]           message      Passed to #set_flash_notice.
  # @param [Hash]        opt          Passed to #set_flash_notice.
  #
  def auth_success_redirect: (?(String|nil) path, ?user: User|nil, ?message: flashArgs, **untyped opt) -> void

  # Redirect after a failed authorization operation.
  #
  # @param [String, nil] path         Default: `#after_sign_out_path_for`.
  # @param [User, nil]   user         Default: `#resource`.
  # @param [*]           message      Passed to #set_flash_notice.
  # @param [Hash]        opt          Passed to #set_flash_alert.
  #
  def auth_failure_redirect: (?(String|nil) path, ?user: User|nil, ?message: flashArgs, **untyped opt) -> void

  # Set `flash[:notice]` based on the current action and user name.
  #
  # @param [String, *]               message
  # @param [Symbol, nil]             action   Default: `params[:action]`.
  # @param [String, Hash, User, nil] user     Default: `current_user`.
  # @param [Hash]                    opt      Passed to #flash_notice.
  #
  # @return [void]
  #
  def set_flash_notice: (?flashArgs message, ?action: Symbol|nil, ?user: String|anyHash|User|nil, **untyped opt) -> void

  # Set `flash[:alert]` based on the current action and user name.
  #
  # @param [String, *]               message
  # @param [Symbol, nil]             action   Default: `params[:action]`.
  # @param [String, Hash, User, nil] user     Default: `current_user`.
  # @param [Hash]                    opt      Passed to #flash_alert.
  #
  # @return [void]
  #
  def set_flash_alert: (?flashArgs message, ?action: Symbol|nil, ?user: String|anyHash|User|nil, **untyped opt) -> void

  # Configured success or failure message.
  #
  # @param [String, Symbol]          status
  # @param [Symbol, nil]             action   Default: `params[:action]`.
  # @param [String, Hash, User, nil] user     Default: `current_user`.
  #
  # @return [String]
  #
  def status_message: (status: String|Symbol, ?action: Symbol|nil, ?user: String|anyHash|User|nil) -> String

  # Persist information about the last operation performed in this session.
  #
  # @param [Time]   time              Default: `Time.now`.
  # @param [String] path              Default: `request.path`.
  #
  # @return [Hash{String=>*}, nil]
  #
  def last_operation_update: (?time: Time|nil, ?path: String|nil) -> (strHash | nil)

  # Application-specific `#session` keys.
  #
  # @return [Array<String>]
  #
  def session_keys: () -> strArray

  # Indicate whether handling of the current request should be wrapped by
  # #session_update.
  #
  def session_updatable?: () -> bool

  # Parameters that are not abbreviated in #last_operation['params'].
  #
  # @type [Array<Symbol>]
  #
  LAST_OP_NO_ABBREV: symArray

  # Maximum size for the rendered result of #last_operation['params'].
  #
  # @type [Integer]
  #
  MAX_LAST_OP_PARAMS: Integer

  # Maximum size for any individual item within the rendered result of
  # #last_operation['params'].
  #
  # @type [Integer]
  #
  MAX_LAST_OP_PARAM: Integer

  # Substitution for a Hash-valued parameter in #last_operation['params'].
  #
  # @param [String]
  #
  HASH_PLACEHOLDER: String

  # Substitution for an Array-valued parameter in #last_operation['params'].
  #
  # @param [String]
  #
  ARRAY_PLACEHOLDER: String

  # Since #last_operation parameters are only for dev purposes, this method is
  # used to reduce the reported value in order to avoid CookieOverflow.
  #
  # @param [Hash{Symbol=>*}] h
  # @param [Integer]         max      Maximum size of representation.
  # @param [Integer]         p_max    Max representation of individual param.
  #
  # @return [Hash{String=>*}]
  #
  def abbreviate_params!: (symHash h, ?max: Integer, ?p_max: Integer) -> strHash

  # abbreviate_param
  #
  # @param [*]       item
  # @param [Integer] p_max            Maximum size of representation.
  #
  # @return [*]
  #
  def abbreviate_param: (untyped item, ?p_max: Integer) -> untyped

  # The item as it will be represented in the session cookie.
  #
  # @param [String, Symbol, Hash, Array] item
  #
  # @return [String]
  #
  def escaped_value: (String|Symbol|anyHash|anyArray item) -> String

  # Respond to the situation in which an authenticated user attempted to access
  # a route that is not allowed by the user's role.
  #
  # @param [CanCan::AccessDenied] exception
  #
  # @return [nil]                     If not handled.
  # @return [*]                       Otherwise.
  #
  def access_denied_handler: (CanCan::AccessDenied exception) -> (untyped | nil)

  # Respond to page failures due to a failure to communicate with a remote
  # service.
  #
  # @param [ExecError, Faraday::Error] exception
  #
  # @return [nil]                     If not handled.
  # @return [*]                       Otherwise.
  #
  def connection_error_handler: (ExecError|Faraday::Error exception) -> (untyped | nil)

  # Respond to general page failures.
  #
  # @param [Exception] exception
  #
  # @return [nil]                     If not handled.
  # @return [*]                       Otherwise.
  #
  def fallback_error_handler: (Exception exception) -> (untyped | nil)

  # If there is an error in the error handler it's probably due to a missing
  # template, so this method renders a safe page so that flash messages can
  # be displayed.
  #
  # @param [Symbol]    meth           Failed error handler.
  # @param [Exception] error
  #
  def error_handler_deep_fallback: (Symbol meth, ?(Exception|nil) error) -> untyped

  # Clean out empty session values.
  #
  # @return [void]
  #
  def cleanup_session: () -> void

  # If a reboot occurred since the last session update, ensure consistency by
  # performing a sign-out and cleaning up related session data.
  #
  # @return [void]
  #
  # == Usage Notes
  # This must be invoked as a :before_action.
  #
  def session_check: () -> void

  # Remember the last operation performed in this session and set the flash
  # alert if there was an unprocessed ApiSession exception.
  #
  # @raise [Exception]                Propagated if raised by the block.
  #
  # == Usage Notes
  # This must be invoked as an :around_action.
  #
  # == Implementation Notes
  # The "ensure" block is executed before the ApplicationController
  # "rescue_from".  However, note that Rails is doing something with "$!" which
  # causes Faraday::ClientError to be the exception that's acted upon in that
  # block, whereas :api_error_message shows the BookshareService::Error that is
  # created in BookshareService::Common#api.
  #
  def session_update: () { () -> void } -> void

  private

  THIS_MODULE: Module

  public

  include SerializationHelper

  # :nocov:
  #include AbstractController::Callbacks::ClassMethods

  #include SessionConcern

  # This overrides the DeviseController message to allow the standard
  # 'already_authenticated' flash message to be overridden by
  # `session['app.devise.failure.message']`.
  #
  # @see UserConcern#role_failure
  #
  def require_no_authentication: () -> untyped
end
