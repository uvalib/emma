# Support methods for the "/manifest_item" controller.
#
# @!method model_options
#   @return [ManifestItem::Options]
#
# @!method paginator
#   @return [ManifestItem::Paginator]
#
module ManifestItemConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include Emma::Json

  include ImportConcern

  include SerializationConcern

  include ModelConcern

  # The manifest identified in URL parameters.
  #
  # @return [String, nil]
  #
  def manifest_id: () -> (String | nil)

  @manifest_id: String | nil

  # Extract POST parameters and data for bulk operations.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  #
  # @return [Hash]
  #
  # @see ImportConcern#fetch_data
  #
  def manifest_item_bulk_post_params: () -> symHash

  # Get URL parameters relevant to the current operation.
  #
  # @return [Hash]
  #
  def current_get_params: () -> symHash

  # Extract POST parameters that are usable for creating/updating a
  # ManifestItem instance.
  #
  # @return [Hash]
  #
  def current_post_params: () -> symHash

  # Locate and filter ManifestItem records.
  #
  # @param [Array<String,Array>] items
  # @param [Array<Symbol>]       filters
  # @param [Hash]                opt
  #
  # @return [Paginator::Result]
  #
  def find_or_match_records: (*(String|anyArray) items, ?filters: symArray, **untyped opt) -> Paginator::Result

  # The related Manifest identified in URL parameters.
  #
  # @param [Hash] prm
  #
  # @return [Integer, nil]
  #
  def extract_manifest_id: (symHash prm) -> (Integer | nil)

  # Interpret data as JSON.
  #
  # @param [String, ActionDispatch::Request, nil] data
  #
  # @return [Array<Hash>, nil]
  #
  def from_json: (String|ActionDispatch::Request|nil data) -> (Array[symHash] | nil)

  # Interpret data as CSV.
  #
  # @param [String, ActionDispatch::Request, nil] data
  #
  # @return [Array<Hash>, nil]
  #
  def from_csv: (String|ActionDispatch::Request|nil data) -> (Array[symHash] | nil)

  # Transform import data into ManifestItem field values.
  #
  # @param [Hash] item
  #
  # @return [Hash]
  #
  def import_transform!: (symHash item) -> symHash

  # Transform ManifestItem field values for export.
  #
  # @param [Hash] item
  #
  # @return [Hash]
  #
  def export_transform!: (symHash item) -> symHash

  # Restoration of ManifestItem fields on import.
  #
  # @type [Hash{Symbol=>Symbol}]
  #
  IMPORT_FIELD: Hash[Symbol,Symbol]

  # Transform received data to allow some flexibility in the naming of import
  # columns by mapping into the expected field names.
  #
  # @param [Hash] item
  #
  # @return [Hash]
  #
  def normalize_import_name!: (symHash item) -> symHash

  # Transformation of ManifestItem fields on export.
  #
  # @type [Hash{Symbol=>Symbol}]
  #
  EXPORT_FIELD: Hash[Symbol,Symbol]

  # Transform potentially ambiguous field names into ones that are not likely
  # to clash if exported data is intermingled with fields from other systems
  # and then re-imported.
  #
  # @param [Hash] item
  #
  # @return [Hash]
  #
  def normalize_export_name!: (symHash item) -> symHash

  # Return with the specified model record.
  #
  # @param [any, nil] item      String, Integer, Hash, Model; def: #identifier.
  # @param [Hash]     opt       Passed to Record::Identification#find_record.
  #
  # @raise [Record::StatementInvalid] If :id not given.
  # @raise [Record::NotFound]         If *item* was not found.
  #
  # @return [ManifestItem, nil] A fresh record unless *item* is a #model_class.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [ManifestItem] record
  # @yieldreturn [void]
  #
  def find_record: (?(String|Integer|Model|symHash|nil) item, **untyped opt) ?{ (ManifestItem record) -> void } -> (ManifestItem | nil)

  # Start a new ManifestItem.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [ManifestItem]            An un-persisted ManifestItem instance.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def new_record: (?symHash? prm, **untyped opt) ?{ (symHash attr) -> void } -> ManifestItem

  # Add a new ManifestItem record to the database.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Boolean]   fatal          If *false*, use #save not #save!.
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [ManifestItem]            The new ManifestItem record.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def create_record: (?symHash? prm, ?fatal: bool, **untyped opt) ?{ (symHash attr) -> void } -> ManifestItem

  # Retrieve the indicated ManifestItem record for the '/edit' model form.
  #
  # @param [any, nil] item            Default: the record for #identifier.
  # @param [Hash]     opt             Passed to #find_record.
  #
  # @raise [Record::SubmitError]      Record could not be found.
  #
  # @return [ManifestItem, nil] A fresh instance unless *item* is ManifestItem.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [ManifestItem] record
  # @yieldreturn [void] Block not called if *record* is *nil*.
  #
  def edit_record: (?(String|Integer|ManifestItem|symHash|nil) item, **untyped opt) ?{ (ManifestItem record) -> void } -> (ManifestItem | nil)

  # Update the indicated ManifestItem record.
  #
  # @param [any, nil] item            Def.: record for ModelConcern#identifier.
  # @param [Boolean]  fatal           If *false* use #update not #update!.
  # @param [Hash]     opt             Field values except #UPDATE_STATUS_OPT
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [ManifestItem, nil]       The updated ManifestItem record.
  #
  # @yield [record, attr] Raise an exception if the record is not acceptable.
  # @yieldparam [ManifestItem] record
  # @yieldparam [Hash]         attr   New field(s) to be assigned to *record*.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def update_record: (?(String|Integer|Model|symHash|nil) item, ?fatal: bool, **untyped opt) ?{ (ManifestItem record, symHash attr) -> void } -> (ManifestItem | nil)

  # Retrieve the indicated ManifestItem record(s) for the '/delete' page.
  #
  # @param [any, nil] items           To #search_records
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [RangeError]               If :page is not valid.
  #
  # @return [Paginator::Result]
  #
  # @yield [items, opt] Raise an exception unless the *items* are acceptable.
  # @yieldparam [Array] items         Identifiers of items to be deleted.
  # @yieldparam [Hash]  options       Options to #search_records.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def delete_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, **untyped opt) ?{ (Array[Model|String|Integer] items, symHash options) -> void } -> Paginator::Result

  # Remove the indicated ManifestItem record(s).
  #
  # @param [any, nil] items
  # @param [Boolean]  fatal           If *false* do not #raise_failure.
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Destroyed ManifestItem records.
  #
  # @yield [record] Called for each record before deleting.
  # @yieldparam [ManifestItem] record
  # @yieldreturn [String,nil]         Error message if *record* unacceptable.
  #
  def destroy_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, ?fatal: bool, **untyped opt) ?{ (ManifestItem record) -> (String | nil) } -> Array[ManifestItem]

  RECORD_KEYS: symArray

  NON_DATA_KEYS: symArray

  NON_EDIT_KEYS: symArray

  # Set :editing state (along with any other fields if they are provided).
  #
  # @param [ManifestItem, nil] item   Def.: record for ModelConcern#identifier.
  # @param [Boolean, nil]      fatal  Passed to database method if present.
  # @param [Symbol, nil]       meth   Caller (for diagnostics).
  # @param [Hash]              attr   Field values.
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [ManifestItem]
  # @return [nil]                     Only if *fatal* == *false*.
  #
  def start_editing: (?(ManifestItem|nil) item, ?fatal: bool|nil, ?meth: Symbol|nil, **untyped attr) -> (ManifestItem | nil)

  # Update with provided fields (if any) and clear :editing state.
  #
  # @param [ManifestItem, nil] item   Def.: record for ModelConcern#identifier.
  # @param [Symbol, nil]       meth   Caller (for diagnostics).
  # @param [Hash]              attr   Field values.
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [Hash]
  #
  # @see file:controllers/manifest-edit.js *parseFinishEditResponse*
  #
  def finish_editing: (?(ManifestItem|nil) item, ?meth: Symbol|nil, **untyped attr) -> { :items => Hash[Integer,symHash], :pending => Hash[Integer,symHash]|nil, :problems => symHash }

  # Update with provided fields (if any) and clear :editing state.
  #
  # @param [ManifestItem, nil] item   Def.: record for ModelConcern#identifier.
  # @param [Hash]              attr   Field values.
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [Hash]
  #
  # @see file:javascripts/controllers/manifest-edit.js *postRowUpdate*
  #
  def editing_update: (?(ManifestItem|nil) item, **untyped attr) -> { :items => Hash[Integer,symHash], :pending => Hash[Integer,symHash]|nil, :problems => symHash }

  # Upload a file to the AWS S3 Shrine :cache and update record :file_data with
  # the response.
  #
  # The Shrine response is augmented with an :emma_data entry containing the
  # record fields -- including :id since this may be the first "edit" of the
  # grid item and thus the first opportunity for the client to learn what
  # database entry is associated with that item.
  #
  # @param [ManifestItem, nil] item         Def.: ModelConcern#identifier.
  # @param [Boolean]           update_time  If *false* update :file_data only.
  # @param [Hash, nil]         env          Def.: `request.env`.
  # @param [Symbol, nil]       meth         Caller (for diagnostics).
  # @param [Hash]              opt          Field values.
  #
  # @return [Array<(Integer, Hash{String=>any,nil}, Array<String>)>]
  #
  # @note If update_time is *false* the associated record must already exist.
  #
  def upload_file: (?(ManifestItem|nil) item, update_time: bool, ?env: anyHash|nil, ?meth: Symbol|nil, **untyped opt) -> httpResult

  # A relation for all rows of the indicated Manifest ordered by row.
  #
  # @param [String, nil] m_id   Manifest ID.
  # @param [Hash]        opt
  #
  # @option opt [String]       :manifest_id
  # @option opt [String, Hash] :manifest
  #
  # @return [ActiveRecord::Relation<ManifestItem>]
  #
  def all_manifest_items: (?(String|nil) m_id, **untyped opt) -> ActiveRecord::Relation

  # bulk_new_manifest_items
  #
  # @return [any, nil]
  #
  def bulk_new_manifest_items: () -> untyped

  # bulk_create_manifest_items
  #
  # @param [Array<Symbol>] returning  Returned result columns.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array<Hash>]             Created rows.
  #
  def bulk_create_manifest_items: (?returning: symArray) -> Array[symHash]

  # bulk_edit_manifest_items
  #
  # @return [any, nil]
  #
  def bulk_edit_manifest_items: () -> untyped

  # bulk_update_manifest_items
  #
  # @param [Array<Symbol>] returning  Returned result columns.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array<Hash>]             Modified rows.
  #
  def bulk_update_manifest_items: (?returning: symArray) -> Array[symHash]

  # bulk_delete_manifest_items
  #
  # @return [any, nil]
  #
  def bulk_delete_manifest_items: () -> untyped

  # bulk_destroy_manifest_items
  #
  # This marks items for deletion unless `params[:commit]` is true.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array<Integer>]          Affected rows.
  #
  def bulk_destroy_manifest_items: () -> Array[Integer]

  # bulk_fields_manifest_items
  #
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array<Hash>]             Modified items.
  #
  def bulk_fields_manifest_items: () -> Array[symHash]

  # Data for one or more manifest items from parameters.
  #
  # @return [Array<Hash>]
  #
  def bulk_item_data: () -> Array[symHash]

  # Transform a :returning result into an array of data hashes.
  #
  # @param [ActiveRecord::Result] result
  #
  # @return [Array<Hash>]
  #
  def bulk_returning: (ActiveRecord::Result result) -> Array[symHash]

  # A list of ManifestItems plus validity information.
  #
  # @param [any, nil] list
  # @param [Hash]    opt              Passed to #index_values.
  #
  # @return [Hash{Symbol=>Hash}]
  #
  # @see file:javascripts/controllers/manifest-edit.js *processReceivedItems*
  #
  def bulk_update_response: (?untyped list, **untyped opt) -> Hash[Symbol,symHash]

  # A list of ManifestItem IDs.
  #
  # @param [any, nil] list
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def bulk_id_response: (?untyped list, **untyped _ignored) -> Hash[Symbol,symHash]

  # Generate a response to a POST.
  #
  # @param [Symbol, Integer, Exception, nil] status
  # @param [any, nil]                        item
  # @param [Hash]                            opt
  #
  # @return [void]
  #
  def post_response
    : ((Symbol|Integer|nil) status, ?untyped   item, **untyped opt) -> void
    | (                              Exception item, **untyped opt) -> void

  # Create an Options instance from the current parameters.
  #
  # @return [ManifestItem::Options]
  #
  def get_model_options: () -> ManifestItem::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [ManifestItem::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> ManifestItem::Paginator

  # @private
  # @type [Symbol, String]
  RESPONSE_OUTER: Symbol

  # Response values for de-serializing the index page to JSON or XML.
  #
  # @param [any, nil] list            Default: `paginator.page_items`
  # @param [Hash]     opt
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def index_values: (?untyped list, **untyped opt) -> Hash[Symbol,symHash]

  # Response values for de-serializing the show page to JSON or XML.
  #
  # @param [any, nil] item            Model, Hash
  # @param [Hash]     opt
  #
  # @return [Hash]
  #
  def show_values: (?untyped item, **untyped opt) -> symHash

  private

  THIS_MODULE: Module
end
