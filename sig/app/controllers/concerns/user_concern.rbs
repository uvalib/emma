# Controller support methods for working with authentication and user identity.
#
module UserConcern
  extend ActiveSupport::Concern

  include Emma::Project

  include FlashHelper

  include IdentityHelper

  include AuthConcern

  # Defined by Devise.
  #
  # @return [User, nil]
  #
  # @private
  # @see Devise::Controllers::Helpers#define_helpers
  #
  def current_user: () -> (User | nil)

  # Authenticate the current session user, failing if the user is inactive.
  #
  # @return [User, nil]
  #
  # @see Devise::Controllers::Helpers#define_helpers
  #
  def authenticate_user!: (?anyHash opts) -> (User | nil)

  # Sign out *user* if the account is marked as inactive.
  #
  # @param [User] user
  #
  def check_inactive: (User user) -> void

  # Return Bookshare account summary information and account preferences.
  #
  # @note Defunct
  #
  # @param [String]         id        If *nil*, assumes the current user.
  # @param [Boolean]        fast      If *true*, don't get history/preferences.
  # @param [Symbol, String] meth      Calling method.
  #
  # _return [Array<(
  #   Bs::Message::MyAccountSummary,
  #   Bs::Message::MyAccountPreferences,
  #   Bs::Message::TitleDownloadList
  # )>]
  # @return [Array(nil,nil,nil)]
  #
  def get_account_details: (?id: String|nil, ?fast: bool|nil, ?meth: Symbol|String|nil) -> ([untyped, untyped|nil, untyped|nil] | [nil, nil, nil])

  @user: User | nil

  # Update the current user with previously-acquired authentication data.
  #
  # @return [void]
  #
  def update_user: () -> void

  # Authenticate then ensure that the user does not have the :uploadOnly role.
  #
  # @param [Hash] opt                 Passed to #authenticate_user!
  #
  def authenticate_download!: (**untyped opt) -> void

  # Authenticate then ensure that the user has the :administrator role.
  #
  # @param [Hash] opt                 Passed to #authenticate_user!
  #
  def authenticate_admin!: (**untyped opt) -> void

  # Authenticate then ensure that the user has the :developer role.
  #
  # @param [Hash] opt                 Passed to #authenticate_user!
  #
  # @note Currently unused.
  #
  def authenticate_dev!: (**untyped opt) -> void

  private

  # Cause an insufficient role for an authenticated session to generate an
  # authentication failure.
  #
  # @param [String, Symbol, nil] role
  #
  def role_failure: (?(String|Symbol|nil) role) -> void

  # Generate an authentication failure the way Devise does.
  #
  # @param [String, nil] msg          Default: 'devise.failure.unauthenticated'
  # @param [String, nil] path         Default: `root_path`
  #
  # === Implementation Notes
  # This method sets `session['app.devise.redirect']` in order to prevent
  # SessionConcern#after_sign_in_path_for from specifying the current (failed)
  # page as the redirect from DeviseController#require_no_authentication.
  #
  def authentication_failure: (?msg: String|nil, ?path: String|nil) -> void

  THIS_MODULE: Module
end
