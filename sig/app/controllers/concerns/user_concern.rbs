# Controller support methods for working with authentication and user identity.
#
module UserConcern
  extend ActiveSupport::Concern

  # Defined by Devise.
  #
  # @return [void]
  #
  # @see Devise::Controllers::Helpers#define_helpers
  #
  # @private
  #
  # -
  # noinspection RubyUnusedLocalVariable
  # +
  def authenticate_user!: (?anyHash opts) -> (User | nil)

  # Defined by Devise.
  #
  # @return [User, nil]
  #
  # @see Devise::Controllers::Helpers#define_helpers
  #
  # @private
  #
  def current_user: () -> (User | nil)

  include FlashConcern

  include BookshareConcern

  # Return account summary information and account preferences.
  #
  # @param [String]         id        If *nil*, assumes the current user.
  # @param [Symbol, String] meth      Calling method.
  #
  # @return [Array<(
  #   Bs::Message::MyAccountSummary,
  #   Bs::Message::MyAccountPreferences,
  #   Bs::Message::TitleDownloadList
  # )>]
  # @return [Array<(nil,nil,nil)>]
  #
  def get_account_details: (?id: String?, ?meth: (Symbol|String)?) -> ([Bs::Message::MyAccountSummary, Bs::Message::MyAccountPreferences?, Bs::Message::TitleDownloadList?] | [nil, nil, nil])

  # Update the current user with previously-acquired authentication data.
  #
  # @return [void]
  #
  def update_user: () -> void

  # Authenticate then ensure that the user has the :administrator role.
  #
  # @param [Hash] opt                 Passed to #authenticate_user!
  #
  def authenticate_admin!: (**untyped opt) -> void

  # Authenticate then ensure that the user has the :developer role.
  #
  # @param [Hash] opt                 Passed to #authenticate_user!
  #
  # @note Currently unused.
  #
  def authenticate_dev!: (**untyped opt) -> void

  private

  ROLE_FAILURE: String

  # Cause an insufficient role for an authenticated session to generate an
  # authentication failure the way Devise does.
  #
  # @param [String, Symbol, nil] msg  Default: 'devise.failure.unauthenticated'
  #
  # == Implementation Notes
  # This method sets `session['app.devise.redirect']` in order to prevent
  # SessionConcern#after_sign_in_path_for from specifying the current (failed)
  # page as the redirect from DeviseController#require_no_authentication.
  #
  def role_failure: (?(String|Symbol)? msg) -> void

  #THIS_MODULE: untyped
end
