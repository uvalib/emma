# Support methods for the "/entry" controller.
#
module EntryConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include Emma::Csv

  include Emma::Json

  include Record::Exceptions

  include ParamsHelper

  include FlashHelper

  include HttpHelper

  include IngestConcern

  # :nocov:
  #include OptionsConcern

  MIME_REGISTRATION: Array[Class]

  # POST/PUT/PATCH parameters from the entry form that are not relevant to the  # NOTE: from UploadConcern#IGNORED_UPLOAD_FORM_PARAMS
  # create/update of an Entry instance.
  #
  # @type [Array<Symbol>]
  #
  IGNORED_ENTRY_FORM_PARAMS: symArray

  @action_id:  String | Integer | nil
  @phase_id:   String | Integer | nil
  @entry_id:   String | Integer | nil
  @identifier: String | Integer | nil

  # URL parameters relevant to the current operation.
  #
  # @return [Hash{Symbol=>Any}]
  #
  def entry_params: () -> symHash

  @entry_params: symHash

  # Get URL parameters relevant to the current operation.
  #
  # @param [ActionController::Parameters, Hash, nil] p   Def: `#url_parameters` # NOTE: never used; always nil
  #
  # @return [Hash{Symbol=>Any}]
  #
  def get_entry_params: (?(prmHash|nil) p) -> symHash

  # Extract POST parameters that are usable for creating/updating an Entry
  # instance.
  #
  # @param [ActionController::Parameters, Hash, nil] p   Def: `#url_parameters` # NOTE: never used; always nil
  #
  # @return [Hash{Symbol=>Any}]
  #
  # == Implementation Notes
  # The value `params[:entry][:emma_data]` is ignored because it reports the
  # original metadata values that were supplied to the edit form.  The value
  # `params[:entry][:file]` is ignored if it is blank or is the JSON
  # representation of an empty object ("{}") -- this indicates an editing
  # submission where metadata is being changed but the uploaded file is not
  # being replaced.
  #
  def entry_post_params: (?(prmHash|nil) p) -> symHash

  # Extract POST parameters and data for bulk operations.
  #
  # @param [ActionController::Parameters, Hash, nil] p   Def: `#url_parameters`
  # @param [ActionDispatch::Request, nil]            req Def: `#request`.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  #
  # @return [Array<Hash{Symbol=>Any}>]
  #
  def entry_bulk_post_params: (?(prmHash|nil) p, ?(ActionDispatch::Request|nil) req) -> Array[symHash]

  # entry_request_params
  #
  # @param [Entry, Hash{Symbol=>Any}, Any, nil] entry
  # @param [Hash{Symbol=>Any}, nil]             prm
  #
  # @return [Array<(Entry, Hash{Symbol=>Any})>]
  # @return [Array<(Any, Hash{Symbol=>Any})>]
  #
  def entry_request_params: ((Entry|untyped|nil) entry, ?(symHash|nil) prm) -> ([Entry, symHash] | [untyped, symHash])

  # Remote or locally-provided data.
  #
  # @param [Hash] opt
  #
  # @option opt [String]       :src   URI or path to file containing the data.
  # @option opt [String, Hash] :data  Literal data.
  #
  # @raise [RuntimeError]             If both *src* and *data* are present.
  #
  # @return [nil]                     If both *src* and *data* are missing.
  # @return [Hash]
  # @return [Array<Hash>]
  #
  def fetch_data: (**untyped opt) -> (anyHash | Array[anyHash] | nil)

  # URL parameters associated with item/entry identification.                   # NOTE: from UploadConcern
  #
  # @type [Array<Symbol>]
  #
  IDENTIFIER_PARAMS: symArray

  # URL parameters associated with POST data.
  #
  # @type [Array<Symbol>]
  #
  DATA_PARAMS: symArray

  # Extract the best-match URL parameter which represents an item identifier.
  #
  # The @identifier member variable contains the original item specification,
  # if one was provided, and not the array of IDs represented by it.
  #
  # @param [ActionController::Parameters, Hash, nil] p   Def: `#url_parameters`
  #
  # @return [String]                  Value of @identifier.
  # @return [nil]                     No param from #IDENTIFIER_PARAMS found.
  #
  def set_identifiers: (?(prmHash|nil) p) -> (String | nil)

  # Parameters used by Entry#search_records.                                    # NOTE: from UploadConcern
  #
  # @type [Array<Symbol>]
  #
  SEARCH_RECORDS_PARAMS: symArray

  # Entry#search_records parameters that specify a distinct search query.       # NOTE: from UploadConcern
  #
  # @type [Array<Symbol>]
  #
  SEARCH_ONLY_PARAMS: symArray

  # Parameters used by #find_by_match_records or passed on to                   # NOTE: from UploadConcern
  # Entry#search_records.
  #
  # @type [Array<Symbol>]
  #
  FIND_OR_MATCH_PARAMS: symArray

  # Locate and filter Entry records.
  #
  # @param [Array<String,Array>] items  Default: `@identifier`.
  # @param [Hash]                opt    Passed to Entry#search_records;
  #                                       default: `#entry_params` if no
  #                                       *items* are given.
  #
  # @raise [Record::SubmitError]        If :page is not valid.
  #
  # @return [Hash{Symbol=>Any}]
  #
  def find_or_match_entries: (*(String|anyArray) items, **untyped opt) -> symHash

  # Return with the specified Entry record or *nil* if one could not be found.
  #
  # @param [String, Hash, Entry, nil] item  Default: @identifier.
  # @param [Hash]                     opt   Passed to Entry#find_record.
  #
  # @raise [Record::StatementInvalid]   If :id/:sid not given.
  # @raise [Record::NotFound]           If *item* was not found.
  #
  # @return [Entry, nil]
  #
  def get_entry: (?(String|Entry|anyHash|nil) item, **untyped opt) -> (Entry | nil)

  # Get Entry data from the production service.
  #
  # @param [String] sid               Submission ID of the item.
  # @param [String] host              Base URL of production service.
  #
  # @return [Entry]                   Object created from received data.
  # @return [nil]                     Bad data and/or no object created.
  #
  def proxy_get_entry: (String sid, String host) -> (Entry | nil)

  # For the 'new' endpoint, generate and persist a Phase::Create record and a
  # temporary (un-persisted) Entry instance based on its attributes.
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @raise [ActiveRecord::RecordInvalid]    Phase record creation failed.
  # @raise [ActiveRecord::RecordNotSaved]   Phase record creation halted.
  #
  # @return [Entry]                         Un-persisted Entry instance.
  #
  def new_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> Entry

  # For the 'create' endpoint, update the Phase record created above and create # TODO: NOTE: used in place of Record::Submittable::SubmissionMethods#entry_create
  # and persist a new Entry instance
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @raise [Record::StatementInvalid]       If submission ID was invalid.
  # @raise [Record::NotFound]               If Phase::Create record not found.
  # @raise [Record::SubmitError]            Invalid workflow transition.
  # @raise [ActiveRecord::RecordInvalid]    Update failed due to validations.
  # @raise [ActiveRecord::RecordNotSaved]   Update halted due to callbacks.
  #
  # @return [Entry]                         New persisted Entry instance.
  #
  def create_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> Entry

  # For the 'edit' endpoint, generate and persist a Phase::Edit record and a    # TODO: NOTE: used in place of Record::Submittable::SubmissionMethods#entry_edit
  # temporary (un-persisted) instance based on its attributes.
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @raise [Record::SubmitError]            If the Entry could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Phase record creation failed.
  # @raise [ActiveRecord::RecordNotSaved]   Phase record creation halted.
  #
  # @return [Entry, nil]
  #
  def edit_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> (Entry | nil)

  # For the 'update' endpoint, get the matching Entry and update it from its
  # most recent Phase::Edit.
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @raise [Record::NotFound]               If the Entry could not be found.
  # @raise [Record::SubmitError]            If the Phase could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Entry record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Entry record update halted.
  #
  # @return [Entry, nil]
  #
  def update_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> (Entry | nil)

  # For the 'delete' endpoint...
  #
  # @param [String, Entry, Array, nil] entries
  # @param [Hash, nil]                 opt   Default: `#get_entry_params`.
  #
  # @raise [RangeError]               If :page is not valid.
  #
  # @return [Hash{Symbol=>Any}]       From Record::Searchable#search_records.
  #
  def delete_entry: (?(Entry|String|Integer|Array[String|Integer]|nil) entries, ?(symHash|nil) opt) -> symHash

  # For the 'destroy' endpoint... # TODO: ?
  #
  # @param [String, Entry, Array, nil] entries
  # @param [Hash, nil]                 opt
  #
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Destroyed entries.
  #
  def destroy_entry: (?(Entry|String|Integer|Array[String|Integer]|nil) entries, ?(symHash|nil) opt) -> anyArray

  # For the 'renew' endpoint, find the most recent create and return with the
  # related Entry.
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @raise [Record::StatementInvalid]   If *sid*/opt[:submission_id] invalid.
  # @raise [Record::NotFound]           If Phase::Create could not be found.
  #
  # @return [Entry]                     A record from the 'entries' table.
  #
  def renew_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> Entry

  # For the 'reedit' endpoint, find the most recent edit and return with the
  # related Entry.
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @raise [Record::StatementInvalid]   If *sid*/opt[:submission_id] invalid.
  # @raise [Record::NotFound]           If Phase could not be found or created.
  #
  # @return [Entry]
  #
  def reedit_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> Entry

  # For the 'cancel' endpoint, ... # TODO: ?
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @raise [Record::SubmitError]                If Entry could not be found.
  # @raise [ActiveRecord::RecordNotDestroyed]   If Phase could not be removed.
  #
  # @return [Entry]
  # @return [nil]                               If the Entry was not found.
  #
  def cancel_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> (Entry | nil)

  # Get a description of the status of the Entry, if it exists, or a temporary
  # (un-persisted) Entry based on Phase lookup.
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] item If present, used as a template.
  # @param [Hash{Symbol=>Any}, nil]        opt  Default: `#get_entry_params`.
  #
  # @option opt [Boolean] :html       Default: false.
  # @option opt [Phase]   :phase
  #
  # @raise [RuntimeError]             If neither Entry nor Phase could be found
  #
  # @return [Array<String>]
  #
  def check_entry: (?(Entry|symHash|nil) item, ?(symHash|nil) opt) -> strArray

  # Upload file to AWS S3 Shrine :cache.
  #
  # @param [Entry, Hash{Symbol=>Any}, nil] entry
  # @param [Hash{Symbol=>Any}, nil]        opt     Def.: `#entry_post_params`.
  #
  # @raise [Record::SubmitError]      If the record could not be found.
  #
  # @return [Array<(Integer, Hash{String=>Any}, Array<String>)>]
  #
  # @see Phase::Create#upload!
  # @see Phase::Edit#upload!
  #
  def upload_file: (?(Entry|symHash|nil) entry, ?(symHash|nil) opt) -> httpResult

  # bulk_new_entries
  #
  # @param [Hash, nil] prm            Default: `#get_entry_params`
  #
  # @return [Any]
  #
  def bulk_new_entries: (?(symHash|nil) prm) -> untyped

  # bulk_create_entries
  #
  # @param [Hash, nil] prm            Passed to #entry_bulk_post_params.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Created entries.
  #
  def bulk_create_entries: (?(symHash|nil) prm) -> Array[Entry]

  # bulk_edit_entries
  #
  # @param [Hash, nil] prm            Default: `#get_entry_params`
  #
  # @return [Any]
  #
  def bulk_edit_entries: (?(symHash|nil) prm) -> untyped

  # bulk_update_entries
  #
  # @param [Hash, nil] prm            Passed to #entry_bulk_post_params.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Modified entries.
  #
  def bulk_update_entries: (?(symHash|nil) prm) -> Array[Entry]

  # bulk_delete_entries
  #
  # @param [Hash, nil] prm            Default: `#get_entry_params`
  #
  # @return [Any]
  #
  def bulk_delete_entries: (?(symHash|nil) prm) -> untyped

  # bulk_destroy_entries
  #
  # @param [Hash, nil] prm            Passed to #entry_bulk_post_params
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Removed entries.
  #
  def bulk_destroy_entries: (?(symHash|nil) prm) -> Array[Entry]

  # bulk_check_entries
  #
  # @param [Hash, nil] prm            Default: `#get_entry_params`
  #
  # @return [Any]
  #
  # @note Currently unused.
  #
  def bulk_check_entries: (?(symHash|nil) prm) -> untyped

  # Default batch size for #reindex_submissions
  #
  # @type [Integer]
  #
  DEFAULT_REINDEX_BATCH: Integer

  # reindex_submissions
  #
  # @param [Array<Model,String>] entries
  # @param [Hash, nil]           opt          To Entry#get_relation except for:
  #
  # @option opt [Boolean] :atomic             Passed to #reindex_record.
  # @option opt [Boolean] :dryrun             Passed to #reindex_record.
  # @option opt [Symbol]  :meth               Passed to #reindex_record.
  #
  # @return [Array<(Array<String>, Array<String>)>]  Succeeded/failed
  #
  def reindex_submissions: (*(Model|String) entries, **untyped opt) -> [strArray, strArray]

  # Cause all of the listed items to be re-indexed.
  #
  # @param [Model, Array<Model>, ActiveRecord::Relation] list
  # @param [Boolean]                                     atomic
  # @param [Boolean]                                     dryrun
  # @param [Symbol]                                      meth     Caller.
  #
  # @return [Array<(Array<String>,Array<String>)>]   Succeeded sids / fail msgs
  #
  def reindex_record: ((Model|Array[Model]|ActiveRecord::Relation) list, ?atomic: bool, ?dryrun: bool, ?meth: Symbol|nil, **untyped) -> [strArray, strArray]

  # Generate a response to a POST.
  #
  # @param [Symbol, Integer, Exception]                            status
  # @param [Exception, String, FlashPart, Array<String,FlashPart>] item
  # @param [String, FalseClass]       redirect
  # @param [Boolean]                  xhr       Override `request.xhr?`.
  # @param [Symbol]                   meth      Calling method.
  #
  # @return [void]
  #
  # -
  # == Variations
  # +
  #
  # @overload post_response(status, items, redirect: nil, xhr: nil, meth: nil)
  #   @param [Symbol, Integer]                            status
  #   @param [String, FlashPart, Array<String,FlashPart>] items
  #   @param [String, FalseClass]                         redirect
  #   @param [Boolean]                                    xhr
  #   @param [Symbol]                                     meth
  #
  # @overload post_response(status, error, redirect: nil, xhr: nil, meth: nil)
  #   @param [Symbol, Integer]        status
  #   @param [Exception]              error
  #   @param [String, FalseClass]     redirect
  #   @param [Boolean]                xhr
  #   @param [Symbol]                 meth
  #
  # @overload post_response(error, redirect: nil, xhr: nil, meth: nil)
  #   @param [Exception]              error
  #   @param [String, FalseClass]     redirect
  #   @param [Boolean]                xhr
  #   @param [Symbol]                 meth
  #
  def post_response: ( (Symbol|Integer|nil) status, (Model|String|FlashHelper::FlashPart|Array[Model|String|FlashHelper::FlashPart]|nil) item, ?redirect: String|bool|nil, ?xhr: bool|nil, ?meth: Symbol|nil) -> void
                   | (?(Symbol|Integer|nil) status, Exception item,                                                                            ?redirect: String|bool|nil, ?xhr: bool|nil, ?meth: Symbol|nil) -> void

  private

  THIS_MODULE: Module

  public

  include OptionsConcern

  include PaginationConcern

  # Create a @model_options instance from the current parameters.
  #
  # @return [Entry::Options]
  #
  def set_model_options: () -> Entry::Options

  @model_options: Entry::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [Entry::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> Entry::Paginator
end
