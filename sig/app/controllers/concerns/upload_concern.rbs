# Support methods for the "/upload" controller.
#
# @!method paginator
#   @return [Upload::Paginator]
#
module UploadConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include Emma::Json

  include ParamsHelper

  include FlashHelper

  include HttpHelper

  include ImportConcern

  include IngestConcern

  include OptionsConcern

  include ResponseConcern

  include PaginationConcern

  MIME_REGISTRATION: Array[Class]

  # URL parameters associated with item/entry identification.
  #
  # @type [Array<Symbol>]
  #
  IDENTIFIER_PARAMS: symArray

  # The upload identified in URL parameters either as :selected or :id.
  #
  # @return [String, nil]
  #
  def identifier: () -> (String | nil)

  @identifier: String | nil

  # The database ID of the upload identified in URL parameters.
  #
  # @return [Integer, nil]
  #
  def db_id: () -> (Integer | nil)

  @db_id: Integer | nil

  @workflow: Workflow::Base

  # URL parameters relevant to the current operation.
  #
  # @return [Hash{Symbol=>*}]
  #
  def upload_params: () -> symHash

  @upload_params: symHash

  # Get URL parameters relevant to the current operation.
  #
  # @return [Hash{Symbol=>*}]
  #
  def get_upload_params: () -> symHash

  # Extract POST parameters that are usable for creating/updating an Upload
  # instance.
  #
  # @return [Hash{Symbol=>*}]
  #
  # == Implementation Notes
  # The value `params[:upload][:emma_data]` is ignored because it reports the
  # original metadata values that were supplied to the edit form.  The value
  # `params[:upload][:file]` is ignored if it is blank or is the JSON
  # representation of an empty object ("{}") -- this indicates an editing
  # submission where metadata is being changed but the uploaded file is not
  # being replaced.
  #
  def upload_post_params: () -> symHash

  # Extract POST parameters and data for bulk operations.
  #
  # @raise [RuntimeError]             If both :src and :data are present.
  #
  # @return [Array<Hash{Symbol=>*}>]
  #
  # @see ImportConcern#fetch_data
  #
  def upload_bulk_post_params: () -> Array[symHash]

  # workflow_parameters
  #
  # @return [Hash{Symbol=>*}]
  #
  def workflow_parameters: () -> symHash

  # Parameters used by Upload#search_records.
  #
  # @type [Array<Symbol>]
  #
  SEARCH_RECORDS_PARAMS: symArray

  # Upload#search_records parameters that specify a distinct search query.
  #
  # @type [Array<Symbol>]
  #
  SEARCH_ONLY_PARAMS: symArray

  # Parameters used by #find_by_match_records or passed on to
  # Upload#search_records.
  #
  # @type [Array<Symbol>]
  #
  FIND_OR_MATCH_PARAMS: symArray

  # Locate and filter Upload records.
  #
  # @param [Array<String,Array>] items  Default: `UploadConcern#identifier`.
  # @param [Hash]                opt    Passed to Upload#search_records;
  #                                       default: `#upload_params` if no
  #                                       *items* are given.
  #
  # @raise [UploadWorkflow::SubmitError]  If :page is not valid.
  #
  # @return [Hash{Symbol=>*}]
  #
  def find_or_match_records: (*(String|anyArray) items, **untyped opt) -> symHash

  # Return with the specified Upload record or *nil* if one could not be found.
  #
  # @param [String, Hash, Upload, nil] id   Default: UploadConcern#identifier.
  #
  # @raise [UploadWorkflow::SubmitError]    If *item* not found.
  #
  # @return [Upload, nil]
  #
  # @see Upload#get_record
  #
  def get_record: (?(String|Upload|anyHash|nil) id) -> (Upload | nil)

  # Get item data from the production service.
  #
  # @param [String] sid               Submission ID of the item.
  # @param [String] host              Base URL of production service.
  #
  # @return [Upload]                  Object created from received data.
  # @return [nil]                     Bad data and/or no object created.
  #
  def proxy_get_record: (String sid, String host) -> (Upload | nil)

  # Gather information to create an upload workflow instance.
  #
  # @param [String, Integer, :unset, nil] rec
  # @param [Hash, String, :unset, nil]    data
  # @param [Hash]                         opt   To workflow initializer except:
  #
  # @option opt [Symbol] :from        Default: `#calling_method`.
  # @option opt [Symbol] :event
  #
  # @return [*]                       @see UploadWorkflow::Single#results
  #
  # @see UploadWorkflow::Single#generate
  #
  def wf_single
    : (?rec: String|Integer|:unset|nil, ?data: String|anyHash|:unset|nil,  event: :create|:edit,                  **untyped opt) -> Upload
    | (?rec: String|Integer|:unset|nil, ?data: String|anyHash|:unset|nil,  event: :remove|:removing|:removed,     **untyped opt) -> Array[String|Upload]
    | (?rec: String|Integer|:unset|nil, ?data: String|anyHash|:unset|nil,  event: :upload|:validating|:replacing, **untyped opt) -> httpResult
    | (?rec: String|Integer|:unset|nil, ?data: String|anyHash|:unset|nil, ?event: Symbol,                         **untyped opt) -> (Upload | nil)

  # Determine whether the workflow state of the indicated item can be advanced.
  #
  # @param [String, Integer, nil] rec
  # @param [Hash]                 opt
  #
  # @return [Array<String>]       @see UploadWorkflow::Single#wf_check_status
  #
  # @see UploadWorkflow::Single#check_status
  #
  def wf_single_check: (?rec: String|Integer|nil, **untyped opt) -> strArray

  # Gather information to create a bulk upload workflow instance.
  #
  # @param [Array, :unset, nil] rec
  # @param [Array, :unset, nil] data
  # @param [Hash]               opt   To workflow initializer except for:
  #
  # @option opt [Symbol] :from        Default: `#calling_method`.
  # @option opt [Symbol] :event
  #
  # @return [Array<Upload,String>]    @see UploadWorkflow::Bulk#results
  #
  # @see UploadWorkflow::Bulk#generate
  #
  def wf_bulk: (?rec: anyArray|:unset|nil, ?data: anyArray|:unset|nil, **untyped opt) -> Array[String|Upload]

  # Produce flash error messages for failures that did not abort the workflow
  # step but did affect the outcome (e.g. for bulk uploads where some of the
  # original files could not be acquired).
  #
  # @param [Workflow] wf
  #
  def wf_check_partial_failure: (?Workflow wf) -> void

  # Default batch size for #reindex_submissions
  #
  # @type [Integer]
  #
  DEFAULT_REINDEX_BATCH: Integer

  # reindex_submissions
  #
  # @param [Array<Upload,String>] entries
  # @param [Hash, nil]            opt       To Upload#get_relation except for:
  #
  # @option opt [Boolean] :atomic           Passed to #reindex_record.
  # @option opt [Boolean] :dryrun           Passed to #reindex_record.
  # @option opt [Symbol]  :meth             Passed to #reindex_record.
  #
  # @return [Array<(Array<String>, Array<String>)>]  Succeeded/failed
  #
  def reindex_submissions: (*(String|Upload) entries, **untyped opt) -> [strArray, strArray]

  # Older completed submissions did not update the :state column.  This method
  # upgrades those records to the current practice.
  #
  # @param [Symbol] new_state
  #
  # @return [void]
  #
  def update_null_state_records: (?Symbol new_state) -> void

  # Cause all of the listed items to be re-indexed.
  #
  # @param [Upload, Array<Upload>, ActiveRecord::Relation] list
  # @param [Boolean]                                       atomic
  # @param [Boolean]                                       dryrun
  # @param [Symbol]                                        meth     Caller.
  #
  # @return [Array<(Array<String>,Array<String>)>]   Succeeded sids / fail msgs
  #
  def reindex_record: ((Upload|Array[Upload]|ActiveRecord::Relation) list, ?atomic: bool|nil, ?dryrun: bool|nil, ?meth: Symbol|nil) -> [strArray, strArray]

  # Generate a response to a POST.
  #
  # @param [Symbol, Integer, Exception, nil] status
  # @param [*]                               item
  # @param [Hash]                            opt
  #
  # @return [void]
  #
  def post_response
    : ((Symbol|Integer|nil) status, ?untyped   item, **untyped opt) -> void
    | (                              Exception item, **untyped opt) -> void

  # Render an item for display in a message.
  #
  # @param [Model, Hash, String, *] item
  #
  # @return [String]
  #
  def make_label: (untyped item, **untyped opt) -> String

  # Raise an exception.
  #
  # @param [Symbol, String, Array<String>, ExecReport, Exception, nil] problem
  # @param [*]                                                         value
  #
  # @raise [UploadWorkflow::SubmitError]
  # @raise [ExecError]
  #
  # @see ExceptionHelper#failure
  #
  def failure: ((Symbol|String|strArray|Exception|ExecReport|nil) problem, ?untyped value) -> void

  # Create a @model_options instance from the current parameters.
  #
  # @return [Upload::Options]
  #
  def set_model_options: () -> Upload::Options

  @model_options: Upload::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [Upload::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> Upload::Paginator

  private

  THIS_MODULE: Module
end
