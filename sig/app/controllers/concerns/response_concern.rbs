# Controller support methods for failure responses.
#
module ResponseConcern
  extend ActiveSupport::Concern

  include FlashHelper

  include HttpHelper

  include ParamsConcern

  # Generate a flash message if there is an error.
  #
  # @param [any, nil]        error    Exception, String
  # @param [Integer, Symbol] status
  # @param [Boolean]         xhr
  # @param [String, Symbol]  action
  # @param [Symbol]          meth
  #
  # @return [Integer, Symbol]         HTTP status.
  # @return [nil]                     If *error* is nil.
  #
  def failure_status
    : (nil     error, ?status: Integer|Symbol|nil, ?xhr: bool|nil, ?action: Symbol|String|nil, ?meth: Symbol|nil, **untyped _ignored) -> nil
    | (untyped error, ?status: Integer|Symbol|nil, ?xhr: bool|nil, ?action: Symbol|String|nil, ?meth: Symbol|nil, **untyped _ignored) -> (Integer | Symbol)

  # The default redirect path for #redirect_back_or_to.
  #
  # @return [String]
  #
  def default_fallback_location: () -> String

  # Prefix for response diagnostic logging.
  #
  # @return [String]
  #
  def response_tag: () -> String

  @response_tag: String

  # Display the failure on the screen -- immediately if modal, or after a
  # redirect otherwise.
  #
  # If *error* is a CanCan::AccessDenied then *redirect* defaults to
  # #welcome_path since this is a destination that is guaranteed to be safe for
  # an anonymous user.
  #
  # @param [Exception, Model, String] error
  # @param [String, nil]              redirect  Def: *fallback*
  # @param [String, nil]              fallback  Def: #default_fallback_location
  # @param [Hash]                     opt       To #flash_failure/#flash_status
  #
  # @return [void]
  #
  def error_response: (Exception|Model|String error, ?(String|nil) redirect, ?fallback: String|nil, **untyped opt) -> void

  # Generate a response to a POST.
  #
  # If *status* is :forbidden or *item* is a CanCan::AccessDenied then
  # *redirect* defaults to #welcome_path since this is a destination that is
  # guaranteed to be safe for an anonymous user.
  #
  # @param [Symbol, Integer, Exception, nil] status
  # @param [any, nil]                        item      Array
  # @param [String, Boolean]                 redirect
  # @param [Boolean]                         xhr       Override `request.xhr?`
  # @param [Symbol]                          meth      Calling method.
  # @param [String]                          tag       Default: #response_tag.
  # @param [String]                          fallback  For #redirect_back_or_to
  #
  # @return [void]
  #
  # -
  # === Variations
  # +
  #
  # @overload post_response(error, ...)
  #   @param [Exception]        error
  #
  # @overload post_response(status, error, ...)
  #   @param [Symbol, Integer]  status
  #   @param [Exception]        error
  #
  # @overload post_response(status, items, ...)
  #   @param [Symbol, Integer]  status
  #   @param [any, nil]         items   Array
  #
  def post_response
    : ((Symbol|Integer|nil) status, ?untyped   item, ?redirect: String|bool|nil, ?xhr: bool|nil, ?meth: Symbol|nil, ?tag: String|nil, ?fallback: String|nil) -> void
    | (                              Exception item, ?redirect: String|bool|nil, ?xhr: bool|nil, ?meth: Symbol|nil, ?tag: String|nil, ?fallback: String|nil) -> void

  # Render an item for display in a message.
  #
  # @param [any, nil] item            Model, Hash, String
  #
  # @return [String, nil]
  #
  def make_label: (untyped item) -> (String | nil)

  private

  THIS_MODULE: Module
end
