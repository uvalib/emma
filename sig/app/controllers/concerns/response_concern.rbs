# Controller support methods for failure responses.
#
module ResponseConcern
  extend ActiveSupport::Concern

  include FlashHelper

  include HttpHelper

  include ParamsConcern

  # Generate a flash message if there is an error.
  #
  # @param [Exception, String, *] error
  # @param [Integer, Symbol]      status
  # @param [Boolean]              xhr
  # @param [String, Symbol]       action
  # @param [Symbol]               meth
  #
  # @return [Integer, Symbol]         HTTP status.
  # @return [nil]                     If *error* is nil.
  #
  def failure_status
    : (nil     error, ?status: Integer|Symbol|nil, ?xhr: bool|nil, ?action: Symbol|String|nil, ?meth: Symbol|nil, **untyped _ignored) -> nil
    | (untyped error, ?status: Integer|Symbol|nil, ?xhr: bool|nil, ?action: Symbol|String|nil, ?meth: Symbol|nil, **untyped _ignored) -> (Integer | Symbol)

  # The default redirect path for #redirect_back.
  #
  # @return [String]
  #
  def default_fallback_location: () -> String

  # Prefix for response diagnostic logging.
  #
  # @return [String]
  #
  def response_tag: () -> String

  @response_tag: String

  # Display the failure on the screen -- immediately if modal, or after a
  # redirect otherwise.
  #
  # @param [Exception] error
  # @param [String]    fallback   Redirect fallback #default_fallback_location
  # @param [Symbol]    meth       Calling method.
  #
  # @return [void]
  #
  def error_response: (Exception error, ?(String|nil) fallback, ?meth: Symbol|nil) -> void

  # Generate a response to a POST.
  #
  # @param [Symbol, Integer, Exception, nil] status
  # @param [Array, *]                        item
  # @param [String, FalseClass]              redirect
  # @param [Boolean]                         xhr        Override `request.xhr?`
  # @param [Symbol]                          meth       Calling method.
  # @param [String]                          tag        Default: #response_tag.
  # @param [String]                          fallback   For #redirect_back.
  #
  # @return [void]
  #
  # -
  # === Variations
  # +
  #
  # @overload post_response(error, ...)
  #   @param [Exception]        error
  #
  # @overload post_response(status, error, ...)
  #   @param [Symbol, Integer]  status
  #   @param [Exception]        error
  #
  # @overload post_response(status, items, ...)
  #   @param [Symbol, Integer]  status
  #   @param [Array, *]         items
  #
  def post_response
    : ((Symbol|Integer|nil) status, ?untyped   item, ?redirect: String|bool|nil, ?xhr: bool|nil, ?meth: Symbol|nil, ?tag: String|nil, ?fallback: String|nil) -> void
    | (                              Exception item, ?redirect: String|bool|nil, ?xhr: bool|nil, ?meth: Symbol|nil, ?tag: String|nil, ?fallback: String|nil) -> void

  # Render an item for display in a message.
  #
  # @param [Model, Hash, String, *] item
  #
  # @return [String]
  #
  def make_label: (untyped item, **untyped opt) -> String

  private

  THIS_MODULE: Module
end
