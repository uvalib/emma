# Controller support methods for authentication.
#
module AuthConcern
  extend ActiveSupport::Concern

  include Emma::Json

  include Emma::Debug

  include AuthHelper

  include ParamsConcern

  # :nocov:
  #include Devise::Controllers::Helpers

  # The "home" URL for a signed-in user.
  #
  # @param [User, Symbol] resource_or_scope
  #
  # @return [String]
  #
  def signed_in_root_path: ((User|Symbol) resource_or_scope) -> String

  # The URL to which Devise redirects after signing in.
  #
  # @param [User, Symbol] resource_or_scope
  #
  # @return [String]
  #
  # === Implementation Notes
  # This does not use Devise::Controllers::StoreLocation#store_location_for
  # to avoid the potential of overwhelming session store by copying
  # session['app.current_path'] into session['user_return_to']. This seems to
  # be safe because the overridden function seems to be the only place where
  # that session entry is used.
  #
  def after_sign_in_path_for: ((User|Symbol) resource_or_scope) -> String

  # The URL to which Devise redirects after signing out.
  #
  # @param [User, Symbol] resource_or_scope
  #
  # @return [String]
  #
  def after_sign_out_path_for: ((User|Symbol) resource_or_scope) -> String

  private

  # Indicate whether the given resource/scope specifies the User resource.
  #
  # Returns *true* if *obj* cannot be interpreted as a scope or resource since
  # user scope is the assumed default.
  #
  # @param [any, nil] obj             User, Symbol
  #
  # @see Devise::Mapping#find_scope!
  #
  def user_scope?: (untyped obj) -> bool

  public

  # Sign in a local (EMMA) session.
  #
  # @return [User]
  #
  # @see Devise::Controllers::SignInOut#sign_in
  #
  def local_sign_in: () -> User

  # Sign out of the local (EMMA) session.
  #
  # @return [Boolean]                 False if there was no user.
  #
  # @see Devise::Controllers::SignInOut#sign_out
  #
  def local_sign_out: () -> bool

  # Set `session['omniauth.auth']` from `request.env['omniauth.auth']` and
  # return with the new or returning user.
  #
  # @param [ActionDispatch::Request, OmniAuth::AuthHash, Hash] src
  #
  # @raise [RuntimeError]             If *src* does not have auth data.
  # @raise [RuntimeError]             If a User could not be found.
  #
  # @return [User]
  #
  def set_auth_data: ((ActionDispatch::Request|OmniAuth::AuthHash|anyHash) src) -> User

  # Terminate the local login session ('omniauth.auth').
  #
  # @param [Symbol, nil] caller       Calling method for diagnostics.
  #
  # @return [OmniAuth::AuthHash, nil]
  #
  def delete_auth_data: (?caller: Symbol|nil, **untyped _ignored) -> (OmniAuth::AuthHash | nil)

  # Lookup (and update) User by login name.
  #
  # @param [String, nil] uid          Default: params[:uid] or params[:id].
  #
  # @return [User]                    The updated record of the indicated user.
  # @return [nil]                     No record for the indicated user.
  #
  def user_from_id: (?(String|nil) uid) -> (User | nil)

  # Find the User table entry matching current session authentication data.
  #
  # @return [User, nil]
  #
  def user_from_session: () -> (User | nil)

  private

  THIS_MODULE: Module
end
