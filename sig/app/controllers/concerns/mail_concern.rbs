# Support methods for generating emails.
#
module MailConcern
  extend ActiveSupport::Concern

  include Emma::Common

  # Set when the current record operation has assigned a Manager to an
  # organization that had none (because the Org record had been created by
  # an Administrator with an empty :contact field).
  #
  # @type [Boolean, nil]
  #
  attr_reader new_org_man: bool | nil

  # Set when a new Manager user is created (outside the context of creating a
  # new organization) or when the role of an existing user is set to Manager.
  #
  # @type [Boolean, nil]
  #
  attr_reader new_man: bool | nil

  # Set when the current record operation has created an Administrator user or
  # converted an organization member user into an Administrator.
  #
  # @type [Boolean, nil]
  #
  attr_reader new_admin: bool | nil

  # Set when a new non-Administrator user is created.
  #
  # @type [Boolean, nil]
  #
  attr_reader new_user: bool | nil

  # Indicate whether emails should be generated.
  #
  def send_welcome_email?: () -> bool

  # Indicate whether #generate_new_user_email should be run for a new user.
  #
  def new_user_email?: () -> bool

  # Send a welcome email to a new user.
  #
  # @param [User] user
  # @param [Hash] opt
  #
  # @return [void]
  #
  # @see AccountMailer#new_user_email
  #
  def generate_new_user_email: (User user, **untyped opt) -> void

  # Indicate whether #generate_new_man_email should be run for a new manager.
  #
  def new_man_email?: () -> bool

  # Send a welcome email to a new manager.
  #
  # @param [User] user
  # @param [Hash] opt
  #
  # @return [void]
  #
  def generate_new_man_email: (User user, **untyped opt) -> void

  # Indicate whether #generate_new_org_email should be run for a user that
  # has been modified to be the Manager of a new organization.
  #
  def new_org_email?: () -> bool

  # Send a welcome email to the Manager of a new organization.
  #
  # @param [User] user
  # @param [Hash] opt
  #
  # @return [void]
  #
  # @see AccountMailer#new_org_email
  #
  def generate_new_org_email: (User user, **untyped opt) -> void

  # Send a welcome email to all new users of a new the organization.
  # In addition, manager users will receive #new_org_email.
  #
  # @param [Org, Array<User>] org
  # @param [Hash]             opt
  #
  # @return [void]
  #
  # @see MailConcern#generate_new_user_email
  # @see MailConcern#generate_new_org_email
  #
  def generate_new_org_emails: (Org|Array[User] org, **untyped opt) -> void

  # Indicate whether JIRA help tickets should be created.
  #
  def send_help_ticket?: () -> bool

  # Send a request email in order to generate a JIRA help ticket for a new
  # enrollment request.
  #
  # @param [Enrollment] enrollment
  # @param [Hash]       opt           To ActionMailer::Parameterized#with
  #
  # @return [void]
  #
  # @see EnrollmentMailer#request_email
  #
  def generate_enrollment_ticket: (Enrollment enrollment, **untyped opt) -> untyped

  # Indicate whether the given URL parameter indicates that a category of mail
  # should be generated.
  #
  # In production, mail generation is assumed unless explicitly turned off;
  # anywhere else, mail generation happens only if explicitly turned on.
  #
  # @param [Symbol] name              Name of the URL parameter to check.
  #
  def mail_parameter?: (Symbol name) -> bool

  private

  THIS_MODULE: Module
end
