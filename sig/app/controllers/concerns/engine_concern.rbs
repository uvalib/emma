# Controller support methods for dynamic specification of service endpoints.
#
module EngineConcern
  extend ActiveSupport::Concern

  include Emma::Common

  include FlashConcern

  # The service identified by the given value.
  #
  # @param [String, Symbol, Class<ApiService>] service
  #
  # @return [String]
  #
  def service_name: (String|Symbol|Class service) -> String

  # The session key associated with the given service.
  #
  # @param [String, Symbol, Class<ApiService>] service
  #
  # @return [String]
  #
  def service_session_key: (String|Symbol|Class service) -> String

  # The URL of the user-selected service engine.
  #
  # @param [String, Symbol, Class<ApiService>] service
  #
  # @return [String, nil]             If different than the default engine.
  #
  def requested_engine: (String|Symbol|Class service) -> String?

  # Recall the user-selected service engine name or endpoint.
  #
  # @param [String, Symbol, Class<ApiService>] service
  #
  # @return [String, nil]
  #
  def get_session_engine: (String|Symbol|Class service) -> String?

  # Remember (or forget) the user-selected service engine name or endpoint.
  #
  # @param [String, Symbol, Class<ApiService>] service
  # @param [String, nil]                       new_value
  #
  # @return [String, nil]
  #
  def set_session_engine: (String|Symbol|Class service, String? new_value) -> String?

  # @private
  RESET_KEYS: symArray

  # Process the URL parameter for setting the endpoint for the given service.
  #
  # The engine may be specified by deployment, e.g. "&engine=staging", or by
  # URL (if that URL matches or derives from a `service.engines` value).
  # If this resolves to the default engine then session['app.*.engine'] is
  # deleted; otherwise it will be set to a key of `service.engines` or to an
  # explicit URL if necessary.
  #
  # If no (valid) :engine parameter was supplied, this method evaluates the
  # current value of session['app.*.engine'], and will delete it if appropriate
  # (but without redirecting).
  #
  # @param [Class<ApiService>] service
  #
  # @return [Any, nil]                *nil* if not redirecting
  #
  def set_engine_callback: (Class service) -> untyped?

  # @private
  FLASH_RESET_NOTICE_SPACES: Integer

  # Display a flash notice indicating that a service has been overridden.
  #
  # @param [String, Symbol, Class<ApiService>] service
  # @param [String] url               Current service URL endpoint.
  # @param [Hash]   opt               Passed to #flash_now_notice except:
  #
  # @option opt [Integer, String] :spaces
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def flash_reset_notice: (String|Symbol|Class service, String url, **untyped opt) -> ActiveSupport::SafeBuffer

  private

  #THIS_MODULE: untyped
end
