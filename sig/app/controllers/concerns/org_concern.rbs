# Support methods for the "/org" controller.
#
module OrgConcern
  extend ActiveSupport::Concern

  include ModelConcern

  # The identifier of the current model instance which #CURRENT_ID represents
  # in the context of OrgController actions.
  #
  # @return [Integer, nil]
  #
  def current_id: () -> (Integer | nil)

  # Get URL parameters relevant to the current operation.
  #
  # @return [Hash]
  #
  def current_get_params: () -> symHash

  # Extract POST parameters that are usable for creating/updating a Manifest
  # instance.
  #
  # @return [Hash]
  #
  def current_post_params: () -> symHash

  # Add a new Org record to the database.
  #
  # @param [Hash, nil]       prm        Field values (def: `#current_params`).
  # @param [Boolean, String] force_id   If *true*, allow setting of :id.
  # @param [Boolean]         fatal      If *false*, use #save not #save!.
  #
  # @return [Org]                     The new Org record.
  #
  def create_record: (?symHash? prm, ?force_id: bool|String, ?fatal: bool, **untyped _ignored) -> Org

  # Update the indicated Org record.
  #
  # @param [any, nil] item            Default: the record for #identifier.
  # @param [Boolean]  fatal           If *false* use #update not #update!.
  # @param [Hash]     prm             Field values (default: `#current_params`)
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [Org, nil]                The updated Org record.
  #
  def update_record: (?(String|Integer|Model|symHash|nil) item, ?fatal: bool, **untyped prm) -> (Org | nil)

  # Remove the indicated Org record(s).
  #
  # @param [any, nil] items
  # @param [Boolean]  fatal           If *false* do not #raise_failure.
  # @param [Hash]     prm             Default: `#current_params`
  #
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Destroyed Org records.
  #
  def destroy_records: ((String|Integer|Model|Array[String|Integer|Model]|nil) items, ?fatal: bool, **untyped prm) -> (Array[Integer]|Array[String])

  # Create an Options instance from the current parameters.
  #
  # @return [Org::Options]
  #
  def get_model_options: () -> Org::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [Org::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> Org::Paginator

  private

  THIS_MODULE: Module
end
