# Support methods for the "/org" controller.
#
module OrgConcern
  extend ActiveSupport::Concern

  include ModelConcern

  include MailConcern

  # Indicate whether request parameters (explicitly or implicitly) reference
  # the current user's organization.
  #
  # @param [any, nil] id
  #
  def current_id?: (?untyped id) -> bool

  # The identifier of the current model instance which #CURRENT_ID represents
  # in the context of OrgController actions.
  #
  # @return [Integer, nil]
  #
  def current_id: () -> (Integer | nil)

  # Get URL parameters relevant to the current operation.
  #
  # @return [Hash]
  #
  def current_get_params: () -> symHash

  # Extract POST parameters that are usable for creating/updating a Manifest
  # instance.
  #
  # @return [Hash]
  #
  def current_post_params: () -> symHash

  # Return with the specified Org record.
  #
  # @param [any, nil] item      String, Integer, Hash, Model; def: #identifier.
  # @param [Hash]     opt       Passed to Record::Identification#find_record.
  #
  # @raise [Record::StatementInvalid] If :id not given.
  # @raise [Record::NotFound]         If *item* was not found.
  #
  # @return [Org, nil]          A fresh record unless *item* is a #model_class.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [Org] record
  # @yieldreturn [void]
  #
  def find_record: (?(String|Integer|Model|symHash|nil) item, **untyped opt) ?{ (Org record) -> void } -> (Org | nil)

  # Start a new Org.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [Org]                     An un-persisted Org instance.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def new_record: (?symHash? prm, **untyped opt) ?{ (symHash attr) -> void } -> Org

  # Add a new Org record to the database.
  #
  # @param [Hash, nil] prm            Field values (def: `#current_params`).
  # @param [Boolean]   fatal          If *false*, use #save not #save!.
  # @param [Hash]      opt            Added field values.
  #
  # @option opt [Boolean] force       If *true* allow setting of :id.
  #
  # @return [Org]                     The new Org record.
  #
  # @yield [attr] Adjust attributes and/or raise an exception.
  # @yieldparam [Hash] attr           Supplied attributes for the new record.
  # @yieldreturn [void]
  #
  def create_record: (?symHash? prm, ?fatal: bool, **untyped opt) ?{ (symHash attr) -> void } -> Org

  # Start editing an existing Org record.
  #
  # @param [any, nil] item            Default: the record for #identifier.
  # @param [Hash]     opt             Passed to #find_record.
  #
  # @raise [Record::StatementInvalid] If :id not given.
  # @raise [Record::NotFound]         If *item* was not found.
  #
  # @return [Org, nil]                A fresh instance unless *item* is an Org.
  #
  # @yield [record] Raise an exception if the record is not acceptable.
  # @yieldparam [Org] record          May be altered by the block.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def edit_record: (?(String|Integer|Model|symHash|nil) item, **untyped opt) ?{ (Org record) -> void } -> (Org | nil)

  # Update the indicated Org record.
  #
  # @param [any, nil] item            Default: the record for #identifier.
  # @param [Boolean]  fatal           If *false* use #update not #update!.
  # @param [Hash]     opt             Field values (default: `#current_params`)
  #
  # @raise [Record::NotFound]               Record could not be found.
  # @raise [ActiveRecord::RecordInvalid]    Record update failed.
  # @raise [ActiveRecord::RecordNotSaved]   Record update halted.
  #
  # @return [Org, nil]                The updated Org record.
  #
  # @yield [record, attr] Raise an exception if the record is not acceptable.
  # @yieldparam [Org]  record         May be altered by the block.
  # @yieldparam [Hash] attr           New field(s) to be assigned to *record*.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def update_record: (?(String|Integer|Model|symHash|nil) item, ?fatal: bool, **untyped opt) ?{ (Org record, symHash attr) -> void } -> (Org | nil)

  # Retrieve the indicated Org record(s) for the '/delete' page.
  #
  # @param [any, nil] items           To #search_records
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [RangeError]               If :page is not valid.
  #
  # @return [Paginator::Result]
  #
  # @yield [items, opt] Raise an exception unless the `*items*` are acceptable.
  # @yieldparam [Array] items         Identifiers of items to be deleted.
  # @yieldparam [Hash]  options       Options to #search_records.
  # @yieldreturn [void]               Block not called if *record* is *nil*.
  #
  def delete_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, **untyped opt) ?{ (Array[Model|String|Integer] items, symHash options) -> void } -> Paginator::Result

  # Remove the indicated Org record(s).
  #
  # @param [any, nil] items
  # @param [Boolean]  fatal           If *false* do not #raise_failure.
  # @param [Hash]     opt             Default: `#current_params`
  #
  # @raise [Record::SubmitError]      If there were failure(s).
  #
  # @return [Array]                   Destroyed Org records.
  #
  # @yield [record] Called for each record before deleting.
  # @yieldparam [Org] record
  # @yieldreturn [String,nil]         Error message if *record* unacceptable.
  #
  def destroy_records: (?(Model|String|Integer|Array[Model|String|Integer]|nil) items, ?fatal: bool, **untyped opt) ?{ (Org record) -> (String | nil) } -> Array[Org]

  # Return with an error message value if any of the fields of *attr* would
  # result in a non-unique Organization.
  #
  # @param [Hash]          attrs      Org fields/values.
  # @param [Model, nil]    current    Existing record if *attr* is an update.
  # @param [Array<Symbol>] keys       Only check these fields.
  #
  # @raise [Record::SubmitError]      If uniqueness would be violated.
  #
  # @return [void]
  #
  def check_unique: (symHash attrs, ?current: Model|nil, ?keys: symArray|nil) -> void

  # The default redirect path for #redirect_back_or_to.
  #
  # @return [String]
  #
  def default_fallback_location: () -> String

  # Create an Options instance from the current parameters.
  #
  # @return [Org::Options]
  #
  def get_model_options: () -> Org::Options

  # Create a Paginator for the current controller action.
  #
  # @param [Class<Paginator>] paginator  Paginator class.
  # @param [Hash]             opt        Passed to super.
  #
  # @return [Org::Paginator]
  #
  def pagination_setup: (?paginator: Class, **untyped opt) -> Org::Paginator

  private

  THIS_MODULE: Module
end
