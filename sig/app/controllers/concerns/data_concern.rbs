# Controller support methods for database access.
#
module DataConcern
  extend ActiveSupport::Concern

  include Emma::Constants

  include ParamsHelper

  include DataHelper

  # Variations on the :tables parameter.
  #
  # @type [Array<Symbol>]
  #
  DATA_TABLE_PARAMETERS: symArray

  # Variations on the :columns parameter.
  #
  # @type [Array<Symbol>]
  #
  DATA_COLUMN_PARAMETERS: symArray

  # The normalized parameters.
  #
  # @type [Array<Symbol>]
  #
  DATA_PARAMETERS: symArray

  # URL parameters for DataController.
  #
  # @return [Hash{Symbol=>*}]
  #
  # === Usage Notes
  # Rails will set `params[:format]` if the URL is given with an extension
  # (even if a :format parameter was explicitly given); `data_params[:html]`
  # returns *true* if HTML was explicitly requested in either of these ways.
  #
  def data_params: () -> symHash

  @data_params: symHash

  # Interpret a parameter value as an array of values if possible.
  #
  # @param [Array, String, nil] value
  #
  # @return [Array<String>, nil]      *nil* if *value* is *nil*.
  #
  def array_param: ((String|anyArray|nil) value) -> (strArray | nil)

  # Generate a hash of results for each table name.
  #
  # @param [Array<String,Symbol>] names   Default: `DataHelper#table_names`.
  # @param [Boolean]              sort    If *false*, do not sort by name.
  # @param [Hash]                 opt     Passed to DataHelper#table_records.
  #
  # @return [Hash{String=>Array}]
  #
  def get_tables: (*(String|Symbol) names, ?sort: bool, **untyped opt) -> Hash[String,Array[anyHash|anyArray]]

  # Generate results for the indicated table.
  #
  # @param [String, Symbol, nil]  name  Default: `data_params[:tables].first`
  # @param [Array<String,Symbol>] cols  Column names; default: "*".
  # @param [Hash]                 opt   Passed to DataHelper#table_records.
  #
  # @return [Array]
  #
  def get_table_records: (?(String|Symbol|nil) name, *(String|Symbol) cols, **untyped opt) -> Array[anyHash|anyArray]

  # Generate results for EMMA submissions, which currently comes from a
  # selection of fields from the 'uploads' table.
  #
  # When generating HTML, each record entry is an Array of field values;
  # otherwise each record entry is a Hash.
  #
  # @param [String, Symbol, nil] table  Passed to #submission_records
  # @param [Hash]                opt    Passed to #submission_records
  #
  # @return [Array]
  #
  def get_submission_records: (?(Symbol|String|nil) table, **untyped opt) -> Array[anyHash|anyArray]

  # Generate a list of counts for each EMMA data field found across all
  # submissions.
  #
  # @param [Boolean] all              If *true* also show values for fields
  #                                     which are not valid.
  # @param [Hash]    opt              Passed to #get_submission_records
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def get_submission_field_counts: (?all: bool, **untyped opt) -> Hash[Symbol,anyHash]

  # Generate results for submission pseudo records.
  #
  # @param [String, Symbol, nil] table     Default: #submission_table
  # @param [Hash]                opt       Passed to #get_table_records.
  #
  # @return [Array]
  #
  def submission_records: (?(String|Symbol|nil) table, **untyped opt) -> Array[anyHash|anyArray]

  # Filter out invalid submissions for values intended for JSON or XML output,
  # then limit the columns that will be included in the resultant records.
  #
  # @param [Array<Hash>]        records
  # @param [Array<Symbol>, nil] columns
  #
  # @return [Array<Hash>]
  #
  def modify_submission_records!: (Array[anyHash] records, ?(symArray|nil) columns) -> Array[anyHash]

  # Filter out invalid submissions for values intended for HTML output, then
  # limit the columns that will be included in the resultant records.
  #
  # @param [Array<Array>]       records
  # @param [Array<Symbol>, nil] columns
  #
  # @return [Array<Array>]
  #
  def modify_submission_records_for_html!: (Array[anyArray] records, ?(symArray|nil) columns) -> Array[anyArray]

  # States which indicate that the submission is either complete or that it is
  # on track to becoming complete (in the case of submissions back to partner
  # repositories).
  #
  # @type [Array<Symbol>]
  #
  COMPLETION_STATES: symArray

  # Indicate whether the submission is not completed (or in the process of
  # being completed).
  #
  # @param [String, Symbol] state
  #
  def submission_incomplete?: ((String|Symbol) state) -> bool

  # Title prefixes used in development/testing to denote submissions which are
  # not meant to be presented in search results.
  #
  # @type [Array<String>]
  #
  BOGUS_TITLE_PREFIXES: strArray

  # Words used in :rem_comments during development/testing to denote
  # submissions which are not meant to be presented in search results.
  #
  # @type [Array<String>]
  #
  BOGUS_NOTE_WORDS: strArray

  # Indicate whether this submission appears to be non-canonical.
  #
  # @param [String, Hash] emma_data
  #
  def submission_bogus?: ((String|anyHash) emma_data) -> bool

  private

  THIS_MODULE: Module
end
