# Handle "/upload" requests.
#
# @see UploadDecorator
# @see UploadsDecorator
# @see file:app/views/upload/**
#
class UploadController < ApplicationController
  include UserConcern

  include ParamsConcern

  include OptionsConcern

  include SessionConcern

  include RunStateConcern

  include PaginationConcern

  include SerializationConcern

  include ApiConcern

  include AwsConcern

  include BookshareConcern

  include IngestConcern

  include IaDownloadConcern

  include UploadConcern

  # :nocov:
  #include AbstractController::Callbacks

  #include ActionController::RespondWith

  #extend CanCan::ControllerAdditions::ClassMethods

  # Results for :index.
  #
  # @return [Array<Upload, String>]
  # @return [Hash{Symbol=>*}]
  # @return [nil]
  #
  attr_reader list: Array[Upload|String] | symHash|nil

  # API results for :show.
  #
  # @return [Upload, nil]
  #
  attr_reader item: Upload | nil

  # For the :admin endpoint.
  #
  # @return [Hash{String=>Array<Aws::S3::Object>}]
  #
  attr_reader s3_object_table: Hash[String,Array[Aws::S3::Object]]

  @group_counts: symHash
  @host:         String

  # == GET /upload[?id=(:id|SID|RANGE_LIST)]
  # == GET /upload[?selected=(:id|SID|RANGE_LIST)]
  # == GET /upload[?group=WORKFLOW_GROUP]
  #
  # Display the current user's uploads.
  #
  # If an item specification is given by one of UploadConcern#IDENTIFIER_PARAMS
  # then the results will be limited to the matching upload(s).
  # NOTE: Currently this is not limited only to the current user's uploads.
  #
  # @see #upload_index_path           Route helper
  # @see UploadConcern#find_or_match_records
  #
  def index: () -> void

  # == GET /upload/show/(:id|SID)
  #
  # Display a single upload.
  #
  # @see #show_upload_path            Route helper
  # @see UploadConcern#get_record
  #
  def show: () -> void

  # == GET /upload/new
  #
  # Initiate creation of a new EMMA entry by prompting to upload a file.
  #
  # On the initial visit to the page, @db_id should be *nil*.  On subsequent
  # visits (due to "Cancel" returning to this same page), @db_id will be
  # included in order to reuse the Upload record that was created at that time.
  #
  # @see #new_upload_path             Route helper
  # @see UploadController#create
  # @see UploadWorkflow::Single::Create::States#on_creating_entry
  # @see file:app/assets/javascripts/feature/model-form.js
  #
  def new: () -> void

  # == POST  /upload/create
  # == PUT   /upload/create
  # == PATCH /upload/create
  #
  # Invoked from the handler for the Uppy 'upload-success' event to finalize
  # the creation of a new EMMA entry.
  #
  # @see #create_upload_path          Route helper
  # @see UploadController#new
  # @see UploadWorkflow::Single::Create::States#on_submitting_entry
  #
  def create: () -> void

  # == GET /upload/edit/:id
  # == GET /upload/edit/SELECT
  # == GET /upload/edit_select
  #
  # Initiate modification of an existing EMMA entry by prompting for metadata
  # changes and/or upload of a replacement file.
  #
  # If :id is "SELECT" then a menu of editable items is presented.
  #
  # @see #edit_upload_path            Route helper
  # @see #edit_select_upload_path     Route helper
  # @see UploadController#update
  # @see UploadWorkflow::Single::Edit::States#on_editing_entry
  #
  def edit: () -> void

  # == PUT   /upload/update/:id
  # == PATCH /upload/update/:id
  #
  # Finalize modification of an existing EMMA entry.
  #
  # @see #update_upload_path          Route helper
  # @see UploadController#edit
  # @see UploadWorkflow::Single::Edit::States#on_modifying_entry
  #
  def update: () -> void

  # == GET /upload/delete/:id[?force=true&truncate=true&emergency=true]
  # == GET /upload/delete/SID[?...]
  # == GET /upload/delete/RANGE_LIST[?...]
  # == GET /upload/delete/SELECT[?...]
  # == GET /upload/delete_select
  #
  # Initiate removal of an existing EMMA entry along with its associated file.
  #
  # If :id is "SELECT" then a menu of deletable items is presented.
  #
  # Use :force to attempt to remove an item from the EMMA Unified Search index
  # even if a database record was not found.
  #
  # @see #delete_upload_path          Route helper
  # @see #delete_select_upload_path   Route helper
  # @see UploadWorkflow::Single::Remove::States#on_removing_entry
  # @see UploadController#destroy
  #
  def delete: () -> void

  # == DELETE /upload/destroy/:id[?force=true&truncate=true&emergency=true]
  # == DELETE /upload/destroy/SID[?...]
  # == DELETE /upload/destroy/RANGE_LIST[?...]
  #
  # Finalize removal of an existing EMMA entry.
  #
  # @see #destroy_upload_path         Route helper
  # @see UploadWorkflow::Single::Remove::States#on_removed_entry
  # @see UploadController#delete
  #
  def destroy: () -> void

  # == GET /upload/bulk
  #
  # Currently a non-functional placeholder.
  #
  # @see #bulk_upload_index_path      Route helper
  #
  def bulk_index: () -> void

  # == GET /upload/bulk_new[?source=FILE&batch=true|SIZE&prefix=STRING]
  #
  # Display a form prompting for a bulk operation manifest (either CSV or JSON)
  # containing an row/element for each entry to submit.
  #
  # @see #bulk_new_upload_path        Route helper
  # @see UploadWorkflow::Bulk::Create::States#on_creating_entry
  # @see UploadController#bulk_create
  #
  def bulk_new: () -> void

  # == POST /upload/bulk[?source=FILE&batch=true|SIZE&prefix=STRING]
  #
  # Create the specified Upload records, download and store the associated
  # files, and post the new entries to the Federated Ingest API.
  #
  # @see #bulk_create_upload_path     Route helper
  # @see UploadWorkflow::Bulk::Create::States#on_submitting_entry
  # @see UploadController#bulk_new
  #
  def bulk_create: () -> void

  # == GET /upload/bulk_edit[?source=FILE&batch=true|SIZE&prefix=STRING]
  #
  # Display a form prompting for a bulk operation manifest (either CSV or JSON)
  # containing an row/element for each entry to change.
  #
  # @see #bulk_edit_upload_path       Route helper
  # @see UploadWorkflow::Bulk::Edit::States#on_editing_entry
  # @see UploadController#bulk_update
  #
  def bulk_edit: () -> void

  # == PUT   /upload/bulk[?source=FILE&batch=true|SIZE&prefix=STRING]
  # == PATCH /upload/bulk[?source=FILE&batch=true|SIZE&prefix=STRING]
  #
  # Modify or create the specified Upload records, download and store the
  # associated files (if changed), and post the new/modified entries to the
  # Federated Ingest API.
  #
  # @see #bulk_update_upload_path     Route helper
  # @see UploadWorkflow::Bulk::Edit::States#on_modifying_entry
  # @see UploadController#bulk_edit
  #
  def bulk_update: () -> void

  # == GET /upload/bulk_delete[?force=false]
  #
  # Specify entries to delete by :id, SID, or RANGE_LIST.
  #
  # @see #bulk_delete_upload_path     Route helper
  # @see UploadWorkflow::Bulk::Remove::States#on_removing_entry
  # @see UploadController#bulk_destroy
  #
  def bulk_delete: () -> void

  # == DELETE /upload/bulk[?force=true]
  #
  # @see #bulk_destroy_upload_path    Route helper
  # @see UploadWorkflow::Bulk::Remove::States#on_removed_entry
  # @see UploadController#bulk_delete
  #
  def bulk_destroy: () -> void

  # == POST /upload/renew
  #
  # Invoked to re-create a database entry that had been canceled.
  #
  # @see #renew_upload_path                                 Route helper
  # @see file:app/assets/javascripts/feature/model-form.js *refreshRecord()*
  #
  def renew: () -> void

  # == POST /upload/reedit?id=:id
  #
  # Invoked to re-start editing a database entry.
  #
  # @see #reedit_upload_path                                Route helper
  # @see file:app/assets/javascripts/feature/model-form.js *refreshRecord()*
  #
  def reedit: () -> void

  # == GET  /upload/cancel?id=:id[&redirect=URL][&reset=bool][&fields=...]
  # == POST /upload/cancel?id=:id[&fields=...]
  #
  # Invoked to cancel the current submission form instead of submitting.
  #
  # * If invoked via :get, a :redirect is expected.
  # * If invoked via :post, only a status is returned.
  #
  # Either way, the identified Upload record is deleted if it was in the
  # :create phase.  If it was in the :edit phase, its fields are reset
  #
  # @see #cancel_upload_path                                Route helper
  # @see UploadWorkflow::Single::States#on_canceled_entry
  # @see UploadWorkflow::Bulk::States#on_canceled_entry
  # @see file:app/assets/javascripts/feature/model-form.js *cancelForm()*
  #
  def cancel: () -> void

  # == GET /upload/check/:id
  # == GET /upload/check/SID
  #
  # Invoked to determine whether the workflow state of the indicated item can
  # be advanced.
  #
  # @see #check_upload_path           Route helper
  # @see UploadConcern#wf_single_check
  #
  def check: () -> void

  # == POST /upload/endpoint
  #
  # Invoked from 'Uppy.XHRUpload'.
  #
  # @see #uploads_path                Route helper
  # @see UploadWorkflow::Single::Create::States#on_validating_entry
  # @see UploadWorkflow::Single::Edit::States#on_replacing_entry
  # @see UploadWorkflow::External#upload_file
  # @see file:app/assets/javascripts/feature/model-form.js
  #
  def endpoint: () -> void

  # == GET /download/:id
  #
  # Download the file associated with an EMMA submission.
  #
  # @see #file_download_path          Route helper
  # @see UploadConcern#get_record
  # @see Upload#download_url
  #
  def download: () -> void

  # == GET /retrieval?url=URL[&member=BS_ACCOUNT_ID]
  #
  # Retrieve a file from a member repository.
  #
  # @raise [ExecError] @see IaDownloadConcern#ia_download_response
  #
  # @see #retrieval_path              Route helper
  #
  def retrieval: () -> void

  # == GET /upload/admin[?(deploy|deployment)=('production'|'staging')]
  # == GET /upload/admin[?(repo|repository)=('emma'|'ia')]
  #
  # Upload submission administration.
  #
  # @see #admin_upload_path           Route helper
  # @see AwsConcern#get_object_table
  #
  def admin: () -> void

  # == GET /upload/api_migrate?(v|version)=[0.0.]5(&verbose=true&dryrun=false)
  #
  # Modify :emma_data fields and content.
  #
  # @see #api_migrate_path            Route helper
  # @see ApiConcern#api_data_migration
  #
  def api_migrate: () -> void

  # == GET /upload/bulk_reindex?size=PAGE_SIZE[&id=(:id|SID|RANGE_LIST)]
  #
  # Cause completed submission records to be re-indexed.
  #
  # @see #bulk_reindex_upload_path    Route helper
  # @see UploadConcern#reindex_record
  #
  def bulk_reindex: () -> void

  # Indicate whether URL parameters require that a menu should be shown rather
  # than operating on an explicit set of identifiers.
  #
  # @param [String, Array, nil] id_params  Default: `UploadConcern#identifier`.
  #
  def show_menu?: (?(String|strArray|nil) id_params) -> bool

  # Display the failure on the screen -- immediately if modal, or after a
  # redirect otherwise.
  #
  # @param [Exception] error
  # @param [String]    fallback   Redirect fallback (def.: #upload_index_path).
  # @param [Symbol]    meth       Calling method.
  #
  # @return [void]
  #
  def show_search_failure: (Exception error, ?(String|nil) fallback, ?meth: Symbol|nil) -> void

  # If the :show endpoint is given an :id which is actually a specification for
  # multiple items then there is a redirect to :index.
  #
  # @return [void]
  #
  def index_redirect: () -> void

  # Response values for de-serializing the index page to JSON or XML.
  #
  # @param [*]    list
  # @param [Hash] opt
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def index_values: (?untyped list, **untyped opt) -> symHash

  # Response values for de-serializing the show page to JSON or XML.
  #
  # @param [Upload, Hash] item
  # @param [Hash]         opt
  #
  # @return [Hash{Symbol=>*}]
  #
  def show_values: (?(Upload|anyHash) item, **untyped opt) -> symHash

  # Response values for de-serializing download information to JSON or XML.
  #
  # @param [String,nil] url
  #
  # @return [Hash{Symbol=>String,nil}]
  #
  def download_values: ((String|nil) url) -> Hash[Symbol,(String|nil)]
end
