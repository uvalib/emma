# Manage user accounts as represented in the User table ("/account" pages).
#
# @see AccountDecorator
# @see AccountsDecorator
# @see file:app/views/account/**
#
class AccountController < ApplicationController
  include UserConcern

  include ParamsConcern

  include SessionConcern

  include RunStateConcern

  include PaginationConcern

  include AccountConcern

  # Database results for :index.
  #
  # @return [Array<User>, nil]
  #
  attr_reader list: Array[User] | nil

  # Database results for :show.
  #
  # @return [User, nil]
  #
  attr_reader item: User | nil

  # === GET /account
  #
  # List all user accounts.
  #
  # @see #users_path                  Route helper
  # @see #account_index_path          Route helper
  # @see AccountConcern#get_accounts
  #
  def index: () -> void

  # === GET /account/show/(:id)
  #
  # Display details of an existing EMMA user account.
  #
  # Redirects to #show_select if :id is not given.
  #
  # @see #show_account_path           Route helper
  #
  def show: () -> void

  # === GET /account/new
  #
  # Display a form for creation of a new EMMA user account.
  #
  # @see #new_account_path            Route helper
  #
  def new: () -> void

  # === POST  /account/create
  # === PUT   /account/create
  # === PATCH /account/create
  #
  # Create a new EMMA user account.
  #
  # === Usage Notes
  # In order to allow the database to auto-generate the record ID, the :id
  # parameter will be rejected unless "force_id=true" is included in the URL
  # parameters.
  #
  # @see #create_account_path         Route helper
  #
  def create: () -> void

  # === GET /account/edit/(:id)
  #
  # Display a form for modification of an existing EMMA user account.
  #
  # Redirects to #edit_select if :id is not given.
  #
  # @see #edit_account_path           Route helper
  #
  def edit: () -> void

  # === PUT   /account/update/:id
  # === PATCH /account/update/:id
  #
  # Update an existing EMMA user account.
  #
  # @see #update_account_path         Route helper
  #
  def update: () -> void

  # === GET /account/delete/(:id)
  #
  # Select existing EMMA user account(s) to remove.
  #
  # Redirects to #delete_select if :id is not given.
  #
  # @see #delete_account_path         Route helper
  # @see #delete_select_account_path  Route helper
  #
  def delete: () -> void

  # === DELETE /account/destroy/:id
  #
  # Remove existing EMMA user account(s).
  #
  # @see #destroy_account_path        Route helper
  #
  def destroy: () -> void

  # === GET /account/show_select
  #
  # Show a menu to select a user to show.
  #
  # @see #show_select_account_path    Route helper
  #
  def show_select: () -> void

  # === GET /account/edit_select
  #
  # Show a menu to select a user to edit.
  #
  # @see #edit_select_account_path    Route helper
  #
  def edit_select: () -> void

  # === GET /account/delete_select
  #
  # Show a menu to select a user to delete.
  #
  # @see #delete_select_account_path  Route helper
  #
  def delete_select: () -> void

  # This is a kludge until I can figure out the right way to express this with
  # CanCan -- or replace CanCan with a more expressive authorization gem.
  #
  # @param [Symbol]                 action
  # @param [User, Array<User>, nil] subject
  # @param [*]                      args
  #
  def user_authorize!: (Symbol action, User|Array[User]|nil subject, *untyped args) -> void
end
