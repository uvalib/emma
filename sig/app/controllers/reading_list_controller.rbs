# Handle Bookshare-only "/reading_list" pages.
#
# @see ReadingListDecorator
# @see ReadingListsDecorator
# @see file:app/views/reading_list/**
#
# @note These endpoints are not currently presented as a part of EMMA.
#
class ReadingListController < ApplicationController
  include UserConcern

  include ParamsConcern

  include SessionConcern

  include RunStateConcern

  include PaginationConcern

  include SerializationConcern

  include BookshareConcern

  # :nocov:
  #include AbstractController::Callbacks

  attr_reader page: Paginator
  attr_reader list: Bs::Message::ReadingListList
  attr_reader item: Bs::Message::ReadingListUserView

  # == GET /reading_list
  #
  # List all reading lists available to the user (private lists, shared lists,
  # or organization list to which the user is subscribed).
  #
  # @see #reading_list_index_path     Route helper
  # @see BookshareService::Request::ReadingLists#get_reading_lists_list
  #
  def index: () -> void

  # == GET /reading_list/:id
  #
  # Display details of a reading list.
  #
  # @see #reading_list_path           Route helper
  # @see BookshareService::Request::ReadingLists#get_reading_list
  # @see BookshareService::Request::ReadingLists#get_reading_list_titles
  #
  def show: () -> void

  # == GET /reading_list/new[?id=:id]
  #
  # Add details for a new reading list.
  #
  # @see #new_reading_list_path       Route helper
  #
  def new: () -> void

  # == POST /reading_list/:id
  #
  # Create a new reading list.
  #
  # @see #reading_list_path           Route helper
  #
  def create: () -> void

  # == GET /reading_list/:id/edit
  #
  # Modify metadata of an existing reading list.
  #
  # @see #edit_reading_list_path      Route helper
  #
  def edit: () -> void

  # == PUT   /reading_list/:id
  # == PATCH /reading_list/:id
  #
  # Update the entry for an existing reading list.
  #
  # @see #reading_list_path           Route helper
  #
  def update: () -> void

  # == DELETE /reading_list/:id
  #
  # Remove an existing reading list.
  #
  # @see #reading_list_path           Route helper
  #
  def destroy: () -> void

  # Response values for de-serializing the index page to JSON or XML.
  #
  # @param [Bs::Message::ReadingListList] list
  # @param [Hash]                         opt
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def index_values: (?Bs::Message::ReadingListList list, **untyped opt) -> symHash

  # Response values for de-serializing the show page to JSON or XML.
  #
  # @param [Hash, nil] result
  # @param [Hash]      opt
  #
  # @return [Hash{Symbol=>Hash,Array}]
  #
  def show_values: (?(anyHash|nil) result, **untyped opt) -> symHash
end
