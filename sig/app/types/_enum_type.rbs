# Base class for controlled-vocabulary scalar types.
#
class EnumType < ScalarType
  # All type names and properties.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  CONFIGURATION: Hash[Symbol,anyHash]

  # Generic type names and properties.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  GENERIC_TYPES: Hash[Symbol,anyHash]

  # Account-related type names and properties.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  ACCOUNT_TYPES: Hash[Symbol,anyHash]

  # Search-related type names and properties.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  SEARCH_TYPES: Hash[Symbol,anyHash]

  module Comparable
    # Transform a value into a string for liberal case-insensitive comparison
    # where non-alphanumeric are disregarded.
    #
    # @param [String, Symbol, nil] key
    #
    # @return [String]
    #
    def comparable: ((String|Symbol|nil) v) -> String

    # Create a mapping of comparable values to original values.
    #
    # @param [Array, Hash]         keys
    # @param [String, Symbol, nil] caller   For diagnostics.
    #
    # @return [Hash{String=>String,Symbol}]
    #
    def comparable_map
      : (strArray|strHash keys, ?(String|Symbol|nil) caller) -> Hash[String,String]
      | (symArray|symHash keys, ?(String|Symbol|nil) caller) -> Hash[String,Symbol]
  end

  extend Comparable

  module Enumerations
    include Comparable

    @@enumerations: Hash[Symbol,symHash]

    # Add enumeration values from configuration entries.
    #
    # @param [String, Hash]        arg
    # @param [Symbol, String, nil] name
    #
    # @return [Hash{Symbol=>Hash}]
    #
    # -
    # === Variations
    # +
    #
    # @overload add_enumeration(i18n_path, name)
    #   A configuration entry where the last part of the path is a string that
    #   when camelized is the same as the name of the class being defined.
    #   (E.g. "en.emma.type.manifest_item.file_path" for class FilePath.)
    #   @param [String]              i18n_path
    #   @return [Hash{Symbol=>Hash}]
    #
    # @overload add_enumeration(i18n_path, name)
    #   A configuration entry where the last part of the path is a string that
    #   @param [String]              i18n_path
    #   @param [Symbol, String]      name
    #   @return [Hash{Symbol=>Hash}]
    #
    # @overload add_enumeration(i18n_path, name)
    #   @param [Hash]                config
    #   @param [Symbol, String, nil] name
    #   @return [Hash{Symbol=>Hash}]
    #
    #def add_enumeration
    #  : (anyHash arg,  (Symbol|String)     name) -> Hash[Symbol,symHash]
    #  | (String  arg, ?(Symbol|String|nil) name) -> Hash[Symbol,symHash]

    # add_enumerations_from
    #
    # @param [String] i18n_path
    #
    # @return [Hash{Symbol=>Hash}]
    #
    # @note Currently unused.
    #
    #def add_enumerations_from: (String i18n_path) -> Hash[Symbol,symHash]

    # Called from API record definitions to provide this base class with the
    # values that will be accessed implicitly from subclasses.
    #
    # @param [Hash{Symbol,String=>any,nil}] entries
    #
    # @return [Hash{Symbol=>Hash}]
    #
    def add_enumerations: (Hash[(Symbol|String),(symHash|strArray)] entries) -> Hash[Symbol,symHash]

    # Enumeration definitions accumulated from API records.
    #
    # @return [Hash{Symbol=>Hash}]
    #
    # === Implementation Notes
    # This needs to be a class variable so that all subclasses reference the
    # same set of values.
    #
    def enumerations: () -> Hash[Symbol,symHash]

    # The values for an enumeration.
    #
    # @param [Symbol, String] entry
    #
    # @return [Array<String>]
    #
    def values_for: ((Symbol|String) entry) -> strArray

    # The value/label pairs for an enumeration.
    #
    # @param [Symbol, String] entry
    #
    # @return [Hash]
    #
    def pairs_for: ((Symbol|String) entry) -> Hash[String,String]

    # The default for an enumeration.
    #
    # @param [Symbol, String] entry
    #
    # @return [String]
    #
    def default_for: ((Symbol|String) entry) -> String

    private

    # get_configuration
    #
    # @param [String]                   i18n_path
    # @param [Array<Symbol>,Symbol,nil] default
    #
    # @return [Hash, Array<String>, nil]
    #
    #def get_configuration: (String i18n_path, default: symArray|Symbol|nil) -> (symHash | strArray | nil)
  end

  extend Enumerations

  module Methods
    include ScalarType::Methods

    include Comparable

    extend Enumerations

    # The default value associated with this enumeration type.  If no default
    # is explicitly defined the initial value is returned.
    #
    # @return [String]
    #
    def default: () -> String

    # Indicate whether *v* matches the default value.
    #
    # @param [any, nil] v
    #
    def default?: (untyped v) -> bool

    # Indicate whether *v* would be a valid value for an item of this type.
    #
    # @param [any, nil] v
    #
    def valid?: (untyped v) -> bool

    # Transform *v* into a valid form.
    #
    # @param [any, nil] v
    #
    # @return [String]
    #
    def normalize: (untyped v) -> String

    # The name of the represented enumeration type.
    #
    # @return [Symbol]
    #
    def type: () -> Symbol

    # The enumeration values associated with the subclass.
    #
    # @return [Array<String>]
    #
    def values: () -> strArray

    # The value/label pairs associated with the subclass.
    #
    # @return [Hash]
    #
    # @see ApplicationRecord#pairs
    #
    def pairs: (**untyped _ignored) -> Hash[String,String]

    # Mapping of comparable values to enumeration values.
    #
    # @return [Hash]
    #
    def mapping: () -> Hash[String,String]

    private

    def self.included: (Module base) -> void
  end

  include Methods

  # Assign a new value to the instance.
  #
  # @param [any, nil]    v
  # @param [Hash] opt                 Passed to ScalarType#set
  #
  # @return [String, nil]
  #
  def set: (untyped v, **untyped opt) -> (String | nil)

  # Indicate whether the instance is valid.
  #
  # @param [any, nil] v               Default: #value.
  #
  def valid?: (?untyped v) -> bool

  # The natural language presentation for the current enumeration value.
  #
  # @return [String]
  #
  def label: () -> String

  # To be run from the subclass definition.
  #
  # The enumeration name/value pairs can be provided through a block, through
  # the *values* parameter, or by a VALUE_MAP constant defined by the subclass.
  #
  # @param [Hash{Symbol=>any}, nil] values
  #
  # @return [Hash{Symbol=>any}]
  #
  def self.define_enumeration: (?(symHash|nil) values) ?{ () -> symHash } -> symHash

  private

  def self.inherited: (Class subclass) -> void
end
