# Methods mixed in to record elements related to dates.
#
module Lookup::Crossref::Shared::DateMethods
  include Lookup::RemoteService::Shared::DateMethods
  include Lookup::Crossref::Shared::CommonMethods

  # Use the :date_time field if the including class defines it and it has data;
  # otherwise combine :date_parts.
  #
  # @param [Hash] opt                 Passed to #get_date_value.
  #
  # @return [String]
  #
  def as_string: () -> (String   | nil)

  # Use the :date_time field if the including class defines it and it has data;
  # otherwise combine :date_parts.
  #
  # @param [Hash] opt                 Passed to #get_date_value.
  #
  # @return [Date, nil]
  #
  def to_date: () -> (Date     | nil)

  # Use the :date_time field if the including class defines it and it has data;
  # otherwise combine :date_parts.
  #
  # @param [Hash] opt                 Passed to #get_date_value.
  #
  # @return [DateTime, nil]
  #
  def to_datetime: () -> (DateTime | nil)

  # Recursively find the DateTime or DatePart value.
  #
  # @param [Api::Record] target       Default: `self`.
  # @param [Hash]        opt          Passed to #find_item/#find_items.
  #
  # @return [String, Array<Integer>, nil]
  #
  def get_date_value: (?target: Api::Record|nil, **untyped opt) -> (String | Array[Integer] | nil)

  class DatePart < Array[Integer]
    # @return [Integer]
    def year: () -> Integer

    # @return [Integer]
    def month: () -> Integer

    # @return [Integer]
    def day: () -> Integer

    # @return [String]
    def as_string: () -> String

    # @return [Date]
    def to_date: () -> Date

    # @return [DateTime]
    def to_datetime: () -> DateTime
  end

  class YearTotal < Array[Integer]
    # @return [Integer]
    def year: () -> Integer

    # @return [Integer]
    def total: () -> Integer
  end
end
