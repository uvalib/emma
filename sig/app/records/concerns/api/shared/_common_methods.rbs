# General shared methods.
#
module Api::Shared::CommonMethods
  extend ::Api::Shared::CommonMethods

  # Normalization array handling.
  #
  # :required   Results always given as arrays.
  # :forbidden  Results are only given a singles.
  # :auto       Results given as arrays when indicated; singles otherwise.
  #
  # @type [Array<Symbol>]
  #
  ARRAY_MODES: symArray

  # Generic separator for splitting a string into parts.
  #
  # @type [Regexp]
  #
  PART_SEPARATOR: Regexp

  # @private
  PRODUCTION_HOST: String

  # Indicate whether this record represents a canonical index entry.
  #
  # In production, for EMMA repository items, this would mean an entry whose
  # :emma_retrievalLink starts with the base URL for the production service.
  #
  # @param [Api::Record, nil] rec  Default: `self`.
  #
  def canonical?: (?(Api::Record|nil) rec) -> bool

  # Indicate whether this record represents a canonical index entry.
  #
  # In production, for EMMA repository items, this would mean an entry whose
  # :emma_retrievalLink starts with the base URL for the production service.
  #
  # @param [Api::Record, nil] rec  Default: `self`.
  #
  def empty?: (?(Api::Record|nil) rec) -> bool

  # Reduce a string for comparison with another by eliminating surrounding
  # white space and/or punctuation, and by reducing internal runs of white
  # space and/or punctuation to a single space.
  #
  # @param [String]  value
  # @param [Boolean] lowercase        If *false*, preserve case.
  #
  # @return [String]
  #
  def normalized: (String value, ?lowercase: bool) -> String

  # Strip surrounding spaces and terminal punctuation for a proper name,
  # allowing for the possibility of ending with an initial (which needs the
  # trailing '.' to be preserved).
  #
  # @param [String] value
  # @param [Hash]   opt               Passed to #clean.
  #
  # @return [String]
  #
  def clean_name: (String value, **untyped opt) -> String

  # Strip surrounding spaces and terminal punctuation.
  #
  # @param [String, *] value
  # @param [String]    allowed    Default: #CLEAN_EXCEPT
  # @param [Regexp]    regexp     Default: #CLEAN_REGEXP
  #
  # @return [String, *]
  #
  def clean: [T] (T   value, ?allowed: String|nil, ?regexp: Regexp|nil) -> T
           |     (nil value, ?allowed: String|nil, ?regexp: Regexp|nil) -> nil

  # clean_regexp
  #
  # @param [String] allowed
  #
  # @return [Regexp]
  #
  def self.clean_regexp: (String allowed) -> Regexp

  CLEAN_EXCEPT:        String
  CLEAN_EXCEPT_PERIOD: String

  CLEAN_REGEXP:        Regexp
  CLEAN_REGEXP_PERIOD: Regexp

  # Get the first non-blank value given a list of fields.
  #
  # @param [Array<Symbol>] fields
  # @param [Hash]          opt        Passed to #get_values.
  #
  # @return [String, nil]
  #
  def get_value: (*Symbol fields, **untyped opt) -> (String | nil)

  # Get the first non-empty value given a list of fields.
  #
  # @param [Array<Symbol>] fields
  # @param [Api::Record]   target     Default: `self`.
  #
  # @return [Array<String>]
  #
  def get_values: (*Symbol fields, ?target: Api::Record|nil) -> strArray

  # A traversal through the hierarchy rooted at the class instance which
  # holds all of the metadata for a single lookup result item.
  #
  # @return [Array<Symbol>]
  #
  def item_record_path: () -> symArray

  # item_record
  #
  # @return [Api::Record, nil]
  #
  def item_record: () -> (Api::Record | nil)

  # find_record_item
  #
  # @param [Symbol] field
  # @param [Hash]   opt               Passed to #find_item.
  #
  # @return [any,nil]
  #
  def find_record_item: (Symbol field, **untyped opt) -> (untyped | nil)
  # find_record_items
  #
  # @param [Symbol] field
  # @param [Hash]   opt               Passed to #find_items.
  #
  # @return [Array]
  #
  def find_record_items: (Symbol field, **untyped opt) -> anyArray

  # find_record_value
  #
  # @param [Symbol] field
  # @param [Hash]   opt               Passed to #find_value.
  #
  # @return [String, nil]
  #
  def find_record_value: (Symbol field, **untyped opt) -> (String | nil)
  # find_record_values
  #
  # @param [Symbol] field
  # @param [Hash]   opt               Passed to #find_values.
  #
  # @return [Array<String>]
  #
  def find_record_values: (Symbol field, **untyped opt) -> strArray

  # find_item
  #
  # @param [Array<Symbol>] path
  # @param [Symbol]        field
  # @param [Api::Record]   target     Default: `self`.
  # @param [Boolean]       clean      If *true* run result through #clean.
  # @param [Hash]          opt        Passed to #clean.
  #
  # @return [any,nil]
  #
  def find_item: (*Symbol path, Symbol field, ?target: Api::Record|nil, ?clean: bool, **untyped opt) -> (untyped | nil)

  # find_items
  #
  # @param [Array<Symbol>] path
  # @param [Symbol]        field
  # @param [Api::Record]   target     Default: `self`.
  # @param [Boolean]       clean      If *true* run result through #clean.
  # @param [Hash]          opt        Passed to #clean.
  #
  # @return [Array]
  #
  def find_items: (*Symbol path, Symbol field, ?target: Api::Record|nil, ?clean: bool, **untyped opt) -> anyArray

  # find_value
  #
  # @param [Array<Symbol>] path
  # @param [Symbol]        field
  # @param [String]        separator  Used if the item is an array.
  # @param [Boolean]       clean      If *false* do not #clean.
  # @param [Hash]          opt        Passed to #find_values.
  #
  # @return [String, nil]
  #
  def find_value: (*Symbol path, Symbol field, ?separator: String, ?clean: bool, **untyped opt) -> (String | nil)

  # find_values
  #
  # @param [Array<Symbol>] path
  # @param [Symbol]        field
  # @param [Boolean]       clean      If *false* do not #clean.
  # @param [Hash]          opt        Passed to #find_items.
  #
  # @return [Array<String>]
  #
  def find_values: (*Symbol path, Symbol field, ?clean: bool, **untyped opt) -> strArray

  # Get the target field value.
  #
  # @param [Hash, nil] data           Default: *self*.
  # @param [Symbol]    field
  #
  # @return [Any]
  #
  def get_field_value: ((symHash|nil) data, Symbol field) -> untyped

  # Set the target field value.
  #
  # @param [Hash, nil] data           Default: *self*.
  # @param [Symbol]    field
  # @param [Any, nil]  value
  #
  # @return [void]
  #
  def set_field_value!: ((symHash|nil) data, Symbol field, untyped value) -> void

  # Update the target field.
  #
  # @param [Hash, nil]   data         Default: *self*.
  # @param [Symbol]      field
  # @param [Symbol, nil] mode         One of #ARRAY_MODES.
  #
  # @return [void]
  #
  # @yield [value] Generate a replacement value
  # @yieldparam [Any] value   The current field value.
  # @yieldreturn [Array]      The new field value(s).
  #
  def update_field_value!: ((symHash|nil) data, Symbol field, ?(Symbol|nil) mode) { (untyped) -> untyped } -> void

  # Get the indicated field values from the indicated target.
  #
  # @param [Hash, nil]     data       Default: *self*.
  # @param [Array<Symbol>] fields
  #
  # @return [Array]
  #
  def get_field_values: ((symHash|nil) data, *Symbol fields) -> anyArray

  # Update the indicated target with the given values.
  #
  # @param [Hash, nil] data           Default: *self*.
  # @param [Hash]      values
  #
  # @return [void]
  #
  def set_field_values!: ((symHash|nil) data, symHash values) -> void
end
