# Methods mixed in to record elements related to catalog titles.
#
module Api::Shared::TitleMethods
  include Api::Shared::CommonMethods

  # :nocov:
  #include Model

  # Convert object to string.
  #
  # @return [String]
  #
  def to_s: () -> String

  # A label for the item.
  #
  # @return [String]
  #
  def label: () -> String

  # A unique identifier for this catalog title.
  #
  # @return [String]
  #
  def identifier: () -> (String | nil)

  def title_fields:         () -> symArray
  def subtitle_fields:      () -> symArray
  def journal_title_fields: () -> symArray
  #def date_fields: () -> symArray
  def contents_fields:      () -> symArray

  def thumbnail_image:      () -> (String | nil)
  def cover_image:          () -> (String | nil)

  def title_values:         () -> strArray
  def subtitle_values:      () -> strArray
  def normalized_title:     () -> String
  def full_title:           () -> String

  def series_type:          () -> (String | nil)
  def series_volume:        () -> (String | nil)
  def series_issue:         () -> (String | nil)
  def series_position:      () -> (String | nil)
  def journal_title:        () -> (String | nil)
  def full_journal_title:   () -> (String | nil)

  def publisher_name:       () -> (String | nil)
  def publication_place:    () -> (String | nil)
  def publication_date:     () -> (String | nil)
  def publication_year:     () -> (String | nil)
  #def year: () -> (Integer | nil)
  def full_publisher:       () -> (String | nil)

  def language_list:        () -> strArray
  def subject_list:         () -> strArray
  def description_list:     () -> strArray

  # Sanitizer for catalog title contents.
  #
  # @type [Sanitize]
  #
  CONTENT_SANITIZE: Sanitize

  # The synopsis or description with rudimentary formatting.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                         If the value cannot be determined.
  #
  # == Implementation Notes
  # [1]  Repair malformed HTML entities.
  # [2]  Transform one or more newlines into a pair of breaks.
  # [3]  Normalize space characters.
  # [4]  Strip leading/trailing spaces only after normalization.
  # [5]  Eliminate sequences like "<p><p>".
  # [6]  Normalize breaks, removing any leading spaces.
  # [7]  Eliminate orphaned elements like "<p><br/>".
  # [8]  Put explicit list elements on their own lines.
  # [9]  Put implied list elements on their own lines.
  # [10] Put *apparent* list elements on their own lines.
  # [11] Treat a run of spaces as an implied paragraph break.
  # [12] Special paragraph break.
  # [13] Reduce runs of breaks to just a pair of breaks.
  # [14] Remove leading breaks.
  # [15] Remove trailing breaks.
  #
  def contents: () -> (ActiveSupport::SafeBuffer | nil)

  # Reduce a string for comparison with another by eliminating characters to
  # ignore for comparison.
  #
  # @param [String] value
  #
  # @return [String]
  #
  def significant: (String value) -> String
end
