# Methods mixed in to record elements related to catalog titles.
#
module Api::Shared::TitleMethods
  include Api::Shared::CommonMethods

  # :nocov:
  #include Model

  # Convert object to string.
  #
  # @return [String]
  #
  def to_s: () -> String

  # A label for the item.
  #
  # @return [String]
  #
  def label: () -> String

  # A unique identifier for this catalog title.
  #
  # @return [String]
  #
  def identifier: () -> (String | nil)

  # Field(s) that may hold the title string.
  #
  # @return [Array<Symbol>]
  #
  def title_fields: () -> symArray

  # Field(s) that may hold the subtitle string.
  #
  # @return [Array<Symbol>]
  #
  def subtitle_fields: () -> symArray

  # Field(s) that may hold the name of the container/aggregate for an article.
  #
  # @return [Array<Symbol>]
  #
  def journal_title_fields: () -> symArray

  # Field(s) that may hold content information about the title.
  #
  # @return [Array<Symbol>]
  #
  def contents_fields: () -> symArray

  # A link to a title's thumbnail image.
  #
  # @return [String]
  # @return [nil]                     If the link was not present.
  #
  def thumbnail_image: () -> (String | nil)

  # A link to a title's cover image if present.
  #
  # @return [String]
  # @return [nil]                     If the link was not present.
  #
  def cover_image: () -> (String | nil)

  # One or more title strings.
  #
  # @return [Array<String>]
  #
  def title_values: () -> strArray

  # One or more subtitle strings.
  #
  # @return [Array<String>]
  #
  def subtitle_values: () -> strArray

  # The full title in a form that it can be used for comparisons.
  #
  # @return [String]
  #
  def normalized_title: () -> String

  # The title and subtitle of this catalog title.
  #
  # @return [String]
  #
  def full_title: () -> String

  # The type of work containing an article (if relevant).
  #
  # @return [String, nil]
  #
  def series_type: () -> (String | nil)

  # The volume of the journal containing an article (if relevant).
  #
  # @return [String, nil]
  #
  def series_volume: () -> (String | nil)

  # The issue of the journal containing an article (if relevant).
  #
  # @return [String, nil]
  #
  def series_issue: () -> (String | nil)

  # The volume and/or issue number containing an article (if relevant).
  #
  # @return [String, nil]
  #
  def series_position: () -> (String | nil)

  # The journal which contains an article (if relevant).
  #
  # @return [String, nil]
  #
  def journal_title: () -> (String | nil)

  # The journal which contains an article (if relevant).
  #
  # @return [String, nil]
  #
  def full_journal_title: () -> (String | nil)

  # Name of publisher.
  #
  # @return [String, nil]
  #
  def publisher_name: () -> (String | nil)

  # The place of publication.
  #
  # @return [String, nil]
  #
  def publication_place: () -> (String | nil)

  # The date of publication.
  #
  # @return [String, nil]
  #
  def publication_date: () -> (String | nil)

  # The date of publication.
  #
  # @return [String, nil]
  #
  def publication_year: () -> (String | nil)

  # Publisher and/or publisher location
  #
  # @return [String, nil]
  #
  def full_publisher: () -> (String | nil)

  # language_list
  #
  # @return [Array<String>]
  #
  def language_list: () -> strArray

  # subject_list
  #
  # @return [Array<String>]
  #
  def subject_list: () -> strArray

  # description_list
  #
  # @return [Array<String>]
  #
  def description_list: () -> strArray

  # Sanitizer for catalog title contents.
  #
  # @type [Sanitize]
  #
  CONTENT_SANITIZE: Sanitize

  # The synopsis or description with rudimentary formatting.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]                         If the value cannot be determined.
  #
  # == Implementation Notes
  # [1]  Repair malformed HTML entities.
  # [2]  Transform one or more newlines into a pair of breaks.
  # [3]  Normalize space characters.
  # [4]  Strip leading/trailing spaces only after normalization.
  # [5]  Eliminate sequences like "<p><p>".
  # [6]  Normalize breaks, removing any leading spaces.
  # [7]  Eliminate orphaned elements like "<p><br/>".
  # [8]  Put explicit list elements on their own lines.
  # [9]  Put implied list elements on their own lines.
  # [10] Put *apparent* list elements on their own lines.
  # [11] Treat a run of spaces as an implied paragraph break.
  # [12] Special paragraph break.
  # [13] Reduce runs of breaks to just a pair of breaks.
  # [14] Remove leading breaks.
  # [15] Remove trailing breaks.
  #
  def contents: () -> (ActiveSupport::SafeBuffer | nil)

  # Reduce a string for comparison with another by eliminating characters to
  # ignore for comparison.
  #
  # @param [String] value
  #
  # @return [String]
  #
  def significant: (String value) -> String
end
