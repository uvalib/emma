class Model::WorkflowJob < ApplicationJob
  # :nocov:
  #extend ActiveJob::Core

  # @private
  CLASS: Class

  PERFORM_OPTS: symArray

  def initialize: (*untyped args, **untyped opt) -> void

  # Run the command(s) specified by the model.
  #
  # @param [Array] args
  #
  # @return [void]
  #
  # -
  # == Variations
  # +
  #
  # @overload perform(model, meth, callback, **opt)
  #   @param [Model]         model
  #   @param [Symbol]        meth
  #   @param [AsyncCallback] callback
  #   @param [Hash]          opt
  #   @option opt [Model, nil]    :from       Passed to *meth*.
  #   @option opt [AsyncCallback] :callback   Ignored.
  #
  # @overload perform(model, meth, **opt)
  #   @param [Model]         model
  #   @param [Symbol]        meth
  #   @param [Hash]          opt
  #   @option opt [Model, nil]    :from       Passed to *meth*.
  #   @option opt [AsyncCallback] :callback   Optional.
  #
  # @overload perform(model, **opt)
  #   @param [Model]         model
  #   @option opt [Symbol]        :meth
  #   @option opt [Model, nil]    :from       Passed to *meth*.
  #   @option opt [AsyncCallback] :callback   Optional.
  #
  # @overload perform(**opt)
  #   @option opt [Model]         :receiver # TODO: ?
  #   @option opt [Symbol]        :meth
  #   @option opt [Model, nil]    :from       Passed to *meth*.
  #   @option opt [AsyncCallback] :callback   Optional.
  #
  def perform: (*untyped args) -> void

  def item_inspect: (untyped v) -> String

  # Called from #perform to initiate a callback if one was supplied via the job
  # arguments.
  #
  # @param [AsyncCallback, nil] callback
  # @param [Hash]               opt       Passed to #cb_schedule.
  #
  # @option opt [AsyncCallback] :callback
  #
  # @return [void]
  #
  def perform_callback: ((Model::AsyncCallback|nil) callback, **untyped opt) -> void
end
