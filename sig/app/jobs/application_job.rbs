# Common base for Active Job classes.
#
class ApplicationJob < ActiveJob::Base
  include ApplicationJob::Logging

  include ApplicationJob::Methods

  include ApplicationJob::Properties

  # initialize
  #
  # @param [any, nil] args            Assigned to ActiveJob::Core#arguments.
  # @param [Hash]     opt             Appended to ActiveJob::Core#arguments.
  #
  def initialize: (*untyped args, **untyped opt) -> void

  # Run the job immediately.
  #
  # @param [Array] args               Assigned to ActiveJob::Core#arguments.
  # @param [Hash]  opt
  #
  # @return [any]                     Return value of #perform.
  #
  def perform_now: (*untyped args, **untyped opt) -> untyped

  # Queue the job to be run asynchronously.
  #
  # @param [Array] args               Ignored.
  # @param [Hash]  options            Passed to ActiveJob::Enqueuing#enqueue.
  #
  # @return [FalseClass]              If the job could not be queued.
  # @return [ApplicationJob]          Otherwise *self* is returned.
  #
  def perform_later: (*untyped args, **untyped options) -> untyped
end

# Namespace for app/jobs/attachment.
# @note Currently unused
module Attachment
end
