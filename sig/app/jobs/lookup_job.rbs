class LookupJob < ApplicationJob
  # Lookup the provided identifier(s) and transmit the result to the client.
  #
  # Expected ActiveJob arguments:
  # * argument[0]   LookupService::RemoteService subclass or subclass instance.
  # * argument[1]   Array of identifier strings or Hash table of arrays.
  # * argument[2]   Options:
  #
  # @option argument[2] [Symbol]  :job_type
  # @option argument[2] [Boolean] :fatal
  #
  # @return [Hash]
  #
  # -
  # === Variations
  # +
  #
  # @overload perform_later(services, request, **opt)
  #   The "waiter" task invoked via `LookupJob.perform_later`.
  #   @param [Array<Class,LookupService::RemoteService>]  services
  #   @param [LookupService::Request]                     request
  #   @param [Hash]                                       opt
  #   @return [Hash]
  #
  # @overload perform_later(service, request, **opt, job_type: :worker)
  #   A "worker" task invoked from within #waiter_task.
  #   @param [Class,LookupService::RemoteService]         service
  #   @param [LookupService::Request]                     request
  #   @param [Hash]                                       opt
  #   @return [Hash]  From LookupService::RemoteService#lookup_metadata
  #
  def perform: (*untyped args, **untyped opt) -> symHash

  # @type [Hash{Symbol=>Hash{Symbol,nil=>String}}]
  JOB_STATUS: Hash[Symbol,Hash[(Symbol|nil),String]]

  JOB_TYPES: symArray

  JOB_OPTIONS: symArray

  # If *true*, each worker will send a response back to the client.  Otherwise,
  # the only response the client should expect is the one from the waiter task
  # after all of the worker tasks have either completed or timed-out.
  #
  # @type [Boolean]
  #
  WORKER_RESPONSE: bool

  # worker_task
  #
  # @param [JobResult]                           record
  # @param [Class, LookupService::RemoteService] service
  # @param [LookupService::Request]              request
  # @param [Hash]                                opt
  #
  # @return [Hash]
  #
  # @see LookupService::Response#TEMPLATE
  #
  def worker_task: (JobResult record, Class|LookupService::RemoteService service, LookupService::Request request, **untyped opt) -> symHash

  # Perform lookup on the external service.
  #
  # @param [Class, LookupService::RemoteService] service
  # @param [LookupService::Request]              request
  # @param [Hash]                                opt
  #
  # @return [LookupService::Response]
  #
  def worker_task_execution: (Class|LookupService::RemoteService service, LookupService::Request request, **untyped opt) -> LookupService::Response

  # waiter_task
  #
  # @param [JobResult]                                 record
  # @param [Array<Class,LookupService::RemoteService>] services
  # @param [LookupService::Request]                    request
  # @param [Hash]                                      opt
  #
  # @return [Hash]
  #
  def waiter_task: (JobResult record, Array[Class|LookupService::RemoteService] services, LookupService::Request request, **untyped opt) -> symHash

  # Update the appropriate *job_table* entry and if all jobs spawned by this
  # waiter have completed then send the final response back to the client.
  #
  # @param [ApplicationJob::Table]  job_table
  # @param [Hash]                   data
  # @param [LookupService::Request] request
  # @param [Hash]                   opt
  #
  # @return [LookupChannel::LookupResponse]   If all tasks have completed.
  # @return [nil]                             If worker task(s) are pending.
  #
  def worker_task_completion: (ApplicationJob::Table job_table, symHash data, LookupService::Request request, **untyped opt) -> (LookupChannel::LookupResponse | nil)
end
