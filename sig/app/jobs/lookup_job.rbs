class LookupJob < ActiveJob::Base
  include ApplicationJob::Methods

  include ApplicationJob::Logging

  # Lookup the provided identifier(s) and transmit the result to the client.
  #
  # Expected ActiveJob arguments:
  # * argument[0]   LookupService::RemoteService subclass or subclass instance.
  # * argument[1]   Array of identifier strings or Hash table of arrays.
  # * argument[2]   Options:
  #
  # @option argument[2] [Symbol]  :job_type
  # @option argument[2] [Boolean] :no_raise
  #
  # @return [Hash]
  #
  # -
  # == Variations
  # +
  #
  # @overload perform_later(services, request, **opt)
  #   The "waiter" task invoked via `LookupJob.perform_later`.
  #   @param [Array<Class,LookupService::RemoteService>]  services
  #   @param [LookupService::Request]                     request
  #   @param [Hash]                                       opt
  #   @return [Hash]
  #
  # @overload perform_later(service, request, **opt, job_type: :worker)
  #   A "worker" task invoked from within #waiter_task.
  #   @param [Class,LookupService::RemoteService]         service
  #   @param [LookupService::Request]                     request
  #   @param [Hash]                                       opt
  #   @return [Hash]  From LookupService::RemoteService#lookup_metadata
  #
  def perform: (*untyped args, **untyped opt) -> symHash

  # @type [Hash{Symbol=>Hash{Symbol,nil=>String}}]
  JOB_STATUS: Hash[Symbol,Hash[(Symbol|nil),String]]

  JOB_TYPES: symArray

  JOB_OPTIONS: symArray

  # If *true*, each worker will send a response back to the client.  Otherwise,
  # the only response the client should expect is the one from the waiter task
  # after all of the worker tasks have either completed or timed-out.
  #
  # @type [Boolean]
  #
  WORKER_RESPONSE: bool

  # worker_task
  #
  # @param [JobResult]                           record
  # @param [Class, LookupService::RemoteService] service
  # @param [LookupService::Request]              request
  # @param [Hash]                                opt
  #
  # @return [Hash]
  #
  # @see LookupService::Response#TEMPLATE
  #
  def worker_task: (JobResult record, Class|LookupService::RemoteService service, LookupService::Request items, **untyped opt) -> symHash

  # waiter_task
  #
  # @param [JobResult]                                 record
  # @param [Array<Class,LookupService::RemoteService>] services
  # @param [LookupService::Request]                    request
  # @param [Hash]                                      opt
  #
  # @return [Hash]
  #
  def waiter_task: (JobResult record, Array[Class|LookupService::RemoteService] services, LookupService::Request items, **untyped opt) -> symHash
end
