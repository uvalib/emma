
type lookupItem         = String | PublicationIdentifier
type lookupItems        = Array[lookupItem]
type lookupHash         = Hash[Symbol,lookupItems]
type lookupArg          = LookupService::Request | lookupHash | lookupItems | String

type lookupRequestItems = Array[PublicationIdentifier]
type lookupRequestHash  = Hash[Symbol,lookupRequestItems]

type lookupDataItems    = Hash[Symbol,Array[LookupService::Data::Item]]
type lookupDataValues   = Hash[Symbol,Array[symHash]]

type lookupJobData      = symHash
type lookupJobTable     = Hash[String,lookupJobData]

# Encapsulates bibliographic metadata lookup.
#
# == Implementation Note
# Unlike other top-level classes in this directory, this is not a subclass of
# ApiService -- instead, the classes defined within its namespace are.
#
class LookupService
  include Emma::TimeMethods

  include Lookup

  include LookupService::Common

  # @type [Numeric]
  DEFAULT_TIMEOUT: Numeric

  ADD_DIAGNOSTICS: bool

  # Get bibliographic information about the given items.
  #
  # @param [LookupService::Request] request
  # @param [LookupChannel, nil]     channel
  # @param [Numeric, Boolean, nil]  timeout   Default: `#DEFAULT_TIMEOUT`.
  #
  # @return [nil, Hash{String=>LookupService::Response}]
  #
  # -
  # == Variations
  # +
  #
  # @overload make_request(items, channel:, timeout: nil)
  #   Access remote services asynchronously.
  #   @param [LookupService::Request] request
  #   @param [LookupChannel]          channel
  #   @param [Numeric, Boolean, nil]  timeout   Default: `#DEFAULT_TIMEOUT`.
  #   @return [nil]
  #
  # @overload make_request(items, timeout: nil)
  #   Access remote services one at a time.
  #   @param [LookupService::Request] request
  #   @param [Numeric, Boolean, nil]  timeout   Default: `#DEFAULT_TIMEOUT`.
  #   @return [Hash{String=>LookupService::Response}]
  #
  def self.make_request
    : (lookupArg items, ?channel: nil,           ?timeout: Numeric|bool|nil) -> Hash[String,LookupService::Response]
    | (lookupArg items,  channel: LookupChannel, ?timeout: Numeric|bool|nil) -> nil

  # Synchronously get bibliographic information via the given service.
  #
  # @param [Class, LookupService::RemoteService] service
  # @param [LookupService::Request]              request
  # @param [Hash]                                opt
  #
  # @return [LookupService::Response]
  #
  # @see LookupJob#worker_task
  # @see LookupService#get_sync
  #
  def self.get_from: ((Class|LookupService::RemoteService) service, LookupService::Request request, **untyped opt) -> LookupService::Response

  # services_for
  #
  # @param [LookupService::Request, Hash, Array, String] items
  # @param [String, Boolean, nil]                        log
  #
  # @return [Array<Class>]
  #
  def self.services_for: (lookupArg items, ?log: String|bool|nil) -> Array[Class]

  # A table of defined external services and the bibliographic types they can
  # handle.  The entries are in descending order of preference.
  #
  # @type [Hash{Class=>Array<Symbol>}]
  #
  # @see LookupService::RemoteService::Properties#priority
  #
  def self.service_table: () -> Hash[Class,symArray]

  # Access remote services asynchronously.
  #
  # @param [LookupService::Request] request
  # @param [Hash]                   opt       Passed to LookupJob#perform
  #
  # @option opt [Numeric, nil] :timeout
  #
  # @return [nil]
  #
  def self.get_async: (LookupService::Request request, **untyped opt) -> nil

  # Access remote services one at a time.
  #
  # @param [LookupService::Request] request
  # @param [Numeric, nil]           timeout
  # @param [Hash]                   opt       Passed to #get_from.
  #
  # @return [Hash{String=>LookupService::Response}]
  #
  def self.get_sync: (LookupService::Request request, ?timeout: Numeric|nil, **untyped opt) -> Hash[String,LookupService::Response]

  # Combine the data from multiple threads.
  #
  # Each top level *table* entry is a hash returned by #post_fight.
  #
  # @param [Hash{*=>Hash}]                              table
  # @param [LookupService::Request, Array<String>, nil] request
  #
  # @return [Hash]
  #
  # @see LookupService::RemoteService#post_fight
  #
  def self.merge_data: (lookupJobTable table, ?(LookupService::Request|strArray|nil) requested) -> anyHash

  # Combine the data from multiple entries.
  #
  # Each top level *table* entry is a hash returned by #post_fight.
  #
  # @param [Array<Hash{Symbol=>*}>] entries
  #
  # @return [Hash{Symbol=>*}]
  #
  def self.blend_data: (*symHash entries) -> symHash

  # @private
  FAMILY_NAME_GIVEN_NAME_DATES: Regexp

  # @private
  FAMILY_NAME_GIVEN_NAME: Regexp

  # Put proper names in a consistent order.
  #
  # @param [Array<String>] values
  #
  # @return [Array<String>]
  #
  def self.fix_names: (strArray values) -> strArray

  # Convert values to strings and eliminate individual values which are
  # duplicates or substrings of other values (based on a comparison of
  # normalized values so that differences in punctuation or capitalization are
  # disregarded).
  #
  # @param [Array] values
  #
  # @return [Array<String>]
  #
  def self.eliminate_substrings: (strArray) -> strArray

  # Transform "YYYY-01-01" values for :emma_publicationDate into "YYYY" values
  # for :dcterms_dateCopyright.  Eliminate :dcterms_dateCopyright values which
  # are already indicated by the remaining "YYYY-MM-DD" :emma_publicationDate
  # values.
  #
  # @param [Hash] result
  #
  # @return [Hash]                    The *result* hash, possibly modified.
  #
  def self.normalize_dates!: (symHash result) -> symHash

  # @type [Hash{Symbol=>String,Regexp}]
  PATTERN: Hash[Symbol,(String|Regexp)]

  def self.pattern: (?untyped name) -> (String | Regexp)
end
