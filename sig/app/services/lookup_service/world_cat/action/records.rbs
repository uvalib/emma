# LookupService::WorldCat::Action::Records
#
module LookupService::WorldCat::Action::Records
  include LookupService::WorldCat::Common

  # === GET https://worldcat.org/webservices/catalog/search/worldcat/sru
  #
  # Sometimes the service will return appropriate results when searching for an
  # ISBN but the returned record will not include any identifiers.
  #
  # @param [LookupService::Request, Array<String>, String] terms
  # @param [Hash]                                          opt
  #
  # @return [Lookup::WorldCat::Message::Sru]
  #
  # @see https://developer.api.oclc.org/wcv1#operations-SRU-search-sru
  #
  # @note The documentation incorrectly states that the endpoint is
  #   '/search/worldcat/sru', however this does not work.
  #
  def get_sru_records: ((LookupService::Request|strArray|String) terms, **untyped opt) -> Lookup::WorldCat::Message::Sru

  # === GET https://worldcat.org/webservices/catalog/content/(oclc_number)
  #
  # @param [String, Oclc] term        Single OCLC identifier.
  # @param [Hash]         opt
  #
  # @return [Lookup::WorldCat::Message::Oclc]
  #
  # @see https://developer.api.oclc.org/wcv1#operations-Read-read-oclcnumber
  #
  def get_oclc: ((String|Oclc) term, **untyped opt) -> Lookup::WorldCat::Message::Oclc

  # === GET https://worldcat.org/webservices/catalog/content/isbn/(isbn)
  #
  # @param [String, Isbn] term        Single ISBN identifier.
  # @param [Hash]         opt
  #
  # @return [Lookup::WorldCat::Message::Isbn]
  #
  # @see https://developer.api.oclc.org/wcv1#operations-Read-read-isbn
  #
  def get_isbn: ((String|Isbn) term, **untyped opt) -> Lookup::WorldCat::Message::Isbn

  # === GET https://worldcat.org/webservices/catalog/content/issn/(issn)
  #
  # @param [String, Issn] term        Single ISSN identifier.
  # @param [Hash]         opt
  #
  # @return [Lookup::WorldCat::Message::Issn]
  #
  # @see https://developer.api.oclc.org/wcv1#operations-Read-read-issn
  #
  def get_issn: ((String|Issn) term, **untyped opt) -> Lookup::WorldCat::Message::Issn

  # === GET https://worldcat.org/webservices/catalog/content/sn/(lccn)
  #
  # @param [String, Lccn] term        Single LCCN identifier.
  # @param [Hash]         opt
  #
  # @return [Lookup::WorldCat::Message::Lccn]
  #
  # @see https://developer.api.oclc.org/wcv1#operations-Read-read-sn
  #
  # === Usage Notes
  # Strictly speaking, the API endpoint accepts a "Standard Number", which
  # according to https://www.loc.gov/marc/bibliographic/bd024.html might be
  # an identifier from any of the source code schemes listed in
  # https://www.loc.gov/standards/sourcelist/standard-identifier.html (where
  # LCCN is only one of the possibilities).
  #
  def get_lccn: ((String|Lccn) term, **untyped opt) -> Lookup::WorldCat::Message::Lccn

  # === GET https://worldcat.org/webservices/catalog/search/worldcat/opensearch
  #
  # @param [LookupService::Request, Array<String>, String] terms
  # @param [Hash]                                          opt
  #
  # @return [Lookup::WorldCat::Message::OpenSearch]
  #
  # @see https://developer.api.oclc.org/wcv1#operations-tag-OpenSearch
  #
  # @note The documentation incorrectly states that the endpoint is
  #   '/search/worldcat/opensearch', however this does not work.
  #
  def get_opensearch_records: ((LookupService::Request|strArray|String) terms, **untyped opt) -> Lookup::WorldCat::Message::OpenSearch

  # Aggregate terms into groups of similar search behavior.
  #
  # @param [LookupService::Request, Array<String>, String] terms
  # @param [Hash]                                          opt
  #
  # @return [Hash{Symbol=>LookupService::WorldCat::Action::Records::Terms}]
  #
  # @see LookupService::Request#TEMPLATE
  #
  def query_terms!: ((LookupService::Request|strArray|String) terms, symHash opt) -> Hash[Symbol,LookupService::WorldCat::Action::Records::Terms]

  # Combine terms to make a WorldCat query string.
  #
  # @param [Hash{Symbol=>Terms}] type_group
  #
  # @return [String]
  #
  def make_query: (Hash[Symbol,LookupService::WorldCat::Action::Records::Terms] type_group) -> String

  OR:  String

  AND: String

  # Abstract base class for term groups.
  #
  class Terms < ::Hash[Symbol,untyped]
    # Create a new query term group.
    #
    # @param [Hash{Symbol=>Symbol}] table
    #
    def initialize: (Hash[Symbol,Symbol] table) -> void

    # A reference to either #LIMIT_PREFIX or #QUERY_PREFIX.
    #
    # @return [Hash{Symbol=>Symbol}]
    #
    attr_reader table: Hash[Symbol,Symbol]

    # Term prefixes expected for the subclass.
    #
    # @return [Array<Symbol>]
    #
    def allowed_prefixes: () -> symArray

    # search_codes
    #
    # @return [Array<Symbol>]
    #
    def search_codes: () -> symArray

    # Add one or more term values of the same kind.
    #
    # @param [Symbol] prefix
    # @param [*]      item
    # @param [Proc]   blk             Applied to each term value.
    #
    # @return [self, nil]
    #
    # @yield [term] Modify or replace the given term value.
    # @yieldparam [String] term       Term value
    # @yieldreturn [String]           The value to use in place of *term*.
    #
    def add_terms: (Symbol prefix, untyped item) ?{ (String term) -> String } -> (self | nil)

    # Add a single term.
    #
    # @param [Symbol, String, nil]            prefix
    # @param [Array<String,nil>, String, nil] value
    #
    # @return [self, nil]
    #
    def add: ((Symbol|String|nil) prefix, (Array[String|nil] | String | nil) value) -> (self | nil)

    # Form WorldCat query parts for each of the types included in the instance.
    #
    # @return [Array<String>]
    #
    def parts: () -> strArray

    # Form a WorldCat query part to match the given value.
    #
    # @param [Symbol] code
    # @param [String] value
    #
    # @return [String]
    #
    def query_part: (Symbol code, String value) -> String

    # Some adjustments for author queries based on observations:
    #
    # * WorldCat can handle "King, Stephen" but not "King,Stephen".
    # * "Stephen King" works for an '=' match.
    # * "King, Stephen" is required for an 'exact' match.
    # * Including birth/death dates is problematic for an 'exact' match.
    #
    # @param [String] value
    #
    # @return [String]
    #
    def fix_name: (String value) -> String
  end

  # Terms which limit search results.
  #
  class LimitTerms < Terms
    # Method keyword parameter mapped to prefix (to be appended to "srw.") for
    # query limiters.
    #
    # Entries marked with [F] are only honored for "servicelevel=full".
    #
    # @type [Hash{Symbol=>Symbol}]
    #
    LIMIT_PREFIX: Hash[Symbol,Symbol]

    # Create a new term group instance.
    #
    def initialize: () -> void
  end

  # Terms which specify search results.
  #
  class QueryTerms < Terms
    # Method keyword parameter mapped to prefix (to be appended to "srw.") for
    # query terms.
    #
    # Entries marked with [F] are only honored for "servicelevel=full".
    #
    # @type [Hash{Symbol=>Symbol}]
    #
    QUERY_PREFIX: Hash[Symbol,Symbol]

    # Create a new term group instance.
    #
    def initialize: () -> void
  end

  # The subset of search terms related to finding specific items by identifier.
  #
  class IdTerms < QueryTerms
    # Value prefixes specifically for publication identifiers.
    #
    # @type [Array<Symbol>]
    #
    ID_PREFIXES: symArray

    # Term identifier prefixes.
    #
    # @return [Array<Symbol>]
    #
    def allowed_prefixes: () -> symArray

    # Add one or more term values of the same kind.
    #
    # @param [Symbol] prefix
    # @param [*]      item
    #
    # @return [self, nil]
    #
    def add_terms: (Symbol prefix, untyped item) -> (self | nil)
  end
end
