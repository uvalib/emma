# Get results from the Crossref API.
#
# @see "en.emma.service.lookup.crossref"
#
# @see https://api.crossref.org/
# @see https://www.crossref.org/documentation/retrieve-metadata/rest-api/
#
class LookupService::Crossref < LookupService::RemoteService
  # Fetch results from Crossref.
  #
  # @param [LookupService::Request] req  Def.: `@request`.
  #
  # @return [Lookup::Crossref::Message::WorkResults]
  # @return [Lookup::Crossref::Message::Work]
  # @return [Lookup::Crossref::Message::Error]
  #
  # == Usage Notes
  # The items are assumed to be in the proper form.
  #
  def fetch: (?lookupArg req) -> (Lookup::Crossref::Message::WorkResults | Lookup::Crossref::Message::Work | Lookup::Crossref::Message::Error)

  # Transform response message data into a normalized data object.
  #
  # @param [Lookup::Crossref::Api::Message, LookupService::Data, Hash, nil] msg
  # @param [Boolean] extended         If *true*, include :diagnostic.
  #
  # @return [LookupService::Data]
  # @return [nil]                     If *msg* is *nil*.
  #
  def transform: ((Lookup::Crossref::Api::Message|LookupService::Data|symHash) msg, ?extended: bool) -> LookupService::Data
               | (nil                                                          msg, ?extended: bool) -> nil

  # transform_single
  #
  # @param [Lookup::Crossref::Record::Work] rec
  #
  # @return [Hash]
  # @return [nil]                     If the record should be ignored.
  #
  def transform_single: (Lookup::Crossref::Record::Work rec) -> (symHash | nil)
end
