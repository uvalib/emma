# Common support methods.
#
module LookupService::Common
  include Emma::Common

  include Emma::Debug

  # Configuration for all external lookup services.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  CONFIGURATION: Hash[Symbol,symHash]

  # Generate a list of PublicationIdentifiers.
  #
  # @param [Array, String, nil] item
  # @param [Hash]               opt   Passed to #id_obj.
  #
  # @return [Array<PublicationIdentifier>]
  #
  def id_list: ((lookupItems|lookupItem|nil) item, **untyped opt) -> lookupRequestItems

  # Analyze a string into individual items.
  #
  # @param [Array, String, PublicationIdentifier, *] item
  #
  # @return [Array<String,PublicationIdentifier>]
  #
  def id_split: ((lookupItems|lookupItem|nil) item) -> lookupItems

  # Transform a type/ID pair.
  #
  # @param [PublicationIdentifier, Symbol, String, nil] type
  # @param [PublicationIdentifier, String, nil]         id
  # @param [Boolean]                                    copy
  #
  # @return [PublicationIdentifier, nil]
  #
  def id_obj: (PublicationIdentifier `type`, ?untyped              id, ?copy: bool) -> PublicationIdentifier
            | (untyped               `type`, PublicationIdentifier id, ?copy: bool) -> PublicationIdentifier
            | (strArray              `type`, ?untyped              id, ?copy: bool) -> (PublicationIdentifier | nil)
            | (String|Symbol|nil     `type`, ?(String|nil)         id, ?copy: bool) -> (PublicationIdentifier | nil)

  def __debug_job: (*untyped args, **untyped opt) ?{ () -> untyped } -> void

  private

  def self.included: (Module base) -> void
end
