# Get results from the OCLC/WorldCat API.
#
# @see "en.emma.service.lookup.world_cat"
#
class LookupService::WorldCat < LookupService::RemoteService
  include LookupService::WorldCat::Properties

  include LookupService::WorldCat::Action

  include LookupService::WorldCat::Common

  include LookupService::WorldCat::Definition

  # Fetch results from WorldCat.
  #
  # @param [LookupService::Request] req  Def.: `@request`.
  #
  # @return [Lookup::WorldCat::Message::Sru]
  # @return [Lookup::WorldCat::Message::Error]
  #
  def fetch: (?lookupArg items) -> (Lookup::WorldCat::Message::Sru | Lookup::WorldCat::Message::Error)

  # Transform response message data into a normalized data object.
  #
  # @param [Lookup::WorldCat::Api::Message, LookupService::Data, Hash, nil] msg
  # @param [Boolean] extended         If *true*, include :diagnostic.
  #
  # @return [LookupService::Data]
  # @return [nil]                     If *msg* is *nil*.
  #
  def transform
    : ((Lookup::WorldCat::Api::Message|LookupService::Data|symHash) msg, ?extended: bool) -> LookupService::Data
    | (nil                                                          msg, ?extended: bool) -> nil

  # transform_single
  #
  # @param [Lookup::WorldCat::Api::Record] rec
  #
  # @return [Hash]
  # @return [nil]                     If the record should be ignored.
  #
  # == Implementation Notes
  # Some WorldCat records seem to be aggregates that reference many individual
  # printings, etc.  To avoid excess noise in the blended result, these records
  # are rejected here.
  #
  def transform_single: (Lookup::WorldCat::Api::Record rec) -> (symHash | nil)
end
