# BookshareService::Request::CollectionTitles
#
# == Usage Notes
#
# === From Collection Management API 2.1 (Collection Assistant - Titles):
# Administrative users have resources available that will let them manage the
# collection, either by adding or removing titles, or by manipulating their
# metadata.  This could include withdrawing live titles, publishing pending
# titles, or reviewing proofread scans.  Collection Assistants can perform
# these functions, only restricted to the titles that are associated with their
# site.
#
module BookshareService::Request::CollectionTitles
  include BookshareService::Common

  include BookshareService::Testing

  # == GET /v2/catalog
  #
  # == 2.1.4. Search for titles across the catalog
  # For allowed roles, you can ask for titles that might not be visible to
  # regular users, such as those that were once in the collection, but have
  # since been removed. This allows administrators to manage the wider
  # collection of titles.
  #
  # Like with the general title search, the result will be a collection of
  # title metadata resources, with a paging token if the results are more than
  # the paging limit.
  #
  # @param [Hash] opt                 Passed to #api.
  #
  # @option opt [String]             :country
  # @option opt [String]             :isbn
  # @option opt [BsTitleStatus]      :titleStatus
  # @option opt [IsoDate]            :startUpdatedDate
  # @option opt [IsoDate]            :endUpdatedDate
  # @option opt [String]             :start
  # @option opt [Integer]            :limit        Default: 10
  # @option opt [BsCatalogSortOrder] :sortOrder    Default: 'title'
  # @option opt [BsSortDirection]    :direction    Default: 'asc'
  #
  # @return [Bs::Message::TitleMetadataCompleteList]
  #
  # @see https://apidocs.bookshare.org/catalog/index.html#_catalog-search
  #
  def get_catalog: (**untyped opt) -> Bs::Message::TitleMetadataCompleteList

  # == POST /v2/titles
  #
  # == 2.1.1. Submit metadata for new title
  # Submit metadata for a new title to the collection.
  #
  # @param [Hash] opt                 Passed to #api.
  #
  # @option opt [String]                    :title                  *REQUIRED*
  # @option opt [String]                    :subtitle
  # @option opt [String]                    :isbn13                 *REQUIRED*
  # @option opt [String, Array<String>]     :authors                *REQUIRED*
  # @option opt [String, Array<String>]     :abridgers
  # @option opt [String, Array<String>]     :adapters
  # @option opt [String, Array<String>]     :arrangers
  # @option opt [String, Array<String>]     :composers
  # @option opt [String, Array<String>]     :coWriters
  # @option opt [String, Array<String>]     :editors
  # @option opt [String, Array<String>]     :epilogueBys
  # @option opt [String, Array<String>]     :forewardBys
  # @option opt [String, Array<String>]     :introductionBys
  # @option opt [String, Array<String>]     :lyricists
  # @option opt [String, Array<String>]     :transcribers
  # @option opt [String, Array<String>]     :translators
  # @option opt [String]                    :synopsis               *REQUIRED*
  # @option opt [String]                    :seriesTitle
  # @option opt [String]                    :seriesSubtitle
  # @option opt [String]                    :seriesNumber
  # @option opt [String]                    :copyrightHolder
  # @option opt [Integer]                   :copyrightDate
  # @option opt [String]                    :edition
  # @option opt [Integer]                   :readingAgeMinimum
  # @option opt [Integer]                   :readingAgeMaximum
  # @option opt [Boolean]                   :adultContent
  # @option opt [Boolean]                   :allowRecommend
  # @option opt [Integer]                   :numPages
  # @option opt [String]                    :publisher
  # @option opt [Array<BsCategoryType>]     :categories             *REQUIRED*
  # @option opt [String, Array<String>]     :countries              *REQUIRED*
  # @option opt [String, Array<String>]     :languages              *REQUIRED*
  # @option opt [String, Array<String>]     :grades
  # @option opt [Array<BsContentWarning>]   :contentWarnings
  # @option opt [String, Array<String>]     :relatedIsbns
  # @option opt [BsRightsType]              :usageRestriction       *REQUIRED*
  # @option opt [String]                    :externalCategoryCode
  # @option opt [BsMusicScoreType]          :musicScoreType
  # @option opt [Boolean]                   :hasChordSymbols
  # @option opt [String]                    :instruments
  # @option opt [String]                    :key
  # @option opt [String]                    :movementNumber
  # @option opt [String]                    :movementTitle
  # @option opt [String]                    :opus
  # @option opt [String]                    :vocalParts
  # @option opt [String]                    :notes
  # @option opt [Boolean]                   :marrakeshEligible
  # @option opt [String, Array<String>]     :userAvailabilities
  # @option opt [Boolean]                   :availableToDemo
  # @option opt [Boolean]                   :availableWorldwide
  # @option opt [String, Array<String>]     :states
  # @option opt [BsTitleContentType]        :contentType
  # @option opt [String]                    :comments
  # @option opt [Boolean]                   :hasEmbeddedImageDescriptions
  # @option opt [BsScanQuality]             :quality
  # @option opt [String]                    :originCountry
  # @option opt [String]                    :productIdentifier
  # @option opt [String]                    :seriesId
  # @option opt [BsExternalFormatType]      :externalFormat         *REQUIRED*
  # @option opt [BsLexileCode]              :lexileCode
  # @option opt [String]                    :lexileNumber
  #
  # @return [Bs::Message::StatusModel]
  #
  # @see https://apidocs.bookshare.org/catalog/index.html#_title-submit
  #
  def submit_catalog_title: (**untyped opt) -> Bs::Message::StatusModel

  # == PUT /v2/titles/(bookshareId)
  #
  # == 2.1.2. Update title metadata
  # Update a titleâ€™s metadata. This includes title, author, ISBN and other
  # properties. This submits a request that will be processed at some point in
  # the future. The title history event list will include an entry reflecting
  # this request and showing when it was applied.
  #
  # @param [String] bookshareId
  # @param [Hash]   opt               Passed to #api.
  #
  # @option opt [String]                    :title
  # @option opt [String]                    :subtitle
  # @option opt [String]                    :isbn13
  # @option opt [String, Array<String>]     :authors
  # @option opt [String, Array<String>]     :abridgers
  # @option opt [String, Array<String>]     :adapters
  # @option opt [String, Array<String>]     :arrangers
  # @option opt [String, Array<String>]     :composers
  # @option opt [String, Array<String>]     :coWriters
  # @option opt [String, Array<String>]     :editors
  # @option opt [String, Array<String>]     :epilogueBys
  # @option opt [String, Array<String>]     :forewardBys
  # @option opt [String, Array<String>]     :introductionBys
  # @option opt [String, Array<String>]     :lyricists
  # @option opt [String, Array<String>]     :transcribers
  # @option opt [String, Array<String>]     :translators
  # @option opt [String]                    :synopsis
  # @option opt [String]                    :seriesTitle
  # @option opt [String]                    :seriesSubtitle
  # @option opt [String]                    :seriesNumber
  # @option opt [String]                    :copyrightHolder
  # @option opt [Integer]                   :copyrightDate
  # @option opt [String]                    :edition
  # @option opt [Integer]                   :readingAgeMinimum
  # @option opt [Integer]                   :readingAgeMaximum
  # @option opt [Boolean]                   :adultContent
  # @option opt [Boolean]                   :allowRecommend
  # @option opt [Integer]                   :numPages
  # @option opt [String]                    :publisher
  # @option opt [Array<BsCategoryType>]     :categories
  # @option opt [String, Array<String>]     :bisacCategories
  # @option opt [String, Array<String>]     :countries
  # @option opt [String, Array<String>]     :languages
  # @option opt [String, Array<String>]     :grades
  # @option opt [Array<BsContentWarning>]   :contentWarnings
  # @option opt [String, Array<String>]     :relatedIsbns
  # @option opt [BsRightsType]              :usageRestriction
  # @option opt [String]                    :externalCategoryCode
  # @option opt [BsMusicScoreType]          :musicScoreType
  # @option opt [Boolean]                   :hasChordSymbols
  # @option opt [String]                    :instruments
  # @option opt [String]                    :key
  # @option opt [String]                    :movementNumber
  # @option opt [String]                    :movementTitle
  # @option opt [String]                    :opus
  # @option opt [String]                    :vocalParts
  # @option opt [String]                    :notes
  # @option opt [Boolean]                   :marrakeshEligible
  # @option opt [String, Array<String>]     :userAvailabilities
  # @option opt [Boolean]                   :availableToDemo
  # @option opt [Boolean]                   :availableWorldwide
  # @option opt [String, Array<String>]     :states
  # @option opt [String]                    :comments
  # @option opt [Boolean]                   :hasEmbeddedImageDescriptions
  # @option opt [BsScanQuality]             :quality
  # @option opt [String]                    :originCountry
  # @option opt [String]                    :productIdentifier
  # @option opt [String]                    :seriesId
  # @option opt [BsLexileCode]              :lexileCode
  # @option opt [String]                    :lexileNumber
  # @option opt [Boolean]                   :nimacRestricted
  #
  # @return [Bs::Message::StatusModel]
  #
  # @see https://apidocs.bookshare.org/catalog/index.html#_title-metadata-update
  #
  def update_catalog_title: (bookshareId: String, **untyped opt) -> Bs::Message::StatusModel

  # == GET /v2/titles/(bookshareId)/history
  #
  # == 2.1.3. Get a list of title history events
  # Get a list of events that mark transitions or updates to the given title
  # and its artifacts. For example, these events might tell when a particular
  # metadata value changed, or when an audio artifact was created.
  #
  # @param [String] bookshareId
  # @param [Hash]   opt               Passed to #api.
  #
  # @option opt [String] :start
  #
  # @return [Bs::Message::TitleHistoryEventResourceList]
  #
  # @see https://apidocs.bookshare.org/reference/index.html#_get-title-history-events
  #
  def get_title_history: (bookshareId: String, **untyped opt) -> Bs::Message::TitleHistoryEventResourceList
end
