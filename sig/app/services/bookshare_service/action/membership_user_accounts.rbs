# BookshareService::Action::MembershipUserAccounts
#
# == Usage Notes
#
# === From Membership Management API 2.1 (Membership Assistant - User Accounts)
# Membership Assistant users are able to view and update the user accounts for
# those individual members who are associated with the Assistant’s site.
#
module BookshareService::Action::MembershipUserAccounts
  include BookshareService::Common

  include BookshareService::Testing

  # == GET /v2/accounts/(userIdentifier)
  #
  # == 2.1.1. Look up user account
  # Get details about the specified user account.  (Membership Assistants are
  # only allowed to search for users associated with the same Site as them.)
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::UserAccount]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-useraccount-search
  #
  def get_account: (?user: User|String|nil, **untyped opt) -> Bs::Message::UserAccount

  # == PUT /v2/accounts/(userIdentifier)
  #
  # == 2.1.2. Update a user account
  # Update an existing user account.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [String]        :firstName
  # @option opt [String]        :lastName
  # @option opt [String]        :phoneNumber
  # @option opt [String]        :emailAddress
  # @option opt [String]        :address1
  # @option opt [String]        :address2
  # @option opt [String]        :city
  # @option opt [String]        :state
  # @option opt [String]        :country
  # @option opt [String]        :postalCode
  # @option opt [String]        :guardianFirstName
  # @option opt [String]        :guardianLastName
  # @option opt [String]        :dateOfBirth
  # @option opt [IsoLanguage]   :language
  # @option opt [Boolean]       :allowAdultContent
  # @option opt [BsSiteType]    :site
  # @option opt [BsRoleType]    :role
  # @option opt [String]        :password
  #
  # @return [Bs::Message::UserAccount]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_update-useraccount
  #
  def update_account: (?user: User|String|nil, **untyped opt) -> Bs::Message::UserAccount

  # == POST /v2/accounts
  #
  # == 2.1.3. Create a user account
  # Create a new user account.
  #
  # @param [Hash] opt                 Passed to #api.
  #
  # @option opt [String]        :firstName                          *REQUIRED*
  # @option opt [String]        :lastName                           *REQUIRED*
  # @option opt [String]        :phoneNumber
  # @option opt [String]        :emailAddress                       *REQUIRED*
  # @option opt [String]        :address1                           *REQUIRED*
  # @option opt [String]        :address2
  # @option opt [String]        :city                               *REQUIRED*
  # @option opt [String]        :state
  # @option opt [String]        :country                            *REQUIRED*
  # @option opt [String]        :postalCode                         *REQUIRED*
  # @option opt [String]        :guardianFirstName
  # @option opt [String]        :guardianLastName
  # @option opt [String]        :dateOfBirth
  # @option opt [IsoLanguage]   :language
  # @option opt [Boolean]       :allowAdultContent
  # @option opt [BsSiteType]    :site
  # @option opt [BsRoleType]    :role
  # @option opt [String]        :password
  #
  # @return [Bs::Message::UserAccount]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_create-useraccount
  #
  def create_account: (**untyped opt) -> Bs::Message::UserAccount

  # == PUT /v2/accounts/(userIdentifier)/password
  #
  # == 2.1.16. Update user password
  # Update the password for an existing user.
  #
  # @param [User, String, nil] user       Default: `@user`.
  # @param [String]            password
  # @param [Hash]              opt        Passed to #api.
  #
  # @return [Bs::Message::StatusModel]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_update-membership-password
  #
  def update_account_password: (password: String, ?user: User|String|nil, **untyped opt) -> Bs::Message::StatusModel

  # == GET /v2/accounts/(userIdentifier)/subscriptions
  #
  # == 2.1.4. Get subscriptions
  # Get the list of membership subscriptions for an existing user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::UserSubscriptionList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-membership-subscriptions
  #
  def get_subscriptions: (?user: User|String|nil, **untyped opt) -> Bs::Message::UserSubscriptionList

  # == POST /v2/accounts/(userIdentifier)/subscriptions
  #
  # == 2.1.5. Create a subscription
  # Create a new membership subscription for an existing user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [IsoDay]      :startDate                            *REQUIRED*
  # @option opt [IsoDay]      :endDate
  # @option opt [String]      :userSubscriptionType                 *REQUIRED*
  # @option opt [Integer]     :numBooksAllowed
  # @option opt [BsTimeframe] :downloadTimeframe
  # @option opt [String]      :notes
  #
  # @return [Bs::Message::UserSubscription]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_create-membership-subscription
  #
  def create_subscription: (?user: User|String|nil, **untyped opt) -> Bs::Message::UserSubscription

  # == GET /v2/accounts/(userIdentifier)/subscriptions/(subscriptionId)
  #
  # == 2.1.6. Get single subscription
  # Get the specified membership subscription for an existing user.
  #
  # @param [User, String, nil] user             Default: `@user`.
  # @param [String]            subscriptionId
  # @param [Hash]              opt              Passed to #api.
  #
  # @return [Bs::Message::UserSubscription]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-single-membership-subscription
  #
  def get_subscription: (subscriptionId: String, ?user: User|String|nil, **untyped opt) -> Bs::Message::UserSubscription

  # == PUT /v2/accounts/(userIdentifier)/subscriptions/(subscriptionId)
  #
  # == 2.1.7. Update a subscription
  # Update an existing membership subscription for an existing user.
  #
  # @param [User, String, nil] user             Default: `@user`.
  # @param [String]            subscriptionId
  # @param [Hash]              opt              Passed to #api.
  #
  # @option opt [IsoDay]      :startDate                            *REQUIRED*
  # @option opt [IsoDay]      :endDate
  # @option opt [String]      :userSubscriptionType                 *REQUIRED*
  # @option opt [Integer]     :numBooksAllowed
  # @option opt [BsTimeframe] :downloadTimeframe
  # @option opt [String]      :notes
  #
  # @return [Bs::Message::UserSubscription]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_update-membership-subscription
  #
  def update_subscription: (subscriptionId: String, ?user: User|String|nil, **untyped opt) -> Bs::Message::UserSubscription

  # == GET /v2/subscriptiontypes
  #
  # == 2.1.8. Get subscription types
  # Get the list of subscription types available to users of the Membership
  # Assistant’s site.
  #
  # @param [Hash] opt                 Passed to #api.
  #
  # @return [Bs::Message::UserSubscriptionTypeList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-membership-subscription-types
  #
  def get_subscription_types: (**untyped opt) -> Bs::Message::UserSubscriptionTypeList

  # == GET /v2/accounts/(userIdentifier)/pod
  #
  # == 2.1.9. Get proof of disability
  # Get the list of disabilities for an existing user, with their proof source.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::UserPodList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-membership-pods
  #
  def get_user_pod: (?user: User|String|nil, **untyped opt) -> Bs::Message::UserPodList

  # == POST /v2/accounts/(userIdentifier)/pod
  #
  # == 2.1.10. Create a proof of disability
  # Create a new record of a disability for an existing user, with its proof
  # source.
  #
  # @param [User, String, nil]         user             Default: `@user`.
  # @param [BsDisabilityType]          disabilityType
  # @param [BsProofOfDisabilitySource] proofSource
  # @param [Hash]                      opt              Passed to #api.
  #
  # @return [Bs::Message::UserPodList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_create-membership-pod
  #
  def create_user_pod: (disabilityType: BsDisabilityType, proofSource: BsProofOfDisabilitySource, ?user: User|String|nil, **untyped opt) -> Bs::Message::UserPodList

  # == PUT /v2/accounts/(userIdentifier)/pod/(disabilityType)
  #
  # == 2.1.11. Update a proof of disability
  # Update the proof source for a disability for an existing user.
  #
  # @param [User, String, nil]       user             Default: `@user`.
  # @param [BsDisabilityType]        disabilityType
  # @param [ProofOfDisabilitySource] proofSource
  # @param [Hash]                    opt              Passed to #api.
  #
  # @return [Bs::Message::UserPodList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_update-membership-pod
  #
  def update_user_pod: (disabilityType: BsDisabilityType, proofSource: BsProofOfDisabilitySource, ?user: User|String|nil, **untyped opt) -> Bs::Message::UserPodList

  # == DELETE /v2/accounts/(userIdentifier)/pod/(userIdentifier)
  #
  # == 2.1.12. Remove a proof of disability
  # Remove a proof of disability for an existing user.
  #
  # @param [User, String, nil] user             Default: `@user`.
  # @param [BsDisabilityType]  disabilityType
  # @param [Hash]              opt              Passed to #api.
  #
  # @return [Bs::Message::UserPodList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_delete-membership-pod
  #
  def remove_user_pod: (disabilityType: BsDisabilityType, ?user: User|String|nil, **untyped opt) -> Bs::Message::UserPodList

  # == GET /v2/accounts/(userIdentifier)/agreements
  #
  # == 2.1.13. Get a list of signed agreements
  # Get the list of signed agreements for an existing user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::UserSignedAgreementList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-signed-agreements
  #
  def get_user_agreements: (?user: User|String|nil, **untyped opt) -> Bs::Message::UserSignedAgreementList

  # == POST /v2/accounts/(userIdentifier)/agreements
  #
  # == 2.1.14. Create a new signed agreement
  # Create a new signed agreement record for an existing user
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [BsAgreementType] :agreementType                     *REQUIRED*
  # @option opt [String]          :dateSigned                        *REQUIRED*
  # @option opt [String]          :printName                         *REQUIRED*
  # @option opt [String]          :signedByLegalGuardian
  #
  # @return [Bs::Message::UserSignedAgreement]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_create-signed-agreement
  #
  def create_user_agreement: (?user: User|String|nil, **untyped opt) -> Bs::Message::UserSignedAgreement

  # == POST /v2/accounts/(userIdentifier)/agreements/(id)/expired
  #
  # == 2.1.15. Expire a signed agreement
  # Expire a signed agreement.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [String]            id     Agreement ID
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::UserSignedAgreement]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_expire-signed-agreement
  #
  def remove_user_agreement: (id: String, ?user: User|String|nil, **untyped opt) -> Bs::Message::UserSignedAgreement

  # == GET /v2/accounts/(userIdentifier)/recommendationProfile
  #
  # == 2.1.17. Get recommendation profile
  # Get property choices that guide title recommendations for the given user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::RecommendationProfile]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-recommendation-profile
  #
  def get_recommendation_profile: (?user: User|String|nil, **untyped opt) -> Bs::Message::RecommendationProfile

  # == PUT /v2/accounts/(userIdentifier)/recommendationProfile
  #
  # == 2.1.18. Update recommendation profile
  # Update property choices that guide title recommendations for the given
  # user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [Boolean]                                  :includeGlobalCollection   Default: *false*
  # @option opt [BsNarratorType]                           :narratorType
  # @option opt [BsGender]                                 :narratorGender
  # @option opt [Integer]                                  :readingAge
  # @option opt [BsContentWarning,Array<BsContentWarning>] :excludedContentWarnings
  # @option opt [BsContentWarning,Array<BsContentWarning>] :includedContentWarnings
  # @option opt [String, Array<String>]                    :excludedCategories
  # @option opt [String, Array<String>]                    :includedCategories
  # @option opt [String, Array<String>]                    :excludedAuthors
  # @option opt [String, Array<String>]                    :includedAuthors
  #
  # @return [Bs::Message::RecommendationProfile]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_put-recommendation-profile
  #
  def update_recommendation_profile: (?user: User|String|nil, **untyped opt) -> Bs::Message::RecommendationProfile

  # == GET /v2/accounts/(userIdentifier)/preferences
  #
  # == 2.1.19. Get user account preferences
  # Get the account preferences associated with the given user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::MyAccountPreferences]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-user-account-preferences
  #
  def get_preferences: (?user: User|String|nil, **untyped opt) -> Bs::Message::MyAccountPreferences

  # == PUT /v2/accounts/(userIdentifier)/preferences
  #
  # == 2.1.20. Update user account preferences
  # Update the account preferences associated with the given user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [Boolean]        :allowAdultContent
  # @option opt [Boolean]        :showAllBooks          Default: *false*
  # @option opt [IsoLanguage]    :language
  # @option opt [BsFormatType]   :format
  # @option opt [BsBrailleGrade] :brailleGrade
  # @option opt [BsBrailleFmt]   :brailleFormat
  # @option opt [Integer]        :brailleCellLineWidth
  # @option opt [Boolean]        :useUeb                Default: *false*
  #
  # @return [Bs::Message::MyAccountPreferences]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_put-user-account-preferences
  #
  def update_preferences: (?user: User|String|nil, **untyped opt) -> Bs::Message::MyAccountPreferences

  # == GET /v2/accounts/(userIdentifier)/periodicals
  #
  # == 2.1.21. Get periodical subscriptions of a user
  # Get the list of periodical subscriptions for an existing user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @return [Bs::Message::PeriodicalSubscriptionList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-periodicals-user
  #
  def get_periodical_subscriptions: (?user: User|String|nil, **untyped opt) -> Bs::Message::PeriodicalSubscriptionList

  # == POST /v2/accounts/(userIdentifier)/periodicals
  #
  # == 2.1.22. Subscribe to a periodical series for a user
  # Subscribe to a periodical series for an existing user.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [String]             :seriesId                      *REQUIRED*
  # @option opt [BsPeriodicalFormat] :format                        *REQUIRED*
  #
  # @return [Bs::Message::PeriodicalSubscriptionList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_subscribe-periodical-series
  #
  def subscribe_periodical: (?user: User|String|nil, **untyped opt) -> Bs::Message::PeriodicalSubscriptionList

  # == DELETE /v2/accounts/(userIdentifier)/periodicals/(seriesId)
  #
  # == 2.1.23. Unsubscribe from a periodical series for a user
  # Unsubscribe from a periodical series for an existing user.
  #
  # @param [User, String, nil] user       Default: `@user`.
  # @param [String]            seriesId
  # @param [Hash]              opt        Passed to #api.
  #
  # @return [Bs::Message::PeriodicalSubscriptionList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_unsubscribe-periodical-series
  #
  def unsubscribe_periodical: (seriesId: String, ?user: User|String|nil, **untyped opt) -> Bs::Message::PeriodicalSubscriptionList

  # == GET /v2/accounts/(userIdentifier)/lists
  #
  # == 2.1.24. Get reading lists for a given user
  # Request the list of reading lists that a given user is able to see. These
  # could be private lists, shared lists, or organization lists that the user
  # is subscribed to.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [String]                   :start
  # @option opt [Integer]                  :limit       Default: 10
  # @option opt [BsMyReadingListSortOrder] :sortOrder   Default: 'name'
  # @option opt [BsSortDirection]          :direction   Default: 'asc'
  #
  # @return [Bs::Message::ReadingListList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_get-member-readinglists-list
  #
  def get_reading_lists: (?user: User|String|nil, **untyped opt) -> Bs::Message::ReadingListList

  # == POST /v2/accounts/(userIdentifier)/lists
  #
  # == 2.1.25. Create a reading list for a given user
  # Create an empty reading list that will be owned by the given user, with the
  # properties provided.
  #
  # @param [User, String, nil] user   Default: `@user`.
  # @param [Hash]              opt    Passed to #api.
  #
  # @option opt [String]   :name                                     *REQUIRED*
  # @option opt [BsAccess] :access                                   *REQUIRED*
  # @option opt [String]   :description
  #
  # @return [Bs::Message::ReadingList]
  #
  # @see https://apidocs.bookshare.org/membership/index.html#_post-member-readinglist-create
  #
  def create_reading_list: (?user: User|String|nil, **untyped opt) -> Bs::Message::ReadingList
end
