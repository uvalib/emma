# ApiService::Common
#
module ApiService::Common
  include Emma::Common

  include Emma::Debug

  include ApiService::Properties

  include ApiService::Exceptions

  include ApiService::Identity

  # The HTTP verb for the last #api access.
  #
  # @return [Symbol, nil]
  #
  attr_reader verb: Symbol | nil

  # The URL path for the last #api access.
  #
  # @return [String, nil]
  #
  attr_reader action: String | nil

  # The URL parameters for the last #api access.
  #
  # @return [Hash, nil]
  #
  attr_reader params: symHash | nil

  # The API endpoint response generated by the last #api access.
  #
  # @return [Faraday::Response, nil]
  #
  attr_reader response: Faraday::Response | nil

  # The HTTP method of the latest API request.
  #
  # @param [Symbol, String, nil] http_method
  #
  # @return [String]
  #
  # -
  # == Variations
  # +
  #
  # @overload request_type()
  #   @return [String]                      Type derived from @verb.
  #
  # @overload request_type(http_method)
  #   @param [Symbol, String] http_method
  #   @return [String]                      Type derived from *http_method*.
  #
  def request_type: (?(Symbol|String|nil) http_method) -> String

  # Indicate whether the latest API request is an update (PUT, POST, or PATCH).
  #
  # @param [Symbol, String, nil] http_method
  #
  # -
  # == Variations
  # +
  #
  # @overload update_request?()
  #   Return whether @verb is an update.
  #
  # @overload update_request?(http_method)
  #   Return whether *http_method* is an update.
  #   @param [Symbol, String] http_method
  #
  def update_request?: (?(Symbol|String|nil) http_method) -> bool

  # Most recently invoked HTTP request URL.
  #
  # @param [Hash, nil] prm
  #
  # @return [String]
  #
  # -
  # == Variations
  # +
  #
  # @overload latest_endpoint(complete: false)
  #   Get the URL derived from @params.
  #   @param [Boolean] complete       If *true* return :api_key parameter.
  #
  # @overload latest_endpoint(hash, complete: false)
  #   Get the URL derived from provided *hash*.
  #   @param [Hash]    hash           Parameters to check instead of @params.
  #   @param [Boolean] complete       If *true* return :api_key parameter.
  #
  def latest_endpoint: (?(symHash|nil) prm) -> String

  # Get data from the API and update @response.
  #
  # @param [Symbol, String]           verb  One of :get, :post, :put, :delete
  # @param [Array<String,ScalarType>] args  Path components of the API request.
  # @param [Hash]                     opt   API request parameters except for:
  #
  # @option opt [Symbol]  :meth           The calling method for logging.
  # @option opt [Boolean] :no_raise       If *true*, set @exception but do not
  #                                         raise it.
  # @option opt [Boolean] :no_exception   If *true*, neither set @exception nor
  #                                         raise it.
  #
  # @raise [ApiService::Error]
  #
  # @return [Faraday::Response, nil]
  #
  # == Usage Notes
  # Clears and/or sets @exception as a side-effect.
  #
  def api: ((Symbol|String) verb, *(String|ScalarType) args, **untyped opt) -> (Faraday::Response | nil)

  # Construct a message to be returned from the method that executed :api.
  # This provides a uniform call for initializing the object with information
  # needed to build the object to return, including error information.
  #
  # @param [Class<Api::Record>] type
  # @param [Array] args   Additional values for the *type* initializer.
  # @param [Hash]  opt    Additional values for the *type* initializer.
  #
  def api_return: (Class `type`, *untyped args, **untyped opt) -> untyped

  # HTTP ports which do not need to be explicitly included when generating an
  # absolute path.
  #
  # @type [Array<Integer>]
  #
  COMMON_PORTS: Array[Integer]

  # Form a normalized API path from one or more path fragments.
  #
  # If *args* represents a full path which is different than `#base_url` then
  # an absolute path is returned.
  #
  # @param [Array<String,Array>] args
  #
  # @return [String]
  #
  def api_path: (*(String|strArray) args) -> String

  # Add service-specific API options.
  #
  # @param [Hash, nil] params         Default: @params.
  #
  # @return [Hash]                    New API parameters.
  #
  # == Usage Notes
  # If overridden, this should be called first via 'super'.
  #
  def api_options: (?(symHash|nil) params) -> symHash

  # Determine whether the HTTP method indicates a write rather than a read and
  # prepare the HTTP headers accordingly.
  #
  # @param [Hash, nil]         params   Default: @params.
  # @param [Hash, nil]         headers  Default: {}.
  # @param [String, Hash, nil] body     Default: nil unless `#update_request?`.
  #
  # @return [Array<(Hash,Hash,String)>]      Message body plus headers for GET.
  # @return [Array<(Hash,Hash,Hash)>]        Query plus headers for PUT, POST, PATCH.
  #
  def api_headers: (?(symHash|nil) params, ?(anyHash|nil) headers, ?(String|anyHash|nil) body) -> [symHash, anyHash, (String | anyHash)]

  # Process a message body component into a form ready for conversion to JSON.
  #
  # @param [Hash, String, Any, nil] obj
  #
  # @return [Hash, String, Any, nil]
  #
  def api_body: (untyped obj) -> untyped

  @connection: Faraday::Connection

  # Get a connection for making cached requests.
  #
  # @return [Faraday::Connection]
  #
  # @see ApiCachingMiddleWare#initialize
  #
  def connection: () -> Faraday::Connection

  # Get a connection.
  #
  # @param [String, nil] url          Default: `#base_url`
  # @param [Hash]        opt          Passed to Faraday#initialize except
  #                                     opt[:retry] which is passed to
  #                                     Faraday#request.
  #
  # @return [Faraday::Connection]
  #
  def make_connection: (?(String|nil) url, **untyped opt) -> Faraday::Connection

  # Send an API request.
  #
  # @param [Symbol]            verb
  # @param [String]            action
  # @param [Hash, String, nil] params
  # @param [Hash, nil]         headers
  # @param [Hash]              opt
  #
  # @option opt [Boolean]      :no_redirect
  # @option opt [Integer, nil] :redirection
  #
  # @raise [ApiService::EmptyResultError]
  # @raise [ApiService::HtmlResultError]
  # @raise [ApiService::RedirectionError]
  # @raise [ApiService::Error]
  #
  # @return [Faraday::Response]
  # @return [nil]
  #
  # == Usage Notes
  # Sets @response as a side-effect.
  #
  # == Implementation Notes
  # === Bookshare API status codes
  # 301 Moved Permanently
  # 302 Found (typically, redirect to download location)
  # 200 OK
  # 201 Created
  # 202 Accepted
  # 400 Bad Request
  # 401 Unauthorized
  # 403 Forbidden
  # 404 Not Found
  # 405 Method Not Allowed
  # 406 Not Acceptable
  # 409 Conflict
  # 415 Unsupported Media Type
  # 500 Internal Server Error
  #
  # @see https://apidocs.bookshare.org/reference/index.html#_responseCodes
  #
  def transmit: (Symbol verb, String action, (symHash|String|nil) params, (anyHash|nil) headers, **untyped opt) -> (Faraday::Response | nil)

  # Extract API parameters from *opt*.
  #
  # @param [Symbol]  meth             Calling method.
  # @param [Boolean] check_req        Check for missing required keys.
  # @param [Boolean] check_opt        Check for extra optional keys.
  # @param [Hash]    opt
  #
  # @raise [RuntimeError]             Errors and #RAISE_ON_INVALID_PARAMS true.
  #
  # @return [Hash]                    Just the API parameters from *opt*.
  #
  def get_parameters: (Symbol meth, ?check_req: bool, ?check_opt: bool, **untyped opt) -> symHash

  # Preserve a key that would be mistaken for an ignored system parameter.
  #
  # @param [Symbol] key
  #
  # @return [Symbol]
  #
  def encode_parameter: (Symbol key) -> Symbol

  # Preserve keys that would be mistaken for an ignored system parameter.
  #
  # @param [Hash] prm
  #
  # @return [Hash]                    A modified copy of *prm*.
  #
  def encode_parameters: (**untyped prm) -> symHash

  # Preserve keys that would be mistaken for an ignored system parameter.
  #
  # @param [Hash] prm
  #
  # @return [Hash]                    The original *prm* now modified.
  #
  def encode_parameters!: (symHash prm) -> symHash

  # Reverse the transform of #encode_parameter.
  #
  # @param [Symbol] key
  #
  # @return [Symbol]
  #
  def decode_parameter: (Symbol key) -> Symbol

  # Restore preserved keys.
  #
  # @param [Hash] prm
  #
  # @return [Hash]                    A modified copy of *prm*.
  #
  def decode_parameters: (**untyped prm) -> symHash

  # Restore preserved keys.
  #
  # @param [Hash] prm
  #
  # @return [Hash]                    The original *prm* now modified.
  #
  def decode_parameters!: (symHash prm) -> symHash

  private

  # Report on errors in parameters supplied to an API method.
  #
  # @param [String, Symbol] meth
  # @param [Array<String>]  errors
  # @param [Boolean]        no_raise
  #
  # @raise [RuntimeError]             Errors present and *no_raise* is *false*.
  #
  # @return [nil]                     No errors or *no_raise* is *true*.
  #
  def invalid_params: ((Symbol|String) meth, *String errors, ?no_raise: bool) -> nil

  # __debug_api_headers
  #
  # @param [Hash, nil]         options
  # @param [Hash, nil]         headers
  # @param [Hash, String, nil] body
  # @param [Symbol, nil]       action
  # @param [Boolean]           full     If *true*, show complete body.
  #
  # @return [void]
  #
  # @see #api_headers
  #
  def __debug_api_headers: ((symHash|nil) options, (anyHash|nil) headers, (anyHash|String|nil) body, ?action: Symbol|String, ?full: bool) -> void

  # __debug_api_response
  #
  # @param [Faraday::Response,Hash] response
  # @param [Exception]              error
  # @param [Symbol,String]          action
  # @param [Boolean]                full      If *true*, show complete body.
  #
  # @return [void]
  #
  def __debug_api_response: (?response: Faraday::Response|symHash, ?error: Exception, ?action: Symbol|String, ?full: bool) -> void

  # Include the shared data structure which holds the definition of the API
  # requests and parameters.
  #
  # @param [Module] base
  #
  def self.included: (Module base) -> void
end
