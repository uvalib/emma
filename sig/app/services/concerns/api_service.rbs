# Send/receive messages to/from a remote service.
#
# @see file:lib/emma/config.rb
# @see file:config/initializers/devise.rb
#
class ApiService
  include Emma::Common

  include Api

  # Internal service options along with connection options.
  #
  # @return [Hash]
  #
  # @see ApiService::Common#SERVICE_OPTIONS
  # @see ApiService::Common#make_connection
  #
  attr_reader options: symHash

  # Initialize a new instance
  #
  # @param [User, nil]   user         User instance which includes a
  #                                     Bookshare user identity and token.
  # @param [String, nil] base_url     Base URL to the external service (instead
  #                                     of #BASE_URL defined by the subclass).
  # @param [Hash]        opt          Stored in @options
  #
  def initialize: (?user: User?, ?base_url: String?, **untyped opt) -> void

  @base_url: String | nil

  # A table of all service instances.
  #
  # @return [Hash{Class=>ApiService}]
  #
  def self.table: () -> Hash[Class,ApiService]

  self.@table: Hash[Class,ApiService] # NOTE: not currently recognized
  @table:      Hash[Class,ApiService] # NOTE: should be: self.@table

  # Remove all service instances.
  #
  # @return [void]
  #
  def self.clear: () -> void

  # Each subclass gets its own distinct set of service state variables.
  #
  # @param [ApiService] subclass
  #
  def self.inherited: (ApiService subclass) -> void

  def self.instance:    (**untyped opt) -> void
  def self.update:      (**untyped opt) -> ApiService
  def self.add_api:     (Hash[Symbol,symHash] prop, ?(String|nil) topic) -> void
  def self.api_methods: (?(symHash|nil) arg) -> Hash[Symbol,symHash]
                      | (Symbol|String  arg) -> (symHash | nil)

  self.@all_methods:  symHash # NOTE: not currently recognized
  self.@true_methods: symHash # NOTE: not currently recognized

  @all_methods:       symHash # NOTE: should be: self.@all_methods
  @true_methods:      symHash # NOTE: should be: self.@true_methods
end
