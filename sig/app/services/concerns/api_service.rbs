# Send/receive messages to/from a remote service.
#
# @see file:lib/emma/config.rb
# @see file:config/initializers/devise.rb
#
class ApiService
  include Emma::Common

  include Api

  include ApiService::Properties

  include ApiService::Common

  include ApiService::Definition

  include ApiService::Exceptions

  include ApiService::Identity

  include ApiService::Status

  # Internal service options along with connection options.
  #
  # @return [Hash]
  #
  # @see ApiService::Common#SERVICE_OPT
  # @see ApiService::Common#make_connection
  #
  attr_reader options: symHash

  @base_url: String | nil

  # Initialize a new instance
  #
  # @param [User, nil]   user
  # @param [String, nil] base_url     Base URL to the external service (instead
  #                                     of #BASE_URL defined by the subclass).
  # @param [Hash]        opt          Stored in @options
  #
  def initialize: (?user: User|nil, ?base_url: String|nil, **untyped opt) -> void

  module PerUser
    # All services for the given user (or the default services).
    #
    # @param [User, String, nil] user
    #
    # @return [Hash{Class=>ApiService}]
    #
    def self.table: ((User|String|nil) user) -> Hash[Class,(ApiService|nil)]

    # Remove all services for user
    #
    # @param [User, String] user
    #
    # @return [void]
    #
    def self.clear: ((User|String) user) -> void
  end

  # A table of all service instances.
  #
  # @param [User, String, nil] user
  #
  # @return [Hash{Class=>ApiService,nil}]
  #
  def self.table: (user: User|String|nil, **untyped _ignored) -> Hash[Class,(ApiService|nil)]

  # Remove all service instances.
  #
  # @param [User, String] user
  #
  # @return [void]
  #
  def self.clear: (user: User|String, **untyped _ignored) -> void

  # The logger for API transmissions.
  #
  # @return [Logger]
  #
  def self.api_logger: () -> Logger

  # Generate a list of service classes.
  #
  # @param [Class] root               A subclass of ApiService.
  #
  # @param [Array<Class>]
  #
  def self.services: (?Class root) -> Array[Class]

  # Represent the instance as a Hash.
  #
  # @return [Hash{Symbol=>any}]       (no *nil* values)
  #
  def to_h: () -> Hash[Symbol,any]

  # Each subclass gets its own distinct set of service state variables.
  #
  # @param [ApiService] subclass
  #
  def self.inherited: (ApiService subclass) -> void

  # The single instance of this class.
  #
  # @param [Hash] opt             Passed to ApiService#initialize.
  #
  # @return [ApiService]
  #
  # === Usage Notes
  # For special purposes (like overriding :fatal for all API requests
  # within a single method), use `ApiService.new` rather than
  # `ApiService.instance`.  Providing modified options to this method
  # creates a new single instance; if the options are the same as the
  # current options then the existing instance is returned.
  #
  # === Implementation Notes
  # The Singleton pattern is avoided so that the instance is unique
  # per-request and not per-thread (potentially spanning multiple requests
  # by different users).
  #
  def self.instance: (**untyped opt) -> void

  # Add a method name and its properties to #api_methods.
  #
  # @param [Hash{Symbol=>Hash{Symbol=>any}}] prop
  # @param [String, nil]                     topic
  #
  # @return [void]
  #
  # === Usage Notes
  # The definition of each API request method is followed by a block which
  # invokes this method in order to register the properties of the method
  # and its associated API endpoint.  The *prop* argument is expected to be
  # a hash with a single entry whose key is the symbol for the method and
  # whose value is a Hash containing the properties.
  #
  # All keys in the property hash are optional, however :synthetic must
  # be included for methods that do not map on to documented API requests.
  #
  # :alias          One or more identifiers which associate a method named
  #                 argument with the name of the API parameter it
  #                 represents. (This is not needed for arguments with
  #                 names that are the same as the documented API
  #                 parameter.)
  #
  # :required       One or more API parameters which are mandatory, which
  #                 may include either Path or Query parameters.
  #
  # :optional       One or more API optional Query parameters.
  #                 (Path parameters are never optional.)
  #
  # :multi          An array of one or more parameters that can be passed
  #                 in as a single value or as an array.
  #
  # :role           If given as :anonymous this is a hint that the request
  #                 should succeed even if the current user is not logged
  #                 in.
  #
  # :synthetic      If *true*, then the method is not treated as a true API
  #                 method (i.e., it is defined locally but does not map
  #                 directly on to an endpoint defined by the API).
  #
  # :topic          The base of the module in which the method was defined
  #                 added by this method as a hint for the API Explorer.
  #
  def self.add_api: (Hash[Symbol,symHash] prop, ?(String|nil) topic) -> void

  # Properties for each method which implements an API request.
  #
  # @param [Hash, Symbol, String, nil] arg
  #
  # @return [Hash, nil]
  #
  # -
  # === Variations
  # +
  #
  # @overload api_methods(arg)
  #   @param [Hash, nil] arg
  #   @option arg [Boolean] :synthetic  Default: false.
  #   @return [Hash{Symbol=>Hash}]      Properties of all methods.
  #
  # @overload api_methods(arg)
  #   @param [Symbol, String] arg       Method name.
  #   @return [Hash, nil]               Properties of the named method.
  #
  # === Usage Notes
  # By default only true (documented) API methods are returned, unless:
  # - If :synthetic is *true* then "fake" methods (which implement
  #     functionality not directly supported by the API) are also included.
  # - If :synthetic is :only then only the "fake" methods are returned.
  #
  def self.api_methods
    : (?(symHash|nil)  arg) -> Hash[Symbol,symHash]
    | ((Symbol|String) arg) -> (symHash | nil)

  # Create a serializer for this class and any subclasses derived from it.
  #
  # @param [Class] this_class
  #
  # @see Serializer::Base#serialize?
  #
  def self.make_serializers: (Class this_class) -> void
end
