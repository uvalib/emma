# IngestService::Request::Submissions
#
module IngestService::Request::Submissions
  include IngestService::Common

  include IngestService::Testing

  # == PUT /records
  #
  # Inserts or updates metadata records in the search index.
  #
  # Inserts or updates one or more metadataRecords in the search index. For the
  # "upsert" operation, if no such record exists for the emma_repository,
  # emma_repositoryRecordId, dc_format, and (optionally) emma_formatVersion, a
  # record is created. Otherwise the existing record is updated.
  #
  # The number of records to be updated at once is capped at 1000.
  #
  # @param [Array<Ingest::Message::IngestionRecordList, Ingest::Record::IngestionRecord, Model, Hash>] records
  # @param [Hash] opt                 Passed to #api.
  #
  # @return [Ingest::Message::Response]
  #
  # -
  # == Variations
  # +
  #
  # @overload put_records(list, **opt)
  #   @param [Ingest::Message::IngestionRecordList] list
  #   @param [Hash] opt
  #
  # @overload put_records(*records, **opt)
  #   @param [Array<Ingest::Record::IngestionRecord, Model, Hash>] records
  #   @param [Hash] opt
  #
  # == HTTP response codes
  #
  # 202 Accepted        Items accepted for update.
  # 207 Multi-Status    Some items inserted or updated.
  # 400 Bad Request     Invalid input.
  #
  # @see https://app.swaggerhub.com/apis/bus/emma-federated-ingestion-api/0.0.5#/ingestion/upsertRecords   HTML API documentation
  # @see https://api.swaggerhub.com/apis/bus/emma-federated-ingestion-api/0.0.5#/paths/records             JSON API specification
  #
  def put_records: (*(Ingest::Message::IngestionRecordList|Ingest::Record::IngestionRecord|Model|symHash) records, **untyped opt) -> Ingest::Message::Response

  # == POST /recordDeletes
  #
  # Deletes one or more metadataRecords from the search index. Records are
  # uniquely identified by the emma_repository, emma_repositoryRecordId,
  # dc_format, and (optionally) emma_formatVersion.
  #
  # The number of records to be deleted at once is capped at 1000.
  #
  # @param [Array<Ingest::Message::IngestionRecordList, Ingest::Record::IdentifierRecord, Model, Hash, String>] items
  # @param [Hash] opt                 Passed to #api.
  #
  # @return [Ingest::Message::Response]
  #
  # -
  # == Variations
  # +
  #
  # @overload delete_records(list, **opt)
  #   @param [Ingest::Message::IdentifierRecordList] list
  #   @param [Hash] opt
  #
  # @overload delete_records(*records_or_ids, **opt)
  #   @param [Array<Ingest::Record::IdentifierRecord, Model, Hash, String>] records_or_ids
  #   @param [Hash] opt
  #
  # === HTTP response codes
  #
  # 202 Accepted        Items accepted for deletion.
  # 207 Multi-Status    Some items deleted.
  # 400 Bad Request     Invalid input.
  #
  # @see https://app.swaggerhub.com/apis/bus/emma-federated-ingestion-api/0.0.5#/ingestion/deleteRecords   HTML API documentation
  # @see https://api.swaggerhub.com/apis/bus/emma-federated-ingestion-api/0.0.5#/paths/recordDeletes       JSON API specification
  #
  def delete_records: (*(Ingest::Message::IngestionRecordList|Ingest::Record::IngestionRecord|Model|symHash|String) items, **untyped opt) -> Ingest::Message::Response

  # == POST /recordGets
  #
  # Retrieves one or more metadataRecords from the search index. Records are
  # uniquely identified by the emma_repository, emma_repositoryRecordId,
  # dc_format, and (optionally) emma_formatVersion.
  #
  # The number of records to be retrieved at once is capped at 1000.
  #
  # @param [Array<Ingest::Message::IngestionRecordList, Ingest::Record::IdentifierRecord, Model, Hash, String>] items
  # @param [Hash] opt                 Passed to #api.
  #
  # @return [Search::Message::SearchRecordList]
  #
  # -
  # == Variations
  # +
  #
  # @overload get_records(list, **opt)
  #   @param [Ingest::Message::IdentifierRecordList] list
  #   @param [Hash] opt
  #
  # @overload get_records(*records_or_ids, **opt)
  #   @param [Array<Ingest::Record::IdentifierRecord, Model, Hash, String>] records_or_ids
  #   @param [Hash] opt
  #
  # === HTTP response codes
  #
  # 200 OK              Items retrieved.
  # 400 Bad Request     Invalid input.
  #
  # @see https://app.swaggerhub.com/apis/bus/emma-federated-ingestion-api/0.0.5#/ingestion/getRecords  HTML API documentation
  # @see https://api.swaggerhub.com/apis/bus/emma-federated-ingestion-api/0.0.5#/paths/recordGets      JSON API specification
  #
  def get_records: (*(Ingest::Message::IngestionRecordList|Ingest::Record::IngestionRecord|Model|symHash|String) items, **untyped opt) -> Search::Message::SearchRecordList

  # Send to the Ingest API unless no items were given.
  #
  # @param [Symbol]      verb         One of :get, :post, :put, :delete
  # @param [String]      endpoint     Service path.
  # @param [Array]       body         Passed to #api as :body.
  # @param [Hash]        opt          Passed to #api.
  #
  # @option opt [Symbol] :meth        Calling method for logging.
  #
  # @return [void]
  #
  # == Usage Notes
  # Clears and/or sets @exception as a side-effect.
  #
  def api_send: (Symbol verb, String endpoint, strArray body, **untyped opt) -> void

  # Generate an array of ingest records.
  #
  # @param [Ingest::Message::IngestionRecordList, Ingest::Record::IngestionRecord, Model, Hash] record
  #
  # @return [Array<Ingest::Record::IngestionRecord>]
  #
  # -
  # == Variations
  # +
  #
  # @overload record_list(list)
  #   @param [Ingest::Message::IngestionRecordList] list
  #
  # @overload record_list(record)
  #   @param [Ingest::Record::IngestionRecord] record
  #
  # @overload record_list(item)
  #   @param [Model, Hash] item
  #
  def record_list: (Ingest::Message::IngestionRecordList|Ingest::Record::IngestionRecord|Model|symHash record) -> Array[Ingest::Record::IngestionRecord]

  # Generate an array of ingest identifiers.
  #
  # @param [Ingest::Message::IdentifierRecordList, Ingest::Record::IdentifierRecord, Model, Hash, String] item
  #
  # @return [Array<Ingest::Record::IdentifierRecord>]
  #
  # -
  # == Variations
  # +
  #
  # @overload identifier_list(list)
  #   @param [Ingest::Message::IdentifierRecordList] list
  #
  # @overload identifier_list(record)
  #   @param [Ingest::Record::IdentifierRecord] record
  #
  # @overload identifier_list(item)
  #   @param [Model, Hash] item
  #
  # @overload identifier_list(id)
  #   @param [String] id
  #
  def identifier_list: (Ingest::Message::IngestionRecordList|Ingest::Record::IngestionRecord|Model|symHash|String item) -> Array[Ingest::Record::IdentifierRecord]

  private

  INGEST_ID_FIELDS: symArray

  # Generate records.
  #
  # @param [Model, Hash, String] item
  #
  # @return [Array<Ingest::Record::IdentifierRecord>]
  #
  # == Usage Notes
  # If the only piece of information available is the repository ID (and since
  # the repository is implicitly "emma"), this method will return with records
  # for each possible variation.  E.g. for item == "u5eed3496l10", will return
  # IdentifierRecords associated with:
  #
  #   "emma-u5eed3496l10-brf"
  #   "emma-u5eed3496l10-daisy"
  #   "emma-u5eed3496l10-daisyAudio"
  #   ...
  #
  # etc.
  #
  def identifier_records: (Model|symHash|String item) -> Array[Ingest::Record::IdentifierRecord]

  # Indicate whether the value appears to be acceptable as a repository ID.
  #
  # If it's all digits then it's a database record ID.
  #
  # @param [String, nil] value
  #
  def allowed_repository_id?: (String|nil value) -> bool

  # Indicate whether the value appears to be acceptable as a index record ID.
  #
  # @param [String, nil] value
  #
  def allowed_record_id?: (String|nil value) -> bool
end
