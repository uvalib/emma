# Generic exception for IA download problems.
#
# === Usage Notes
# This is generally *not* the base class for exceptions in the
# IaDownloadService namespace:  Variants based on the error types defined under
# "en.emma.error.api" are derived from the related ApiService class; e.g.:
#
#   `IaDownloadService::AuthError < ApiService::AuthError`
#
# Only a distinct error type defined under "en.emma.error.ia_download" would
# derive from this class; e.g. if "en.emma.error.ia_download.unique" existed it
# would be defined as:
#
#   `IaDownloadService::UniqueError < IaDownloadService::Error`
#
# An exception in the IaDownloadService namespace can be identified by checking
# for `exception.is_a?(IaDownloadService::Error::ClassType)`.
#
class IaDownloadService::Error < ApiService::Error
  # Methods included in related error classes.
  #
  module ClassType
    include ApiService::Error::ClassType

    include HtmlHelper

    # Name of the service and key into config/locales/error.en.yml.
    #
    # @return [Symbol]
    #
    def service: () -> Symbol

    # Get the message from within the response body of a Faraday exception.
    #
    # @param [Faraday::Response, Faraday::Error, Hash] src
    #
    # @return [Array<String>]
    # @return [Array<ActiveSupport::SafeBuffer>]  If note(s) were added.
    #
    def extract_message: ((Faraday::Response|Faraday::Error|symHash) src) -> (Array[ActiveSupport::SafeBuffer] | Array[String])

    # Patterns of IA error response text and added notes.
    #
    # @type [Hash{String,Regexp=>String}]
    #
    IA_MESSAGES: Hash[(String|Regexp),String]

    # Produce additional line(s) to be displayed in the flash message along
    # with the original error response from Internet Archive.
    #
    # @param [String] ia_message
    #
    # @return [Array<ActiveSupport::SafeBuffer>]
    #
    def added_messages: (String ia_message) -> Array[ActiveSupport::SafeBuffer]

    private

    def self.included: (Module base) -> void
  end

  include ClassType
end

# :nocov:
class IaDownloadService::AuthError < ApiService::AuthError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::CommError < ApiService::CommError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::SessionError < ApiService::SessionError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::ConnectError < ApiService::ConnectError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::TimeoutError < ApiService::TimeoutError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::XmitError < ApiService::XmitError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::RecvError < ApiService::RecvError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::ParseError < ApiService::ParseError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::RequestError < ApiService::RequestError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::NoInputError < ApiService::NoInputError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::ResponseError < ApiService::ResponseError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::EmptyResultError < ApiService::EmptyResultError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::HtmlResultError < ApiService::HtmlResultError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::RedirectionError < ApiService::RedirectionError
  include IaDownloadService::Error::ClassType
end

class IaDownloadService::RedirectLimitError < ApiService::RedirectLimitError
  include IaDownloadService::Error::ClassType
end
