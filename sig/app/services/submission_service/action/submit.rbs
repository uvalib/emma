# SubmissionService::Action::Submit
#
module SubmissionService::Action::Submit
  include IngestConcern

  include ExecReport::Constants

  include FileNaming

  include SubmissionService::Common

  include SubmissionService::Definition

  include SubmissionService::Properties

  # Receive a request to start batch creation of EMMA entries.
  #
  # @param [SubmissionService::Request, nil] request
  # @param [Manifest, String]                manifest
  # @param [Array<ManifestItem>, nil]        items
  # @param [Hash]                            opt      To #post_flight
  #
  # @return [SubmissionService::SubmitResponse] The value assigned to @result.
  #
  def batch_create: (?(SubmissionService::ControlRequest | nil) request, ?manifest: Manifest|String|nil, ?job: SubmitJob|String|nil, **untyped opt) -> SubmissionService::SubmitResponse

  # Receive a request to start batch modification of EMMA entries.
  #
  # @param [SubmissionService::Request, nil] request
  # @param [Manifest, String]                manifest
  # @param [Array<ManifestItem>, nil]        items
  # @param [Hash]                            opt      To #post_flight
  #
  # @return [SubmissionService::SubmitResponse] The value assigned to @result.
  #
  def batch_update: (?(SubmissionService::ControlRequest | nil) request, ?manifest: Manifest|String|nil, ?job: SubmitJob|String|nil, **untyped opt) -> SubmissionService::SubmitResponse

  # Process a request to submit a set of ManifestItems.
  #
  # @param [SubmissionService::Request] req  Def.: `@request`.
  # @param [Hash]                       opt
  #
  # @return [StepResult]
  #
  # == Usage Notes
  # The validity of :simulation and :sim_opt is determined here only; called
  # methods assume that `opt[:simulation]` and `opt[:sim_opt]` have been
  # set/unset appropriately.
  #
  def submit_batch: (?SubmissionService::Request req, **untyped opt) -> StepResult

  # Process a request to submit a set of ManifestItems sequentially.
  #
  # Each item submission may succeed or fail independently without impact to
  # the other items.
  #
  # @param [String, ManifestItem, Array, ActiveRecord::Relation] items
  # @param [Hash]                                                opt
  #
  # @return [StepResult]
  #
  def submit_by_item: (String|ManifestItem|Array[String]|Array[ManifestItem]|ActiveRecord::Relation items, **untyped opt) -> StepResult

  # Submit a single ManifestItem by passing it through each of the submission
  # steps in sequence.
  #
  # Failure at any step results in the failure of the item to be submitted.
  #
  # @param [String, ManifestItem] item
  # @param [Boolean]              no_raise
  # @param [Hash]                 opt
  #
  # @raise [RuntimeError]             If a submission step failed.
  #
  # @return [StepResult]
  #
  def submit_manifest_item: (String|ManifestItem item, ?no_raise: bool, **untyped opt) -> StepResult

  # Process a request to submit a set of ManifestItems by aggregating them into
  # "slices" which pass through submission steps together.
  #
  # The up side is that this reduces the number of transmissions to external
  # services; the down side is that a failure at any step results in the
  # failure of all items in that "slice".
  #
  # @param [String, ManifestItem, Array, ActiveRecord::Relation] items
  # @param [Integer]                                             slice
  # @param [Hash]                                                opt
  #
  # @return [StepResult]
  #
  def submit_by_slice: (String|ManifestItem|Array[String]|Array[ManifestItem]|ActiveRecord::Relation items, slice: Integer, **untyped opt) -> StepResult

  # submit_manifest_items
  #
  # @param [String, ManifestItem, Array, ActiveRecord::Relation] items
  # @param [Symbol]                                              step
  # @param [Boolean]                                             no_raise
  # @param [Hash]                                                opt
  #
  # @return [StepResult]
  #
  def submit_manifest_items: (String|ManifestItem|Array[String]|Array[ManifestItem]|ActiveRecord::Relation items, step: Symbol, ?no_raise: bool, **untyped opt) -> StepResult

  # Get the array of ManifestItem expressed or implied by *items*.
  #
  # @param [String, ManifestItem, Array, ActiveRecord::Relation] items
  #
  # @return [Array<ManifestItem>]
  #
  def manifest_items: (String|ManifestItem|Array[String]|Array[ManifestItem]|ActiveRecord::Relation items) -> Array[ManifestItem]

  # Extract the ManifestItem identifier from *item* if possible.
  #
  # (For use in contexts where *item* may already be an identifier.)
  #
  # @param [ManifestItem, Hash, Integer, String, *] item
  #
  # @return [String]    If valid
  # @return [Hash]      If invalid
  #
  def manifest_item_id: (untyped item) -> (String | symHash)

  # Update all entries of a table of failure results with the given error.
  #
  # @param [Hash]                     failure
  # @param [Exception, String]        error
  # @param [Array<ManifestItem>, nil] recs
  #
  # @return [void]
  #
  def update_failures!: (strHash failure, Exception|String error, ?(Array[ManifestItem]|nil) recs) -> void

  # submission_step
  #
  # @param [String, ManifestItem, Array, ActiveRecord::Relation] item
  # @param [Symbol]                 step
  # @param [Float, nil]             start_time
  # @param [Boolean]                no_raise
  # @param [Proc, nil]              callback
  # @param [Hash]                   opt
  #
  # @option opt [String]            :manifest_id
  # @option opt [String]            :job_id
  # @option opt [SimulationOptions] :sim_opt
  # @option opt [Symbol]            :meth         If opt[:sim_opt]
  # @option opt [String]            :msg          If opt[:sim_opt]
  # @option opt [String]            :err          If opt[:sim_opt]
  #
  # @return [StepResult]
  #
  def submission_step: (String|strArray|Array[ManifestItem]|ActiveRecord::Relation item, step: Symbol, ?start_time: Float|nil, ?no_raise: bool, ?callback: Proc|nil, **untyped opt) -> StepResult

  # Return when the records contain Shrine metadata indicating their associated
  # files have been uploaded to cache.
  #
  # Conceptually the item is (or will enter) the :upload step on the client
  # side, which represents the actual upload to AWS cache.  The :cache step
  # obtains on the server side once the upload has caused the :file_data column
  # of the ManifestItem record to be updated.
  #
  # @param [Array<ManifestItem>] records
  # @param [Integer, Float]      wait
  # @param [Hash]                opt      @see #run_step
  #
  # @return [StepResult]
  #
  def await_upload: (Array[ManifestItem] records, ?wait: Integer|Float, **untyped opt) -> StepResult

  # Move the associated files into permanent storage.
  #
  # @param [Array<ManifestItem>] records
  # @param [Hash]                opt      @see #run_step
  #
  # @return [StepResult]
  #
  def promote_file: (Array[ManifestItem] records, **untyped opt) -> StepResult

  # Add entries to the index.
  #
  # @param [Array<ManifestItem>] records
  # @param [Hash]                opt      @see #run_step
  #
  # @return [StepResult]
  #
  def add_to_index: (Array[ManifestItem] records, **untyped opt) -> StepResult

  # Interpret error message(s) generated by Federated Ingest to determine which
  # item(s) failed.
  #
  # @param [Ingest::Message::Response] result
  # @param [Array<ManifestItem>]       records
  # @param [Hash]                      opt
  #
  # @return [Array<(Array<ManifestItem>,Hash)>]
  #
  # @see ExecReport#error_table
  #
  # == Implementation Notes
  # It's not clear whether there would ever be situations where there was a mix
  # of errors by index, errors by submission ID, and/or general errors, but
  # this method was written to be able to cope with the possibility.
  #
  def process_ingest_errors: (Ingest::Message::Response result, *ManifestItem records, **untyped opt) -> [Array[ManifestItem], symHash]

  COLUMN_KEY_MAP: Hash[Symbol,Symbol]

  ENTRY_COLUMNS: symArray

  RESULT_KEYS: symArray

  # Create an Upload record for the entries that have made it through all of
  # the steps through index ingest.
  #
  # @param [Array<ManifestItem>]   records
  # @param [User, String, Integer] user
  #
  # @return [Hash{String=>Hash}]
  #
  def create_entry: (Array[ManifestItem] records, user: User|String|Integer, **untyped _ignored) -> Hash[String,symHash]

  # Required if the target records are in the 'uploads' table because that
  # schema does not use 'json' fields.
  #
  # @type [Boolean]
  #
  JSON_SERIALIZE: bool

  # Generate a row of fields for #insert_all.
  #
  # @param [ManifestItem]          rec
  # @param [User, String, Integer] user
  # @param [Boolean]               serialize  If *true*, serialize Hash values.
  #
  # @return [Hash]
  #
  def entry_fields: (ManifestItem rec, user: User|String|Integer, ?serialize: bool) -> symHash

  # Return the indicated user record ID.
  #
  # @param [User, String, Integer, *] user
  #
  # @return [Integer, nil]
  #
  def user_id: (User|String|Integer|nil user) -> (Integer | nil)

  DEF_MSG: Hash[Symbol,String]

  # Perform a submission step on the given record(s) accumulating successes and
  # failures.
  #
  # If *wait* is given, the block is assumed to test a record condition which
  # will be changed externally; items that do not return *true* will be checked
  # again after the next wait.
  #
  # @param [Array<ManifestItem>] records
  # @param [Float, Integer, nil] wait
  # @param [Hash]                opt
  #
  # @option opt [String] :success   Default entry value for a succeeded item.
  # @option opt [String] :failure   Default entry value for a failed item.
  # @option opt [String] :timeout   Default entry value for a timed-out item.
  # @option opt [Float]  :max_time  Maximum run time per item.
  # @option opt [Hash]   :initial   Initial :success and/or :failure hashes.
  #
  # @return [StepResult]
  #
  # @yield [id, rec] Apply step-specific logic to the given record.
  # @yieldparam  [String]       id    The hash key for the record.
  # @yieldparam  [ManifestItem] rec   The record itself.
  # @yieldreturn [*]                  False or *nil* to indicate failure.
  #
  def run_step: (Array[ManifestItem] records, ?wait: Integer|Float|nil, **untyped opt) -> StepResult

  class StepResult < ::Hash[Symbol,untyped]
    include Emma::Common

    TEMPLATE: symHash

    def initialize: (?untyped arg, **untyped opt) -> void

    def count:     () -> Integer
    def valid:     () -> strArray
    def invalid:   () -> strArray
    def submitted: () -> strArray
    def success:   () -> strHash
    def failure:   () -> strHash

    def finalize: (**untyped opt) -> self

    def ids: (untyped arg) -> (symArray | strArray)

    def normalize!: (symHash opt) -> symHash

  end

  class SimulationOptions < ::Hash[Symbol,untyped]
    include SubmissionService::Action::Submit

    include Emma::ThreadMethods

    include Emma::TimeMethods

    STEP_FAILURE_PROBABILITY: Float

    def initialize: (**untyped opt) -> void

    def tid: () -> String

    def value: () -> Float

    def scale: () -> Float

    def percentile: () -> Float

    def index: (?(Integer|nil) i) -> (Integer | nil)

    def min_max: () -> Range[Float]

    def slice_delay: () -> (Range[Float] | Float)

    def item_delay: () -> (Range[Float] | Float)

    def work: () -> (Range[Float] | Float)

    # Called to prepare simulation values for a new set of items.
    #
    def new_slice: () -> void

    # Called to prepare simulation values for a new item.
    #
    def new_item: () -> void

    # Called prior to performing a new submission step on one or more items.
    #
    # @return [Integer]
    #
    def new_step: () -> Integer

    # Called to simulate work.
    #
    # @param [String, ManifestItem, Array] item
    # @param [String, Array<String>]       tag
    # @param [Float, nil]                  time
    # @param [Symbol, nil]                 step
    # @param [String, nil]                 msg
    # @param [String, nil]                 err
    #
    def simulate_work: (String|ManifestItem|strArray|Array[ManifestItem] item, String|strArray tag, ?time: Float|nil, ?step: Symbol|nil, ?msg: String|nil, ?err: String|nil, **untyped _ignored) -> void

    # Sleep for a fixed time or randomly within a range of times.
    #
    # @param [Float,Range<Float>] time
    # @param [Numeric, nil]       factor
    #
    def pause: (Float|Range[Float] time, ?(Numeric|nil) factor) -> void
  end
end
