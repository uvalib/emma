# Bibliographic lookup WebSocket channels.
#
class LookupChannel < ApplicationCable::Channel
  # @see file:javascripts/channels/lookup-channel.js *DEFAULT_ACTION*
  DEFAULT_ACTION: Symbol

  # The channel for the session.
  #
  # @return [String]
  #
  def stream_name: () -> String

  @stream_name: String

  # Any cleanup needed when channel is unsubscribed.
  #
  # @return [void]
  #
  def unsubscribed: () -> void

  # Receive a lookup request from the client.
  #
  # @param [Hash{String=>any,nil}] payload
  #
  # @return [void]
  #
  # @see file:javascripts/shared/cable-channel.js    *request()*
  # @see file:javascripts/channels/lookup-channel.js *_createRequest()*
  #
  def lookup_request: (strHash payload) -> void

  # Invoked from another thread to push an initial response back to the client.
  #
  # @param [Hash, Array<Class>] data   Payload data.
  # @param [Hash]               opt
  #
  # @option opt [Symbol]  :meth       Passed to #stream_send.
  # @option opt [Boolean] :fatal      Passed to #stream_send.
  #
  # @return [void]
  #
  # === Implementation Notes
  # This response is intentionally small; payload size is not checked to avoid
  # masking an exception due to an unexpected condition.
  #
  def self.initial_response: ((symHash|Array[Class]) data, **untyped opt) -> void

  # Invoked from another thread to push acquired data back to the client.
  #
  # @param [Hash] data                Payload data.
  # @param [Hash] opt
  #
  # @option opt [Symbol]  :meth       Passed to #stream_send.
  # @option opt [Boolean] :fatal      Passed to #stream_send.
  #
  # @return [void]
  #
  # @see file:javascripts/shared/cable-channel.js    *response()*
  # @see file:javascripts/channels/lookup-channel.js *_createResponse()*
  #
  def self.lookup_response: (symHash data, **untyped opt) -> void
end
