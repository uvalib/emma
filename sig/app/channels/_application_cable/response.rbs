# Derived from Hash to provide a standardized interface for manipulating values
# that are to be transmitted back to the client.
#
class ApplicationCable::Response < Hash[Symbol,untyped]
  include ApplicationCable::Payload

  # Response data value entries.
  #
  # @type [Hash]
  #
  # @see file://app/assets/javascripts/shared/channel-response.js *TEMPLATE*
  #
  TEMPLATE: symHash

  # Create a new instance.
  #
  # @param [*]    values
  # @param [Hash] opt
  #
  def initialize: (?untyped values, **untyped opt) -> void

  def self.template: () -> symHash

  def template: () -> symHash

  def default_status: () -> (String | nil)

  def to_h: () -> symHash

  # Replace :data with :data_url which references the database record where
  # this response is stored.
  #
  # @param [Array] data_path          Location in the data hierarchy.
  # @param [Hash]  opt                Additional URL parameters.
  #
  # @return [self]
  #
  # @see #data_url_base_path
  # @see file:app/assets/javascripts/channels/lookup-channel.js  *response()*
  #
  def convert_to_data_url!: (base_path: String, ?data_path: Array[Symbol|String]|nil, **untyped opt) -> self

  # Create a new instance unless *payload* is already an instance of the class
  # and there are no *opt* additions.
  #
  # @param [*]    payload
  # @param [Hash] opt
  #
  # @return [ApplicationCable::Response]
  #
  def self.wrap: (untyped payload, **untyped opt) -> ApplicationCable::Response

  # URL path to the job result endpoint.
  #
  # @return [String]
  #
  def self.data_url_base_path: () -> String

  def data_url_base_path: () -> String
end
