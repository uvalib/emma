# Common logic for all channels.
#
module ApplicationCable::Common
  include ApplicationCable::Payload

  include Emma::Debug

  # Normalize received stream data.
  #
  # @param [*]           payload
  # @param [Symbol, nil] meth         Calling method (for diagnostics).
  # @param [Hash]        opt
  #
  # @return [Hash{Symbol=>*}]
  #
  def normalize_inbound: (untyped payload, ?meth: Symbol|nil, **untyped opt) -> symHash

  # Normalize stream payload data.
  #
  # @param [*]           payload
  # @param [Symbol, nil] meth         Calling method (for diagnostics).
  # @param [Hash]        opt
  #
  # @return [Hash{Symbol=>*}]
  #
  def normalize_outbound: (untyped payload, ?meth: Symbol|nil, **untyped opt) -> symHash

  # Send debugging output to the console.
  #
  # @param [Array<*>] args
  # @param [Hash]     opt
  #
  # @return [void]
  #
  def __debug_cable: (*untyped args, **untyped opt) ?{ () -> untyped } -> void

  # Send sent/received WebSocket data to the console.
  #
  # @param [Symbol] meth
  # @param [*]      data
  #
  # @return [void]
  #
  def __debug_cable_data: (Symbol meth, untyped data) -> void

  private

  def self.included: (Module base) -> void
end
