# Common logic for all channels.
#
module ApplicationCable::Payload
  include ApplicationCable::Common

  include Emma::ThreadMethods

  # @see https://www.postgresql.org/docs/11/sql-notify.html
  MAX_PAYLOAD_SIZE: Integer

  # Determine the serialized size of the given item.
  #
  # @param [any, nil] payload
  #
  # @return [Integer]
  #
  def payload_size: (untyped payload) -> Integer

  # If the payload would cause a PG::InvalidValueException return its size.
  #
  # @param [any, nil] payload
  #
  # @return [Integer]                 The size that would result in failure.
  # @return [nil]                     The payload is not too large.
  #
  def invalid_payload_size: (untyped payload) -> (Integer | nil)

  # template
  #
  # @return [Hash]
  #
  def template: () -> symHash

  # default_status
  #
  # @return [String, nil]
  #
  def default_status: () -> (String | nil)

  # Setup stored request values.
  #
  # @param [Hash, nil] target
  # @param [any, nil]  values
  # @param [Hash]      opt
  #
  # @return [Hash]
  #
  def set_payload: (?(symHash|nil) target, ?untyped values, **untyped opt) -> symHash

  # Transform a response value to a normalized form.
  #
  # @param [any, nil]           value
  # @param [Array, Symbol, nil] except    Default: `#ignored_keys`.
  #
  # @return [Hash]
  #
  # === Implementation Notes
  # Message classes based on a Hash data item require #to_h in order to avoid
  # propagating out-of-band data.
  #
  def payload_normalize: (untyped value, ?except: symArray|Symbol|nil) -> symHash

  private

  def self.included: (Module base) -> void
end
