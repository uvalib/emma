# The base URL for relative requests.
#
# @type [String]
#
BASE_URL: String

# If *true* then TestHelper::Debugging methods like #show_url and #show_item
# will produce output on the console, and screenshots will be generated.
#
# Otherwise, no debugging console output is produced and no screenshots will be
# generated.
#
# @type [Boolean]
#
DEBUG_TESTS: bool

# If not testing client-side behavior for system tests, setting this to *false*
# will use Rack::Test rather than Selenium.
#
# NOTE: This is unverified.
#
# @type [Boolean]
#
TESTING_JAVASCRIPT: bool

NO_JAVASCRIPT: bool

# Support methods for tests.
#
module TestHelper
  include CommandLine

  include Debugging

  include IntegrationTests

  include Samples

  include Utility

  private

  # Include the submodules defined in test/test_helper/*, except for
  # TestHelper::SystemTests, which must be included separately.
  #
  # @param [Module] base
  #
  def self.included: (Module base) -> void
end

# Indicate whether tests should be run in parallel across all available
# processors.
#
# NOTE: Within RubyMine the cumulative time for all tests roughly correlates
#   to the number of processors times the wall clock time for the run.
#   to the wall clock time multiplied by the number of processors.
#
# @type [Boolean]
#
PARALLEL_TESTS: bool

# The output format(s) to test.
#
# The current test task may have already set this constant; if not the default
# value set here will be used.
#
# @type [Array<Symbol>]
#
# @see file:lib/tasks/test_application.rake
#
TEST_FORMATS: symArray

# Augment the base class for test cases.
#
class ActiveSupport::TestCase
  include Emma::Common

  include TestHelper
end

# Augment the base class for integration test cases.
#
class ActionDispatch::IntegrationTest
  include Devise::Test::IntegrationHelpers

  include TestHelper #::Samples

  include TestHelper::Debugging::Trace

  extend TestHelper::Utility
end

# Make relative paths expand correctly.
#
class ActionDispatch::Integration::Session
end

module Minitest
  # Overrides to allow RubyMine to handle parallel tests properly.
  #
  module MinitestExt
    # @private
    SUPERCLASSES: strArray

    # Override to accommodate the fact that *klass* will be supplied as a
    # Struct instance.
    #
    # @param [Class, Struct, nil] klass
    #
    # @return [String]
    #
    def class_nesting: (Class|Struct[:name]|nil klass) -> String
  end

  extend MinitestExt

  # Overrides to allow RubyMine to handle parallel tests properly.
  #
  module RubymineTestDataExt
    def klass=
      : (Struct[:name] klass) -> Struct[:name]
      | (Class         klass) -> Class
      | (nil           klass) -> nil
  end
end
