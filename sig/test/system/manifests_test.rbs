class ManifestsTest < ApplicationSystemTestCase
  MODEL: Class

  CTRLR: Symbol

  PRM: symHash

  TITLE: String

  @csv: Pathname

  @json: Pathname

  @admin: User

  @manager: User

  @member: User

  @generate: ManifestSampleGenerator

  # Perform a test to list manifests visible to *user*.
  #
  # @param [User, nil]    user
  # @param [Integer, nil] total       Expected total number of items.
  # @param [String, nil]  title       Default based on *user* and opt[:action].
  # @param [Symbol]       meth        Calling test method.
  # @param [Hash]         opt         URL parameters.
  #
  # @return [void]
  #
  def list_test: ((User|nil) user, ?total: Integer|nil, ?title: String|nil, ?meth: Symbol|nil, **untyped opt) -> void

  # Perform a test to show a manifest visible to *user*.
  #
  # @param [User, nil]     user
  # @param [Manifest, nil] target
  # @param [String, nil]   title
  # @param [Symbol]        meth       Calling test method.
  # @param [Hash]          opt        URL parameters.
  #
  # @return [void]
  #
  def show_test: ((User|nil) user, ?target: Manifest|nil, ?title: String|nil, ?meth: Symbol|nil, **untyped opt) -> void

  # Perform a test to invoke the menu for selecting a manifest to display.
  #
  # @param [User, nil] user
  # @param [Hash]      opt            Passed to #page_select_test.
  #
  # @return [void]
  #
  def show_select_test: ((User|nil) user, **untyped opt) -> void

  # Perform a test to invoke the menu for selecting a manifest to modify.
  #
  # @param [User, nil] user
  # @param [Hash]      opt            Passed to #page_select_test.
  #
  # @return [void]
  #
  def edit_select_test: ((User|nil) user, **untyped opt) -> void

  # Perform a test to invoke the menu for selecting a manifest to remove.
  #
  # @param [User, nil] user
  # @param [Hash]      opt            Passed to #page_select_test.
  #
  # @return [void]
  #
  def delete_select_test: ((User|nil) user, **untyped opt) -> void

  # Perform a test to invoke the menu for selecting a manifest to submit.
  #
  # @param [User, nil] user
  # @param [Hash]      opt            Passed to #page_select_test.
  #
  # @return [void]
  #
  def remit_select_test: ((User|nil) user, **untyped opt) -> void

  # Perform a test to invoke the menu for selecting a manifest.
  #
  # @param [User, nil]   user
  # @param [Symbol]      action
  # @param [String, nil] title
  # @param [Symbol]      meth         Calling test method.
  # @param [Hash]        opt          URL parameters.
  #
  # @return [void]
  #
  def page_select_test: ((User|nil) user, action: Symbol, ?title: String|nil, ?meth: Symbol|nil, **untyped opt) -> void

  # Perform a test to select then submit a bulk operation manifest.
  #
  # @param [User, nil]   user
  # @param [Symbol, nil] meth         Calling test method.
  # @param [Hash]        opt          Added to URL parameters.
  #
  # @return [void]
  #
  def remit_test: ((User|nil) user, ?meth: Symbol|nil, **untyped opt) -> void

  # Perform a test to create a new bulk operation manifest.
  #
  # @param [User, nil]             user
  # @param [String, Pathname, nil] file   Data import file.
  # @param [Symbol, nil]           meth   Calling test method.
  # @param [Hash]                  opt    Added to URL parameters.
  #
  # @return [void]
  #
  def new_test: ((User|nil) user, ?file: String|Pathname|nil, ?meth: Symbol|nil, **untyped opt) -> void

  # Perform a test to select then modify a bulk operation manifest.
  #
  # @param [User, nil]             user
  # @param [String, Pathname, nil] file   Data import file.
  # @param [Symbol, nil]           meth   Calling test method.
  # @param [Hash]                  opt    Added to URL parameters.
  #
  # @return [void]
  #
  def edit_test: ((User|nil) user, ?file: String|Pathname|nil, ?meth: Symbol|nil, **untyped opt) -> void

  # Perform a test to select then remove a bulk operation manifest.
  #
  # @param [User, nil]   user
  # @param [Symbol, nil] meth         Calling test method.
  # @param [Hash]        opt          Added to URL parameters.
  #
  # @return [void]
  #
  def delete_test: ((User|nil) user, ?meth: Symbol|nil, **untyped opt) -> void

  # Get the number of manifests from a manifest listing page.
  #
  # @param [Integer, nil] expected    Assert that the expected count is found.
  #
  # @return [Integer]
  #
  def displayed_manifest_total: (?expected: Integer|nil) -> Integer

  # Check operation of Manifest information display/edit by setting the title
  # to the provided value.
  #
  # @param [Hash] opt                 Test options
  #
  # @return [void]
  #
  def manifest_title_test: (**untyped opt) -> void

  # Check operation of ManifestItem grid.
  #
  # @param [Hash, nil] fields         Default: `#generate_item_fields`.
  # @param [Boolean]   shuffle        If *false*, do not randomize order.
  # @param [Hash]      opt            Test options
  #
  # @option opt [Symbol] :fixture     Passed to #generate_item_fields
  #
  # @return [void]
  #
  def manifest_grid_test: (?fields: symHash|nil, ?shuffle: bool, **untyped opt) -> void

  # ManifestItem fields which do not relate directly to manifest grid inputs.
  #
  # @type [Array<Symbol>]
  #
  NON_DATA_ITEM_FIELDS: symArray

  # Generate fields for a ManifestItem.
  #
  # @param [Symbol] fixture
  #
  # @return [Hash{Symbol=>any}]
  #
  def generate_item_fields: (?fixture: Symbol, **untyped _ignored) -> symHash

  # Click on the cell to activate the input control before filling it.
  #
  # @param [Symbol, String] key
  # @param [any]            value
  # @param [Integer]        row
  #
  # @return [void]
  #
  def fill_cell: (Symbol|String key, untyped value, ?row: Integer) -> void

  # Return the path to the CSV import file fixture.
  #
  # @param [String, Pathname] name
  #
  # @return [Pathname]
  #
  def csv_import_file: (?name: String|Pathname) -> Pathname

  # Return the path to the JSON import file fixture.
  #
  # If it does not exist, it will be generated from the CSV import fixture.
  #
  # @param [String, Pathname] name
  #
  # @return [Pathname]
  #
  def json_import_file: (?name: String|Pathname) -> Pathname

  # Convert CSV content into JSON.
  #
  # @param [String, Pathname] file
  #
  # @return [String]
  #
  def csv_to_json: (String|Pathname file) -> String

  # The default :index action redirects to :list_own.
  #
  # @param [Hash] opt
  #
  # @return [String]
  #
  def index_redirect: (**untyped opt) ?{ () -> (Symbol|String|Proc|nil) } -> String
end
