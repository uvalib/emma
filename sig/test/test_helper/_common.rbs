# Common values for tests.
#
module TestHelper::Common
  include Emma::Common

  extend ::TestHelper::Common

  TEST_TYPES: strArray

  # The full directory path for "/test/test_helper".
  #
  # @type [String]
  #
  HELPER_DIR: String

  # The full directory path for "/test".
  #
  # @type [String]
  #
  TESTS_DIR: String

  # The full directory path for "/test/system".
  #
  # @type [String]
  #
  SYSTEM_DIR: String

  # The bases of controller names which are not plurals of model names.
  #
  # @type [Array<String>]
  #
  SINGLE: strArray

  # Controllers being tested in "/test/system/*_test.rb".
  #
  # @type [Array<Symbol>]
  #
  SYSTEM_CONTROLLERS: symArray

  # Properties which drive parameterized system tests.
  #
  # @type [Hash{Symbol=>Hash}]
  #
  PROPERTY: Hash[Symbol,symHash]

  # property
  #
  # @param [Symbol, String, Class, Model, nil] ctrlr
  # @param [Array<Symbol>]                     traversal
  # @param [any, nil]                          default
  #
  # @return [any, nil]
  #
  def property
    : [T] (Symbol|String|Class|Model|nil ctrlr, *Symbol traversal,  default: T)   -> (untyped | T)
    |     (Symbol|String|Class|Model|nil ctrlr, *Symbol traversal, ?default: nil) -> (untyped | nil)

  # The title (:h1 text value) for the given parameters.
  #
  # @param [Model, nil] item
  # @param [Symbol]     controller    Default: self
  # @param [Symbol]     action        Default: :index
  # @param [Symbol]     prop_key      End of #PROPERTY traversal.
  # @param [Hash]       opt           Override interpolation values.
  #
  # @raise [Minitest::Assertion] If value could not be found or interpolated.
  #
  # @return [String]
  #
  def page_title: (?(Model|nil) item, ?controller: Symbol|nil, ?action: Symbol, ?prop_key: Symbol, **untyped opt) -> String

  # Text indicating an authentication failure.
  #
  # @type [String]
  #
  AUTH_FAILURE: String

  # Current user within a test.
  #
  # @return [User, nil]
  #
  def current_user: () -> (User | nil)

  @current_user: User | nil

  # Set the current test user.
  #
  # @param [String, Symbol, User, nil] user
  #
  # @return [User, nil]
  #
  def set_current_user: (String|Symbol|User|nil user) -> (User | nil)

  # Clear the current test user.
  #
  # @return [nil]
  #
  def clear_current_user: () -> nil

  # Indicate whether is an authenticated session.
  #
  def signed_in?: () -> bool

  # Indicate whether is an anonymous session.
  #
  def not_signed_in?: () -> bool

  # Table of formats and associated MIME media types.
  #
  # @type [Hash{Symbol=>String}]
  #
  MEDIA_TYPE: Hash[Symbol,String]

  # Table of MIME media types and associated formats.
  #
  # @type [Hash{String=>Symbol}]
  #
  REVERSE_MEDIA_TYPE: Hash[String,Symbol]

  # The format type associated with the given value.
  #
  # @param [Symbol, String, nil] type
  #
  # @return [Symbol, nil]
  #
  def format_type: (Symbol|String|nil `type`) -> (Symbol | nil)

  # Indicate whether *type* is HTML.
  #
  # @param [Symbol, String, nil] type
  #
  def html?: (Symbol|String|nil `type`) -> bool

  # Indicate whether *type* is JSON.
  #
  # @param [Symbol, String, nil] type
  #
  # @note Currently unused.
  #
  def json?: (Symbol|String|nil `type`) -> bool

  # Indicate whether *type* is XML.
  #
  # @param [Symbol, String, nil] type
  #
  # @note Currently unused.
  #
  def xml?: (Symbol|String|nil `type`) -> bool

  # Derive the name of the associated controller from the given source.
  #
  # @param [any, nil] item      Symbol, String, Class, Model; def: `self_class`
  #
  # @return [Symbol, nil]
  #
  def controller_name: (?untyped item) -> (Symbol | nil)

  # Derive the name of the associated model from the given source.
  #
  # @param [any, nil] item      Symbol, String, Class, Model; def: `self_class`
  #
  # @return [Symbol, nil]
  #
  def model_name: (?untyped item) -> (Symbol | nil)

  # Derive the class of the associated model from the given source, using the
  # MODEL constant if available.
  #
  # @param [any, nil] item      Symbol, String, Class, Model; def: `self_class`
  #
  # @return [Class, nil]
  #
  def model_class: (?untyped item) -> (Class | nil)

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [Enrollment, Array<Enrollment>]
  def enrollments
    : ()                      -> Array[Enrollment]
    | (Symbol|String name)    -> Enrollment
    | (*(Symbol|String) name) -> Array[Enrollment]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [JobResult, Array<JobResult>]
  def job_results
    : ()                      -> Array[JobResult]
    | (Symbol|String name)    -> JobResult
    | (*(Symbol|String) name) -> Array[JobResult]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [ManifestItem, Array<ManifestItem>]
  def manifest_items
    : ()                      -> Array[ManifestItem]
    | (Symbol|String name)    -> ManifestItem
    | (*(Symbol|String) name) -> Array[ManifestItem]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [ManifestItem, Array<ManifestItem>]
  def manifests
    : ()                      -> Array[Manifest]
    | (Symbol|String name)    -> Manifest
    | (*(Symbol|String) name) -> Array[Manifest]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [Org, Array<Org>]
  def orgs
    : ()                      -> Array[Org]
    | (Symbol|String name)    -> Org
    | (*(Symbol|String) name) -> Array[Org]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [SearchCall, Array<SearchCall>]
  def search_calls
    : ()                      -> Array[SearchCall]
    | (Symbol|String name)    -> SearchCall
    | (*(Symbol|String) name) -> Array[SearchCall]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [SearchResult, Array<SearchResult>]
  def search_results
    : ()                      -> Array[SearchResult]
    | (Symbol|String name)    -> SearchResult
    | (*(Symbol|String) name) -> Array[SearchResult]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [Upload, Array<Upload>]
  def uploads
    : ()                      -> Array[Upload]
    | (Symbol|String name)    -> Upload
    | (*(Symbol|String) name) -> Array[Upload]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [User, Array<User>]
  def users
    : ()                      -> Array[User]
    | (Symbol|String name)    -> User
    | (*(Symbol|String) name) -> Array[User]

  private

  def self.included: (Module base) -> void
end
