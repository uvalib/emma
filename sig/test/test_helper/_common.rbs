# Common values for tests.
#
module TestHelper::Common
  include Emma::Common

  extend ::TestHelper::Common

  TEST_TYPES: strArray

  # The full directory path for "/test/test_helper".
  #
  # @type [String]
  #
  HELPER_DIR: String

  # The full directory path for "/test".
  #
  # @type [String]
  #
  TESTS_DIR: String

  # The full directory path for "/test/system".
  #
  # @type [String]
  #
  SYSTEM_DIR: String

  # The bases of controller names which are not plurals of model names.
  #
  # @type [Array<String>]
  #
  SINGLE: strArray

  # Controllers being tested in "/test/system/*_test.rb".
  #
  # @type [Array<Symbol>]
  #
  SYSTEM_CONTROLLERS: symArray

  # Properties which drive parameterized system tests.
  #
  # @type [Hash{Symbol=>Hash{Symbol=>*}}]
  #
  PROPERTY: Hash[Symbol,symHash]

  # property
  #
  # @param [Symbol, String, Class, Model, nil] model
  # @param [Array<Symbol>]                     traversal
  # @param [*]                                 default
  #
  # @return [*]
  #
  def property
    : [T] (Symbol|String|Class|Model|nil model, *Symbol traversal,  default: T)   -> T
    |     (Symbol|String|Class|Model|nil model, *Symbol traversal, ?default: nil) -> (untyped | nil)

  # The title (:h1 text value) for the given parameters.
  #
  # @param [Model, item] item
  # @param [Symbol]      controller
  # @param [Symbol]      action       Default: :index
  # @param [Symbol]      prop_key     End of #PROPERTY traversal.
  # @param [Symbol]      meth         Calling method (for error reporting).
  # @param [Hash]        opt          Override interpolation values.
  #
  # @raise [Minitest::Assertion] If value could not be found or interpolated.
  #
  # @return [String]
  #
  def page_title: (?(Model|nil) item, ?controller: Symbol|nil, ?action: Symbol|nil, prop_key: Symbol, ?meth: Symbol|nil, **untyped opt) -> String

  # Give the target controller for the current context.
  #
  # @return [Symbol]
  #
  def this_controller: () -> Symbol

  # Derive the name of the model/controller from the given source.
  #
  # @param [Symbol, String, Class, Model, nil] src
  #
  # @return [Symbol, nil]
  #
  def controller_name
    : (nil     src) -> nil
    | (untyped src) -> Symbol

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [JobResult, Array<JobResult>]
  def job_results
    : ()                      -> Array[JobResult]
    | (Symbol|String name)    -> JobResult
    | (*(Symbol|String) name) -> Array[JobResult]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [ManifestItem, Array<ManifestItem>]
  def manifest_items
    : ()                      -> Array[ManifestItem]
    | (Symbol|String name)    -> ManifestItem
    | (*(Symbol|String) name) -> Array[ManifestItem]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [ManifestItem, Array<ManifestItem>]
  def manifests
    : ()                      -> Array[Manifest]
    | (Symbol|String name)    -> Manifest
    | (*(Symbol|String) name) -> Array[Manifest]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [Org, Array<Org>]
  def orgs
    : ()                      -> Array[Org]
    | (Symbol|String name)    -> Org
    | (*(Symbol|String) name) -> Array[Org]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [SearchCall, Array<SearchCall>]
  def search_calls
    : ()                      -> Array[SearchCall]
    | (Symbol|String name)    -> SearchCall
    | (*(Symbol|String) name) -> Array[SearchCall]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [SearchResult, Array<SearchResult>]
  def search_results
    : ()                      -> Array[SearchResult]
    | (Symbol|String name)    -> SearchResult
    | (*(Symbol|String) name) -> Array[SearchResult]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [Upload, Array<Upload>]
  def uploads
    : ()                      -> Array[Upload]
    | (Symbol|String name)    -> Upload
    | (*(Symbol|String) name) -> Array[Upload]

  # Fixture accessor defined by ActiveRecord::TestFixtures#fixtures.
  # @param [Array<Symbol|String>] name
  # @return [User, Array<User>]
  def users
    : ()                      -> Array[User]
    | (Symbol|String name)    -> User
    | (*(Symbol|String) name) -> Array[User]

  private

  def self.included: (Module base) -> void
end
