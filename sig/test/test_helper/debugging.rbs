# Support for debugging tests.
#
module TestHelper::Debugging
  TEST_START: String

  TEST_END: String

  TEST_DEFAULT: String

  # Produce the top frame of debug output for a test.
  #
  # @param [String, Symbol, nil] test
  # @param [String, nil]         part
  # @param [Hash]                opt  Passed to #emit_lines.
  #
  # @return [void]
  #
  def show_test_start: (?test: String|Symbol|nil, ?part: String|nil, **untyped opt) -> void

  # Produce the bottom frame of debug output for a test.
  #
  # @param [String, Symbol, nil] test
  # @param [String, nil]         part
  # @param [Hash]                opt  Passed to #emit_lines.
  #
  # @return [void]
  #
  def show_test_end: (?test: String|Symbol|nil, ?part: String|nil, **untyped opt) -> void

  # Produce a framing line for debug test output.
  #
  # @param [String]              tag
  # @param [String, Symbol, nil] test
  # @param [String, nil]         part
  #
  # @return [String]
  #
  def show_test_part: (String tag, ?test: String|Symbol|nil, ?part: String|nil, **untyped _ignored) -> void

  # Local options for #show_test_start and #show_test_end.
  #
  # @type [Array<Symbol>]
  #
  SHOW_TEST_OPT: symArray

  # Display item model in output.
  #
  # @param [ActiveRecord::Base] item
  # @param [Boolean]            reflections
  # @param [Hash]               opt           Passed to #show_item.
  #
  # @return [String]
  #
  def show_model: (ActiveRecord::Base item, ?reflections: bool, **untyped opt) -> String

  # Display item model associations in output.
  #
  # @param [ActiveRecord::Base] item
  # @param [Hash]               opt   Passed to #show_item.
  #
  # @return [String, nil]
  #
  def show_reflections: (ActiveRecord::Base item, **untyped opt) -> (String | nil)

  # Display a URL in output.
  #
  # @param [URI, String, nil] url     Default: `#current_url`.
  # @param [Array]            note    Additional text on the line.
  # @param [Hash]             opt     Passed to #show_item.
  #
  # @return [String]
  #
  def show_url: (?(String|URI|nil) url, *untyped note, **untyped opt) -> String

  # Display a user in output.
  #
  # @param [String, Symbol, User, nil] user   Default: `#current_user`.
  # @param [Hash]                      opt    Passed to #show_item.
  #
  # @return [String]
  #
  def show_user: (?(String|Symbol|User|nil) user, **untyped opt) -> String

  TEST_INDENT: String

  # Display item contents in output.
  #
  # If *join* results a multi-line value then *indent* is applied to each line.
  # If *join* is overridden to be *nil* or a string without a newline then
  # *indent* is applied only to the resulting line itself.
  #
  # @param [Array<*>]                   items
  # @param [String,nil]                 join
  # @param [String,Integer,Boolean,nil] indent  Default: #TEST_INDENT
  # @param [Boolean]                    output  If *false* just return result.
  # @param [Hash]                       opt     Passed to #show_model except
  #                                               #EMIT_LINES_OPT to
  #                                               #emit_lines.
  #
  # @return [String]                            The displayable result.
  #
  # @yield To supply additional items.
  # @yieldreturn [Array, String, any, nil]
  #
  def show_item: (*untyped items, ?join: String|nil, ?indent: String|Integer|bool|nil, ?output: bool, **untyped opt) ?{ () -> untyped } -> String

  # @private
  EMIT_LINES_OPT: symArray

  # Send one or more lines to $stderr.
  #
  # @param [Array, nil]  lines        Nil elements are interpreted as newlines.
  # @param [String, nil] prefix       Prepended to each line.
  # @param [String, nil] suffix       Appended to each line.
  # @param [String, nil] start        Prepended to the first line.
  # @param [String, nil] finish       Appended to the last line.
  #
  # @return [void]
  #
  def emit_lines: (*untyped lines, ?prefix: String|nil, ?suffix: String|nil, ?start: String|nil, ?finish: String|nil, **untyped _ignored) -> void

  TRACE_NL: String

  TRACE_BODY: Integer

  TRACE_SEPARATOR: Hash[String,String]

  SHOW_PRE_SEND_OPT: symArray

  SHOW_POST_SEND_OPT: symArray

  SHOW_TRACE_OPT: symArray

  # Display conditions prior to invoking an HTTP method.
  #
  # @param [Symbol] verb              HTTP verb (:get, :put, :post, :delete)
  # @param [String] url               Target URL or relative path.
  # @param [String] user              Default: `#current_user`.
  # @param [Symbol] format            Result format (:html, :json, :xml).
  # @param [Hash]   opt               Passed to #show_trace.
  #
  # @return [String, nil]             The displayable result.
  #
  def show_pre_send: (Symbol verb, String url, ?user: String|nil, ?format: Symbol|nil, **untyped opt) -> (String | nil)

  # Display conditions after invoking an HTTP method.
  #
  # @param [Symbol, String, Integer]      expect
  # @param [Symbol, String, Integer]      status
  # @param [ActionDispatch::TestResponse] response
  # @param [Hash]                         opt       Passed to #show_trace.
  #
  # @return [String, nil]             The displayable result.
  #
  def show_post_send: (?expect: Symbol|String|Integer|nil, ?status: Symbol|String|Integer|nil, ?response: ActionDispatch::TestResponse|nil, **untyped opt) -> (String | nil)

  # show_trace
  #
  # @param [Boolean, nil] trace
  # @param [Hash]         opt         Passed to #show_item.
  #
  # @return [String, nil]             The displayable result.
  #
  # @yield To supply pairs to be displayed.
  # @yieldreturn [Hash]
  #
  def show_trace: (?trace: bool|nil, **untyped opt) ?{ () -> anyHash } -> (String | nil)

  # Execute the provided block with tracing turned off to allow for executions
  # which do not clutter the output.
  #
  def without_tracing: [T] () { () -> T } -> T

  # Flag indicating that #show_trace should be silenced.
  #
  # @return [Boolean, nil]
  #
  attr_accessor silence_tracing: bool | nil
end

# This module is included in ActionDispatch::IntegrationTest to support
# tracing of HTTP method calls.
#
# @!method original_get
#   The superclass :get method (without pre/post trace output).
#
# @!method original_put
#   The superclass :put method (without pre/post trace output).
#
# @!method original_post
#   The superclass :post method (without pre/post trace output).
#
# @!method original_patch
#   The superclass :patch method (without pre/post trace output).
#
# @!method original_delete
#   The superclass :delete method (without pre/post trace output).
#
# @!method original_head
#   The superclass :head method (without pre/post trace output).
#
module TestHelper::Debugging::Trace
  include TestHelper::Debugging

  PRE_OPT: symArray

  POST_OPT: symArray

  TRACE_OPT: symArray

  # Override HTTP methods defined in ActionDispatch::Integration::Runner in
  # order to surround the method calls with trace debugging information.
  #
  # No override methods are created if *base* is some other class/module
  # which doesn't define these methods.
  #
  # @param [Module] base
  #
  def self.included: (Module base) -> void

  def original_get:    () -> untyped
  def original_put:    () -> untyped
  def original_post:   () -> untyped
  def original_patch:  () -> untyped
  def original_delete: () -> untyped
  def original_head:   () -> untyped

end
