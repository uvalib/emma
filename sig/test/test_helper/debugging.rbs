# Support for debugging tests.
#
module TestHelper::Debugging
  TEST_DEBUG_FRAME: String

  TEST_DEBUG_INDENT: String

  # @private
  RUN_TEST_OPT: symArray

  # Run the test code provided via the block.
  #
  # When debugging, this frames the console output generated by the test.
  #
  # @param [String, Symbol, nil] test_name
  # @param [Symbol, nil]         format
  # @param [Array, Symbol, nil]  only
  # @param [Integer, nil]        wait
  # @param [Hash]                opt        Passed to #show_test_start and
  #                                           #show_test_end.
  # @param [Proc]                block      Required.
  #
  # @return [void]
  #
  # @yield The test code to be run
  # @yieldreturn [void]
  #
  def run_test: (String|Symbol|nil test_name, ?format: Symbol|nil, ?only: symArray|Symbol|nil, ?wait: Integer|nil, **untyped opt) { () -> void } -> void

  # Make sure that "Sign in as" is visible on the sign-in page by ensuring that
  # the interface is in "debug mode".
  #
  # @return [void]
  #
  def prime_tests: () -> void

  @tests_primed: bool | nil

  # Produce the top frame of debug output for a test.
  #
  # @param [String, Symbol, nil] test_name
  # @param [Symbol]              test       Overrides *test_name* if given.
  # @param [String]              part
  # @param [String]              frame      Default: #TEST_DEBUG_FRAME.
  #
  # @return [void]
  #
  def show_test_start: (String|Symbol|nil test_name, ?test: Symbol|nil, ?part: String|nil, ?frame: String|nil, **untyped _ignored) -> void

  # Produce the bottom frame of debug output for a test.
  #
  # @param [String, Symbol, nil] test_name
  # @param [Symbol]              test       Overrides *test_name* if given.
  # @param [String]              part
  # @param [String]              frame      Default: #TEST_DEBUG_FRAME.
  #
  # @return [void]
  #
  def show_test_end: (String|Symbol|nil test_name, ?test: Symbol|nil, ?part: String|nil, ?frame: String|nil, **untyped _ignored) -> void

  SHOW_MODEL_OPT: symArray

  # Display item model in output.
  #
  # @param [ActiveRecord::Base] item
  # @param [Hash]               opt     Passed to #show except for:
  #
  # @option opt [String]  :indent       Default: #TEST_DEBUG_INDENT
  # @option opt [Boolean] :reflections  Default: *true*
  #
  # @return [String]
  #
  def show_model: (ActiveRecord::Base item, **untyped opt) -> String

  # Display item model associations in output.
  #
  # @param [ActiveRecord::Base] item
  # @param [Hash]               opt   Passed to #show except for:
  #
  # @option opt [String] :indent      Default: #TEST_DEBUG_INDENT
  #
  # @return [String]
  #
  def show_reflections: (ActiveRecord::Base item, **untyped opt) -> String

  # Display a URL in output.
  #
  # @param [URI, String, nil] url     Default: `#current_url`.
  # @param [Hash]             opt     Passed to #show.
  #
  # @return [String]
  #
  def show_url: (?url: String|URI|nil, **untyped opt) -> String

  # Display a user in output.
  #
  # @param [String, Symbol, User, nil] user   Default: `#current_user`.
  # @param [Hash]                      opt    Passed to #show.
  #
  # @return [String]
  #
  def show_user: (?user: String|Symbol|User|nil, **untyped opt) -> String

  # Display item contents in output.
  #
  # @param [Array<*>] items
  # @param [Hash]     opt             Passed to #show_model except for:
  #
  # @option opt [String] :output      If *false* the result is not displayed.
  #
  # @return [String]                  The displayable result.
  #
  # @yield To supply additional items.
  # @yieldreturn [Array, String, Any]
  #
  def show: (*untyped items, **untyped opt) ?{ () -> (anyArray|String|untyped) } -> String

  TRACE_NL: String

  TRACE_BODY: Integer

  TRACE_SEPARATOR: Hash[String,String]

  SHOW_PRE_SEND_OPT: symArray

  SHOW_POST_SEND_OPT: symArray

  SHOW_TRACE_OPT: symArray

  # Display conditions prior to invoking an HTTP method.
  #
  # @param [Symbol] verb              HTTP verb (:get, :put, :post, :delete)
  # @param [String] url               Target URL or relative path.
  # @param [String] user              Default: `#current_user`.
  # @param [Symbol] format            Result format (:html, :json, :xml).
  # @param [Hash]   opt               Passed to #show_trace.
  #
  # @return [String, nil]             The displayable result.
  #
  def show_pre_send: (Symbol verb, String url, ?user: String|nil, ?format: Symbol|nil, **untyped opt) -> (String | nil)

  # Display conditions after invoking an HTTP method.
  #
  # @param [Symbol, String, Integer]      expect
  # @param [Symbol, String, Integer]      status
  # @param [ActionDispatch::TestResponse] response
  # @param [Hash]                         opt       Passed to #show_trace.
  #
  # @return [String, nil]             The displayable result.
  #
  def show_post_send: (?expect: Symbol|String|Integer|nil, ?status: Symbol|String|Integer|nil, ?response: ActionDispatch::TestResponse|nil, **untyped opt) -> (String | nil)

  # show_trace
  #
  # @param [String, Integer] indent
  # @param [Boolean]         trace
  # @param [Hash] opt                 Passed to #show.
  #
  # @return [String, nil]             The displayable result.
  #
  # @yield To supply pairs to be displayed.
  # @yieldreturn [Hash]
  #
  def show_trace: (?indent: String|Integer, ?trace: bool, **untyped opt) ?{ () -> anyHash } -> (String | nil)

  # This module is included in ActionDispatch::IntegrationTest to support
  # tracing of HTTP method calls.
  #
  # !@method original_get
  #   The superclass :get method (without pre/post trace output).
  #
  # !@method original_put
  #   The superclass :put method (without pre/post trace output).
  #
  # !@method original_post
  #   The superclass :post method (without pre/post trace output).
  #
  # !@method original_patch
  #   The superclass :patch method (without pre/post trace output).
  #
  # !@method original_delete
  #   The superclass :delete method (without pre/post trace output).
  #
  # !@method original_head
  #   The superclass :head method (without pre/post trace output).
  #
  module Trace
    PRE_OPTIONS: symArray

    POST_OPTIONS: symArray

    TRACE_OPTIONS: symArray

    # Override HTTP methods defined in ActionDispatch::Integration::Runner
    # in order to surround the method calls with trace debugging information.
    #
    # No override methods are created if *base* is some other class/module
    # which doesn't define these methods.
    #
    # @param [Module] base
    #
    def self.included: (Module base) -> void

    def original_get:    () -> untyped
    def original_put:    () -> untyped
    def original_post:   () -> untyped
    def original_patch:  () -> untyped
    def original_delete: () -> untyped
    def original_head:   () -> untyped

  end
end
