# General utility methods.
#
module TestHelper::Utility
  include TestHelper::Common

  include TestHelper::Debugging

  # For controller tests to covering the differences between authenticated and
  # non-authenticated sessions.
  #
  # @type [Array<Symbol>]
  #
  CORE_TEST_USERS: symArray

  # For controller tests to covering varying behaviors depending on the role
  # of the user session.
  #
  # @type [Array<Symbol>]
  #
  ALL_TEST_USERS: symArray

  # The subset of #TEST_FORMATS which do not include *allowed_formats*.
  #
  # @param [Array<Symbol>] allowed_formats
  #
  # @return [Array<Symbol>]
  #
  def formats_other_than: (*Symbol allowed_formats) -> symArray

  # Indicate whether *ctrlr*/*action* can be rendered with *fmt*.
  #
  # @param [Class]  ctrlr             A subclass of ApplicationController.
  # @param [Symbol] action
  # @param [Symbol] fmt
  #
  def supports_format?: (Class ctrlr, Symbol action, Symbol fmt) -> bool

  # Run the test code provided via the block.
  #
  # When debugging, this frames the console output generated by the test.
  #
  # @param [String, Symbol, nil] name       Overrides `opt[:test]` if given.
  # @param [Symbol, nil]         format     @see #allowed_format.
  # @param [Array, Symbol, nil]  only       @see #allowed_format.
  # @param [Integer, nil]        wait       @see #using_wait_time.
  # @param [Hash]                opt        @see #SHOW_TEST_OPT
  # @param [Proc]                blk        Required block.
  #
  # @return [void]
  #
  # @yield The test code to be run
  # @yieldreturn [void]
  #
  def run_test: (?(String|Symbol|nil) name, ?format: Symbol|nil, ?only: symArray|Symbol|nil, ?wait: Integer|nil, **untyped opt) { () -> void } -> void

  # Local options for #run_test.
  #
  # @type [Array<Symbol>]
  #
  RUN_TEST_OPT: symArray

  # Make sure that "Sign in as" is visible on the sign-in page by ensuring that
  # the interface is in "debug mode".
  #
  # This also initializes `request.referrer` to a known good page so that
  # `redirect :back` will always work without need for a fallback location
  # (which may or may not be appropriate).
  #
  # @return [void]
  #
  def prime_tests: () -> void

  # @private
  # @type [Boolean, nil]
  attr_accessor tests_primed: bool?

  # The "/test/fixtures/users.yml" entry associated with the argument.
  #
  # @param [any, nil] arg             String, Symbol
  #
  # @return [Symbol, nil]
  #
  def user_entry: (untyped arg) -> (Symbol | nil)

  # Return a User instance from the given identification.
  #
  # @param [any, nil] user            String, Symbol, User
  #
  # @return [User]
  # @return [nil]                     If `*user*` could not be converted.
  #
  def find_user: (untyped user) -> (User | nil)

  # Return multiple User instances.
  #
  # @param [Array] list               All users if empty.
  # @param [Hash]  matching           Limiting conditions if present.
  #
  # @return [Array<User>]
  #
  def find_users: (*(String|Symbol|User|nil) list, **untyped matching) -> Array[User|nil]

  # The "/test/fixtures/orgs.yml" entry associated with the argument.
  #
  # @param [any, nil] arg           String, Symbol, Org
  #
  # @return [Symbol, nil]
  #
  def org_entry: (untyped arg) -> (Symbol | nil)

  # Return an Org instance from the given identification.
  #
  # @param [any, nil] org           String, Symbol, Org
  #
  # @return [Org]
  # @return [nil]                     If `*org*` could not be converted.
  #
  def find_org: (untyped org) -> (Org | nil)

  # Indicate whether `*user*` should be able to perform *action* on *subject*.
  #
  # @param [any, nil]       user      String, Symbol, User
  # @param [Symbol, String] action
  # @param [Class, nil]     subject   Def: MODEL constant defined by the class.
  # @param [any, nil]       extra
  #
  def can?: (String|Symbol|User|nil user, String|Symbol action, ?(Class|nil) subject, *untyped extra) -> bool

  # Indicate whether `*user*` can perform *action* on *target*.
  #
  # If *user* is a manager then actions on *target* are allowed if it is
  # associated with the same organization as *user*.
  #
  # If *user* is an organization member read-only actions on *target* are
  # allowed if it is associated with the same organization as *user*; write
  # actions are allowed only if *target* is the same as *user* or otherwise
  # associated with the same user ID.
  #
  # @param [Symbol]     action
  # @param [User, nil]  user
  # @param [Model, nil] target
  # @param [Class, nil] model         Def: MODEL constant defined by the class.
  #
  def permitted?: (Symbol action, User|nil user, ?(Model|nil) target, ?model: Class|nil, **untyped _ignored) -> bool

  # Extract the User ID indicated by *item*.
  #
  # @param [any, nil] item          Symbol, String, Integer, Hash, Model, User
  #
  # @return [Integer, nil]
  #
  def uid: (untyped item) -> (Integer | nil)

  # Extract the Organization ID indicated by *item*.
  #
  # @param [any, nil] item          Symbol, String, Integer, Hash, Model, Org
  #
  # @return [Integer, nil]
  #
  def oid: (untyped item) -> (Integer | nil)

  # The name of the fixture set for the indicated model type.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  #
  # @return [String]
  #
  def fixture_name: (?(Symbol|String|Class|ApplicationRecord|nil) model) -> String

  # The number of fixture records for the indicated model and constraints which
  # are associated with an organization.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  # @param [Org, User, Integer, nil]                  org
  # @param [Hash]                                     constraints
  #
  # @return [Integer]
  #
  def fixture_count_for_org: (Symbol|String|Class|ApplicationRecord model, Org|User|Integer|nil org, **untyped constraints) -> Integer

  # The number of fixture records for the indicated model and constraints which
  # are associated with the given user.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  # @param [User, Integer, nil]                       user
  # @param [Hash]                                     constraints
  #
  # @return [Integer]
  #
  def fixture_count_for_user: (Symbol|String|Class|ApplicationRecord model, User|Integer|nil user, **untyped constraints) -> Integer

  # The number of fixture records for the indicated model and constraints.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  # @param [Hash]                                     constraints
  #
  # @return [Integer]
  #
  def fixture_count: (Symbol|String|Class|ApplicationRecord model, **untyped constraints) -> Integer

  # A table of fixture value Hashes for the indicated model type, optionally
  # matching the given constraints, which are associated with an organization.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  # @param [Org, User, Integer, nil]                  org
  # @param [Hash]                                     constraints
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def fixture_values_for_org: (Symbol|String|Class|ApplicationRecord model, Org|User|Integer|nil org, **untyped constraints) -> Hash[Symbol, symHash]

  # A table of fixture value Hashes for the indicated model type, optionally
  # matching the given constraints, which are associated with the given user.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  # @param [User, Integer, nil]                       user
  # @param [Hash]                                     constraints
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def fixture_values_for_user: (Symbol|String|Class|ApplicationRecord model, User|Integer|nil user, **untyped constraints) -> Hash[Symbol, symHash]

  # A table of fixture value Hashes for the indicated model type, optionally
  # matching the given constraints.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  # @param [Hash]                                     constraints
  #
  # @return [Hash{Symbol=>Hash}]
  #
  def fixture_values: (Symbol|String|Class|ApplicationRecord model, **untyped constraints) -> Hash[Symbol, symHash]

  # Fixture set for the indicated model type.
  #
  # @param [Symbol, String, Class, ApplicationRecord] model
  #
  # @return [ActiveRecord::FixtureSet, nil]
  #
  def fixtures_of: (Symbol|String|Class|ApplicationRecord model) -> (ActiveRecord::FixtureSet | nil)

  # Get the number of records for the given *model* matching *constraints*.
  #
  # @param [any, nil] model         Symbol,String,Class,Model; def: self_class
  # @param [Hash]     constraints   Passed to #where.
  #
  # @return [Integer]
  #
  def get_model_count: (?untyped model, **untyped constraints) -> Integer

  # Controller methods which do not relate to controller endpoints, including
  # attributes defined directly within ApplicationController subclasses.
  #
  # @type [Array<Symbol>]
  #
  NON_PAGE_METHODS: symArray

  # Methods which are not applicable to system tests.
  #
  # @type [Array<Symbol>]
  #
  NON_SYSTEM_METHODS: symArray

  # Fail if the current test class does not have controller tests covering all
  # of the endpoints of *ctrlr*.
  #
  # Controller tests are expected to be named like
  # * `test 'controller endpoint'` or
  # * `test 'controller endpoint - additional text'`.
  #
  # @param [Class]               ctrlr    Controller class
  # @param [Array<Symbol>, nil]  tests    Default: all tests in caller's class
  # @param [Array<Symbol>, nil]  except   Controller methods to skip.
  # @param [String, Symbol, nil] prefix   Instead of derived from *ctrlr*.
  #
  # @return [Integer]
  #
  def check_controller_coverage: (Class ctrlr, tests: symArray|nil, except: symArray|nil, prefix: String|Symbol|nil) -> void

  # Fail if the current test class does not have system tests covering all of
  # the endpoints of *ctrlr*.
  #
  # System tests are expected to be named like
  # * `test 'models - action'` or
  # * `test 'models - action - additional text'`.
  #
  # @param [Class]               ctrlr    Controller class
  # @param [Array<Symbol>, nil]  tests    Default: all tests in caller's class
  # @param [Array<Symbol>, nil]  except   Controller methods to skip.
  # @param [String, Symbol, nil] prefix   Instead of derived from *ctrlr*.
  #
  def check_system_coverage: (Class ctrlr, tests: symArray|nil, except: symArray|nil, prefix: String|Symbol|nil) -> void

  # Fail if the current test class does not have mailer tests covering all of
  # the methods of *mailer*.
  #
  # Mailer tests are expected to be named like
  # * `test 'mailer model - method'` or
  # * `test 'mailer model - method - additional text'`.
  #
  # @param [Class]               mailer   Mailer class
  # @param [Array<Symbol>, nil]  tests    Default: all tests in caller's class
  # @param [Array<Symbol>, nil]  except   Controller methods to skip.
  # @param [String, Symbol, nil] prefix   Instead of derived from *ctrlr*.
  #
  def check_mailer_coverage: (Class mailer, tests: symArray|nil, except: symArray|nil, prefix: String|Symbol|nil) -> void

  # Potential endpoint methods defined by the indicated controller.
  #
  # @param [Class, Symbol, String] ctrlr
  #
  # @return [Array<Symbol>]
  #
  def methods_for: (Class|Symbol|String ctrlr) -> symArray

  # Generate a string of random hex digits.
  #
  # @return [String]
  #
  def hex_rand: () -> String

  # Extract the EMMA index entry identifier from the item.
  #
  # @param [SearchResult, nil] item
  # @param [String, nil]       repo
  # @param [String, nil]       rid
  # @param [String, nil]       format
  # @param [String, nil]       ver
  #
  # @return [String]
  #
  def record_id
    : ( SearchResult item, ?repo: String|nil, ?rid: String|nil, ?format: String|nil, ?ver: String|nil) -> String
    | (?nil          item,  repo: String,      rid: String,      format: String,     ?ver: String|nil) -> String

  # Note in the output that a test was skipped.
  #
  # @param [Array,nil] msg            Message part(s).
  # @param [Hash]      opt            Passed to #show_item.
  #
  # @return [void]
  #
  def show_skipped: (*untyped msg, **untyped opt) -> void

  # Note in the output that a test was skipped because it was not applicable.
  #
  # @param [String, nil] note         Additional annotation.
  # @param [Hash]        opt          Passed to #show_skipped.
  #
  # @return [true]
  #
  def not_applicable: (?(String|nil) note, **untyped opt) -> true

  # Note in the output that a test was skipped because the given format was not
  # applicable (or if none was given whether any of the currently configured
  # formats in #TEST_FORMATS are applicable).
  #
  # @param [Array, Symbol, nil] fmt
  # @param [String, nil]        note  Additional annotation.
  # @param [Array, Symbol, nil] only  Applicable format(s) or :all; default:
  #                                     #TEST_FORMATS.
  # @param [String]             tag
  # @param [Hash]               opt   Passed to #show_skipped.
  #
  # @return [true]                    If the test should proceed.
  # @return [false]                   If the test should be skipped.
  #
  def allowed_format
    : ((Symbol|symArray|nil) fmt, ?(String|nil) note, only: Symbol|symArray|nil, ?tag: String, **untyped opt) -> bool
    | (                           ?(String|nil) note, only: Symbol|symArray|nil, ?tag: String, **untyped opt) -> bool

  # Generate a distinct email address based on the given options.
  #
  # @param [any, nil]    item
  # @param [String, nil] join
  # @param [Hash]        opt          Passed to #unique_name.
  #
  # @return [String]
  #
  def unique_email: (?untyped item, ?join: String|nil, **untyped opt) -> String

  # Generate a distinct name based on the given options.
  #
  # @param [String, Array, nil] base
  # @param [Symbol, nil]        action
  # @param [String, nil]        unique
  # @param [String, nil]        tag
  # @param [String, nil]        join
  #
  # @return [String]
  #
  def unique_name: (*(String|strArray|nil) base, ?action: Symbol|nil, ?unique: String|nil, ?tag: String|nil, ?join: String|nil, **untyped _ignored) -> String

  UNIQUE_NAME_OPT: symArray

  # For controllers whose "/index" action is actually a redirect to one or more
  # possible list actions.
  #
  # @param [Symbol, String, Proc, nil] dst
  # @param [any, nil]                  user   String, Symbol, User
  # @param [Hash]                      opt
  #
  # @return [String]                  The redirection path.
  #
  def index_redirect: (?dst: Symbol|String|Proc|nil, ?user: untyped, **untyped opt) ?{ () -> (Symbol|String|Proc|nil) } -> String

  # Cause the identified items to be updated in the EMMA Unified Index.
  #
  # @param [Array<Upload,String>] entries
  #
  # @return [Boolean]
  #
  def reindex: (*(Upload|String) entries) -> bool

  private

  # This is an object that is used to access UploadConcern functionality that
  # is not dependent on the context of operating within an ActionController.
  #
  class UploadConcernShim
    include Singleton

    include UploadConcern

    # Required to satisfy #ingest_api.
    def session: () -> anyHash

    @session: anyHash

    # Required to satisfy #api_service.
    def current_user: () -> User

    @current_user: User
  end

  def self.included: (Module base) -> void
end
