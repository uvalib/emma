# Support for sign-in.
#
module TestHelper::IntegrationTests::Authentication
  include TestHelper::Utility

  include TestHelper::Debugging

  # Text indicating an authentication failure.
  #
  # @type [String]
  #
  AUTH_FAILURE: String

  # Current user within a test.
  #
  # @return [User, nil]
  #
  def current_user: () -> (User | nil)

  @current_user: User | nil

  # Set the current test user.
  #
  # @param [String, Symbol, User, nil] user
  #
  # @return [User, nil]
  #
  def set_current_user: (String|Symbol|User|nil user) -> (User | nil)

  # Clear the current test user.
  #
  # @return [nil]
  #
  def clear_current_user: () -> nil

  # Indicate whether is an authenticated session.
  #
  def signed_in?: () -> bool

  # Indicate whether is an anonymous session.
  #
  def not_signed_in?: () -> bool

  # Sign in as a test user.
  #
  # If the request was not successful then `#current_user` will be unchanged.
  #
  # @param [String, Symbol, User, nil] user
  # @param [Boolean]              follow_redirect
  #
  # @return [void]
  #
  def get_sign_in_as: (String|Symbol|User|nil user, ?follow_redirect: bool) -> void

  # Sign out of the local session.
  #
  # If the request was not successful then `#current_user` will be unchanged.
  #
  # @param [Boolean] follow_redirect
  #
  # @return [void]
  #
  def get_sign_out: (?follow_redirect: bool) -> void

  # Perform actions within the block signed-on as a test user.
  #
  # @param [String, Symbol, User, nil] user
  # @param [Hash]                      opt    Passed to #run_test.
  # @param [Proc]                      block  Required test code to execute.
  #
  # @return [void]
  #
  # @yield Test code to run while signed-on as *user*.
  # @yieldreturn [void]
  #
  def as_user: (String|Symbol|User|nil user, **untyped opt) { () -> void } -> void

  # Invoke an endpoint as the given user.
  #
  # @param [Symbol]               verb  HTTP verb (:get, :put, :post, :delete)
  # @param [String, Symbol, User] user  User identity to assume.
  # @param [String]               url   Target URL or relative path.
  # @param [Hash]                 opt   Passed to #assert_result except for the
  #                                       options for #as_user and local:
  #
  # @option opt [Symbol] :expect      Expected result regardless of the user.
  #
  # @return [void]
  #
  # @yield The caller may provide added assertions or other post-send actions.
  # @yieldreturn [void]
  #
  def send_as: (Symbol verb, String|Symbol|User|nil user, String url, **untyped opt) ?{ () -> void } -> void

  # HTTP GET *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def get_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP PUT *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def put_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP POST *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def post_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP PUT *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def patch_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP DELETE *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def delete_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void
end
