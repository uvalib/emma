# Support for sign-in.
#
module TestHelper::IntegrationTests::Authentication
  include TestHelper::Utility

  include TestHelper::Debugging

  # Sign in as a test user.
  #
  # If the request was not successful then `#current_user` will be unchanged.
  #
  # @param [String, Symbol, User, nil] user
  # @param [Boolean]                   follow_redirect
  # @param [Boolean]                   trace
  #
  # @return [void]
  #
  def get_sign_in_as: (String|Symbol|User|nil user, ?follow_redirect: bool, ?trace: bool, **untyped _ignored) -> void

  # Sign out of the local session.
  #
  # If the request was not successful then `#current_user` will be unchanged.
  #
  # @param [Boolean] follow_redirect
  # @param [Boolean] trace
  #
  # @return [void]
  #
  def get_sign_out: (?follow_redirect: bool, ?trace: bool, **untyped _ignored) -> void

  # Run the provided block signed in as the specified user.
  #
  # @param [String, Symbol, User, nil] user
  # @param [Boolean]                   sign_in
  # @param [Boolean]                   sign_out
  #
  # @return [void]
  #
  # @yield Block to execute signed in as *user*.
  #
  def as_user: (String|Symbol|User|nil user, ?sign_in: bool, ?sign_out: bool, **untyped _ignored) { () -> void } -> void

  # Local options for #as_user.
  #
  # @type [Array<Symbol>]
  #
  AS_USER_OPT: symArray

  # Run the provided block for each test format.
  #
  # Because the block is expected to invoke #run_test_as (directly or
  # indirectly), *opt* is evaluated as it applies to that method:
  #
  # * If `opt[:sign_in]` is *false*, #run_test_as will expect the caller to
  #   have already caused a sign-in to happen; otherwise this method invokes
  #   #as_user with the expectation that the initial #run_test_as invocation
  #   will cause a sign-in to happen.
  #
  # * If `opt[:sign_out]` is *false*, #run_test_as will expect the caller to be
  #   responsible for causing a sign-out to happen; otherwise this method
  #   invokes #as_user with the expectation that the final #run_test_as
  #   invocation will cause a sign-out to happen.
  #
  # @param [String, Symbol, User, nil] user
  # @param [Array<Symbol>, Symbol]     formats
  # @param [Hash]                      opt
  #
  # @yield Block to execute for each format.
  # @yieldparam [Symbol] format
  #
  def foreach_format: (String|Symbol|User|nil user, ?formats: symArray|Symbol, **untyped opt) { (Symbol format) -> void } -> void

  # Perform actions within the block signed-on as a test user.
  #
  # @param [String, Symbol, User, nil] user
  # @param [Hash]                      opt    To #run_test and/or #as_user.
  # @param [Proc]                      blk    Required test code to execute.
  #
  # @return [void]
  #
  # @yield Test code to run while signed-on as *user*.
  # @yieldreturn [void]
  #
  def run_test_as: (String|Symbol|User|nil user, **untyped opt) { () -> void } -> void

  # Invoke an endpoint as the given user.
  #
  # @param [Symbol]               verb  HTTP verb (:get, :put, :post, :delete)
  # @param [String, Symbol, User] user  User identity to assume.
  # @param [String]               url   Target URL or relative path.
  # @param [Hash]                 opt   Passed to #assert_result except for
  #                                       #RUN_TEST_OPT and #AS_USER_OPT passed
  #                                       to #run_test_as and local options:
  #
  # @option opt [String]       :redir   Expected redirection.
  # @option opt [Symbol]       :expect  Expected result regardless of the user.
  #                                       Default based on :format; if :nothing
  #                                       then no return status is assumed.
  #
  # @return [void]
  #
  # @yield The caller may provide added assertions or other post-send actions.
  # @yieldreturn [void]
  #
  def send_as: (Symbol verb, String|Symbol|User|nil user, String url, **untyped opt) ?{ () -> void } -> void

  # HTTP GET *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def get_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP PUT *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def put_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP POST *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def post_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP PUT *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def patch_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void

  # HTTP DELETE *url* as *user*.
  #
  # @param [String] user
  # @param [String] url
  # @param [Hash]   opt
  #
  # @see #send_as
  #
  def delete_as: (String|Symbol|User|nil user, String url, **untyped opt) { () -> void } -> void
end
