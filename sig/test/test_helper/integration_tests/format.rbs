# Support for sign-in.
#
module TestHelper::IntegrationTests::Format
  # Table of formats and associated MIME media types.
  #
  # @type [Hash{Symbol=>String}]
  #
  MEDIA_TYPE: Hash[Symbol,String]

  # Table of MIME media types and associated formats.
  #
  # @type [Hash{String=>Symbol}]
  #
  REVERSE_MEDIA_TYPE: Hash[String,Symbol]

  # The format type associated with the given value.
  #
  # @param [Symbol, String, nil] type
  #
  # @return [Symbol, nil]
  #
  def format_type: (Symbol|String|nil `type`) -> (Symbol | nil)

  # Indicate whether *type* is HTML.
  #
  # @param [Symbol, String, nil] type
  #
  def html?: (Symbol|String|nil `type`) -> bool

  # Indicate whether *type* is JSON.
  #
  # @param [Symbol, String, nil] type
  #
  # @note Currently unused
  #
  def json?: (Symbol|String|nil `type`) -> bool

  # Indicate whether *type* is XML.
  #
  # @param [Symbol, String, nil] type
  #
  # @note Currently unused
  #
  def xml?: (Symbol|String|nil `type`) -> bool

  # Assert that the response is 'text/html'.
  #
  # @param [Symbol] status
  # @param [Hash]   opt               Passed to #assert_result.
  #
  # @raise [Minitest::Assertion]
  #
  # @return [true]
  #
  def assert_html_result: (Symbol status, **untyped opt) -> true

  # Assert that the response is 'application/json'.
  #
  # @param [Symbol] status
  # @param [Hash]   opt               Passed to #assert_result.
  #
  # @raise [Minitest::Assertion]
  #
  # @return [true]
  #
  # @note Currently unused.
  #
  def assert_json_result: (Symbol status, **untyped opt) -> true

  # Assert that the response is 'application/xml'.
  #
  # @param [Symbol] status
  # @param [Hash]   opt               Passed to #assert_result.
  #
  # @raise [Minitest::Assertion]
  #
  # @return [true]
  #
  # @note Currently unused.
  #
  def assert_xml_result: (Symbol status, **untyped opt) -> true

  # Assert that the response is 'text/plain'.
  #
  # @param [Symbol] status
  # @param [Hash]   opt               Passed to #assert_result.
  #
  # @raise [Minitest::Assertion]
  #
  # @return [true]
  #
  # @note Currently unused.
  #
  def assert_text_result: (Symbol status, **untyped opt) -> true

  # Assert that the response matches the given criteria.
  #
  # @param [Symbol, nil] status       Status :any is treated the same as *nil*.
  # @param [Hash]        opt
  #
  # @option opt [String]        :from
  # @option opt [String,Symbol] :controller
  # @option opt [String,Symbol] :action
  # @option opt [String,Symbol] :format
  # @option opt [String,Symbol] :media_type   If present, trumps :format.
  #
  # If :media_type resolves to :any then no format check is performed.
  #
  # @raise [Minitest::Assertion]      If one or more criteria don't match.
  #
  # @return [true]                    If all criteria match.
  #
  def assert_result: (Symbol status, **untyped opt) -> true
end
