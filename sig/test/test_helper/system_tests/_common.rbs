# Common values for system tests.
#
# @!method visit
#   @param [#to_s] visit_uri
#   @see Capybara::Session#visit
#
# @!method go_back
#   @see Capybara::Session#go_back
#
module TestHelper::SystemTests::Common
  include TestHelper::Common

  include Emma::Json

  # :nocov:
  #include Minitest::Assertions

  #include Capybara::Node::Actions

  #include Capybara::Node::Finders

  #include TestHelper::SystemTests::Authentication
  # :nocov:

  # Assert that *url* matches `current_url`.
  #
  # @param [String] url
  #
  # @raise [Minitest::Assertion]
  #
  # @return [true]
  #
  def assert_current_url: (String url) -> true

  # Assert that the current page is valid.
  #
  # @param [String, nil] text         If given both must match.
  # @param [String, nil] heading      Default: *text* if given.
  # @param [String, nil] title        Default: *text* if given.
  #
  # @raise [Minitest::Assertion]      If either item is not on the page.
  #
  # @return [true]
  #
  def assert_valid_page: (?(String|nil) text, ?heading: String|nil, ?title: String|nil, **untyped _ignored) -> true

  # Assert that the current output is JSON with the given key/value pairs.
  #
  # @note The pairs must be in the expected order.
  #
  # @param [Hash, String, nil] value  Key/value pairs or (partial) JSON.
  # @param [Boolean, nil]      exact
  # @param [Hash]              pairs  Key/value pairs if value is nil.
  #
  # @raise [Minitest::Assertion]      If *pairs* are not present or incomplete.
  #
  # @return [true]
  #
  # @note Currently unused.
  #
  def assert_json
    : (anyHash|anyArray|String value, ?exact: bool|nil, **untyped _ignored) -> true
    | (?nil _ignored,                 ?exact: bool|nil, **untyped pairs)    -> true

  # Return the given URL without its HTTP port.
  #
  # @param [String, URI::Generic, nil] url
  #
  # @return [String, nil]
  #
  def url_without_port
    : (nil                 url) -> nil
    | (String|URI::Generic url) -> String

  # Block until the browser can report its 'window.location'.
  #
  # @param [Boolean] port             If *true*, allow port in URL comparison.
  #
  # @return [String, nil]
  #
  def get_browser_url: (?port: bool) -> (String | nil)

  DEF_WAIT_MAX_PASS: Integer

  DEF_WAIT_MAX_TIME: Numeric

  # Block until the browser can confirm that it is on the target page.
  #
  # @param [String, Array, nil] target  One or more acceptable target URLs, or
  #                                       *nil* for any new page.
  # @param [Boolean]            port    Passed to #get_browser_url.
  # @param [Boolean]            fatal   If *false* don't assert.
  # @param [Boolean]            trace   Output each URL acquired.
  # @param [Numeric]            wait    Overall time limit.
  #
  # @raise [Minitest::Assertion]        If the browser failed to get to the
  #                                       expected page and *fatal* is *true*.
  #
  # @return [Boolean]
  #
  def wait_for_page: (?(String|strArray|nil) target, ?port: bool, ?fatal: bool, ?trace: bool, ?wait: Numeric) -> bool

  # If DEBUG_TESTS is true, this will take a screenshot (ignoring an error that
  # has been observed [in rare cases] since these are informational-only).
  #
  # @return [void]
  #
  def screenshot: () -> void

  # Depending on the context, there may be two menus for performing an action
  # on a selected item.
  #
  # In cases where there are dual select menus (one for the user's own items
  # and one for organization items) the first menu will contain a subset of the
  # items from the second menu.
  #
  # @param [String] value
  # @param [String] name
  # @param [Hash]   opt               Passed to Capybara::Node::Actions#select
  #
  # @return [void]
  #
  # @see BaseDecorator::Menu#items_menu
  #
  def item_menu_select: (String value, String name, **untyped opt) -> void

  # Select a menu item either from a simple HTML `<select>` menu or one that
  # is managed by Select2.
  #
  # @param [String] value
  # @param [String] from
  # @param [Hash]   opt               Passed to Capybara::Node::Finders#find
  #
  # @return [void]
  #
  def menu_select: (String value, String from, **untyped opt) -> void

  # Return the variant of the action which indicates generation of a menu.
  #
  # @param [Symbol, String] action
  #
  # @return [Symbol]
  #
  def menu_action: (Symbol|String action) -> Symbol
end
