# Support for testing Bookshare API compliance.
#
module TestHelper::SystemTests::Bookshare
  include TestHelper::SystemTests::Common

  include BookshareConcern

  # The host containing Bookshare API documentation web pages:
  #
  # @type [String]
  #
  APIDOC_URL: String

  # The web pages containing Bookshare API documentation.
  #
  # * API v2 General Reference      "#{APIDOC_URL}/reference/index.html"
  # * API v2 Membership Management  "#{APIDOC_URL}/membership/index.html"
  # * API v2 Collection Management  "#{APIDOC_URL}/catalog/index.html"
  #
  # @type [Hash{Symbol=>String}]
  #
  APIDOC: Hash[Symbol,String]

  # Namespaces of API classes.
  #
  # @type [Array<Module>]
  #
  API_NAMESPACES: Array[Module]

  # This enumeration is inappropriately documented along with the records.
  #
  # @type [Array<String>]
  #
  API_ENUMS_DOCUMENTED_AS_RECORDS: strArray

  # A mapping of documentation element ID to request method name.
  #
  # @type [Hash{String=>String}]
  #
  API_REQUEST_METHODS: Hash[String,String]

  # A partial mapping of documentation element ID to a base API record or type
  # name.  (Most record class names are already suitable for automatic
  # translation and are not listed here.)
  #
  # @type [Hash{String=>String}]
  #
  API_RECORD_TYPES: Hash[String,String]

  # A translation of Bs#ENUMERATIONS.
  #
  # @type [Hash{String=>Array<String>}]
  #
  API_ENUMERATIONS: Hash[String,strArray]

  # Translate an implementation field type into a specification field type.
  #
  # This is mostly for cases where the type in the implementation record class
  # is more restrictive than the documented field type.
  #
  # @type [Hash{String=>String}]
  #
  API_TYPE_MAP: Hash[String,String]

  # @type [String, Integer]
  DEFAULT_INDENT: String | Integer

  # @type [String]
  DEFAULT_SEPARATOR: String

  @@bookshare_apidoc: Array[Capybara::Session]

  # Acquires the contents of Bookshare API documentation to be used across
  # all tests in including test case class.
  #
  # @return [Array<Capybara::Session>]
  #
  def bookshare_apidoc: () -> Array[Capybara::Session]

  # Get the underscore form of the given request from the Bookshare API
  # documentation page.
  #
  # @param [String] element_id
  #
  # @return [String]
  # @return [nil]
  #
  def api_request_method: (String element_id) -> (String | nil)

  # record_fields
  #
  # @param [Capybara::Node::Element] node
  #
  # @return [Array<Hash>]
  #
  def api_request_parameters: (Capybara::Node::Element node) -> Array[symHash]

  # Get the class which implements the named method.
  #
  # @param [Symbol] m
  #
  # @return [Method]
  # @return [nil]
  #
  def method_class: (Symbol m) -> (Method | nil)

  # method_params
  #
  # @param [Symbol] m
  #
  # @return [Array<Hash>]
  # @return [nil]
  #
  def method_params: (Symbol m) -> (Array[symHash] | nil)

  # Get the underscore form of the given identifier from the Bookshare API
  # documentation page.
  #
  # @param [String, Symbol, Class, nil] element_id
  #
  # @return [String]
  # @return [nil]
  #
  def record_type: (String|Symbol|Class|nil element_id) -> (String | nil)

  # Get the documented type of the given field name translated to the Ruby
  # value.
  #
  # @param [String]      type
  # @param [String, nil] default      Default: "MISSING".
  #
  # @return [String]
  # @return [nil]                     If *type* is blank and *default* is nil.
  #
  def record_field_type: (String `type`, ?(String|nil) default) -> (String | nil)

  # record_fields
  #
  # @param [Capybara::Node::Element] node
  #
  # @return [Array<Hash>]
  #
  def record_fields: (Capybara::Node::Element node) -> Array[symHash]

  # Get the class which implements the named quantity.
  #
  # @param [String, Symbol, Class, nil] name
  #
  # @return [Class]
  # @return [nil]
  #
  def model_class: (String|Symbol|Class|nil name) -> (Class | nil)

  # Get the comparable name of the given Ruby type.
  #
  # @param [String, Symbol, Class, Proc, nil] type
  #
  # @return [String]
  #
  def model_field_type: (String|Symbol|Class|Proc|nil `type`) -> String

  # model_fields
  #
  # @param [String, Symbol, Class] type
  #
  # @return [Array<Hash>]
  #
  def model_fields: (String|Symbol|Class|nil `type`) -> Array[symHash]

  # Produce a listing of failures.
  #
  # @param [String, nil] header       Generate an initial line.
  # @param [Hash, Array] missing
  # @param [Hash, Array] problems
  #
  # @return [String]
  # @return [nil]
  #
  def failure_list: (String|nil header, anyHash|anyArray missing, anyHash|anyArray problems) -> (String | nil)

  # Produce a table of missing items.
  #
  # @param [Hash, Array]     missing
  # @param [String, nil]     header
  # @param [Integer, String] indent
  # @param [Integer]         width
  # @param [String]          separator
  #
  # @return [String]
  #
  def missing_list: (anyHash|anyArray missing, ?(String|nil) header, ?indent: Integer|String, ?width: Integer|nil, ?separator: String) -> String

  # Produce a table of problematic items.
  #
  # @param [Hash, Array] problems
  # @param [String, nil] header
  # @param [Hash]        opt          Passed to #show_subsection
  #
  # @return [String]
  #
  def problem_list: (anyHash|anyArray problems, String|nil header, **untyped opt) -> String

  # Display API documentation request parameters when debugging.
  #
  # @param [Array<Hash>] fields
  # @param [String, nil] method
  # @param [Hash]        opt          Passed to #show_subsection
  #
  # @return [Array<String>]
  #
  def show_request_params: (Array[symHash] fields, String|nil method, **untyped opt) -> strArray

  # Display API request method parameters when debugging.
  #
  # @param [Array<Hash>] fields
  # @param [String, nil] method
  # @param [Hash]        opt          Passed to #show_subsection
  #
  # @return [Array<String>]
  #
  def show_method_params: (Array[symHash] fields, String|nil method, **untyped opt) -> strArray

  # Display API documentation record fields when debugging.
  #
  # @param [Array<Hash>] fields
  # @param [String, nil] record_type
  # @param [Hash]        opt          Passed to #show_subsection
  #
  # @return [Array<String>]
  #
  def show_record_fields: (Array[symHash] fields, String|nil method, **untyped opt) -> strArray

  # Display API implementation record fields when debugging.
  #
  # @param [Array<Hash>] fields
  # @param [String, nil] record_type
  # @param [Hash]        opt          Passed to #show_subsection
  #
  # @return [Array<String>]
  #
  def show_model_fields: (Array[symHash] fields, String|nil method, **untyped opt) -> strArray

  # Display API implementation record problems when debugging.
  #
  # @param [Hash] fields
  # @param [Hash] opt                 Passed to #show_subsection
  #
  # @return [Array<String>]
  #
  def show_problems: (symHash fields, **untyped opt) -> strArray

  # show_section
  #
  # @param [String, nil]   header
  # @param [Array<String>] lines
  # @param [Boolean]       output
  #
  # @return [Array<String>]
  #
  # @yield To supply additional lines to show.
  # @yieldreturn [String, Array<String>]
  #
  def show_section: (String|nil header, ?lines: strArray|nil, ?output: bool) ?{ () -> (String|strArray|Array[strArray]) } -> strArray

  # show_subsection
  #
  # @param [String]          header
  # @param [Hash, nil]       parts
  # @param [Integer, String] indent
  # @param [Integer]         width
  # @param [String]          separator
  # @param [Boolean]         output
  #
  # @return [Array<String>]
  #
  # @yield To supply additional parts to show.
  # @yieldreturn [Hash, Array]
  #
  def show_subsection: (String header, ?(symHash|nil) parts, ?indent: Integer|String, ?width: Integer|nil, ?separator: String, ?output: bool) ?{ () -> (anyHash | anyArray) } -> strArray
end
