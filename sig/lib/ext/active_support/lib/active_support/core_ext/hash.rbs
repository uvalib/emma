module HashExt
  #include ObjectExt

  # Recursively freeze a Hash so that no part of its forest of key-value pairs
  # can be modified.
  #
  # @return [self]
  #
  # === Usage Notes
  # This should not be used in any situation where the elements are live
  # objects subject to active updating (which would be unusable if frozen).
  #
  def deep_freeze: () -> self

  # Recursive duplication.
  #
  # @return [Hash]
  #
  # === Usage Notes
  # A deeply-nested hash may reference objects that cannot or should not be
  # duplicated. To avoid that situation, a class may redefine #duplicable? to
  # return *false* (so that Object#rdup returns *self*), or a class may define
  # #rdup with customized behaviors.
  #
  # === Implementation Notes
  # Unlike ActiveSupport #deep_dup, this also ensures that other enumerables
  # like Array are also duplicated, not just copied by reference.
  #
  def rdup: () -> anyHash

  # Recursive merge.
  #
  # @param [Hash] other
  #
  # @return [Hash]
  #
  def rmerge: (anyHash other) -> anyHash

  # Recursive merge into self.
  #
  # If *other* is a Hash, then its pairs are merged into *self*; if *other* is
  # any other value, it is ignored (unless *raise_error* is *true*).
  #
  # @param [Hash]    other
  # @param [Boolean] raise_error      If *true*, raise exceptions.
  #
  # @raise [RuntimeError]             If *other* is not a Hash.
  #
  # @return [self]
  #
  def rmerge!: (anyHash other, ?bool raise_error) -> self
end

class Hash[unchecked out K, unchecked out V] < Object
  include HashExt
end
