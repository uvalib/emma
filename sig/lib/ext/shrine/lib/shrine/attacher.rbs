class Shrine
  # Overrides adding extra debugging around method calls.
  #
  # -
  # noinspection RubyTooManyMethodsInspection
  # +
  module AttacherDebug
    include Shrine::ExtensionDebugging

    # :nocov:
    include Shrine::Attacher::InstanceMethods

    include Shrine::Plugins::Activerecord::AttacherMethods

    include Shrine::Plugins::Entity::AttacherMethods

    # initialize
    #
    # @param [Shrine::UploadedFile] file
    # @param [Symbol]               cache
    # @param [Symbol]               store
    #
    def initialize: (?file: Shrine::UploadedFile|nil, ?cache: Symbol, ?store: Symbol) -> void

    # assign
    #
    # @param [String, Hash, IO] value
    # @param [Hash]             options
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def assign: (String|anyHash|IO value, **untyped options) -> (Shrine::UploadedFile | nil)

    # attach_cached
    #
    # @param [String, Hash, IO] value
    # @param [Hash]             options   To #attach if *value* is an IO.
    #
    # @raise [Shrine::Error]    If the file is not in :cache storage.
    #
    # @return [Shrine::UploadedFile]
    #
    def attach_cached: (String|anyHash|IO value, **untyped options) -> Shrine::UploadedFile

    # attach
    #
    # @param [IO, StringIO] io
    # @param [Symbol]       storage
    # @param [Hash]         options   Passed to #upload.
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def attach: (IO|StringIO io, ?storage: Symbol, **untyped options) -> (Shrine::UploadedFile | nil)

    # finalize
    #
    # @return [void]
    #
    def finalize: () -> void

    # save
    #
    # @return [void]
    #
    def save: () -> void

    # promote_cached
    #
    # @param [Hash] options           Passed to #promote.
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def promote_cached: (**untyped options) -> (Shrine::UploadedFile | nil)

    # promote
    #
    # @param [Symbol] storage
    # @param [Hash]   options
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def promote: (?storage: Symbol, **untyped options) -> (Shrine::UploadedFile | nil)

    # upload
    #
    # @param [IO, StringIO] io
    # @param [Symbol]       storage
    # @param [Hash]         options
    #
    # @return [Shrine::UploadedFile]
    #
    # @see Shrine::InstanceMethods#upload
    #
    def upload: (IO|StringIO io, ?Symbol storage, **untyped options) -> Shrine::UploadedFile

    # destroy_previous
    #
    # @return [void]
    #
    def destroy_previous: () -> void

    # destroy_attached
    #
    # @return [void]
    #
    def destroy_attached: () -> void

    # destroy
    #
    # @return [void]
    #
    def destroy: () -> void

    # change
    #
    # @param [Shrine::UploadedFile, nil] file
    #
    # @raise [ArgumentError]        If *file* is not an UploadedFile or *nil*
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def change: (untyped file) -> untyped

    # Sets the attached file.
    #
    # @param [Shrine::UploadedFile, nil] file
    #
    # @raise [ArgumentError]        If *file* is not an UploadedFile or *nil*
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def set: (Shrine::UploadedFile|nil file) -> (Shrine::UploadedFile | nil)

    # Returns the attached file.
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def get: () -> (Shrine::UploadedFile | nil)

    # load_data
    #
    # @param [Shrine::UploadedFile, Hash, String, nil] data
    #
    # @raise [ArgumentError]          If *value* is an invalid type.
    #
    # @return [UploadedFile, nil]
    #
    def load_data: (Shrine::UploadedFile|anyHash|String|nil data) -> (Shrine::UploadedFile | nil)

    # Sets the attached file.
    #
    # @param [Shrine::UploadedFile, nil] file
    #
    # @raise [ArgumentError]          If *file* is an invalid type.
    #
    # @return [Shrine::UploadedFile, nil]
    #
    def file=: (Shrine::UploadedFile|nil file) -> (Shrine::UploadedFile | nil)

    # file!
    #
    # @raise [Shrine::Error]          If no file is attached.
    #
    # @return [Shrine::UploadedFile]
    #
    def file!: () -> Shrine::UploadedFile

    # uploaded_file
    #
    # @param [Shrine::UploadedFile, Hash, String] value
    #
    # @raise [ArgumentError]          If *value* is an invalid type.
    #
    # @return [Shrine::UploadedFile]
    #
    # @see Shrine::ClassMethods#uploaded_file
    #
    def uploaded_file: (Shrine::UploadedFile|anyHash|String value) -> Shrine::UploadedFile

    # activerecord_validate
    #
    # @return [void]
    #
    def activerecord_validate: () -> void

    # activerecord_before_save
    #
    # @return [void]
    #
    def activerecord_before_save: () -> void

    # activerecord_after_save
    #
    # @return [void]
    #
    def activerecord_after_save: () -> void

    # activerecord_after_destroy
    #
    # @return [void]
    #
    def activerecord_after_destroy: () -> void

    # activerecord_persist
    #
    # @return [void]
    #
    def activerecord_persist: () -> void

    # activerecord_reload
    #
    # @return [void]
    #
    def activerecord_reload: () -> void

    # load_entity
    #
    # @param [Model]          record
    # @param [Symbol, String] name
    #
    # @return [FileUploader]
    #
    def load_entity: (Model record, Symbol|String name) -> FileUploader

    # set_entity
    #
    # @param [Model]          record
    # @param [Symbol, String] name
    #
    # @return [FileUploader]
    #
    def set_entity: (Model record, Symbol|String name) -> FileUploader

    # reload
    #
    # @return [FileUploader]
    #
    def reload: () -> FileUploader
  end
end
