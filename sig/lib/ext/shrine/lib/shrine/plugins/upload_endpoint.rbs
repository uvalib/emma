class Shrine
  module UploadEndpointExt
    # Include :emma_data in the response which would normally only be the
    # contents of :file_data.
    #
    # @param [Shrine::UploadedFile]    uploaded_file
    # @param [ActionDispatch::Request] request
    #
    # @return [Array<(Integer, Rack::Headers, Array<String>)>]
    #
    # @see file:javascripts/shared/uploader.js *onFileUploadSuccess()*
    #
    def make_response: (Shrine::UploadedFile uploaded_file, ActionDispatch::Request request) -> [Integer, Rack::Headers, (strArray|Rack::BodyProxy)]
  end

  # Overrides adding extra debugging around method calls.
  #
  module UploadEndpointDebug
    include Shrine::ExtensionDebugging

    # :nocov:
    include Shrine::UploadEndpointExt

    # call
    #
    # @param [Hash] env
    #
    def call: (untyped env) -> untyped

    # handle_request
    #
    # @param [ActionDispatch::Request] request
    #
    # @return [Array<(Integer, Rack::Headers, Array<String>)>]
    #
    def handle_request: (ActionDispatch::Request request) -> [Integer, Rack::Headers, (strArray|Rack::BodyProxy)]

    # get_io
    #
    # @param [ActionDispatch::Request] request
    #
    # @return [Shrine::RackFile]
    #
    def get_io: (ActionDispatch::Request request) -> Shrine::RackFile

    # get_multipart_upload
    #
    # @param [ActionDispatch::Request] request
    #
    # @return [Shrine::RackFile]
    #
    def get_multipart_upload: (ActionDispatch::Request request) -> Shrine::RackFile

    # get_context
    #
    # @param [ActionDispatch::Request] request
    #
    # @return [Hash]
    #
    def get_context: (ActionDispatch::Request request) -> anyHash

    # upload
    #
    # @param [Shrine::RackFile]        io
    # @param [Hash]                    context
    # @param [ActionDispatch::Request] request
    #
    # @return [Shrine::UploadedFile]
    #
    def upload: (Shrine::RackFile io, anyHash context, ActionDispatch::Request request) -> Shrine::UploadedFile

    # make_response
    #
    # @param [Shrine::UploadedFile, Hash] uploaded_file
    # @param [ActionDispatch::Request]    request
    #
    # @return [Array<(Integer, Rack::Headers, Array<String>)>]
    #
    def make_response: ((Shrine::UploadedFile|anyHash) uploaded_file, ActionDispatch::Request request) -> [Integer, Rack::Headers, (strArray|Rack::BodyProxy)]
  end
end
