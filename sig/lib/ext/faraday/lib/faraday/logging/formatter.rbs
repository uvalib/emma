module Faraday
  # Override definitions to be prepended to Faraday::Logging::Formatter.
  #
  # By default, headers are dumped but bodies are not.
  #
  # @example Log request and response message bodies:
  # Faraday.new(...) do |bld|
  #   bld.response :logger, Log.logger, bodies: true
  # end
  #
  # @example Log only request message bodies:
  # Faraday.new(...) do |bld|
  #   bld.response :logger, Log.logger, bodies: { request: true }
  # end
  #
  # @example Log only response message bodies:
  # Faraday.new(...) do |bld|
  #   bld.response :logger, Log.logger, bodies: { response: true }
  # end
  #
  module Logging::FormatterExt
    # Render request headers.
    #
    # @param [Hash] headers
    #
    # @return [String]
    #
    # @see Faraday::Logging::Formatter#dump_headers
    #
    def dump_headers: (anyHash headers) -> String

    # Render request dump_body.
    #
    # @param [Hash] body
    #
    # @return [String]
    #
    # @see Faraday::Logging::Formatter#dump_body
    #
    def dump_body: (anyHash body) -> String

    # Faraday disregards Logger#progname by replacing with an explicit
    # 'request' or 'response' tag.  This corrects that by appending the tag to
    # the progname if it is present.
    #
    # @param [Symbol] log_method    :debug, :info, :warn, etc
    # @param [String] type          'request' or 'response'
    #
    def public_send: (Symbol log_method, String `type`) { (*untyped) -> untyped } -> untyped
  end
end
