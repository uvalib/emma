# General access into "config/locales/**.yml" configuration information.
#
module Configuration
  include SystemExtension

  # The root of all I18n paths related to the project.
  #
  # @note Does not include locale.
  #
  # @type [String]
  #
  CONFIG_ROOT: String

  # All "en.emma.*" configuration values.
  #
  class Data
    include Singleton

    # All "en.emma.*" configuration values.
    #
    # @return [Hash]                    Frozen
    #
    def self.all: () -> symHash

    # All "en.emma.*" configuration values.
    #
    # @return [Hash]                    Frozen
    #
    def all: () -> symHash

    @all: symHash

    # Acquire "en.emma.*" configuration values.
    #
    # @return [Hash]                    Deep-frozen.
    # @return [nil]                     Failed to find "en.(CONFIG_ROOT)".
    #
    def fetch_all: (?initialize: bool) -> (symHash | nil)

    # Recursively process a portion of a configuration hierarchy, in particular
    # ensuring that the values for '*_html' keys are made HTML-safe.
    #
    # @param [any, nil]     item
    # @param [Boolean, nil] html
    #
    # @return [any, nil]
    #
    def process: [T] (T item, ?(bool|nil) html) -> T
  end

  # All "en.emma.*" configuration values.
  #
  # @return [Hash]                    Deep-frozen.
  #
  def config_all: () -> symHash

  # Appropriately-typed configuration values taken from `ENV`,
  # `Rails.application.credentials`, or "en.emma.env_var" YAML configuration.
  #
  class EnvVar < ::Hash[String, untyped]
    include Singleton

    # Create an instance which combines configuration values from sources in
    # this order of precedence:
    #
    # 1. From `ENV`.
    # 2. From `Rails.application.credentials`.
    # 3. From YAML configuration ("en.emma.env_var").
    #
    # As a side effect, values missing from `ENV` will be updated with values
    # from the other sources.
    #
    # @param [Boolean] update_env     If *false*, do not modify `ENV`.
    # @param [Boolean] check_env      If *true*, run #validate.
    #
    def initialize: (update_env: bool, check_env: bool) -> void

    # Compare the configuration values stored in `ENV` with the configuration
    # values stored here.
    #
    # @param [Boolean] output         If *false*, just return error messages.
    # @param [Boolean] fatal          If *true*, raise exception on mismatch.
    # @param [String]  prefix         Error message prefix.
    #
    # @return [Array<String>]         Error messages.
    #
    def validate: (output: bool, fatal: bool, prefix: String, **untyped _ignored) -> strArray

    # Original configuration entries from `ENV`.
    #
    # @return [Hash{String=>String}]  Frozen results.
    #
    def from_env: () -> Hash[String,String]

    @from_env: Hash[String,String]

    # Configuration entries from "en.emma.env_var".
    #
    # @return [Hash{String=>any}]     Frozen results.
    #
    def from_yaml: () -> Hash[String,untyped]

    @from_yaml: Hash[String,untyped]

    # Configuration values from `Rails.application.credentials`.
    #
    # @return [Hash{String=>any}]     Frozen results.
    #
    def from_credentials: () -> Hash[String,untyped]

    @from_credentials: Hash[String,untyped]

    # All environment variable names whether or not they have a value.
    #
    # @return [Array<String>]
    #
    def known_keys: () -> strArray

    # Parse an entry from `ENV` into a typed value.
    #
    # @param [any] value
    #
    # @return [any]
    #
    def env_value
      :     (String value) -> (symHash | anyArray | Regexp | bool | Integer | Float | String)
      |     (Symbol value) -> untyped
      | [T] (T      value) -> T

    # Keys within a credentials group for AWS values mapped on to environment
    # variable names.
    #
    # @type [Hash{Symbol=>String}]
    #
    AWS_KEYS: Hash[Symbol,String]

    # Keys that may be included in `Rails.application.credentials.s3` mapped to
    # environment variable names.
    #
    # @type [Hash{Symbol=>String}]
    #
    S3_KEY_ENV: Hash[Symbol,String]

    # Keys that may be included in `Rails.application.credentials.bibliovault`
    # mapped to environment variable names.
    #
    # @type [Hash{Symbol=>String}]
    #
    BV_KEY_ENV: Hash[Symbol,String]

    # Mappings for groups of values from `Rails.application.credentials`.
    #
    # Most entries are an environment variable name and value, except for
    # hierarchical groupings of AWS credentials.
    #
    # @type [Hash{Symbol=>Hash{Symbol=>String}}]
    #
    CREDENTIAL_GROUPS: Hash[Symbol,Hash[Symbol,String]]

    # Get `Rails.application.credentials` entries.
    #
    # Most entries are an environment variable name and value, except for
    # hierarchical groupings of AWS credentials.  (Any other hierarchical
    # groupings are ignored if found.)
    #
    # @param [Boolean] output         If *false*, do not log ignored groups.
    # @param [Boolean] fatal          If *true*, fail on ignored groups.
    #
    # @return [Hash{String=>any}]
    #
    def get_credentials: (output: bool, fatal: false) -> Hash[String,untyped]

    # Get "en.emma.env_var" configuration entries.
    #
    # @return [Hash{String=>any}]
    #
    def get_yaml: () -> Hash[String,untyped]

    # Get `ENV` entries.
    #
    # @return [Hash{String=>String}]
    #
    def get_env: () -> Hash[String,String]
  end

  # Form an I18n path.
  #
  # @param [Array<String,Symbol,nil>] path
  #
  # @return [Symbol]
  #
  def config_key: (*(Symbol|String|nil) path) -> Symbol

  # Generate I18n paths.
  #
  # The first returned element should be used as the key for I18n#translate and
  # the remaining elements should be used passed as the :default option.
  #
  # @param [Array<String,Symbol,nil>, String, Symbol, nil] base
  # @param [Array<String,Symbol,nil>]                      path
  #
  # @return [Array<Symbol>]
  #
  def config_keys: ((Array[Symbol|String|nil]|Symbol|String|nil) base, *(Symbol|String|nil) path) -> symArray

  # Configuration sections under "en.emma.page" that may hold values for
  # *item*.
  #
  # The first returned element should be used as the key for I18n#translate and
  # the remaining elements should be used passed as the :default option.
  #
  # @param [Array<Symbol,String>] base
  # @param [Symbol, String, nil]  item
  # @param [Symbol, String]       root
  #
  # @return [Array<Symbol>]
  #
  def config_page_keys: (*(Symbol|String) base, (Symbol|String|nil) item, ?root: Symbol|String) -> symArray

  # Configuration sections that may hold message values for *item*.
  #
  # The first returned element should be used as the key for I18n#translate and
  # the remaining elements should be used passed as the :default option.
  #
  # @param [Array<Symbol,String>] base
  # @param [Symbol, String, nil]  item
  # @param [Symbol, String]       root
  #
  # @return [Array<Symbol>]
  #
  def config_term_keys: (*(Symbol|String) base, (Symbol|String|nil) item, ?root: Symbol|String) -> symArray

  # @private
  CONFIG_ITEM_OPT: symArray

  # @private
  I18N_OPT: symArray

  # The configuration entry specified by *key* or alternate *default*
  # locations.
  #
  # If *key* is an array, the first element is used as the I18n#translate key
  # and the remaining elements are passed as the :default option.
  #
  # @param [any]      key             I18n path(s) (Symbol, String, Array)
  # @param [any, nil] fallback        Returned if the item is not found.
  # @param [any, nil] default         Passed to I18n#translate.
  # @param [Hash]     opt             Passed to I18n#translate except:
  #
  # @option opt [Boolean] :cfg_fatal  Raise if the item is not found.
  # @option opt [Boolean] :cfg_warn   Log a warning if the item is not found.
  #
  # @return [any, nil]                Or the type of *fallback*.
  #
  def config_entry
    :     ((String|Symbol|Array[String|Symbol]) key, ?fallback: nil, ?default: String|Symbol|Array[String|Symbol]|nil, **untyped opt) -> (untyped | nil)
    | [T] ((String|Symbol|Array[String|Symbol]) key,  fallback: T,   ?default: String|Symbol|Array[String|Symbol]|nil, **untyped opt) -> (untyped | T | nil)

  # The configuration item path specified by *path*.
  #
  # @param [Array<String,Symbol,nil>] path
  # @param [Hash]                     opt   To #config_entry.
  #
  # @return [any, nil]
  #
  def config_item: (*(String|Symbol|nil) path, **untyped opt) -> (untyped | nil)

  # The configuration section path specified by *path*.
  #
  # @param [Array<String,Symbol,nil>] path
  # @param [Hash]                     opt   To #config_entry.
  #
  # @return [Hash]
  #
  def config_section: (*(String|Symbol|nil) path, **untyped opt) -> symHash

  #
  # @type [Array<String>]
  #
  YAML_BOOLEAN: strArray

  # @private
  YAML_KEY_FIX: Regexp

  # Adjust key values to match the actual keys in the configuration file.
  #
  # @param [Symbol, String] key
  #
  # @return [String]
  #
  def config_key_fix: (Symbol|String key) -> String

  # Ensure an absolute path through the configuration hierarchy.
  #
  # @param [Symbol, String] path
  # @param [Symbol, String] root
  #
  # @return [Symbol]
  #
  def config_path_fix
    : (String path, ?root: String|Symbol, **untyped _ignored) -> String
    | (Symbol path, ?root: String|Symbol, **untyped _ignored) -> Symbol

  # Get an item from configuration.
  #
  # @param [String, Symbol] key       I18n path.
  # @param [Symbol, String] root
  # @param [Hash]           opt       Passed to I18n#translate.
  #
  # @option opt [Boolean] :raise      Raise exception if item not found.
  #
  # @return [any, nil]
  #
  def config_entry_get: ((String|Symbol) key, ?root: Symbol|String, **untyped options) -> (untyped | nil)

  # Fetch a configuration item and raise an exception if not found.
  #
  # @param [Symbol, String]  key      I18n path.
  # @param [Array, any, nil] other    Alternate location(s)
  # @param [Hash]            opt      Passed to I18n#translate except:
  #
  # @option opt [Boolean] :cfg_fatal  If *false*, no raise if item not found.
  # @option opt [Boolean] :cfg_warn   If *false*, do not log a warning.
  #
  # @return [any, nil]
  #
  def config_entry_fetch: ((String|Symbol) key, ?(String|Symbol|Array[String|Symbol]|nil) other, **untyped opt) -> (untyped | nil)

  # Text value from the most specific match found for *item* within the
  # configuration location(s) specified by *base* under #config_term_keys.
  #
  # @param [Array<Symbol,String>] base
  # @param [Symbol, String]       item
  # @param [Hash]                 opt   To #config_entry.
  #
  # @return [String]
  #
  def config_term: (*(Symbol|String|nil) base, (Symbol|String) item, **untyped opt) -> String

  # Configuration text section built up from all of the matches found within
  # the configuration locations under #config_term_keys.
  #
  # If *opt* interpolation values are given they will be attempted on all
  # strings copied from the section.
  #
  # @param [Array<Symbol,String>] base
  # @param [Symbol, String]       item
  # @param [Hash]                 opt   To #config_section
  #
  # @return [Hash]
  #
  def config_term_section: (*(Symbol|String) base, (Symbol|String) item, **untyped opt) -> symHash

  # Value from the most specific match found for *item* within the
  # configuration location(s) specified by *base* under #config_page_keys.
  #
  # @param [Array<Symbol,String>] base
  # @param [Symbol, String]       item
  # @param [Hash]                 opt   To #config_entry.
  #
  # @return [any, nil]
  #
  def config_page: (*(Symbol|String) base, (Symbol|String) item, **untyped opt) -> (untyped | nil)

  # Configuration text section built up from all of the matches found within
  # the configuration locations under #config_page_keys.
  #
  # If *opt* interpolation values are given they will be attempted on all
  # strings copied from the section.
  #
  # @param [Array<Symbol,String>] base
  # @param [Symbol, String]       item
  # @param [Hash]                 opt   To #config_section
  #
  # @return [Hash]
  #
  def config_page_section: (*(Symbol|String) base, (Symbol|String) item, **untyped opt) -> symHash

  # Attempt to apply interpolations to all strings in *item*.
  #
  # @param [any, nil] item            Hash, Array, String
  # @param [Hash]     opt
  #
  # @return [any, nil]
  #
  def config_deep_interpolate: [T] (T item, **untyped opt) -> T

  # Return a description of differences between two values.
  #
  # @param [any, nil]       v1
  # @param [any, nil]       v2
  # @param [String, Symbol] n1
  # @param [String, Symbol] n2
  # @param [Boolean]        exact
  # @param [Boolean]        verbose
  #
  # @return [String, nil]
  #
  def cfg_diff: (untyped v1, untyped v2, ?n1: String|Symbol|nil, ?n2: String|Symbol|nil, ?exact: bool, ?verbose: bool, **untyped _ignored) -> (String | nil)

  # Render a value description for #cfg_diff.
  #
  # @param [any, nil] value
  # @param [Integer]  limit
  #
  # @return [String]
  #
  def cfg_inspect: (untyped value, ?limit: Integer) -> String

  # Included in custom exception variants.
  #
  module MissingTranslationBase
    include I18n::MissingTranslation::Base
    def initialize
      : (I18n::MissingTranslation::Base src) -> void
      | (String|Symbol key, *(String|Symbol) other, **untyped opt) -> void

    def message: () -> String

    def self.wrap
      :     (I18n::MissingTranslation     src) -> Configuration::MissingTranslation
      |     (I18n::MissingTranslationData src) -> Configuration::MissingTranslationData
      | [T] (T                            src) -> T
  end

  # Custom variant which redefines the exception message.
  #
  class MissingTranslation < I18n::MissingTranslation
    include MissingTranslationBase
  end

  # Custom variant which redefines the exception message.
  #
  class MissingTranslationData < I18n::MissingTranslationData
    include MissingTranslationBase
  end

  private

  def self.included: (Module base) -> void
end

class Object
  include Configuration
  extend  Configuration
end

# This holds appropriately-typed configuration values taken from `ENV`,
# `Rails.application.credentials`, or "en.emma.env_var" YAML configuration.
#
# @type [Configuration::EnvVar]
#
ENV_VAR: Configuration::EnvVar
