module Emma
end

class Object
  public

  # Require files via one or more "glob" patterns.
  #
  # @param [String] relative_to         Normally supplied as __FILE__
  # @param [Array<String>] patterns     One or more relative paths; each path may
  #                                       include "glob" patterns to specify
  #                                       multiple files.
  #
  # @return [void]
  #
  # @see Dir#glob
  #
  def require_files: (String relative_to, *String patterns) -> void

  # Require subdirectories via one or more "glob" patterns.
  #
  # @param [String] relative_to         Normally supplied as __FILE__
  # @param [Array<String>] patterns     One or more relative paths; each path may
  #                                       include "glob" patterns to specify
  #                                       multiple files.
  #
  # @return [void]
  #
  def require_subdirs: (String relative_to, *String patterns) -> void

  # Require the submodules for a file which are stored in the subdirectory with
  # the same base name.
  #
  # @param [String] filename            Normally supplied as __FILE__
  #
  # @return [void]
  #
  def require_submodules: (String filename) -> void

  # Require subclasses of the class defined by the current file which are in the
  # same namespace (and stored in the subdirectory with the same base name).
  #
  # @param [String] filename            Normally supplied as __FILE__
  #
  # @return [void]
  #
  def require_subclasses: (String filename) -> void

  public

  # Include submodules.
  #
  # @param [Class, Module] base         The class or module into which the
  #                                       submodules will be included.
  # @param [String, nil]   filename     If provided, first #require each file
  #                                       from the subdirectory with the same
  #                                       base name as *filename*.
  # @param [bool]          and_extend   If *true* then also extend *base* with
  #                                       the included modules.
  #
  # @return [Array<Module>]             The modules included into *base*.
  #
  # @yield [name, mod] Access the module before including in *base*.
  # @yieldparam [Symbol] name
  # @yieldparam [Module] mod
  # @yieldreturn [bool] if *false* the module will not be included.
  #
  def include_submodules: (Module base, ?(String|nil) filename, ?and_extend: bool) ?{ (Symbol, Module) -> bool } -> Array[Module]

  # Include and extend submodules.
  #
  def include_and_extend_submodules: (Module base, ?(String|nil) filename) ?{ (Symbol, Module) -> bool } -> Array[Module]

  # Get the named parameters of the given method.
  #
  # @param [Symbol meth
  # @param [Array<Symbol>] types
  #
  # @return [Array<Symbol>]
  #
  # == Usage Notes
  # In principle this should work in any context, but it's only been used for
  # the purpose of creating constants within module definitions.
  #
  def method_key_params: (Symbol meth, ?types: symArray) -> symArray
end
