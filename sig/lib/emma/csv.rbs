# CSV utilities.
#
module Emma::Csv
  include Emma::Common

  # Default CSV options used by #csv_parse.
  #
  # @type [Hash{Symbol=>*}]
  #
  # @see CSV#DEFAULT_OPTIONS
  #
  CSV_DEFAULTS: symHash

  # Generate data from CSV input.
  #
  # @param [String, IO, StringIO, IO::Like, nil] arg
  # @param [Boolean] no_raise         If *false*, re-raise exceptions.
  # @param [Boolean] no_empty         If *false*, allow data will all nils.
  # @param [Boolean] utf8
  # @param [Hash]    opt              Passed to CSV#parse.
  #
  # @return [Array<Hash>]
  # @return [nil]                     Only if *no_raise* is *true*.
  #
  # === Usage Notes
  # The argument is expected to either be the literal data or an object like an
  # IO or StringIO through which the data can be acquired.  To parse the
  # content located at a URI (web page or local file path) read the contents
  # first or pass in an open file handle.
  #
  # === Implementation Notes
  # This addresses an observed issue with CSV#parse not enforcing UTF-8
  # encoding.  NOTE: This might not be necessary any longer though.
  #
  def csv_parse
    : (nil                         arg, ?no_raise: bool, ?no_empty: bool, ?utf8: bool, **untyped opt) -> nil
    | (String|IO|StringIO|IO::Like arg, ?no_raise: bool, ?no_empty: bool, ?utf8: bool, **untyped opt) -> Array[anyHash]

  # force_utf8
  #
  # @param [String, Array, Hash, Any] item
  #
  # @return [String, Array, Hash, Any]  Replacement for *item*.
  #
  def force_utf8: [T] (T item) -> T

  private

  def self.included: (Module base) -> void
end
