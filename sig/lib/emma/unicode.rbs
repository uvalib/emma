# Unicode utilities.
#
module Emma::Unicode
  extend ::Emma::Unicode

  # A matcher for one or more symbol-like characters.
  #
  # @type [Regexp]
  #
  SYMBOLS: Regexp

  # Indicate whether the string contains only characters that fall outside the
  # normal text range.  Always `false` if *text* is not a string.
  #
  # @param [any, nil] text            String
  #
  def only_symbols?
    : (String  text) -> bool
    | (untyped text) -> false

  # Produce a single character.
  #
  # @param [String, Integer] v
  #
  # @return [String]
  #
  # @note Currently used only by #pad_char.
  #
  def char: ((String|Integer) v) -> String

  # Pad a character with thin spaces.
  #
  # @param [String, Integer]      v
  # @param [String, Integer, nil] pad     Default: #THIN_SPACE
  # @param [String, Integer, nil] left    Default: *pad*
  # @param [String, Integer, nil] right   Default: *l_pad*
  #
  # @return [String]
  #
  # @note Currently unused.
  #
  def pad_char: ((String|Integer) v, ?pad: String|Integer|nil, ?left: String|Integer|nil, ?right: String|Integer|nil) -> String

  EN_SPACE: String

  THIN_SPACE: String

  EN_DASH: String

  EM_DASH: String

  UP_TRIANGLE: String

  DELTA: String

  DOWN_TRIANGLE: String

  REVERSE_DELTA: String

  BLACK_CIRCLE: String

  BLACK_STAR: String

  WARNING_SIGN: String

  CHECK: String

  HEAVY_X: String

  ASTERISK: String

  QUESTION: String

  BANG: String

  HEAVY_PLUS: String

  HEAVY_MINUS: String

  RIGHT_ARROWHEAD: String

  OPEN_FILE_FOLDER: String

  SCROLL: String

  MAGNIFIER: String

  PEN: String

  DELIVERY_TRUCK: String

  private

  def self.included: (Module base) -> void
end
