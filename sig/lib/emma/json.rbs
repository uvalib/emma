# JSON utilities.
#
module Emma::Json
  include Emma::Common

  # Covert JSON into a Hash.
  #
  # @param [String, Hash, IO, StringIO, IO::Like, nil] arg
  # @param [Boolean] log           If *false*, do not log errors.
  # @param [Boolean] fatal         If *true*, re-raise exceptions.
  # @param [Hash]    opt           Passed to MultiJson#load.
  #
  # @raise [RuntimeError]          If *arg* does not resolve to Hash or String.
  # @raise [MultiJson::ParseError] If *arg* failed to parse and *fatal*.
  #
  # @return [nil]                  If *arg* failed to parse and not *fatal*.
  # @return [Hash]
  # @return [Array<Hash>]
  #
  # -
  # === Variations
  # +
  #
  # @overload json_parse(hash = nil, log: true, fatal: false, **)
  #   If *arg* is already a Hash, a copy of it is returned.
  #   @param [Hash, nil] hash
  #   @param [Boolean]   log
  #   @param [Boolean]   fatal
  #   @param [Hash]      opt
  #   @return [Hash, nil]
  #
  # @overload json_parse(json, log: true, fatal: false, **opt)
  #   If *arg* is a String it is assumed to be JSON format (although renderings
  #   of Ruby hashes are accommodated by converting "=>" to ":").
  #   @param [String]    json
  #   @param [Boolean]   log
  #   @param [Boolean]   fatal
  #   @param [Hash]      opt
  #   @return [Hash, Array<Hash>, nil]
  #
  # @overload json_parse(io, log: true, fatal: false, **opt)
  #   If *arg* is IO-like, its contents are read and parsed as JSON.
  #   @param [IO, StringIO, IO::Like] io
  #   @param [Boolean]                log
  #   @param [Boolean]                fatal
  #   @param [Hash]                   opt
  #   @return [Hash, Array<Hash>, nil]
  #
  # === Usage Notes
  # If opt[:symbolize_keys] is explicitly *false* then this causes all result
  # keys to be converted to strings.
  #
  def json_parse
    : (nil                         arg, ?log: bool, ?fatal: bool, **untyped opt) -> nil
    | (anyHash                     arg, ?log: bool, ?fatal: bool, **untyped opt) -> anyHash
    | (String|IO|StringIO|IO::Like arg, ?log: bool, ?fatal: bool, **untyped opt) -> (Array[anyHash] | anyHash | nil)

  # Attempt to interpret *arg* as JSON if it is a string.
  #
  # @param [*]    arg
  # @param [Any]  default             On parse failure, return this if provided
  #                                     (or return *arg* otherwise).
  # @param [Hash] opt                 Passed to #json_parse.
  #
  # @return [Hash, Array<Hash>, Any, nil]
  #
  def safe_json_parse
    :     (nil     arg, ?default: untyped|:original, **untyped opt) -> nil
    |     (anyHash arg, ?default: untyped|:original, **untyped opt) -> anyHash
    | [T] (T       arg, ?default: untyped|:original, **untyped opt) -> (Array[anyHash] | anyHash | T | nil)

  # json_render
  #
  # @param [String, Hash, IO, StringIO, IO::Like, nil] arg
  # @param [Boolean] align_values
  # @param [Boolean] ruby_keys        Remove surrounding quotes from keys.
  # @param [Boolean] fatal            If *true*, re-raise exceptions.
  #
  # @raise [MultiJson::ParseError]
  # @raise [RuntimeError]
  #
  # @return [String]
  #
  # @see #pretty_json
  #
  def json_render: (String|IO|StringIO|IO::Like|anyHash|nil arg, ?align_values: bool, ?ruby_keys: bool, ?fatal: bool) -> String

  # pretty_json
  #
  # @param [*]       arg
  # @param [Boolean] align_values
  # @param [Boolean] ruby_keys        Remove surrounding quotes from keys.
  # @param [Boolean] fatal            If *true*, re-raise exceptions.
  #
  # @raise [MultiJson::ParseError]
  # @raise [RuntimeError]
  #
  # @return [String]
  #
  # @see #json_parse
  #
  # === Usage Notes
  # An HTML element can show the lines as they are generated if it has style
  # "white-space: pre;".
  #
  def pretty_json: (untyped arg, ?align_values: bool, ?ruby_keys: bool, ?fatal: bool) -> String

  # Recreate a Hash from Hash#to_s output.
  #
  # @param [String] arg
  #
  # @return [Array<Hash>, Hash, nil]
  #
  def hash_parse
    : (nil     arg) -> nil
    | (anyHash arg) -> anyHash
    | (untyped arg) -> (Array[anyHash] | anyHash | nil)

  # Translate from Hash#to_s output to JSON.
  #
  # @param [*] arg
  #
  # @return [String]
  #
  def hash_inspect_to_json: (untyped arg) -> String

  # hash_render
  #
  # @param [String, Hash, IO, StringIO, IO::Like, nil] arg
  # @param [Boolean] fatal            If *true*, re-raise exceptions.
  # @param [Hash]    opt              Passed to #json_render.
  #
  # @raise [MultiJson::ParseError]
  # @raise [RuntimeError]
  #
  # @return [String]
  #
  # @see #json_render
  #
  def hash_render: (String|IO|StringIO|IO::Like|anyHash|nil arg, ?fatal: bool, **untyped opt) -> String

  private

  def self.included: (Module base) -> void
end
