# General access into "config/locales/**.yml" configuration information.
#
module Emma::Config
  include SystemExtension

  # The root of all I18n paths related to the project.
  #
  # @note Does not include locale.
  #
  # @type [String]
  #
  CONFIG_ROOT: String

  # All "en.emma.*" configuration values.
  class Data
    include Singleton

    # All "en.emma.*" configuration values.
    def self.all: () -> symHash

    # All "en.emma.*" configuration values.
    def all: () -> symHash

    @all: symHash

    def fetch_all: (?initialize: bool) -> (symHash | nil)

    # Recursively process a portion of a configuration hierarchy, in particular
    # ensuring that the values for '*_html' keys are made HTML-safe.
    #
    # @param [any, nil]     item
    # @param [Boolean, nil] html
    #
    # @return [any, nil]
    #
    def process: [T] (T item, ?(bool|nil) html) -> T
  end

  # All "en.emma.*" configuration values.
  #
  # @return [Hash]
  #
  def config_all: () -> symHash

  # Form an I18n path.
  #
  # @param [Array<String,Symbol,nil>] path
  #
  # @return [Symbol]
  #
  def config_key: (*(Symbol|String|nil) path) -> Symbol

  # Generate I18n paths.
  #
  # The first returned element should be used as the key for I18n#translate and
  # the remaining elements should be used passed as the :default option.
  #
  # @param [Array<String,Symbol,nil>, String, Symbol, nil] base
  # @param [Array<String,Symbol,nil>]                      path
  #
  # @return [Array<Symbol>]
  #
  def config_keys: ((Array[Symbol|String|nil]|Symbol|String|nil) base, *(Symbol|String|nil) path) -> symArray

  # Configuration sections that may hold message values for *item*.
  #
  # The first returned element should be used as the key for I18n#translate and
  # the remaining elements should be used passed as the :default option.
  #
  # @param [Array<Symbol>]  base
  # @param [Symbol, nil]    item
  # @param [Symbol, String] root
  #
  # @return [Array<Symbol>]
  #
  def config_text_keys: (*Symbol base, (Symbol|nil) item, ?root: Symbol|String) -> symArray

  # @private
  CONFIG_ITEM_OPT: symArray

  # @private
  I18N_OPT: symArray

  # The configuration entry specified by *key* or alternate *default*
  # locations.
  #
  # If *key* is an array, the first element is used as the I18n#translate key
  # and the remaining elements are passed as the :default option.
  #
  # @param [any]      key             I18n path(s) (Symbol, String, Array)
  # @param [any, nil] fallback        Returned if the item is not found.
  # @param [any, nil] default         Passed to I18n#translate.
  # @param [Hash]     opt             Passed to I18n#translate except:
  #
  # @option opt [Boolean] :cfg_fatal  Raise if the item is not found.
  # @option opt [Boolean] :cfg_warn   Log a warning if the item is not found.
  #
  # @return [any, nil]                Or the type of *fallback*.
  #
  def config_entry
    :     ((String|Symbol|Array[String|Symbol]) key, ?fallback: nil, ?default: String|Symbol|Array[String|Symbol]|nil, **untyped opt) -> (untyped | nil)
    | [T] ((String|Symbol|Array[String|Symbol]) key,  fallback: T,   ?default: String|Symbol|Array[String|Symbol]|nil, **untyped opt) -> (untyped | T | nil)

  # The configuration item path specified by *path*.
  #
  # @param [Array<String,Symbol>] path
  # @param [Hash]                 opt   To #config_entry.
  #
  # @return [any, nil]
  #
  def config_item: ((String|Symbol|Array[String|Symbol]) path, **untyped opt) -> (untyped | nil)

  # The configuration section path specified by *path*.
  #
  # @param [Array<String,Symbol>] path
  # @param [Hash]                 opt   To #config_entry.
  #
  # @return [Hash]
  #
  def config_section: ((String|Symbol|Array[String|Symbol]) path, **untyped opt) -> symHash

  #
  # @type [Array<String>]
  #
  YAML_BOOLEAN: strArray

  # @private
  YAML_KEY_FIX: Regexp

  # Adjust key values to match the actual keys in the configuration file.
  #
  # @param [Symbol, String] key
  #
  # @return [String]
  #
  def config_key_fix: (Symbol|String key) -> String

  # Ensure an absolute path through the configuration hierarchy.
  #
  # @param [Symbol, String] path
  # @param [Symbol, String] root
  #
  # @return [Symbol]
  #
  def config_path_fix
    : (String path, ?root: String|Symbol, **untyped _ignored) -> String
    | (Symbol path, ?root: String|Symbol, **untyped _ignored) -> Symbol

  # Get an item from configuration.
  #
  # @param [String, Symbol] key       I18n path.
  # @param [Symbol, String] root
  # @param [Hash]           opt       Passed to I18n#translate.
  #
  # @option opt [Boolean] :raise      Raise exception if item not found.
  #
  # @return [any, nil]
  #
  def config_entry_get: ((String|Symbol) key, ?root: Symbol|String, **untyped options) -> (untyped | nil)

  # Fetch a configuration item and raise an exception if not found.
  #
  # @param [Symbol, String]  key      I18n path.
  # @param [Array, any, nil] other    Alternate location(s)
  # @param [Hash]            opt      Passed to I18n#translate except:
  #
  # @option opt [Boolean] :cfg_fatal  If *false* do not raise if item not found
  # @option opt [Boolean] :cfg_warn   If *false* do not log a warning.
  #
  # @return [any, nil]
  #
  def config_entry_fetch: ((String|Symbol) key, ?(String|Symbol|Array[String|Symbol]|nil) other, **untyped opt) -> (untyped | nil)

  # Text value from the most specific match found for *item* within the
  # configuration location(s) specified by *base* under #config_text_keys.
  #
  # @param [Array<Symbol>] base
  # @param [Symbol]        item
  # @param [Hash]          opt        To #config_item.
  #
  # @return [String]
  #
  def config_text: (*Symbol base, Symbol item, **untyped opt) -> String

  # Configuration text section built up from all of the matches found within
  # the configuration locations under #config_text_keys.
  #
  # If *opt* interpolation values are given they will be attempted on all
  # strings copied from the section.
  #
  # @param [Array<Symbol>] base
  # @param [Symbol]        item
  # @param [Hash]          opt        Optional interpolation values except
  #                                     #CONFIG_ITEM_OPT to #config_section
  #
  # @return [Hash]
  #
  def config_text_section: (*Symbol base, Symbol item, **untyped opt) -> symHash

  # Attempt to apply interpolations to *item*.
  #
  # @param [any, nil] item            String
  # @param [Hash]     opt             Passed to #interpolate
  #
  # @return [String, any, nil]
  #
  def config_interpolate: [T] (T item, **untyped opt) -> T

  # Attempt to apply interpolations to all strings in *item*.
  #
  # @param [any, nil] item            Hash, Array, String
  # @param [Hash]     opt
  #
  # @return [any, nil]
  #
  def config_deep_interpolate: [T] (T item, **untyped opt) -> T

  # Included in custom exception variants.
  #
  module MissingTranslationBase
    include I18n::MissingTranslation::Base
    def initialize
      : (I18n::MissingTranslation::Base src) -> void
      | (String|Symbol key, *(String|Symbol) other, **untyped opt) -> void

    def message: () -> String

    def self.wrap
      :     (I18n::MissingTranslation     src) -> Emma::Config::MissingTranslation
      |     (I18n::MissingTranslationData src) -> Emma::Config::MissingTranslationData
      | [T] (T                            src) -> T
  end

  # Custom variant which redefines the exception message.
  #
  class MissingTranslation < I18n::MissingTranslation
    include MissingTranslationBase
  end

  # Custom variant which redefines the exception message.
  #
  class MissingTranslationData < I18n::MissingTranslationData
    include MissingTranslationBase
  end

  private

  def self.included: (Module base) -> void
end

class Object
  include Emma::Config
  extend  Emma::Config
end
