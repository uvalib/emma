module Emma::Common::ExceptionMethods
  # Exceptions which are more likely to indicate unexpected exceptions (i.e.,
  # programming problems) and not operational exceptions due to external API
  # failures.
  #
  # @type [Array<Class>] Sub-classes of Exception.
  #
  INTERNAL_EXCEPTION: Array[Class]

  private

  # This allows `self_class(nil)` to return NilClass.
  module SelfContext
  end

  public

  # Report on the class associated with "self".
  #
  # @param [*] this                   Default: self.
  #
  # @return [Class]
  #
  def self_class: (?untyped this) -> Class

  # Indicate whether *error* is an exception which matches or is derived from
  # one of the exceptions listed in #INTERNAL_EXCEPTION.
  #
  # @param [Exception, Any, nil] error
  #
  def internal_exception?: (untyped error) -> bool

  # Indicate whether *error* is an exception which is not (derived from) one of
  # the exceptions listed in #INTERNAL_EXCEPTION.
  #
  # @param [Exception, Any, nil] error
  #
  def operational_exception?: (untyped error) -> bool

  # Re-raise an exception which indicates a likely programming error.
  #
  # @param [Exception, Any, nil] error
  #
  # @return [nil]
  #
  # == Usage Notes
  # The re-raise will happen only when running on the desktop.
  #
  def re_raise_if_internal_exception: (untyped error) -> nil

  # Raise NotImplementedError.
  #
  # @param [String, nil] message      Additional description.
  # @param [Symbol, nil] meth         Calling method to prepend to message.
  #
  # @raise [NotImplementedError]
  #
  def not_implemented: (?(String|nil) message, ?meth: Symbol|nil) -> void
end
