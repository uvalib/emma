module Emma::Common::UrlMethods
  extend ::Emma::Common::UrlMethods

  # Fully URL-encode (including transforming '.' to '%2E') without escaping a
  # string which is already escaped.
  #
  # @param [String] s
  #
  # @return [String]
  #
  def url_escape: (String s) -> String

  # Generate a URL or partial path.
  #
  # The result will have query parameters in sorted order.  Query parameters
  # are assumed to have the form "key=value" with the exception of the first
  # parameter after the '?' -- this is a concession to Bookshare URLs like
  # "myReadingLists/(id)?delete".
  #
  # @param [Array<*>] args            URL path components.
  # @param [Hash]     opt             Passed as #url_query options.
  #
  # @return [String]
  #
  def make_path: (*untyped args, **untyped opt) -> String

  # Combine URL query parameters into a URL query string.
  #
  # @param [Array<URI,String,Array,Hash>] args
  # @param [Hash]                         opt   Passed to #extract_url_query.
  #
  # @option opt [Boolean] :decorate   If *false*, do not modify keys for multi-
  #                                     element array values (default: *true*).
  #
  # @option opt [Boolean] :unescape   If *true*, unescape values
  #                                     (default: *false*).
  #
  # @return [String]
  #
  def url_query: (*untyped args, **untyped opt) -> String

  # Transform URL query parameters into a hash.
  #
  # @param [Array<URI,String,Array,Hash>] args
  # @param [Boolean] minimize         If *false*, do not reduce single-element
  #                                     array values to scalars (def: *true*).
  # @param [Boolean] decorate         If *true*, modify keys for multi-element
  #                                     array values (default: *false*).
  # @param [Boolean] replace          If *true*, subsequence key values replace
  #                                     previous ones; if *false* then values
  #                                     accumulated as arrays (def: *false*).
  # @param [Boolean] unescape         If *false*, do not unescape values.
  # @param [Hash]    opt              Included in *args* if present.
  #
  # @return [Hash{String=>String}]
  #
  def extract_url_query: (*untyped args, ?minimize: bool, ?decorate: bool, ?replace: bool, ?unescape: bool, **untyped opt) -> Hash[String,String]
end
