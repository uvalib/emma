module Emma::Common::MethodMethods
  extend ::Emma::Common::MethodMethods

  # @private
  # @type [Regexp]
  BLOCK_RESCUE_RE: Regexp

  # Return the name of the calling method.
  #
  # NOTE: Callers expect only the method name and not something of the form
  #   "class#method" (as produced by Ruby 3.4+).
  #
  # @param [Array<String>, Integer, nil] call_stack
  #
  # @return [Symbol, nil]
  #
  # -
  # === Variations
  # +
  #
  # @overload calling_method()
  #   Using *call_stack* defaulting to `#caller(2)`.
  #   @return [Symbol]
  #
  # @overload calling_method(call_stack)
  #   @param [Array<String>] call_stack
  #   @return [Symbol]
  #
  # @overload calling_method(depth)
  #   @param [Integer] depth              Call stack depth (default: 2)
  #   @return [Symbol]
  #
  def calling_method: (?(Integer|strArray|nil) call_stack) -> (Symbol | nil)

  # Return the indicated method.  If *meth* is something other than a Symbol or
  # a Method then *nil* is returned.
  #
  # @param [any, nil] meth            Symbol, Method
  # @param [any, nil] bind            Binding
  #
  # @return [Method, nil]
  #
  # -
  # === Variations
  # +
  #
  # @overload get_method(meth, bind, *)
  #   @param [Symbol]  meth
  #   @param [Binding] bind
  #   @return [Method, nil]
  #
  # @overload get_method(bind, *)
  #   @param [Binding] bind
  #   @return [Method, nil]
  #
  # @overload get_method(meth, *)
  #   @param [Method] meth
  #   @return [Method]
  #
  def get_method
    : (Method   meth, ?untyped bind, **untyped _ignored) -> Method
    | (?untyped meth,  Binding bind, **untyped _ignored) -> (Method | nil)

  # Return a table of a method's parameters and their values given a Binding
  # from that method invocation.
  #
  # @param [any, nil]              meth   Symbol, Method
  # @param [any, nil]              bind   Binding
  # @param [Symbol, Array<Symbol>] only
  # @param [Symbol, Array<Symbol>] except
  #
  # @return [Hash{Symbol=>any}]
  #
  # -
  # === Variations
  # +
  #
  # @overload get_params(meth, bind, only: [], except: [], **)
  #   @param [Symbol, Method]        meth
  #   @param [Binding]               bind
  #   @param [Symbol, Array<Symbol>] only
  #   @param [Symbol, Array<Symbol>] except
  #   @return [Hash{Symbol=>any}]
  #
  # @overload get_params(bind, only: [], except: [], **)
  #   @param [Binding]               bind
  #   @param [Symbol, Array<Symbol>] only
  #   @param [Symbol, Array<Symbol>] except
  #   @return [Hash{Symbol=>any}]
  #
  def get_params
    : ((Symbol|Method) meth, Binding bind, *untyped _ignored, ?only: Symbol|symArray, ?except: Symbol|symArray, **untyped _ignored) -> symHash
    | (                      Binding bind, *untyped _ignored, ?only: Symbol|symArray, ?except: Symbol|symArray, **untyped _ignored) -> symHash
end
