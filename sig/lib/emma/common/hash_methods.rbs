module Emma::Common::HashMethods
  # Strip off the hash elements identified by *keys* to return two hashes:
  # - First, a hash containing only the requested option keys and values.
  # - Second, a copy of the original *hash* without the those keys/values.
  #
  # @param [ActionController::Parameters, Hash, nil] hash
  # @param [Array<Symbol>]                           keys
  #
  # @return [Array<(Hash, Hash)>]            Matching hash followed by remainder hash.
  #
  # -
  # noinspection RubyNilAnalysis
  # +
  def partition_hash: (prmHash? hash, *Symbol keys) { () -> untyped } -> [symHash, symHash]

  def remainder_hash!: (prmHash? hash, *Symbol keys) { () -> untyped } -> symHash

  # Extract the elements identified by *keys* from *hash*.
  #
  # @param [ActionController::Parameters, Hash, nil] hash
  # @param [Array<Symbol>]                           keys
  #
  # @return [Hash]                    The elements removed from *hash*.
  #
  def extract_hash!: (prmHash? hash, *Symbol keys) { () -> untyped } -> symHash

  alias partition_hash! extract_hash!

  def gather_keys: (*Symbol) { () -> (Symbol|String|Array[Symbol|String]) } -> symArray

  def normalize_hash: (prmHash? item) -> symHash

  def normalize_hash!: (prmHash? item) -> symHash

  def sort: (anyHash hash) -> anyHash

  def sort!: (anyHash hash) -> anyHash

  def sort_by: (anyHash hash) { () -> untyped } -> anyHash

  def sort_by!: (anyHash hash) { () -> untyped } -> anyHash

  # Recursively remove blank items from a hash.
  #
  # @param [Hash, nil] item
  # @param [Boolean]   squeeze        If *true* transform arrays with a single
  #                                     element into scalars.
  # @param [Boolean]   dup            Ensure that the result is completely
  #                                     disentangled with the original.
  #
  # @return [Hash]
  #
  # @see #_remove_blanks
  #
  def reject_blanks: (anyHash|nil item, ?squeeze: bool, ?dup: bool) -> anyHash

  # Recursively remove blank items from an object.
  #
  # @param [Hash, Array, Any] item
  # @param [Boolean]          squeeze   If *true* transform arrays with a
  #                                       single element into scalars.
  # @param [Boolean]          dup       Ensure that the result is completely
  #                                       disentangled with the original.
  #
  # @return [Hash, Array, Any, nil]
  #
  #--
  # == Variations
  #++
  #
  # @overload _remove_blanks(item)
  #   @param [NilClass,Boolean,Numeric,Symbol,Method,Proc,Module] item
  #   @param [Boolean] squeeze        Ignored
  #   @param [Boolean] dup            Ignored
  #   @return [NilClass,Boolean,Numeric,Symbol,Method,Proc,Module]
  #
  # @overload _remove_blanks(item, dup: bool)
  #   @param [String]  item
  #   @param [Boolean] squeeze        Ignored
  #   @param [Boolean] dup
  #   @return [String, nil]
  #
  # @overload _remove_blanks(hash, squeeze: bool, dup: bool)
  #   @param [Hash]    hash
  #   @param [Boolean] squeeze
  #   @param [Boolean] dup
  #   @return [Hash, nil]
  #
  # @overload _remove_blanks(array, squeeze: bool, dup: bool)
  #   @param [Array]   array
  #   @param [Boolean] squeeze
  #   @param [Boolean] dup
  #   @return [Array, nil]
  #
  # @overload _remove_blanks(item)
  #   @param [Any]     item
  #   @param [Boolean] squeeze        Ignored
  #   @param [Boolean] dup
  #   @return [Any, nil]
  #
  # == Usage Notes
  # * Empty strings and nils are considered blank, however an item or element
  #   with the explicit value of *false* is not considered blank.
  # * The *dup* option does not apply to items with type Proc or Module because
  #   this could lead to unexpected results, especially if the item is a class.
  #   E.g.:
  #   ```
  #     a = { c: User }
  #     b = a.deep_dup
  #     (a[:c] != b[:c])        # Different classes with the same attributes...
  #     !(b[:c] <= a[:c])       # ... which are completely unrelated.
  #     a[:c].new.is_a?(User)
  #     !b[:c].new.is_a?(User)
  #   ```
  #
  def _remove_blanks: (anyArray array,  squeeze: true, ?dup: bool) -> (anyArray | untyped | nil)
                    | (nil      item,  ?squeeze: bool, ?dup: bool) -> nil
                    | (bool     item,  ?squeeze: bool, ?dup: bool) -> bool
                    | (Symbol   item,  ?squeeze: bool, ?dup: bool) -> Symbol
                    | (Numeric  item,  ?squeeze: bool, ?dup: bool) -> Numeric
                    | (Proc     item,  ?squeeze: bool, ?dup: bool) -> Proc
                    | (Method   item,  ?squeeze: bool, ?dup: bool) -> Method
                    | (Module   item,  ?squeeze: bool, ?dup: bool) -> Module
                    | (String   item,  ?squeeze: bool, ?dup: bool) -> (String   | nil)
                    | (anyHash  hash,  ?squeeze: bool, ?dup: bool) -> (anyHash  | nil)
                    | (anyArray array, ?squeeze: bool, ?dup: bool) -> (anyArray | nil)
                    | (untyped  item,  ?squeeze: bool, ?dup: bool) -> (untyped  | nil)
end
