module Emma::Common::HashMethods
  extend ::Emma::Common::HashMethods

  # Analyze Hash extensions behavior.
  #
  # @type [Boolean]
  #
  DEBUG_HASH: bool

  # Strip off the hash elements identified by *keys* to return two hashes:
  # - First, a hash containing only the requested option keys and values.
  # - Second, a copy of the original *hash* without the those keys/values.
  #
  # @param [ActionController::Parameters, Hash, nil] hash
  # @param [Array<Symbol,String,Array,nil>]          keys
  #
  # @return [Array<(Hash, Hash)>]     Matching hash followed by remainder hash.
  #
  def partition_hash: ((prmHash|nil) hash, *(Symbol|String|Array[Symbol|String]|nil) keys) -> [symHash, symHash]

  # normalize_hash
  #
  # @param [ActionController::Parameters, Hash, nil] item
  # @param [Boolean]                                 debug
  #
  # @return [Hash{Symbol=>any,nil}]   A new normalized Hash.
  #
  def normalize_hash: ((prmHash|nil) item, ?debug: bool) -> symHash

  # normalize_hash
  #
  # @param [ActionController::Parameters, Hash, nil] item
  #
  # @return [Hash{Symbol=>any,nil}]   Modified item itself if *item* is a Hash.
  #
  # @note Currently unused.
  #
  def normalize_hash!: ((prmHash|nil) item) -> symHash

  # Sort a hash.
  #
  # @param [Hash] hash
  #
  # @return [Hash]
  #
  def sort: (anyHash hash) -> anyHash

  # Sort a hash in-place.
  #
  # @param [Hash] hash
  #
  # @return [Hash]
  #
  def sort!: (anyHash hash) -> anyHash

  # Sort a hash.
  #
  # @param [Hash] hash
  # @param [Proc] blk
  #
  # @return [Hash]
  #
  def sort_by: (anyHash hash) { () -> untyped } -> anyHash

  # Sort a hash in-place.
  #
  # @param [Hash] hash
  # @param [Proc] blk
  #
  # @return [Hash]
  #
  def sort_by!: (anyHash hash) { () -> untyped } -> anyHash

  # Recursively remove blank items from a copy of a hash.
  #
  # @param [any, nil] item            Hash
  # @param [Boolean]  squeeze         If *true* transform arrays with a single
  #                                     element into scalars.
  # @param [Boolean]  dup             Ensure that the result is completely
  #                                     disentangled with the original.
  #
  # @return [Hash]                    A copy of *item*, possibly modified.
  #
  # @see #_remove_blanks
  #
  def reject_blanks
    : (symHash item, ?squeeze: bool, ?dup: bool, **untyped _ignored) -> symHash
    | (anyHash item, ?squeeze: bool, ?dup: bool, **untyped _ignored) -> anyHash
    | (any|nil item, ?squeeze: bool, ?dup: bool, **untyped _ignored) -> anyHash

  # Recursively remove blank items from a hash.
  #
  # @param [any, nil] item            Hash
  # @param [Boolean]  squeeze         If *true* transform arrays with a single
  #                                     element into scalars.
  #
  # @return [Hash]                    *item*, possibly modified.
  #
  # @see #_remove_blanks!
  #
  def reject_blanks!
    : (symHash item, ?squeeze: bool, **untyped _ignored) -> symHash
    | (anyHash item, ?squeeze: bool, **untyped _ignored) -> anyHash
    | (any|nil item, ?squeeze: bool, **untyped _ignored) -> anyHash

  # Recursively remove blank items from an object copy.
  #
  # @param [any, nil] item            Hash, Array
  # @param [Boolean]  squeeze         If *true* transform arrays with a single
  #                                     element into scalars.
  # @param [Boolean]  dup             Ensure that the result is completely
  #                                     disentangled with the original.
  #
  # @return [any, nil]
  #
  # === Usage Notes
  # * Empty strings and nils are considered blank, however an item or element
  #   with the explicit value of *false* is not considered blank.
  # * The *dup* option does not apply to items with type Proc or Module because
  #   this could lead to unexpected results, especially if the item is a class.
  #   E.g.:
  #   ```
  #     a = { c: User }
  #     b = a.deep_dup
  #     (a[:c] != b[:c])        # Different classes with the same attributes...
  #     !(b[:c] <= a[:c])       # ... which are completely unrelated.
  #     a[:c].new.is_a?(User)
  #     !b[:c].new.is_a?(User)
  #   ```
  #
  def _remove_blanks
    :     (anyArray item,  squeeze: true,  ?dup: bool) -> (anyArray | untyped | nil)
    |     (anyArray item, ?squeeze: false, ?dup: bool) -> anyArray?
    |     (anyHash  item, ?squeeze: bool,  ?dup: bool) -> anyHash?
    |     (nil      item, ?squeeze: bool,  ?dup: bool) -> nil
    |     (bool     item, ?squeeze: bool,  ?dup: bool) -> bool
    |     (Method   item, ?squeeze: bool,  ?dup: bool) -> Method
    |     (Module   item, ?squeeze: bool,  ?dup: bool) -> Module
    |     (Numeric  item, ?squeeze: bool,  ?dup: bool) -> Numeric
    |     (Proc     item, ?squeeze: bool,  ?dup: bool) -> Proc
    |     (Symbol   item, ?squeeze: bool,  ?dup: bool) -> Symbol
    | [T] (T        item, ?squeeze: bool,  ?dup: bool) -> T?

  # Recursively remove blank items from an object.
  #
  # @param [any, nil] item            Hash, Array
  # @param [Boolean]  squeeze         If *true* transform arrays with a single
  #                                     element into scalars.
  # @param [Boolean]  nil_hash        *true* except at the top-level.
  #
  # @return [any, nil]
  #
  # === Usage Notes
  # * Empty strings and nils are considered blank, however an item or element
  #   with the explicit value of *false* is not considered blank.
  # * The *nil_hash* option is *false* at the top-level since the *item* being
  #   modified must continue to exist.
  #
  def _remove_blanks!
    :     (anyArray item,  squeeze: true,  ?nil_hash: bool)  -> (anyArray | untyped | nil)
    |     (anyArray item, ?squeeze: false, ?nil_hash: bool)  -> anyArray?
    |     (anyHash  item, ?squeeze: bool,   nil_hash: true)  -> anyHash?
    |     (anyHash  item, ?squeeze: bool,  ?nil_hash: false) -> anyHash
    |     (nil      item, ?squeeze: bool,  ?nil_hash: bool)  -> nil
    |     (bool     item, ?squeeze: bool,  ?nil_hash: bool)  -> bool
    |     (Method   item, ?squeeze: bool,  ?nil_hash: bool)  -> Method
    |     (Module   item, ?squeeze: bool,  ?nil_hash: bool)  -> Module
    |     (Numeric  item, ?squeeze: bool,  ?nil_hash: bool)  -> Numeric
    |     (Proc     item, ?squeeze: bool,  ?nil_hash: bool)  -> Proc
    |     (Symbol   item, ?squeeze: bool,  ?nil_hash: bool)  -> Symbol
    | [T] (T        item, ?squeeze: bool,  ?nil_hash: bool)  -> T?
end
