module Emma::Common::FormatMethods
  extend ::Emma::Common::FormatMethods

  # @type [Array<Symbol>]
  INFLECT_SINGULAR: symArray

  # @type [Array<Symbol>]
  INFLECT_PLURAL: symArray

  # Pluralize or singularize *text*.  If neither *inflection* nor *count* is
  # specified then a copy of the original string is returned.
  #
  # @param [ActiveSupport::SafeBuffer, String] text
  # @param [Integer, nil]                      count
  # @param [Symbol, nil]                       inflect
  #
  # @return [ActiveSupport::SafeBuffer, String]
  #
  def inflection
    : (ActiveSupport::SafeBuffer text, ?(Integer|nil) count, ?(Symbol|nil) inflect) -> ActiveSupport::SafeBuffer
    | (String text,                    ?(Integer|nil) count, ?(Symbol|nil) inflect) -> String

  # Render text that will not break on word boundaries.
  #
  # @param [String, nil] text
  # @param [Boolean]     force        If *true* then the translation will
  #                                     happen even if text.html_safe?.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def non_breaking: (String? text, ?force: bool) -> ActiveSupport::SafeBuffer

  # Render a camel-case or snake-case string as in "title case" words separated
  # by non-breakable spaces.
  #
  # If *text* is already HTML-ready it is returned directly.
  #
  # @param [String, Symbol, nil]  text
  # @param [Integer, nil]         count       To #inflection if present.
  # @param [Boolean]              breakable   If *false* replace spaces with
  #                                             '&nbsp;' so that the result is
  #                                             not word-breakable.
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def labelize: ((String|Symbol|nil) text, ?count: Integer|nil, ?breakable: bool, **untyped _ignored) -> ActiveSupport::SafeBuffer

  # @type [Array<String>]
  QUOTE_MARKS: strArray

  # @type [Array<ActiveSupport::SafeBuffer>]
  HTML_QUOTES: Array[ActiveSupport::SafeBuffer]

  # Add surrounding quotation marks to a term.
  #
  # If the term is already quoted, those quotation marks are preserved.
  #
  # @param [any, nil] term
  # @param [String]   q_char
  # @param [String]   separator
  #
  # @return [ActiveSupport::SafeBuffer, String]
  #
  # -
  # === Variations
  # +
  #
  # @overload quote(terms, q_char: '"', separator: ', ')
  #   @param [Array<ActiveSupport::SafeBuffer>] terms
  #   @param [String]                           q_char
  #   @param [String]                           separator
  #   @return [ActiveSupport::SafeBuffer]
  #
  # @overload quote(term, q_char: '"', separator: ', ')
  #   @param [ActiveSupport::SafeBuffer] term
  #   @param [String]                    q_char
  #   @param [String]                    separator
  #   @return [ActiveSupport::SafeBuffer]
  #
  # @overload quote(terms, q_char: '"', separator: ', ')
  #   @param [Array]  terms
  #   @param [String] q_char
  #   @param [String] separator
  #   @return [String]
  #
  # @overload quote(term, q_char: '"', separator: ', ')
  #   @param [any, nil] term
  #   @param [String]   q_char
  #   @param [String]   separator
  #   @return [String]
  #
  def quote
    : (ActiveSupport::SafeBuffer|Array[ActiveSupport::SafeBuffer] terms, ?q_char: String, ?separator: String) -> ActiveSupport::SafeBuffer
    | (untyped                                                    terms, ?q_char: String, ?separator: String) -> String

  # Remove pairs of surrounding quotation marks from a term.
  #
  # @param [any, nil] term
  # @param [String]   separator
  #
  # @return [ActiveSupport::SafeBuffer, String]
  #
  # -
  # === Variations
  # +
  #
  # @overload strip_quotes(terms, separator: ', ')
  #   @param [Array<ActiveSupport::SafeBuffer>] terms
  #   @param [String]                           separator
  #   @return [ActiveSupport::SafeBuffer]
  #
  # @overload strip_quotes(term,separator: ', ')
  #   @param [ActiveSupport::SafeBuffer] term
  #   @param [String]                    separator
  #   @return [ActiveSupport::SafeBuffer]
  #
  # @overload strip_quotes(terms, separator: ', ')
  #   @param [Array]  terms
  #   @param [String] separator
  #   @return [String]
  #
  # @overload strip_quotes(term, separator: ', ')
  #   @param [any, nil] term
  #   @param [String]   separator
  #   @return [String]
  #
  def strip_quotes
    : (ActiveSupport::SafeBuffer|Array[ActiveSupport::SafeBuffer] terms, ?separator: String) -> ActiveSupport::SafeBuffer
    | (untyped                                                    terms, ?separator: String) -> String

  # Match a named reference like "%{name}" for a #sprintf argument.
  #
  # $1 = [String] name
  #
  # @type [Regexp]
  #
  SIMPLE_NAMED_REFERENCE: Regexp

  # Match a formatted named reference like "%<name>s" for a #sprintf argument.
  #
  # $1 = [String] name
  #
  # @type [Regexp]
  #
  FORMAT_NAMED_REF_BASE: Regexp

  # @private
  # @type [Array<Regexp>]
  NAMED_REFERENCES: Array[Regexp]

  # Extract the named references in a format string.
  #
  # @param [any, nil]              text   String with #sprintf formatting.
  # @param [Array<Regexp>, Regexp] match  Default: #NAMED_REFERENCES
  #
  # @return [Array<Symbol>]
  #
  # @see Kernel#sprintf
  #
  def named_references: (untyped text, ?match: Array[Regexp]|Regexp|nil) -> symArray

  # Match the format portion of a named reference like "%<name>".
  #
  # $1 = [String, nil] flags
  # $2 = [String, nil] width
  # $3 = [String, nil] precision
  # $4 = [String]      format type
  #
  # @type [Regexp]
  #
  FORMAT_MATCH: Regexp

  # Match a named reference like "%<name>" along with its format.
  #
  # $1 = [String]      name
  # $2 = [String, nil] flags
  # $3 = [String, nil] width
  # $4 = [String, nil] precision
  # $5 = [String]      format type
  #
  # @type [Regexp]
  #
  FORMAT_NAMED_REFERENCE: Regexp

  # Match a named reference "%{name}" or "%<name>" along with its format.
  #
  # $1 = [String]      name           String for "%{name}"; nil for "%<name>".
  # $2 = [String]      name           String for "%<name>"; nil for "%{name}".
  # $3 = [String, nil] flags          Always nil for "%{name}".
  # $4 = [String, nil] width          Always nil for "%{name}".
  # $5 = [String, nil] precision      Always nil for "%{name}".
  # $6 = [String, nil] format type    String for "%<name>"; nil for "%{name}".
  #
  # @type [Regexp]
  #
  NAMED_REFERENCE: Regexp

  # Extract the named references in a format string and pair them with their
  # respective sprintf formats.  Each "%{name}" reference is paired with *nil*;
  # each "%<name>" reference is paired with the format which follows it.
  #
  # @param [any, nil] text            String with #sprintf formatting.
  #
  # @return [Hash{Symbol=>String,nil}]
  #
  def named_references_and_formats: (untyped text) -> Hash[Symbol,(String|nil)]

  # Matches the given named reference appearing in a string as "%{name}".
  # Named references of the form "%<name>" will not be matched.
  #
  # @param [String|Symbol] var
  #
  # @return [Regexp]
  #
  def match_simple_named_ref: (String|Symbol var) -> Regexp

  # Matches the given named reference appearing in a string as "%<name>...".
  # Named references of the form "%{name}" will not be matched.
  #
  # @param [String|Symbol] var
  #
  # @return [Regexp]
  #
  def match_format_named_ref: (String|Symbol var) -> Regexp

  # Matches the given named reference appearing in a string as either "%{name}"
  # or "%<name>...".
  #
  # @param [String|Symbol] var
  #
  # @return [Regexp]
  #
  def named_reference_matcher: (String|Symbol var) -> Regexp

  # Used by #indefinite_article to find the first substring after "%{an}" or
  # "%<an>" in order to determine whether the subject starts with a vowel.
  #
  # @type [Regexp]
  #
  NAMED_REF_AN: Regexp

  # Return the appropriate article ('a' or 'an') for the given word or phrase.
  #
  # If *term* contains "%{an}" or "%<an>...", the substring following it is
  # used to determine whether the subject starts with a vowel.
  #
  # @param [String] term
  #
  # @return [String]
  #
  def indefinite_article: (String term) -> String

  # Attempt to apply interpolations to all strings in *item*.
  #
  # @param [any, nil] item            Hash, Array, String
  # @param [Hash]     opt
  #
  # @return [any, nil]
  #
  def deep_interpolate: [T] (T item, **untyped opt) -> T

  # If possible, make a copy of *text* with #sprintf named references replaced
  # by the matching values extracted from *src* or *opt*.  Otherwise, return
  # *text* unchanged.
  #
  # If the name is capitalized or all uppercase (e.g. "%{Name}" or "%{NAME}")
  # then the interpolated value will follow the same case.
  #
  # @param [any, nil] text           String
  # @param [Array<Hash,Model,*>] src
  # @param [Hash]                opt
  #
  # @return [String]                  A modified copy of *text*.
  # @return [nil]                     If no interpolations could be made.
  #
  # === Usage Notes
  # If *text* contains a mix of named references and unnamed specifiers, the
  # assumption is that it will be processed in two passes -- first (by this
  # method) with a hash of values matching the named references generating an
  # intermediate string, then (by the caller) a second pass on that result to
  # supply values for the unnamed specifiers.
  #
  def interpolate
    : (ActiveSupport::SafeBuffer text, *untyped src, **untyped opt) -> ActiveSupport::SafeBuffer
    | (untyped                   text, *untyped src, **untyped opt) -> String

  # If possible, make a copy of *text* with #sprintf named references replaced
  # by the matching values extracted from *src* or *opt*.
  #
  # @param [any, nil]            text
  # @param [Array<Hash,Model,*>] src
  # @param [Hash]                opt
  #
  # @return [String]                  A modified copy of *text*.
  # @return [nil]                     If no interpolations could be made.
  #
  def interpolate!
    : (ActiveSupport::SafeBuffer text, *untyped src, **untyped opt) -> (ActiveSupport::SafeBuffer | nil)
    | (untyped                   text, *untyped src, **untyped opt) -> (String | nil)
end
