module Emma::Extension
  # Common definitions for extended logging of gem overrides.
  #
  module Debugging
    module Methods
      include Emma::Debug::OutputMethods

      include Emma::Time

      EXT_LOG_SEPARATOR: String

      EXT_LOG_LEADER: String

      # Debug method for the including class.
      #
      # @param [Array]       args
      # @param [String, nil] leader     Default: `#__ext_log_leader`.
      # @param [String, nil] tag        Default: `#__ext_log_tag`.
      # @param [String, nil] separator  Default: `#EXT_LOG_SEPARATOR`.
      # @param [Hash]        opt        Appended to *args* if present.
      #
      # @return [nil]
      #
      # @yield Generate additional parts.
      # @yieldreturn [Array, Any] Appended to *args*.
      #
      # -
      # == Variations
      # +
      #
      # @overload __ext_log(meth, *args, leader: nil, tag: nil, separator: nil, &block)
      #   Specify calling method.
      #   @param [Symbol]      meth
      #   @param [Array]       args
      #   @param [String, nil] leader
      #   @param [String, nil] tag
      #   @param [String, nil] separator
      #   @param [Hash]        opt
      #   @return [nil]
      #
      # @overload __ext_log(*args, leader: nil, tag: nil, separator: nil, &block)
      #   Calling method defaults to `#calling_method`.
      #   @param [Array]       args
      #   @param [String, nil] leader
      #   @param [String, nil] tag
      #   @param [String, nil] separator
      #   @param [Hash]        opt
      #   @return [nil]
      #
      def __ext_log: (Symbol meth, *untyped args, ?leader: String|nil, ?tag: String|nil, ?separator: String|nil, **untyped opt) ?{ () -> untyped } -> nil
                   | (             *untyped args, ?leader: String|nil, ?tag: String|nil, ?separator: String|nil, **untyped opt) ?{ () -> untyped } -> nil

      # Debug method for the including class.
      #
      # @param [Array] args
      # @param [Hash]  opt            Passed to #__debug_items.
      # @param [Proc]  block          Passed to #__debug_items.
      #
      # @option opt [String, nil] :leader     Default: `#__ext_log_leader`.
      # @option opt [String, nil] :tag        Default: `#__ext_log_tag`.
      # @option opt [String]      :separator  Default: `#EXT_LOG_SEPARATOR`.
      #
      # @return [nil]
      #
      # -
      # == Variations
      # +
      #
      # @overload __ext_debug(meth, *args, tag:, **opt, &block)
      #   Specify calling method.
      #   @param [Symbol] meth
      #   @param [Array]  args
      #   @param [Hash]   opt
      #   @param [Proc]   block
      #   @return [nil]
      #
      # @overload __ext_debug(*args, tag:, &block)
      #   Calling method defaults to `#calling_method`.
      #   @param [Array]  args
      #   @param [Hash]   opt
      #   @param [Proc]   block
      #   @return [nil]
      #
      def __ext_debug: (Symbol meth, *untyped args, **untyped opt) ?{ () -> untyped } -> nil
                     | (             *untyped args, **untyped opt) ?{ () -> untyped } -> nil

      # Log output tag for the extended gem.
      #
      # @param [String, nil] tag      Default: 'EXT'.
      #
      # @return [String]
      #
      def __ext_log_leader: (?(String|nil) tag) -> String

      # Log output tag for the including class.
      #
      # @return [String]
      #
      def __ext_log_tag: () -> String

      # Name of the including class.
      #
      # @return [String]
      #
      def __ext_class: () -> String
    end

    private

    def self.included: (Module base) -> void
  end

  # Include to provide stubs for the methods defined in Debugging.
  #
  module NoDebugging
    module Methods
      include Debugging::Methods
    end

    private

    def self.included: (Module base) -> void
  end
end
