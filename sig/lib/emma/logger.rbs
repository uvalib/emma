module Emma
  # Application logger.
  #
  class Logger < ActiveSupport::Logger
    include Emma::Common

    #include ActiveSupport::LoggerSilence

    FILTERING: bool

    AWS_FORMATTING: bool

    # Options expected by ::Logger#initialize
    #
    # @type [Array<Symbol>]
    #
    STD_LOGGER_OPT: symArray

    # Additional options supported by Emma::Logger#initialize
    #
    # @type [Array<Symbol>]
    #
    EMMA_LOGGER_OPT: symArray

    # Options supported by Emma::Logger#initialize
    #
    # @type [Array<Symbol>]
    #
    LOGGER_OPT: symArray

    # Create a new instance.
    #
    # @param [::Logger, String, IO, nil] src
    # @param [Array]                     args   @see ::Logger#initialize
    # @param [Hash]                      opt    @see ::Logger#initialize
    #
    # @return [Emma::Logger]
    #
    def initialize: (?(::Logger|IO|String|nil) src, *untyped args, **untyped opt) -> void

    @default_formatter: ::Logger::Formatter

    @formatter: ::Logger::Formatter

    # Refrain from generating certain entries in the AWS CloudWatch log.
    #
    # @param [Integer]  severity
    # @param [any, nil] message
    # @param [any, nil] progname      Default @progname
    #
    # @return [TrueClass]
    #
    def add: (Integer severity, ?untyped? message, ?untyped? progname) ?{ () -> untyped } -> true

    # Silences the logger for the duration of the block unless logging is
    # already suppressed.
    #
    # @param [Integer, Symbol, nil] severity
    #
    # return [any, nil]
    #
    def silence: [T] (?(Integer|Symbol|nil) severity) { (self) -> T } -> T

    private

    # Regexp fragment for matching an ANSI color sequence.
    #
    # @type [String]
    #
    ANSI_COLOR: String

    START: String

    # Patterns of log entries which are not helpful and/or way too frequent.
    #
    # @type [Array<Regexp>]
    #
    FILTER_OUT: Array[Regexp]

    # Indicate whether the given log entry should be skipped if log output is
    # going to AWS CloudWatch.
    #
    # @param [any, nil] message
    #
    def filter_out?: (untyped message) -> bool

    # Ensure that every log line is prefixed with the same log information to
    # facilitate filtering.
    #
    class Formatter < ::Logger::Formatter
      # Adjust log duration values so that the numerical value is separated
      # from the time unit.
      #
      # @type [Boolean]
      #
      UVA_AWS_MOD: bool

      # Width of severity column.
      #
      # @type [Integer]
      #
      SEV: Integer

      # Width of progname column.
      #
      # @type [Integer]
      #
      PRG: Integer

      # Character used for filling out fixed-width columns for AWS format.
      #
      # @type [String]
      #
      AWS_FILL: String

      # Common end portion of format leaders.
      #
      # @type [String]
      #
      LEADER_END: String

      # Time not shown in favor of the CloudWatch timestamp.
      #
      # @type [String]
      #
      AWS_LEADER: String

      # Like Logger::Formatter::Format but with the progname aligned.
      #
      # @type [String]
      #
      STD_LEADER: String

      # Format for local or AWS CloudWatch logging.
      #
      # @param [String, Integer] severity
      # @param [Time]            time
      # @param [any, nil]        progname
      # @param [any, nil]        msg
      #
      # @return [String]
      #
      # @see #aws_leader
      # @see #std_leader
      #
      def call: (String severity, Time time, untyped progname, untyped msg) -> String

      # Format for AWS CloudWatch logging.
      #
      # Because the collapsed view of log lines squeezes out multiple spaces,
      # fixed-width columns are right-filled with #AWS_FILL as needed.
      #
      # @param [String, Integer] severity
      # @param [Time]            _time
      # @param [any, nil]        progname
      #
      # @return [String]
      #
      def aws_leader: (String|Integer severity, Time _time, untyped progname) -> String

      # Format for local logging.
      #
      # @param [String, Integer] severity
      # @param [Time]            time
      # @param [any, nil]        progname
      #
      # @return [String]
      #
      def std_leader: (String|Integer severity, Time time, untyped progname) -> String

      alias leader aws_leader

      alias leader std_leader

      # Right-fill *item* if necessary so that its representation has at least
      # *width* characters.
      #
      # @param [any, nil] item
      # @param [Integer]  width
      # @param [String]   char
      #
      # @return [String]
      #
      def right_fill: (untyped item, Integer width, ?String char) -> String

      # Add a space between the value and unit (ms) of all time durations.
      #
      # (This is needed to support UVALIB metrics based on AWS log filters.)
      #
      # @param [String, nil] txt
      #
      # @return [String]
      #
      def format_duration: (String|nil txt) -> String
    end
  end
end
