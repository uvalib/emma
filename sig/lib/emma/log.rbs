# Emma::Log
#
module Emma::Log
  include Logger::Severity

  LOG_LEVEL: Hash[Symbol, Integer]

  LEVEL_NAME: Hash[Integer, String]

  # The current application logger.
  #
  # @return [Emma::Logger]
  #
  def self.logger: () -> Emma::Logger

  # Add a log message.
  #
  # If the first element of *args* is a Symbol, that is taken to be the calling
  # method.  If the next element of *args* is an Exception, a message is
  # constructed from its contents.
  #
  # @param [Integer, Symbol, nil]               severity
  # @param [Array<String,Symbol,Exception,Any>] args
  #
  # @return [nil]
  #
  # @yield To supply additional parts to the log entry.
  # @yieldreturn [String, Array<String>]
  #
  # === Usage Notes
  # This method always returns *nil* so that it can be used by itself as the
  # final statement of a rescue block.
  #
  # If not logging to STDOUT then the message is echoed on $stderr so that it
  # is also visible on console output without having to switch to log output.
  #
  def self.add: ((Integer|Symbol) severity, *untyped args) ?{ () -> untyped } -> nil

  # Add a DEBUG-level log message.
  #
  # @param [Array<String,Symbol,Exception,*>] args  Passed to #add.
  # @param [Proc]                             blk   Passed to #add.
  #
  # @return [nil]
  #
  def self.debug: (*untyped args) { () -> untyped } -> nil

  # Add an INFO-level log message.
  #
  # @param [Array<String,Symbol,Exception,*>] args  Passed to #add.
  # @param [Proc]                             blk   Passed to #add.
  #
  # @return [nil]
  #
  def self.info: (*untyped args) { () -> untyped } -> nil

  # Add a WARN-level log message.
  #
  # @param [Array<String,Symbol,Exception,*>] args  Passed to #add.
  # @param [Proc]                             blk   Passed to #add.
  #
  # @return [nil]
  #
  def self.warn: (*untyped args) { () -> untyped } -> nil

  # Add an ERROR-level log message.
  #
  # @param [Array<String,Symbol,Exception,*>] args  Passed to #add.
  # @param [Proc]                             blk   Passed to #add.
  #
  # @return [nil]
  #
  def self.error: (*untyped args) { () -> untyped } -> nil

  # Add a FATAL-level log message.
  #
  # @param [Array<String,Symbol,Exception,*>] args  Passed to #add.
  # @param [Proc]                             blk   Passed to #add.
  #
  # @return [nil]
  #
  def self.fatal: (*untyped args) { () -> untyped } -> nil

  # Translate to the form expected by Logger#add.
  #
  # @param [Integer, Symbol, String, nil] value
  # @param [Symbol]                       default
  #
  # @return [Integer]
  #
  def self.level_for: ((Integer|Symbol|String|nil) value, ?Symbol default) -> Integer

  # Return the display name for a log level.
  #
  # @param [Integer, Symbol, String, nil] value
  # @param [Symbol]                       default
  #
  # @return [String]
  #
  def self.level_name: ((Integer|Symbol|String|nil) value, ?Symbol default) -> String

  # Delegate any other method to @logger.
  #
  # @param [Symbol]   meth
  # @param [Array<*>] args
  # @param [Proc]     blk
  #
  def self.method_missing: (untyped meth, *untyped args) ?{ () -> untyped } -> untyped


  def self.suppressed?: () -> bool

  def self.suppressed: () -> bool?

  def self.suppressed=: (bool state) -> bool

  # Set logger suppression in general or for the duration of a block.
  #
  # @param [Boolean, nil] suppress
  #
  # @yield If given, the indicated state is only for the duration of the block.
  #
  def self.silence
    : [T] (?(bool|nil) suppress) { () -> T } -> T
    |     (bool        suppress)             -> bool
    |     (?untyped    suppress)             -> nil

  # Create a new Emma::Log instance based on *src* if provided.
  #
  # @param [::Logger, String, IO, nil] src
  # @param [Hash]                      opt        @see Logger#initialize
  #
  # @option opt [String] :progname    If not given, one will be generated.
  #
  # @return [Emma::Logger]
  #
  def self.new: (?(::Logger|IO|String|nil) src, **untyped opt) -> Emma::Logger

  # Generate a new distinct :progname for an anonymous instance.
  #
  # @param [String]  base_name
  # @param [Boolean] increment
  #
  # @return [String]
  #
  def self.anonymous_progname: (?base_name: String, ?increment: bool) -> String

  self.@anonymous_count: Integer

  # Replace the configured logger.
  #
  # @param [Any]    config
  # @param [String] progname
  # @param [Hash]   opt
  #
  # @return [nil]                             If *config* is invalid.
  # @return [Emma::Logger]                    Direct replacement.
  # @return [ActiveSupport::BroadcastLogger]  Original, possibly modified.
  #
  def self.replace: ((symHash|_LoggerConfig) config, progname: String, **untyped opt) -> logger?
end

# Defined as an "alias" for Emma::Log without needing to "include Emma".
#
Log: Module
