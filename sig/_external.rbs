# sig/_external.rbs
#
# Shorthand type definitions used throughout sig/**.rbs as well as overrides of
# and/or supplements to existing RBS definitions from .gem_rbs_collection
# (generated by `rbs collection update` on the command line).

# =============================================================================
# Shorthand notation for manually-edited RBS definitions
# =============================================================================

type anyHash    = Hash[untyped,untyped]   # Generic Hash
type anyArray   = Array[untyped]          # Generic Array

type symHash    = Hash[Symbol,untyped]    # Hash with Symbol keys
type symArray   = Array[Symbol]           # Array of Symbol

type strHash    = Hash[String,untyped]    # Hash with String keys
type strArray   = Array[String]           # Array of String

type prmHash    = symHash | ActionController::Parameters

type httpResult = [Integer, (strHash|Rack::Headers), (strArray|Rack::BodyProxy)]
type errorArgs  = Exception | ExecReport | symHash | String | strArray | Array[Record::Exceptions::FlashPart] | nil

type logger     = ActiveSupport::BroadcastLogger | Logger

type script_path = String | symHash | [String,symHash] # e.g. @page_javascript

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
type int      = Integer | _ToInt
type string   = String | _ToStr
type interned = Symbol | string

# =============================================================================
# Duck-typing definitions
# =============================================================================

interface _DateTime
  def strftime: (String fmt) -> String
end

interface _LoggerConfig
  def logger:  ()        -> logger?
  def logger=: (untyped) -> logger?
end

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
interface _Each[out A]
  def each: () { (A) -> void } -> void
end

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
interface _ToA[T]
  def to_a: () -> Array[T]
end

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
interface _ToH[K, V]
  def to_h: () -> Hash[K, V]
end

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
interface _ToInt
  def to_int: () -> Integer
end

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
interface _ToIO
  def to_io: () -> IO
end

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
interface _ToS
  def to_s: () -> String
end

# NOTE: why is RubyMine not using gems/rbs-*/core/builtin.rb
interface _ToStr
  def to_str: () -> String
end

# =============================================================================
# Shorthand notation for decorator-related RBS definitions
# =============================================================================

type decoratorRowItems = Array[Model] | ActiveRecord::Relation | ActiveRecord::Associations::CollectionAssociation

# =============================================================================
# Overrides and supplements to current RBS definitions
# =============================================================================

module ActionCable
  module Channel
    class Base
    end
    class TestCase < ActiveSupport::TestCase
    end
  end
  module Connection
    class Base
    end
  end
end

# NOTE: overrides .gem_rbs_collection/actionpack/6.0/actionpack-generated.rbs
module ActionController
  module Flash
    def redirect_to: (?(ActiveRecord::Base|String|Proc|Hash[untyped,untyped]) options, ?Hash[untyped,untyped] response_options_and_flash) -> untyped
  end
  module Redirecting
    def redirect_to: (?(ActiveRecord::Base|String|Proc|Hash[untyped,untyped]) options, ?Hash[untyped,untyped] response_options) -> untyped
  end
end

# NOTE: overrides .gem_rbs_collection/actionpack/6.0/actionpack-generated.rbs
module ActionDispatch
  module Assertions
    module ResponseAssertions
      def assert_redirected_to: ((String|Hash[untyped,untyped]) options, ?(String|nil) message) -> true
    end
  end
end

module ActionMailer
  class Preview
  end
  module MailHelper
  end
  class TestCase < ActiveSupport::TestCase
  end
end

# NOTE: overrides .gem_rbs_collection/activemodel/7.0/patch.rbs
module ActiveModel
  module Serialization
    def send: (interned name, *untyped args) ?{ (*untyped) -> untyped } -> untyped
  end
  module Validations
    def send: (interned name, *untyped args) ?{ (*untyped) -> untyped } -> untyped
  end
end

# NOTE: overrides .gem_rbs_collection/activesupport/7.0/activesupport-generated.rbs
module ActiveSupport

  class BroadcastLogger
    include ActiveSupport::LoggerSilence
  end

  module CoreExt
    module ERBUtil
      def html_escape: (untyped|nil s) -> ActiveSupport::SafeBuffer
      def self.html_escape: (untyped|nil s) -> ActiveSupport::SafeBuffer
      alias h html_escape
      alias self.h self.html_escape
    end
  end

  class NumericWithFormat
    def to_s: (?(String | Integer | Symbol | nil) format, ?(Hash[untyped,untyped] | nil) options) -> String
  end

  class SafeBuffer < String
    def []: (*untyped args) -> ActiveSupport::SafeBuffer

    def safe_concat: (untyped value) -> self

    def concat: (untyped value) -> self

    def insert: (untyped index, untyped value) -> self

    def prepend: (untyped value) -> self

    def replace: (untyped value) -> self

    def +: (untyped other) -> ActiveSupport::SafeBuffer

    def *: (Integer other) -> ActiveSupport::SafeBuffer

    def %: ((String | Array[String] | Hash[untyped,untyped]) other) -> ActiveSupport::SafeBuffer

    def html_safe?: () -> bool

    def to_s: () -> self

    def to_param: () -> self
  end

end

# NOTE: overrides .gem_rbs_collection/actionview/6.0/actionview-generated.rbs
module ActionView
  module Helpers
    module FormTagHelper
      def form_tag: (?(String|Hash[untyped,untyped]) url_for_options, ?Hash[untyped,untyped] options) ?{ () -> (ActiveSupport::SafeBuffer | nil) } -> (ActiveSupport::SafeBuffer | nil)
    end
    module RenderingHelper
      def render: (?(String|Hash[untyped,untyped]) options, ?Hash[untyped,untyped] locals) ?{ () -> untyped } -> untyped
    end
  end
end

module ActiveRecord

  module Callbacks
    module ClassMethods
    end
  end

  module ConnectionAdapters
    module PostgreSQL
      module ColumnMethods
        def bigserial:    (*untyped names, **untyped options) -> untyped
        def bit:          (*untyped names, **untyped options) -> OID::Bit
        def bit_varying:  (*untyped names, **untyped options) -> OID::BitVarying
        def cidr:         (*untyped names, **untyped options) -> OID::Cidr
        def citext:       (*untyped names, **untyped options) -> untyped
        def daterange:    (*untyped names, **untyped options) -> untyped
        def hstore:       (*untyped names, **untyped options) -> OID::Hstore
        def inet:         (*untyped names, **untyped options) -> OID::Inet
        def interval:     (*untyped names, **untyped options) -> untyped
        def int4range:    (*untyped names, **untyped options) -> untyped
        def int8range:    (*untyped names, **untyped options) -> untyped
        def jsonb:        (*untyped names, **untyped options) -> OID::Jsonb
        def ltree:        (*untyped names, **untyped options) -> untyped
        def macaddr:      (*untyped names, **untyped options) -> untyped
        def money:        (*untyped names, **untyped options) -> OID::Money
        def numrange:     (*untyped names, **untyped options) -> untyped
        def oid:          (*untyped names, **untyped options) -> OID::Oid
        def point:        (*untyped names, **untyped options) -> OID::Point
        def line:         (*untyped names, **untyped options) -> untyped
        def lseg:         (*untyped names, **untyped options) -> untyped
        def box:          (*untyped names, **untyped options) -> untyped
        def path:         (*untyped names, **untyped options) -> untyped
        def polygon:      (*untyped names, **untyped options) -> untyped
        def circle:       (*untyped names, **untyped options) -> untyped
        def serial:       (*untyped names, **untyped options) -> untyped
        def tsrange:      (*untyped names, **untyped options) -> untyped
        def tstzrange:    (*untyped names, **untyped options) -> untyped
        def tsvector:     (*untyped names, **untyped options) -> untyped
        def uuid:         (*untyped names, **untyped options) -> OID::Uuid
        def xml:          (*untyped names, **untyped options) -> OID::Xml
      end
    end
  end

  # NOTE: overrides .gem_rbs_collection/activerecord/7.0/activerecord-generated.rbs
  module FinderMethods
    def find
      : (Integer|String        args) -> (ActiveRecord::Base | nil)
      | (Array[Integer|String] args) -> Array[ActiveRecord::Base]
      | (*(Integer|String)     args) -> Array[ActiveRecord::Base]
    def find_by:  (untyped arg, *untyped args) -> (ActiveRecord::Base | nil)
    def find_by!: (untyped arg, *untyped args) -> ActiveRecord::Base

    def take
      : (?nil    limit) -> (ActiveRecord::Base | nil)
      | (Integer limit) -> Array[ActiveRecord::Base]
    def take!: () -> ActiveRecord::Base

    def first
      : (?nil    limit) -> (ActiveRecord::Base | nil)
      | (Integer limit) -> Array[ActiveRecord::Base]
    def first!: () -> ActiveRecord::Base

    def last
      : (?nil    limit) -> (ActiveRecord::Base | nil)
      | (Integer limit) -> Array[ActiveRecord::Base]
    def last!: () -> ActiveRecord::Base
  end

  # NOTE: overrides .gem_rbs_collection/activerecord/7.0/activerecord-generated.rbs
  module Persistence
    module ClassMethods
      def create
        : (Array[Hash[untyped,untyped]] attributes) ?{ () -> untyped } -> Array[instance]
        | (?(Hash[untyped,untyped]|nil) attributes) ?{ () -> untyped } -> instance
      def create!
        : (Array[Hash[untyped,untyped]] attributes) ?{ () -> untyped } -> Array[instance]
        | (?(Hash[untyped,untyped]|nil) attributes) ?{ () -> untyped } -> instance
      def update
        : (?:all           id, Array[Hash[untyped,untyped]] attributes) -> Array[instance]
        | ( Array[untyped] id, Array[Hash[untyped,untyped]] attributes) -> Array[instance]
        | ( untyped        id, Hash[untyped,untyped]        attributes) -> instance
    end
  end

  # NOTE: overrides .gem_rbs_collection/activerecord/7.0/activerecord.rbs
  class Base
    def self.create
      : (Array[Hash[untyped,untyped]] attributes) ?{ () -> untyped } -> Array[instance]
      | (?(Hash[untyped,untyped]|nil) attributes) ?{ () -> untyped } -> instance
    def self.create!
      : (Array[Hash[untyped,untyped]] attributes) ?{ () -> untyped } -> Array[instance]
      | (?(Hash[untyped,untyped]|nil) attributes) ?{ () -> untyped } -> instance
  end

end

class Array[unchecked out Elem] < Object

  # NOTE: overrides gems/rbs-*/core/array.rbs

  #def compact: () -> anyArray

  def include?: (untyped object) -> bool

  def join: (?(string|nil) separator) -> String

#  def sort!
#    : () -> self
#    | () { (Elem a, Elem b) -> ::Integer } -> self

  def sum
    : [Elem] ()         ?{ (Elem arg0) -> Elem } -> (Elem | Integer)
    | [Elem] (Elem arg) ?{ (Elem arg0) -> Elem } -> Elem

  def sort_by!
    : () { (Elem arg0) -> (Comparable | ::Array[untyped]) } -> ::Array[Elem]
    | () -> ::Enumerator[Elem, ::Array[Elem]]

  def collect!
    : () { (Elem item) -> untyped } -> ::Array[untyped]
    | ()                            -> ::Enumerator[Elem, self]

  alias map! collect!

  # NOTE: overrides .gem_rbs_collection/activesupport/7.0/activesupport-generated.rbs

  def extract_options!: () -> Hash[untyped,untyped]

  def self.wrap
    :     (nil              object) -> []
    |     (::Array[untyped] object) -> Array[untyped]
    | [V] (V                object) -> [V]
end

module Aws
  module S3
    class Bucket
    end
    class Client < ::Seahorse::Client::Base
    end
    class Object
    end
    class Resource
    end
  end
end

# NOTE: Due to active_support/core_ext/numeric/deprecated_conversions.rb
class BigDecimal
  prepend ActiveSupport::NumericWithFormat
end

class Binding
end

# NOTE: overrides .gem_rbs_collection/cancancan/3.5/cancancan.rbs
module CanCan

  module Ability
    def can
      : (?(Symbol | Array[Symbol] | nil) action, ?untyped subject, **untyped conditions) -> void
      | (?(Symbol | Array[Symbol] | nil) action, ?untyped subject) ?{ (untyped object) -> bool } -> void
      | () { (Symbol action, class object_class, untyped object) -> bool } -> void

    def cannot
      : (?(Symbol | Array[Symbol] | nil) action, ?untyped subject, **untyped conditions) -> void
      | (?(Symbol | Array[Symbol] | nil) action, ?untyped subject) ?{ (untyped object) -> bool } -> void
      | () { (Symbol action, class object_class, untyped object) -> bool } -> void
  end

  module ControllerAdditions
  end

end

module Capybara
  module Node
    module Actions
      def select: (?String? value, ?from: untyped|nil, **untyped options) -> Capybara::Node::Element
    end
    class Base
    end
    class Element < Base
    end
  end
  class Session
  end
end

module CapybaraSelect2
  def select2: (*untyped args) -> void
end

# NOTE: why is RubyMine not using plugins/ruby/rubystubs/rubystubs33/exception.rb
class Comparable
end

module Concurrent
  module Collection
    class MriMapBackend
    end
  end
  class Hash < ::Hash[untyped, untyped]
  end
end

module Devise
  module Models
    module DatabaseAuthenticatable
    end
    module Rememberable
    end
    module Trackable
    end
    module Registerable
    end
    module Omniauthable
    end
  end
  class Mapping
    def authenticatable?:           () -> bool
    def confirmable?:               () -> bool
    def database_authenticatable?:  () -> bool
    def lockable?:                  () -> bool
    def omniauthable?:              () -> bool
    def recoverable?:               () -> bool
    def registerable?:              () -> bool
    def rememberable?:              () -> bool
    def timeoutable?:               () -> bool
    def validatable?:               () -> bool
  end
  module Controllers
    module StoreLocation
    end
  end
  class ConfirmationsController
  end
  class OmniauthCallbacksController
  end
  class PasswordsController
  end
  class RegistrationsController
  end
  class SessionsController
  end
  class UnlocksController
  end
  module Test
    module ControllerHelpers
    end
    module IntegrationHelpers
    end
  end
end

module Down
  class ChunkedIO
  end
end

module Draper
  module LazyHelpers
  end
  module ViewHelpers
  end
  class Decorator
  end
  class CollectionDecorator
  end
  class TestCase < ::ActiveSupport::TestCase
  end
end

# NOTE: overrides gems/rbs-*/core/enumerable.rbs
module Enumerable[unchecked out Elem] : _Each[Elem]

  #def find
  #  :     ()                    { (Elem) -> top } -> Elem?
  #  |     ()                                      -> ::Enumerator[Elem, Elem?]
  #  | [T] (_NotFound[T] ifnone) { (Elem) -> top } -> (Elem | T)
  #  | [T] (_NotFound[T] ifnone)                   -> ::Enumerator[Elem, Elem | T]

  def include?: (untyped) -> bool

  def flat_map
    : () { (Elem) -> untyped } -> Array[untyped]
    | () -> ::Enumerator[Elem, Array[untyped]]

end

# NOTE: why is RubyMine not using gems/rbs-*/core/enumerator.rb
class Enumerator[unchecked out Elem, out Return] < Object
  include Enumerable[Elem]
  def each
    : () { (Elem arg0) -> untyped } -> Return
    | () -> self
end

# NOTE: overrides gems/rbs-*/stdlib/erb/0/erb.rbs
class ERB

  module Escape
    def html_escape: (untyped|nil) -> ActiveSupport::SafeBuffer
    def self.html_escape: (untyped|nil) -> ActiveSupport::SafeBuffer
  end

  module Util
    def html_escape: (untyped|nil) -> ActiveSupport::SafeBuffer
    def self.html_escape: (untyped|nil) -> ActiveSupport::SafeBuffer
  end

end

# NOTE: why is RubyMine not using plugins/ruby/rubystubs/rubystubs33/exception.rb
class Exception
end

module Faraday
  module DecodeMethods
  end
  module EncodeMethods
  end
  module Logging
  end
  class Env
  end
  class RackBuilder
  end
end

# NOTE: Due to active_support/core_ext/numeric/deprecated_conversions.rb
class Float
  prepend ActiveSupport::NumericWithFormat
end

module Forwardable
end

module GoodJob
  module ActiveJobExtensions
    module Batches
      def batch: () -> (GoodJob::Batch | nil)
      alias batch? batch
    end
  end
  class Batch
  end
  class BaseRecord
  end
  class Job < BaseRecord
  end
  class BatchRecord < BaseRecord
  end
end

class Hash[unchecked out K, unchecked out V] < Object

  # NOTE: overrides gems/rbs-*/core/hash.rbs

  def has_key?: (untyped) -> bool

  def has_value?: (untyped) -> bool

  def transform_keys!
    : ()                    -> Enumerator[K, self]
    | () { (K) -> untyped } -> Hash[untyped, V]

  def transform_values!
    : ()                    -> Enumerator[V, self]
    | () { (V) -> untyped } -> Hash[K, untyped]

  # NOTE: overrides .gem_rbs_collection/activesupport/7.0/activesupport-generated.rbs

  def deep_transform_keys
    : ()                    -> Enumerator[K, self]
    | () { (K) -> untyped } -> Hash[untyped, V]

  def deep_transform_keys!
    : ()                    -> Enumerator[K, self]
    | () { (K) -> untyped } -> Hash[untyped, V]

  def deep_transform_values
    : ()                    -> Enumerator[V, self]
    | () { (V) -> untyped } -> Hash[K, untyped]

  def deep_transform_values!
    : ()                    -> Enumerator[V, self]
    | () { (V) -> untyped } -> Hash[K, untyped]

  def slice!: (*untyped keys) -> Hash[K, V]

  def extract!: (*untyped keys) -> Hash[K, V]
end

module Hashie
  class Hash < ::Hash[untyped, untyped]
  end
  class Mash < Hash
  end
end

# NOTE: overrides .gem_rbs_collection/i18n/1.10/i18n.rbs
module I18n

  module Base
    def translate
      : (?(String|Symbol|nil) key, ?throw: bool, ?raise: bool, ?locale: Symbol|nil, **untyped options) -> (untyped | nil)
      | (Array[String|Symbol] key, ?throw: bool, ?raise: bool, ?locale: Symbol|nil, **untyped options) -> Array[untyped|nil]
  end

  class MissingTranslation < ArgumentError
    module Base
    end
  end

end

# NOTE: Due to active_support/core_ext/numeric/deprecated_conversions.rb
class Integer
  prepend ActiveSupport::NumericWithFormat
end

module IO::Like
  extend _ToIO
end

# NOTE: overrides gems/rbs-*/core/kernel.rbs
module Kernel

  def self?.__dir__: () -> String

  def self?.__method__: () -> Symbol

  def class: () -> Class

end

class Logger
  class Formatter
  end
  module Severity
  end
end

# NOTE: overrides gems/rbs-*/core/module.rbs
class Module < Object

  def self.constants: () -> Array[Symbol]

end

module OAuth2
  class AccessToken
  end
  class Client
  end
  class Response
  end
  module Strategy
    class Base
    end
    class AuthCode < Base
    end
    class Implicit < Base
    end
    class Password < Base
    end
    class ClientCredentials < Base
    end
    class Assertion < Base
    end
  end
end

module OmniAuth
  class AuthHash
  end
  class KeyStore < Hashie::Mash
  end
  module Strategy
    class Options < KeyStore
    end
    def redirect: (untyped uri) -> httpResult
  end
end

class OpenStruct
end

module PDF
  class Reader
  end
end

# NOTE: why is RubyMine not using plugins/ruby/rubystubs/rubystubs33/proc.rb
class Proc
end

module Prometheus
  module Client
    class Metric
    end
    class Counter   < Metric
    end
    class Gauge     < Metric
    end
    class Histogram < Metric
    end
    class Summary   < Metric
    end
    class Registry
    end
  end
end

module Puma
  class Client
  end
  class Events
  end
  class IOBuffer < ::StringIO
  end
end

module Rack
  class Headers < ::Hash[untyped, untyped]
  end
end

module Rake
  class Task
  end
  class TaskArguments
  end
end

# NOTE: overrides .gem_rbs_collection/railties/6.0/railties-generated.rbs
module Rails
  class Application
    def config: () -> Rails::Application::Configuration
  end
end

# NOTE: overrides .gem_rbs_collection/activesupport/7.0/activesupport-generated.rbs
class Range[out Elem]

  def sum
    : [Elem] ()         ?{ (Elem arg0) -> Elem } -> (Elem | Integer)
    | [Elem] (Elem arg) ?{ (Elem arg0) -> Elem } -> Elem

end

module Representable
  module Coercion
  end
  class Decorator
  end
  module Hash
    module ClassMethods
    end
  end
  module XML
  end
end

class RuntimeError < StandardError
end

class Sanitize
end

module Seahorse
  module Client
    class Base
    end
  end
end

class Set[unchecked out A]
  include Enumerable[A]
end

module Singleton
end

class Shrine
  class Attacher
    module InstanceMethods
    end
  end
  module Plugins
    module Activerecord
      module AttachmentMethods
      end
      module AttacherMethods
      end
    end
    module Entity
      module AttachmentMethods
      end
      module AttacherClassMethods
      end
      module AttacherMethods
      end
    end
  end
  class RackFile
  end
  class UploadedFile
  end
end

module Sprockets
  module ProcessorUtils
  end
  module Loader
  end
end

class StandardError < Exception
end

# NOTE: overrides gems/rbs-*/core/string.rbs
class String
  def start_with?: (*(string|Regexp) prefixes) -> bool
end

# NOTE: why is RubyMine not using gems/rbs-*/core/string_io.rbs
class StringIO
end

class Struct[Elem]
  include Enumerable[Elem]
end

# NOTE: overrides plugins/ruby/rubystubs/rubystubs33/symbol.rb
class Symbol
  def match?: (Regexp|string pattern, ?int offset) -> bool
end

# NOTE: why is RubyMine not using ruby/3.3.0/tempfile.rbs
class Tempfile
end

class Thread < Object
end

module Workflow

  module ClassMethods

    attr_reader workflow_spec: Workflow::Specification

    attr_reader workflow_state_column_name: Symbol

    def workflow_column: (?(String|Symbol|nil) column_name) -> Symbol

    def workflow: { () -> untyped } -> untyped

    private

    def assign_workflow: (Workflow::Specification specification_object) -> untyped

  end

  extend ClassMethods

  class Specification
  end

  class State
  end

end
