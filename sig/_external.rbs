# sig/_external.rbs
#
# Shorthand type definitions used throughout sig/**.rbs as well as overrides of
# and/or supplements to existing RBS definitions from .gem_rbs_collection
# (generated by `rbs collection update` on the command line).

# =============================================================================
# Shorthand notation for manually-edited RBS definitions
# =============================================================================

type anyHash    = Hash[untyped,untyped]   # Generic Hash
type anyArray   = Array[untyped]          # Generic Array

type symHash    = Hash[Symbol,untyped]    # Hash with Symbol keys
type symArray   = Array[Symbol]           # Array of Symbol

type strHash    = Hash[String,untyped]    # Hash with String keys
type strArray   = Array[String]           # Array of String

type prmHash    = symHash | ActionController::Parameters

type httpResult = [Integer, strHash, strArray] | [Integer, Rack::Utils::HeaderHash, Rack::BodyProxy]
type errorArgs  = Exception | ExecReport | symHash | String | strArray | Array[Record::Exceptions::FlashPart] | nil

# =============================================================================
# Duck-typing definitions
# =============================================================================

interface _DateTime
  def strftime: (String fmt) -> String
end

# =============================================================================
# Overrides and supplements to current RBS definitions
# =============================================================================

module ActionCable
  module Channel
    class Base
    end
    class TestCase < ActiveSupport::TestCase
    end
  end
  module Connection
    class Base
    end
  end
end

module ActionMailer
  class Base
  end
end

# NOTE: overrides .gem_rbs_collection/actionview/6.0/actionview-generated.rbs
module ActionView
  module Helpers
    module FormTagHelper
      def form_tag: (?(String|anyHash) url_for_options, ?anyHash options) ?{ () -> (ActiveSupport::SafeBuffer | nil) } -> (ActiveSupport::SafeBuffer | nil)
    end
    module RenderingHelper
      def render: (?(String|anyHash) options, ?anyHash locals) ?{ () -> untyped } -> untyped
    end
  end
end

module ActiveRecord
  module Callbacks
    module ClassMethods
    end
  end
  module ConnectionAdapters
    module PostgreSQL
      module ColumnMethods
        def bigserial:    (*untyped names, **untyped options) -> untyped
        def bit:          (*untyped names, **untyped options) -> OID::Bit
        def bit_varying:  (*untyped names, **untyped options) -> OID::BitVarying
        def cidr:         (*untyped names, **untyped options) -> OID::Cidr
        def citext:       (*untyped names, **untyped options) -> untyped
        def daterange:    (*untyped names, **untyped options) -> untyped
        def hstore:       (*untyped names, **untyped options) -> OID::Hstore
        def inet:         (*untyped names, **untyped options) -> OID::Inet
        def interval:     (*untyped names, **untyped options) -> untyped
        def int4range:    (*untyped names, **untyped options) -> untyped
        def int8range:    (*untyped names, **untyped options) -> untyped
        def jsonb:        (*untyped names, **untyped options) -> OID::Jsonb
        def ltree:        (*untyped names, **untyped options) -> untyped
        def macaddr:      (*untyped names, **untyped options) -> untyped
        def money:        (*untyped names, **untyped options) -> OID::Money
        def numrange:     (*untyped names, **untyped options) -> untyped
        def oid:          (*untyped names, **untyped options) -> OID::Oid
        def point:        (*untyped names, **untyped options) -> OID::Point
        def line:         (*untyped names, **untyped options) -> untyped
        def lseg:         (*untyped names, **untyped options) -> untyped
        def box:          (*untyped names, **untyped options) -> untyped
        def path:         (*untyped names, **untyped options) -> untyped
        def polygon:      (*untyped names, **untyped options) -> untyped
        def circle:       (*untyped names, **untyped options) -> untyped
        def serial:       (*untyped names, **untyped options) -> untyped
        def tsrange:      (*untyped names, **untyped options) -> untyped
        def tstzrange:    (*untyped names, **untyped options) -> untyped
        def tsvector:     (*untyped names, **untyped options) -> untyped
        def uuid:         (*untyped names, **untyped options) -> OID::Uuid
        def xml:          (*untyped names, **untyped options) -> OID::Xml
      end
    end
  end
end

# NOTE: overrides .gem_rbs_collection/activesupport/6.0/activesupport-generated.rbs
class Array[unchecked out Elem] < Object
  def extract_options!: () -> anyHash
end

module CanCan
  module Ability
  end
  class Error < StandardError
  end
  class AccessDenied < Error
  end
end

module Capybara
  module Node
    module Actions
    end
    class Base
    end
    class Element < Base
    end
  end
  class Session
  end
end

module Concurrent
  module Collection
    class MriMapBackend
    end
  end
  class Hash < ::Hash[untyped, untyped]
  end
end

module Devise
  module Models
    module DatabaseAuthenticatable
    end
    module Rememberable
    end
    module Trackable
    end
    module Registerable
    end
    module Omniauthable
    end
  end
  class Mapping
    def authenticatable?:           () -> bool
    def confirmable?:               () -> bool
    def database_authenticatable?:  () -> bool
    def lockable?:                  () -> bool
    def omniauthable?:              () -> bool
    def recoverable?:               () -> bool
    def registerable?:              () -> bool
    def rememberable?:              () -> bool
    def timeoutable?:               () -> bool
    def validatable?:               () -> bool
  end
  module Controllers
    module StoreLocation
    end
  end
  class ConfirmationsController
  end
  class OmniauthCallbacksController
  end
  class PasswordsController
  end
  class RegistrationsController
  end
  class SessionsController
  end
  class UnlocksController
  end
  module Test
    module ControllerHelpers
    end
    module IntegrationHelpers
    end
  end
end

module Down
  class ChunkedIO
  end
end

module Draper
  module LazyHelpers
  end
  module ViewHelpers
  end
  class Decorator
  end
  class CollectionDecorator
  end
  class TestCase < ::ActiveSupport::TestCase
  end
end

module Faraday
  module DecodeMethods
  end
  module EncodeMethods
  end
  module Logging
  end
  class Error < StandardError
  end
  class Env
  end
  class Middleware
  end
  class RackBuilder
  end
end

module Forwardable
end

class GlobalID
  module Identification
  end
end

module GoodJob
  class BaseRecord
  end
  class Job < BaseRecord
  end
end

# NOTE: overrides .gem_rbs_collection/activesupport/6.0/activesupport-generated.rbs
class Hash[unchecked out K, unchecked out V] < Object
  def deep_dup: () -> self
end

module Hashie
  class Hash < ::Hash[untyped, untyped]
  end
  class Mash < Hash
  end
end

module IO::Like
  extend _ToIO
end

module OAuth2
  class AccessToken
  end
  class Client
  end
  class Response
  end
  module Strategy
    class Base
    end
    class AuthCode < Base
    end
    class Implicit < Base
    end
    class Password < Base
    end
    class ClientCredentials < Base
    end
    class Assertion < Base
    end
  end
end

module OmniAuth
  class AuthHash
  end
  class KeyStore < Hashie::Mash
  end
  class Strategies::OAuth2
  end
  module Strategy
    class Options < KeyStore
    end
    def redirect: (untyped uri) -> httpResult
  end
end

class OpenStruct
end

module PDF
  class Reader
  end
end

module Prometheus
  module Client
    class Metric
    end
    class Counter   < Metric
    end
    class Gauge     < Metric
    end
    class Histogram < Metric
    end
    class Summary   < Metric
    end
    class Registry
    end
  end
end

module Puma
  class Events
  end
end

module Rake
  module DSL
  end
  class Task
  end
  class TaskArguments
  end
end

module Representable
  module Coercion
  end
  class Decorator
  end
  module Hash
    module ClassMethods
    end
  end
  module XML
  end
end

class Sanitize
end

class Set[unchecked out A]
  include Enumerable[A]
end

class Shrine
  class Attacher
    module InstanceMethods
    end
  end
  module Plugins
    module Activerecord
      module AttachmentMethods
      end
      module AttacherMethods
      end
    end
    module Entity
      module AttachmentMethods
      end
      module AttacherClassMethods
      end
      module AttacherMethods
      end
    end
  end
  class RackFile
  end
  class UploadedFile
  end
end

module Sprockets
  module ProcessorUtils
  end
  module Loader
  end
end

module Workflow

  module ClassMethods

    attr_reader workflow_spec: Workflow::Specification

    attr_reader workflow_state_column_name: Symbol

    def workflow_column: (?(String|Symbol|nil) column_name) -> Symbol

    def workflow: { () -> untyped } -> untyped

    private

    def assign_workflow: (Workflow::Specification specification_object) -> untyped

  end

  extend ClassMethods

  class Specification
  end

  class State
  end

end
