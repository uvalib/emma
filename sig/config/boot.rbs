# The time that the application was started.
#
# @type [Time]
#
BOOT_TIME: Time

# The TeamCity build version.
#
# If there is (erroneously) more than one "buildtag.*" file, the build numbers
# will be listed separated by commas.
#
# @type [String]
#
BUILD_VERSION: String

# The base URL for the production system deployment.
#
# @type [String]
#
PRODUCTION_BASE_URL: String

# The base URL for the staging system deployment.
#
# @type [String]
#
STAGING_BASE_URL: String

# This constant is defined to mark sections of code that are present only to
# give context information to RubyMine -- for example, "include" statements
# which allow RubyMine to indicate which methods are overrides.
#
# (This constant is required to be a non-false value.)
#
ONLY_FOR_DOCUMENTATION: true

# Controls whether '0' and '1' are interpreted as boolean values for URL
# parameters or ENV setting values.
#
# @type [Boolean]
#
# @note Setting this to *true* may yield unexpected results.
#
BOOL_DIGIT: bool

# @private
BOOL_DIGITS: strArray

# @private
FALSE_DIGIT: String | nil

# @private
TRUE_DIGIT: String | nil

# Text values which represent *true*.
#
# @type [Array<String>]
#
TRUE_VALUES: strArray

# Text values which represent *false*.
#
# @type [Array<String>]
#
FALSE_VALUES: strArray

class Object
  # Indicate whether the item represents an explicit *true* value.
  #
  # @param [any, nil] value             Boolean, String, Symbol
  #
  def true?: (untyped value) -> bool

  # Indicate whether the item represents an explicit *false* value.
  #
  # @param [any, nil] value             Boolean, String, Symbol
  #
  def false?: (untyped value) -> bool

  # Produce JSON for use with "assets.js.erb".
  #
  # @param [any, nil] arg               String, Hash, Array
  #
  # @return [String]
  #
  # @see file:app/assets/javascripts/shared/decode.js *decodeJSON()*
  #
  def js: (untyped arg) -> String
end

module GlobalProperty
  extend GlobalProperty

  private

  INFO_ARGS: symArray

  attr_writer application_deployed: bool?
  attr_writer aws_deployment: Symbol
  attr_writer application_deployment: Symbol
  attr_writer production_deployment: bool?
  attr_writer staging_deployment: bool?
  attr_writer in_debugger: bool?
  attr_writer in_local_docker: bool?
  attr_writer in_rails: bool?
  attr_writer in_rake: bool?
  attr_writer live_rails: bool?
  attr_writer sanity_check: bool?

  public

  # Indicate whether this is a deployed instance.
  #
  def application_deployed?: () -> bool

  # Indicate whether this is a desktop instance.
  #
  def not_deployed?: () -> bool

  # The true deployment type.
  #
  # @return [Symbol]
  #
  def aws_deployment: () -> Symbol

  # The deployment type.  Desktop development should use 'staging' resources.
  #
  # @return [Symbol]
  #
  # @see https://gitlab.com/uvalib/terraform-infrastructure/-/blob/master/emma.lib.virginia.edu/ecs-tasks/production/environment.vars
  # @see https://gitlab.com/uvalib/terraform-infrastructure/-/blob/master/emma.lib.virginia.edu/ecs-tasks/staging/environment.vars
  #
  def application_deployment: () -> Symbol

  # Indicate whether this is the production service instance.
  #
  def production_deployment?: () -> bool

  # Indicate whether this is the staging service instance.
  #
  def staging_deployment?: () -> bool

  # Indicate whether this instance is being run from the interactive debugger.
  #
  # === Usage Notes
  # For interactive debugging RubyMine uses 'ruby-debug-ide'.
  #
  def in_debugger?: () -> bool

  # Indicate whether this instance is being run from a Docker container on a
  # development machine.
  #
  def in_local_docker?: () -> bool

  # For use within initialization code to branch between code that is intended
  # for the Rails application versus code that is run in other contexts (e.g.,
  # rake).
  #
  def rails_application?: () -> bool

  # Indicate whether this instance is being run as "rake" or "rails" with a
  # Rake task argument.
  #
  def rake_task?: () -> bool

  # Indicate whether this is the Rails application not under test.
  #
  def live_rails_application?: () -> bool

  # Indicate whether desktop-only validations are appropriate.
  #
  def sanity_check?: () -> bool

end

class Object
  include GlobalProperty
  extend  GlobalProperty
end
