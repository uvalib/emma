#! /bin/bash
#
# Deploy YARD documentation changes.
#
# In order to support GitHub Pages, documentation is stored in the "/docs"
# subdirectory which is only present on the "docs" Git branch.
#
# NOTE:
#
# [1] "All Files" is true by default because when specific files are given to
#     YARD I'm not sure that the resultant pages actually have all of the
#     linkages that they should.
#
# [2] "Push Changes" is false by default because the usual practice is to
#     review the changes from RubyMine and write the commit message there.
:
#==============================================================================
# Constants
#==============================================================================

APP='emma'

# Local git repo.

SRC_DIR="$HOME/Work"
APP_DIR="$SRC_DIR/$APP"
DOC_DIR="$APP_DIR/docs"

# Git repo branches.

MAIN_BRANCH='master'
DOCS_BRANCH='docs'

# Other constants.

NL='
'

#==============================================================================
# Variables
#==============================================================================

declare -a GIT_ARGS=()

QUIET=''
VERBOSE=''
DRY_RUN=''
ALL_FILES='true'  # See NOTE [1] above
PUSH_CHANGES=''   # See NOTE [2] above
CHANGED_FILES=''

#==============================================================================
# Functions
#==============================================================================
:
#------------------------------------------------------------------------------
# Emit text.
#
function Announce() # [-f|--force] message...
{
    local SHOW=''
    case "$1" in
        -f|--force) SHOW=true; shift ;;
        -*)         Abort "Announce: unknown option '$1'" ;;
        *)          [ "$QUIET" ] || SHOW=true ;;
    esac
    [ "$SHOW" ] && echo "$@"
}

#------------------------------------------------------------------------------
# Emit text only if $VERBOSE.
#
function Verbose() # message...
{
    [ "$VERBOSE" ] && Announce '***' "$@" 1>&2
}

#------------------------------------------------------------------------------
# Emit text to stderr.
#
function Warning() # message...
{
    Announce 'WARNING:' "$@" 1>&2
}

#------------------------------------------------------------------------------
# Emit text to stderr.
#
function Error() # message...
{
    Announce --force 'ERROR:' "$@" 1>&2
}

#------------------------------------------------------------------------------
# Exit with an error message; show help first if indicated.
#
function Abort() # [-h|--help] [message...]
{
    local HELP=''
    case "$1" in
        -h|--help)  HELP=true; shift ;;
        -*)         Abort "Abort: unknown option '$1'" ;;
        '')         shift ;;
    esac
    [ $# -gt 0 ] && Error "$@"
    [ "$HELP"  ] && Help
    exit 1
}

#------------------------------------------------------------------------------
# Display help to stdout.
#
function Help()
{
    Announce -f '-a|--all              Pass all files to yard not just changes'
    Announce -f "-p|--push             Push changes to origin/$DOCS_BRANCH"
    Announce -f '-n|--dry-run          Do not actually perform actions'
    Announce -f '-q|--quiet            No added output to stdout'
    Announce -f '-v|--verbose          Verbose output to stdout'
    Announce -f '--                    End of script options.'
    Announce -f 'Remaining values and/or options after "--" are passed to git.'
}

#------------------------------------------------------------------------------
# Change directory
#
function cd_to() # directory
{
    local DIR="$1"
    cd "$DIR" || Abort
    Verbose "Changing to '$DIR'" || true
}

#------------------------------------------------------------------------------
# Run program.
#
function Run() # [-f|--force] program [args...]
{
    local FORCE=''
    case "$1" in
        -f|--force) FORCE=true; shift ;;
        -*)         Abort "Run: unknown option '$1'" ;;
        '')         shift ;;
    esac
    if [ "$DRY_RUN" -a ! "$FORCE" ] ; then
        echo 'RUN' "$@"
    else
        Verbose "Running $@"
        "$@" || Abort
    fi
}

#------------------------------------------------------------------------------
# Run git.
#
function Git() # [-f|--force] git_args...
{
    local OPTIONS=''
    case "$1" in
        -f|--force) OPTIONS="$1"; shift ;;
        -*)         Abort "Git: unknown option '$1'" ;;
        '')         shift ;;
    esac
    Run $OPTIONS git "$@" $GIT_ARGS
}

#------------------------------------------------------------------------------
# List changed files (but only the ones yard can deal with).
#
function ChangedFiles()
{
    Git --force diff --name-only "origin/$MAIN_BRANCH" |
    grep '\(\.rb\|\.md\)$'
}

#------------------------------------------------------------------------------
# Checkout the git branch.
#
function CurrentBranch()
{
    Git --force branch --show-current
}

#------------------------------------------------------------------------------
# Checkout the git branch.
#
function Checkout() # branch
{
    local CURRENT=`CurrentBranch`
    local REQUESTED="$1"
    [ "$CURRENT" == "$REQUESTED" ] || Git --force checkout "$REQUESTED"
}

#------------------------------------------------------------------------------
# Commit documentation changes.
#
function UpdateDocsBranch() # [commit_message]
{
    local COMMIT_MESSAGE='Documentation update'
    [ "$1" ] && COMMIT_MESSAGE="$1"
    Git commit -m "$COMMIT_MESSAGE" && Git push
}

#==============================================================================
# Parse command line arguments
#==============================================================================

while [ $# -gt 0 ]; do
    case "$1" in
        -a|--all)               ALL_FILES=true ;;     # See NOTE [1] above
        -p|--push)              PUSH_CHANGES=true ;;  # See NOTE [2] above
        -n|--dry-run|--dry*)    DRY_RUN=true ;;
        -q|--quiet)             QUIET=true ;;
        -v|--verbose)           VERBOSE=true ;;
        -h|-\?|--\?|--help)     Help; exit 0 ;;
        --)                     shift; break ;; # End of script options
        -*)                     Abort --help "Bad option: '$1'" ;;
        *)                      break ;; # End of script arguments
    esac
    shift
done

#==============================================================================
# Validate options.
#==============================================================================

[ "$DRY_RUN" ] && VERBOSE=true

if [ "$VERBOSE" -a "$QUIET" ] ; then
    Announce 'Disabled --quiet option'
    QUIET=''
fi

GIT_ARGS+=$@

: =============================================================================
  Announce "Merging changes from '$MAIN_BRANCH' branch"
: =============================================================================

cd_to "$APP_DIR"
ORIGINAL_BRANCH=`CurrentBranch`

Checkout "$MAIN_BRANCH"
[ "$ALL_FILES" -o "$CHANGED_FILES" ] || CHANGED_FILES=`ChangedFiles`

Checkout "$DOCS_BRANCH"
Git merge --no-edit "$MAIN_BRANCH"

: =============================================================================
  Announce 'Generating YARD documentation'
: =============================================================================

declare -i STATUS=0
FINAL_MESSAGE=''

if Run yard doc -o "$DOC_DIR" $CHANGED_FILES ; then
    Announce 'Adding updates'
    Git add "$DOC_DIR" &&
    if [ ! "$PUSH_CHANGES" ] ; then
        FINAL_MESSAGE="$DOC_DIR ready for review on the $DOCS_BRANCH branch"
    elif UpdateDocsBranch ; then
        FINAL_MESSAGE="Updated 'origin/$DOCS_BRANCH'"
    else
        STATUS=$?
        FINAL_MESSAGE="Failed to update 'origin/$DOCS_BRANCH'"
    fi
else
    STATUS=$?
    FINAL_MESSAGE='YARD failure'
fi

Checkout "$ORIGINAL_BRANCH"

[ "$FINAL_MESSAGE" ] && Announce "$FINAL_MESSAGE"
exit $STATUS

