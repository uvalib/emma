# app/helpers/layout_helper/page_controls.rb
#
# frozen_string_literal: true
# warn_indent:           true

__loading_begin(__FILE__)

# Control bar which holds action controls appropriate for the current page and
# the current user.
#
module LayoutHelper::PageControls

  include I18nHelper
  include BookshareHelper

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  # Indicate whether it is appropriate to show page controls.
  #
  # @param [Hash, nil] p              Default: `#params`.
  #
  def show_page_controls?(p = nil)
    p ||= params
    !p[:controller].to_s.include?('devise')
  end

  # Render the appropriate partial to insert page controls if they are defined
  # for the current controller/action.
  #
  # @param [Hash, nil] p              Default: `#params`.
  # @param [Hash]      locals         Passed to `#render`.
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]
  #
  def render_page_controls(p = nil, locals: {})
    p ||= params
    partial = p[:action].to_s
    act_al  = Ability::ACTION_ALIAS[partial.to_sym]&.first&.to_s
    partial = act_al if act_al
    partial = "#{p[:controller]}/page_controls/#{partial}"
    render(partial, locals) if partial_exists?(partial)
  end

  # Generate a list of controller/action pairs that the current user is able to
  # perform.
  #
  # @param [Class,Symbol,String] model
  # @param [Array<Symbol>]       actions
  #
  # @return [Array<Array<(Symbol,Symbol)>>]
  #
  def page_control_actions(model, *actions)
    if model.is_a?(Class)
      controller = model.to_s.underscore
    else
      controller = model.to_sym
      model      = model.to_s.camelize.constantize
    end
    actions.map { |action|
      [controller, action] if (action = action&.to_sym) && can?(action, model)
    }.compact
  end

  # Generate controls specified by controller/action pairs generated by
  # #page_controls_actions.
  #
  # @param [Array<Array<(Symbol,Symbol)>>] pairs
  # @param [Hash]                          path_opt
  #
  # @return [ActiveSupport::SafeBuffer]
  # @return [nil]
  #
  def page_controls(*pairs, **path_opt)
    pairs.map { |pair|
      link_to_action(*pair, **path_opt) if pair.present?
    }.compact.join("\n").html_safe.presence
  end

  # page_controls_label
  #
  # @param [String, Symbol, nil] controller   Default: `#params[:controller]`.
  # @param [Hash]                opt          Passed to #i18n_lookup.
  #
  # @return [String]
  # @return [nil]
  #
  def page_controls_label(controller = nil, **opt)
    i18n_lookup(controller, 'page_controls.label', **opt)
  end

end

__loading_end(__FILE__)
