# app/helpers/layout_helper/page_controls.rb
#
# frozen_string_literal: true
# warn_indent:           true

__loading_begin(__FILE__)

# Control bar which holds action controls appropriate for the current page and
# the current user.
#
module LayoutHelper::PageControls

  include LayoutHelper::Common

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  # Indicate whether it is appropriate to show page controls.
  #
  # @param [Hash, nil] p              Default: `#request_parameters`.
  #
  def show_page_controls?(p = nil)
    p ||= request_parameters
    !p[:controller].to_s.include?('devise')
  end

  # Render the appropriate partial to insert page controls if they are defined
  # for the current controller/action.
  #
  # @param [Hash] prm                 Default: `#request_parameters`.
  # @param [Hash] locals              Passed to `#render`.
  #
  # @return [ActiveSupport::SafeBuffer] An HTML element.
  # @return [nil]                       If no page_controls partials found.
  #
  def render_page_controls(prm: nil, **locals)
    prm    ||= request_parameters
    partial  = prm[:action].to_s
    partial  = Ability::ACTION_ALIAS[partial.to_sym]&.first&.to_s || partial
    partial  = "#{prm[:controller]}/page_controls/#{partial}"
    controls = partial_exists?(partial) && render(partial, locals)
    html_div(controls, class: 'page-controls') if controls.present?
  end

  # Generate a list of controller/action pairs that the current user is able to
  # perform.
  #
  # @param [Class,Symbol,String] model
  # @param [Array<Symbol>]       actions
  #
  # @return [Array<Array<(Symbol,Symbol)>>]   Controller/action pairs.
  # @return [nil]                             No authorized actions were found.
  #
  def page_control_actions(model, *actions)
    if model.is_a?(Class)
      controller = model.to_s.underscore
    else
      controller = model.to_sym
      model      = model.to_s.camelize.safe_constantize
    end
    actions.map { |action|
      [controller, action] if (action = action&.to_sym) && can?(action, model)
    }.compact.presence
  end

  # Generate controls specified by controller/action pairs generated by
  # #page_controls_actions.
  #
  # @param [Array<Array<(Symbol,Symbol)>>] pairs
  # @param [Hash]                          path_opt
  #
  # @return [ActiveSupport::SafeBuffer]   HTML link element(s).
  # @return [nil]                         No valid links could be produced.
  #
  def page_controls(*pairs, **path_opt)
    html_opt = { class: 'control' }
    html_opt[:method] = path_opt.delete(:method) if path_opt.key?(:method)
    pairs.map { |path|
      link_to_action(nil, link_opt: html_opt, path: path, **path_opt)
    }.compact.join("\n").html_safe.presence
  end

  # page_controls_label
  #
  # @param [String, Symbol, nil] controller   Default: `#params[:controller]`.
  # @param [Hash]                opt          Passed to #i18n_lookup.
  #
  # @return [String]                          The specified value.
  # @return [nil]                             No non-empty value was found.
  #
  def page_controls_label(controller: nil, **opt)
    controller ||= request_parameters[:controller]
    i18n_lookup(controller, 'page_controls.label', **opt)
  end

end

__loading_end(__FILE__)
