# app/helpers/about_helper/common.rb
#
# frozen_string_literal: true
# warn_indent:           true

__loading_begin(__FILE__)

# View helper methods for rendering application information.
#
module AboutHelper::Common

  include CssHelper
  include HtmlHelper
  include EmmaHelper

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  # The past date indicated by the argument.
  #
  # @param [ActiveSupport::Duration, Date, Integer, nil] previous
  #
  # @return [Date, nil]
  #
  def recent_date(previous = 30.days)
    # noinspection RubyMismatchedReturnType
    case previous
      when ActiveSupport::Duration then Date.today - previous.in_days
      when Integer                 then Date.today - previous.days
      when Date, nil               then previous
      else Log.error("#{__method__}: unexpected: #{previous.inspect}")
    end
  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  protected

  # A fallback element indicating "NONE".
  #
  # @param [Hash] opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  def none_placeholder(**opt)
    html_div(**opt) do
      config_term(:none).upcase
    end
  end

  # For use with #sort_by so that tables of total entries are sorted by name
  # and tables of recent entries are sorted by descending count with a
  # secondary sort by name.
  #
  # @param [*]                     key
  # @param [Hash{String=>Integer}] counts
  # @param [*]                     since
  #
  # @return [*]
  #
  def about_sort(key, counts, since: nil, **)
    if since
      [-counts.values.sum, about_sort(key, counts)]
    elsif key.is_a?(Org)
      key.long_name
    elsif EmmaRepository.valid?(key)
      EmmaRepository(key).label
    elsif key == Download::NO_PUBLISHER
      ''
    else
      key.to_s.downcase.gsub(/[[:punct:]]/, ' ').squish
    end
  end

  # Render the value for output as a table row header label.
  #
  # @param [*]      value
  # @param [Symbol] by
  #
  # @return [String]
  #
  def name_of(value, by:)
    case by
      when :source then EmmaRepository(value)&.label
      when :org    then value&.long_name
    end.presence || value.to_s
  end

  # A list of items as a table where data row headers are generated by the
  # block.
  #
  # @param [Hash]          items
  # @param [Array<String>] cols
  # @param [String]        separator  Displayed between format counts.
  # @param [Hash]          opt
  #
  # @return [ActiveSupport::SafeBuffer]
  #
  # @yield [key] Generate a row header label.
  # @yieldparam [*] key
  # @yieldreturn [String]
  #
  def about_table(items, cols, separator: " #{EM_DASH} ", **opt)
    thead =
      html_thead do
        html_tr('aria-rowindex': 1) do
          cols.map.with_index(1) do |col, c|
            html_th(col, role: 'columnheader', 'aria-colindex': c)
          end
        end
      end
    tbody =
      html_tbody do
        items.map.with_index(2) do |(key, counts), r|
          name  = block_given? ? yield(key) : key
          total = counts.values.sum
          fmts  = counts.map { |f, c| "#{f}: #{c}" }.compact.join(separator)
          html_tr('aria-rowindex': r) do
            name  = html_th(name,  role: 'rowheader', 'aria-colindex': 1)
            total = html_td(total, role: 'cell',      'aria-colindex': 2)
            fmts  = html_td(fmts,  role: 'cell',      'aria-colindex': 3)
            name << total << fmts
          end
        end
      end
    opt[:'aria-colcount'] = cols.size
    opt[:'aria-rowcount'] = items.size
    html_table(thead, tbody, **opt)
  end

end

__loading_end(__FILE__)
