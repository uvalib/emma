// app/assets/builds/javascripts-shared-assets.js
// app/assets/javascripts/shared/assets.js.erb
//
// This file holds all of the constants that rely on ERB processing, which
// allows shared settings to be maintained in the Rails application.
//
// The "emma:assets:erb" Rake task processes this file through ERB in order to
// provide current values from the Ruby-on-Rails source code, with the
// exception of Image_placeholder_asset , which is set through a <script>
// tag inserted earlier in the <head> element.
//
// @see file:lib/tasks/emma_assets.rake
// @see HeadHelper::Scripts#page_script_settings
//
// noinspection JSFileReferences, ES6UnusedImports, LongLine


import { deepFreeze } from '../javascripts/shared/objects'
import {
    decodeArray   as a$,
    decodeBoolean as b$,
    decodeObject  as o$,
} from '../javascripts/shared/decode'

/**
 * AssetOverrides
 *
 * @typedef {{
 *     OverrideScriptSettings:  object,
 *     Image_placeholder_asset: string
 * }} AssetOverrides
 */

// noinspection JSUnresolvedVariable
/**
 * The server passes current information via a <script> tag that is inserted
 * before 'application.js' in a global location that will be accessible from
 * any ES6 module.
 *
 * @type {AssetOverrides}
 *
 * @see "HeadHelper::Scripts#page_script_settings"
 */
const ASSET_OVERRIDES = window.ASSET_OVERRIDES || {};

/**
 * Updated top-level values.
 *
 * @type {object}
 */
const OverrideScriptSettings = ASSET_OVERRIDES.OverrideScriptSettings || {};

/**
 * Current path to the placeholder asset.
 *
 * @type {string}
 */
const Image_placeholder_asset = ASSET_OVERRIDES.Image_placeholder_asset || {};

// ============================================================================
// Type definitions
// ============================================================================

/**
 * @typedef {Object.<string,string>} StringTable
 */

/**
 * ElementProperties
 *
 * @typedef {{
 *     active?:         boolean|null|undefined,
 *     tag?:            string|null|undefined,
 *     type?:           string|null|undefined,
 *     class?:          string|null|undefined,
 *     tooltip?:        string|null|undefined,
 *     label?:          string|null|undefined,
 *     text?:           string|null|undefined,
 *     html?:           string|null|undefined,
 *     func?:           function|null|undefined,
 * }} ElementProperties
 */

/**
 * ToggleProperties
 *
 * - opener:            Label/tooltip for a button to open a collapsed element.
 * - closer:            Label/tooltip for a button to close an expanded element.
 *
 * @typedef {{
 *     opener:          ElementProperties,
 *     closer:          ElementProperties,
 * }} ToggleProperties
 */

/**
 * ActionProperties
 *
 * @typedef {{
 *     tag?:            string|null|undefined,
 *     type?:           string|null|undefined,
 *     class?:          string|null|undefined,
 *     tooltip?:        string|null|undefined,
 *     label?:          string|null|undefined,
 *     text?:           string|null|undefined,
 *     html?:           string|null|undefined,
 *     enabled?:        ElementProperties|null|undefined,
 *     disabled?:       ElementProperties|null|undefined,
 * }} ActionProperties
 */

/**
 * EndpointProperties
 *
 * @typedef {{
 *     submit:          ActionProperties,
 *     cancel:          ActionProperties,
 *     select?:         ActionProperties,
 *     import?:         ActionProperties,
 *     export?:         ActionProperties,
 *     start?:          ActionProperties,
 *     stop?:           ActionProperties,
 *     pause?:          ActionProperties,
 *     resume?:         ActionProperties,
 * }} EndpointProperties
 */

/**
 * ControllerActionProperties
 *
 * @typedef {{
 *    new:              EndpointProperties,
 *    edit:             EndpointProperties,
 *    delete:           EndpointProperties,
 *    bulk_new?:        EndpointProperties,
 *    bulk_edit?:       EndpointProperties,
 *    bulk_delete?:     EndpointProperties,
 *    remit?:           EndpointProperties,
 * }} ControllerActionProperties
 */

/**
 * FieldGroupProperties
 *
 * @typedef {{
 *     label?:          string|null,
 *     tooltip?:        string|null,
 *     enabled?:        boolean|string|null,
 *     default?:        boolean|string|null,
 * }} FieldGroupProperties
 */

/**
 * FilterProperties
 *
 * @typedef {{
 *    available:        FieldGroupProperties,
 *    filled:           FieldGroupProperties,
 *    invalid:          FieldGroupProperties,
 *    all:              FieldGroupProperties,
 * }} FilterProperties
 */

/**
 * StatusProperties
 *
 * @typedef {{
 *    required:         ElementProperties,
 *    invalid:          ElementProperties,
 *    valid:            ElementProperties,
 *    disabled:         ElementProperties,
 *    blank:            ElementProperties,
 * }} StatusProperties
 */

/**
 * MimeProperties
 *
 * - to_fmt:            A table mapping MIME type to file format.
 *
 * @typedef {{
 *    to_fmt:           Object.<string,string[]>,
 * }} MimeProperties
 */

/**
 * FieldProperties
 *
 * - empty:             Blank field value indicator.
 *
 * @typedef {{
 *    empty:            string,
 * }} FieldProperties
 */

/**
 * RepositoryProperties
 *
 * - name:              A mapping of repository name to displayable label.
 * - default:           The name of the default repository.
 *
 * @typedef {{
 *    name:             StringTable,
 *    default:          string,
 * }} RepositoryProperties
 */

/**
 * UploaderProperties
 *
 * - drag_target:       CSS class for an Uppy drag-and-drop target.
 * - preview:           CSS class for an Uppy preview thumbnail image.
 *
 * @typedef {{
 *    drag_target:      string,
 *    preview:          string,
 * }} UploaderProperties
 */

/**
 * StyleControlProperties
 *
 * @see "en.emma.search.styles"
 *
 * @typedef {{
 *     label?:          string|null|undefined,
 *     class?:          string|null|undefined,
 *     tooltip?:        string|null|undefined,
 *     field?:          string|null|undefined,
 *     active?:         boolean|string|null|undefined,
 *     func?:           function|null|undefined,
 * }} StyleControlProperties
 */

/**
 * ImageProperties
 *
 * - placeholder.alt:   Placeholder image alt text.
 * - placeholder.class: Placeholder image CSS class.
 * - placeholder.asset: Asset path for the animated "downloading" GIF.
 *
 * @typedef {{
 *    placeholder: {
 *        alt:          string,
 *        class:        string,
 *        asset:        string,
 *    },
 * }} ImageProperties
 */

/**
 * PanelProperties
 *
 * - opener:            Label/tooltip for a button to open a collapsible panel
 * - closer:            Label/tooltip for a button to close a collapsible panel
 *
 * @typedef {ToggleProperties} PanelProperties
 */

/**
 * TreeProperties
 *
 * - opener:            Label/tooltip for a button to open a collapsed tree.
 * - closer:            Label/tooltip for a button to close an expanded tree.
 *
 * @typedef {ToggleProperties} TreeProperties
 */

/**
 * GridProperties
 *
 * - column:            Properties for column toggle.
 * - row:               Properties for header row toggle.
 *
 * @typedef {{
 *    column:           ToggleProperties,
 *    row:              ToggleProperties,
 *  }} GridProperties
 */

/**
 * PopupProperties
 *
 * - button.class:      Popup activator CSS class.
 * - panel.class:       Popup panel CSS class.
 * - closer.class:      CSS class signifying a panel close control.
 * - controls.class:    CSS class for controls below the panel.
 * - deferred.class:    CSS class signifying deferred content.
 * - hidden.class:      CSS class indicating a hidden element.
 *
 * @typedef {{
 *    button:           ElementProperties,
 *    panel:            ElementProperties,
 *    closer:           ElementProperties,
 *    controls:         ElementProperties,
 *    deferred:         ElementProperties,
 *    hidden:           ElementProperties,
 * }} PopupProperties
 */

/**
 * ScrollProperties
 *
 * - target:            Properties for an element which is scrolled to the top.
 * - button:            Properties for the scroll-to-top button.
 * - down:              Properties for the scroll-down-to-top variant.
 *
 * @typedef {{
 *     target:          ElementProperties,
 *     button:          ElementProperties,
 *     down:            ElementProperties,
 * }} ScrollProperties
 */

/**
 * SearchProperties
 *
 * - type:                      Label/tooltip/placeholder for each search type.
 * - Filter.control:            Button to expand/contract search filters.
 * - Style.container:           Properties for the style button tray.
 * - Style.control.template:    Default colorize button properties.
 * - Style.control.buttons:     Properties for each colorize button.
 *
 * @typedef {{
 *    type:             Object.<string,ElementProperties>,
 *    Filter: {
 *        control:      ToggleProperties,
 *    },
 *    Style: {
 *        container:    ElementProperties,
 *        control: {
 *            template: StyleControlProperties,
 *            buttons:  Object.<string,StyleControlProperties>,
 *        },
 *    },
 * }} SearchProperties
 */

/**
 * DownloadProperties
 *
 * - button.class:      Artifact download button element CSS class.
 * - progress.class:    Artifact download progress indicator element CSS class.
 * - failure.class:     Artifact download failure message element CSS class.
 * - failure.prefix:    Prefix for download failure message labels.
 * - failure.canceled:  Failure message for a user-canceled download.
 * - failure.sign_in:   Message for authentication failure.
 * - failure.unknown:   Unknown download failure.
 *
 * @typedef {{
 *    button:           ElementProperties,
 *    progress:         ElementProperties,
 *    failure: {
 *        class:        string,
 *        prefix:       string,
 *        canceled:     string,
 *        sign_in:      string,
 *        unknown:      string,
 *    },
 * }} DownloadProperties
 */

/**
 * RecordProperties
 *
 * - GroupPanel:        Selection for type of Entry records to show.
 * - ListFilter:        Entry records filter radio button panel.
 * - FilterOptions:     Debug-only filter option panel.
 * - List:              Container for a listing of Entry records.
 * - StateGroup:        Workflow state groups.
 *
 * @typedef {{
 *    GroupPanel: {
 *        class:        string,
 *        Control: {
 *            class:    string,
 *        },
 *    },
 *    ListFilter: {
 *        class:        string,
 *        Control: {
 *            class:    string,
 *        },
 *    },
 *    FilterOptions: {
 *        class:        string,
 *        Control: {
 *            class:    string,
 *        },
 *    },
 *    List: {
 *        class:        string,
 *    },
 *    StateGroup:       string[],
 * }} RecordProperties
 */

/**
 * PathProperties
 *
 * - index:             The endpoint for listing submissions.
 * - show:              Display a single item.
 * - new:               The new entry creation form.
 * - create:            The POST endpoint for creating a database entry for the uploaded file.
 * - edit:              The existing entry modification form.
 * - update:            The POST endpoint for modifying a database entry for the uploaded file.
 * - renew:             The POST endpoint for generating a fresh database entry.
 * - reedit:            The POST endpoint for re-starting an edit workflow on an existing database entry.
 * - cancel:            The endpoint for canceling a submission.
 * - upload:            Shrine's upload endpoint (the server route to which uploads are directed).
 *
 * @typedef {{
 *    index:            string,
 *    show:             string,
 *    new?:             string,
 *    create?:          string,
 *    edit?:            string,
 *    update?:          string,
 *    delete?:          string,
 *    destroy?:         string,
 *    renew?:           string,
 *    reedit?:          string,
 *    cancel?:          string,
 *    upload?:          string,
 * }} PathProperties
 */

/**
 * ModelProperties
 *
 * - Uploader.*:        CSS classes for elements used to hold an Uppy plugin targets.
 * - Action:            Form action label/tooltips for controller actions.
 * - Filter:            Form action label/tooltips for form field filter selections.
 * - Status:            Status marker label/tooltips.
 * - Mime.to_fmt:       A table mapping MIME type to file format.
 * - Field.empty:       Blank field value indicator.
 * - Repo.default:      The name of the default repository.
 *
 * @typedef {{
 *    Path:             PathProperties,
 *    Uploader:         UploaderProperties,
 *    Action:           ControllerActionProperties,
 *    Filter:           FilterProperties,
 *    Status:           StatusProperties,
 *    Mime:             MimeProperties,
 *    Field:            FieldProperties,
 *    Repo:             RepositoryProperties,
 *    Record:           RecordProperties,
 *    Label?:           Object.<string,StringTable>,
 * }} ModelProperties
 */

// ============================================================================
// Application settings
// ============================================================================

/**
 * Values taken from the Rails project via the asset pipeline.
 *
 * Note that a change to any of the values from Rails will require either
 * recompiling the assets or a dynamic override via #page_script_settings.
 *
 * @type {object}
 *
 * @property {string}   RAILS_ENV
 * @property {boolean}  DEPLOYED
 * @property {string}   SESSION_ID
 * @property {boolean}  SEARCH_ANALYSIS
 *
 * @property {ImageProperties}    Image
 * @property {PanelProperties}    Panel
 * @property {TreeProperties}     Tree
 * @property {GridProperties}     Grid
 * @property {PopupProperties}    Popup
 * @property {ScrollProperties}   Scroll
 * @property {SearchProperties}   Search
 * @property {DownloadProperties} Download
 * @property {ActionProperties}   Lookup
 * @property {ModelProperties}    Account
 * @property {ModelProperties}    User
 * @property {ModelProperties}    Entry
 * @property {ModelProperties}    Upload
 * @property {ModelProperties}    Manifest
 * @property {ModelProperties}    ManifestItem
 */
export const Emma = (function() {

    // ========================================================================
    // Application settings
    // ========================================================================

    const settings = {

        // ====================================================================
        // General settings (at the time of asset creation).
        // ====================================================================

        RAILS_ENV:       "<%= Rails.env.to_s %>",
        DEPLOYED:        b$("<%= application_deployed? %>"),
        SESSION_ID:      '',
        SEARCH_ANALYSIS: b$("<%= SearchesDecorator::SEARCH_ANALYSIS %>"),
        APP_DEBUG:       undefined,

        // ====================================================================
        // Feature settings
        // ====================================================================

        Image: {
            placeholder: {
                alt:     "<%= ImageHelper::PLACEHOLDER_IMAGE_ALT %>",
                class:   "<%= ImageHelper::PLACEHOLDER_IMAGE_CLASS %>",
                asset:   Image_placeholder_asset,
            }
        },

        Panel: {
            opener: {
                label:   "<%= PanelHelper::PANEL_OPENER_LABEL %>",
                tooltip: "<%= PanelHelper::PANEL_OPENER_TIP %>",
            },
            closer: {
                label:   "<%= PanelHelper::PANEL_CLOSER_LABEL %>",
                tooltip: "<%= PanelHelper::PANEL_CLOSER_TIP %>",
            },
        },

        Tree: {
            opener: {
                label:   "<%= TreeHelper::TREE_OPENER_LABEL %>",
                tooltip: "<%= TreeHelper::TREE_OPENER_TIP %>",
            },
            closer: {
                label:   "<%= TreeHelper::TREE_CLOSER_LABEL %>",
                tooltip: "<%= TreeHelper::TREE_CLOSER_TIP %>",
            },
        },

        Grid:           o$('<%= js ManifestItemDecorator::GRID_HEADER %>'),

        Popup: {
            button: {
                class:   "<%= PopupHelper::POPUP_TOGGLE_CLASS %>",
            },
            panel: {
                class:   "<%= PopupHelper::POPUP_PANEL_CLASS %>",
            },
            closer: {
                class:   "<%= PopupHelper::POPUP_CLOSER_CLASS %>",
            },
            controls: {
                class:   "<%= PopupHelper::POPUP_CONTROLS_CLASS %>",
            },
            deferred: {
                class:   "<%= PopupHelper::POPUP_DEFERRED_CLASS %>",
            },
            hidden: {
                class:   "<%= PopupHelper::POPUP_HIDDEN_MARKER %>",
            },
        },

        Scroll: {
            target: o$('<%= js ScrollHelper::SCROLL_TARGET %>'),
            button: o$('<%= js ScrollHelper::SCROLL_TOP_BUTTON %>'),
            down:   o$('<%= js ScrollHelper::SCROLL_DOWN_BUTTON %>'),
        },

        Search: {
            type:   o$('<%= js SearchTermsHelper::SEARCH_TYPE %>'),
            Filter: {
                control:
                    o$('<%= js LayoutHelper::SearchFilters::ADV_SEARCH %>'),
            },
            Style: {
                container: {
                    class: "<%= SearchDecorator::STYLE_CONTAINER %>",
                },
                control: {
                    template:
                        o$('<%= js SearchDecorator::STYLE_BUTTON_TEMPLATE %>'),
                    buttons:
                        o$('<%= js SearchDecorator::STYLE_BUTTONS %>'),
                },
            },
        },

        Download: {
            button: {
                class:    "<%= ArtifactDecorator::DOWNLOAD_BUTTON_CLASS %>",
            },
            progress: {
                class:    "<%= ArtifactDecorator::DOWNLOAD_PROGRESS_CLASS %>",
            },
            failure: {
                class:    "<%= ArtifactDecorator::DOWNLOAD_FAILURE_CLASS %>",
                prefix:   "<%= I18n.t('emma.download.failure.prefix') %>",
                canceled: "<%= I18n.t('emma.download.failure.canceled') %>",
                sign_in:  "<%= I18n.t('emma.download.failure.sign_in') %>",
                unknown:  "<%= I18n.t('emma.download.failure.unknown') %>",
            },
        },

        Lookup:         o$('<%= js I18n.t(%q(emma.lookup)) %>'),

        // ====================================================================
        // Model properties
        // ====================================================================

        Account:        o$('<%= js AccountDecorator.js_properties %>'),
        User:           o$('<%= js UserDecorator.js_properties %>'),
        Entry:          o$('<%= js EntryDecorator.js_properties %>'),
        Upload:         o$('<%= js UploadDecorator.js_properties %>'),
        Manifest:       o$('<%= js ManifestDecorator.js_properties %>'),
        ManifestItem:   o$('<%= js ManifestItemDecorator.js_properties %>'),

    };

    // Update with any live data values injected from the server.
    const tag = 'OverrideScriptSettings';
    $.each(OverrideScriptSettings, function(key, value) {
        const current = settings[key];
        const type    = typeof value;
        if (type === 'undefined') {
            console.log(`${tag}: ${key}: skipping "${type}" value`);
        } else if (type === 'function') {
            console.warn(`${tag}: ${key}: invalid "${type}" value`);
        } else if (Array.isArray(current) || (typeof current !== 'object')) {
            settings[key] = value;
        } else if (type === 'object') {
            $.extend(settings[key], value);
        } else {
            console.warn(`${tag}: ${key}: cannot merge "${type}" value`);
        }
    });

    // ========================================================================
    // Exposed values
    // ========================================================================

    return deepFreeze(settings);

})();
