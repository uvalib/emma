// app/assets/javascripts/shared/assets.js.erb
//
// This file holds all of the constants that rely on ERB processing, which
// allows shared settings to be maintained in the Rails application.

// noinspection ES6ConvertVarToLetConst
/**
 * This object mirrors one that is generated by the server and injected as a
 * <script> tag preceding the one which loads all of the JavaScript for the
 * page.
 *
 * If the server has not defined OverrideScriptSettings prior to this point
 * then it is defined here as an empty object.
 *
 * @type {Emma}
 *
 * @see "HeadHelper::Scripts#page_script_settings"
 */
var OverrideScriptSettings = OverrideScriptSettings || {};

// ============================================================================
// JSDoc type definitions
// ============================================================================

/**
 * ElementProperties
 *
 * @typedef {{
 *  tag:      ?(string|null|undefined),
 *  type:     ?(string|null|undefined),
 *  class:    ?(string|null|undefined),
 *  tooltip:  ?(string|null|undefined),
 *  label:    ?(string|null|undefined),
 *  text:     ?(string|null|undefined),
 *  html:     ?(string|null|undefined)
 * }} ElementProperties
 */

/**
 * Action Properties
 *
 * @typedef {{
 *  tag:      ?(string|null|undefined),
 *  type:     ?(string|null|undefined),
 *  class:    ?(string|null|undefined),
 *  tooltip:  ?(string|null|undefined),
 *  label:    ?(string|null|undefined),
 *  text:     ?(string|null|undefined),
 *  html:     ?(string|null|undefined),
 *  enabled:  ?(ElementProperties|null|undefined),
 *  disabled: ?(ElementProperties|null|undefined)
 * }} ActionProperties
 */

/**
 * RouteActionProperties
 *
 * @typedef {{
 *  submit:  ActionProperties,
 *  cancel:  ActionProperties,
 *  select:  ?(ActionProperties|null|undefined)
 * }} RouteActionProperties
 */

/**
 * FieldGroupProperties
 *
 * @typedef {{
 *  label:    ?(string|null),
 *  tooltip:  ?(string|null),
 *  enabled:  ?(boolean|string|null),
 *  default:  ?(boolean|string|null)
 * }} FieldGroupProperties
 */

// noinspection ES6ConvertVarToLetConst, LongLine
/**
 * Values "imported" from the Rails project via the asset pipeline.
 *
 * Note that a change to any of the values from Rails will require either
 * recompiling the assets or a dynamic override via #page_script_settings.
 *
 * @type {object}
 *
 * @property {function} to_boolean
 * @property {function} to_number
 * @property {function} to_array
 * @property {function} to_object
 *
 * @property {string}   RAILS_ENV
 * @property {boolean}  DEPLOYED
 * @property {string}   SESSION_ID
 *
 * @property {object}   Image
 * @property {object}   Download
 * @property {object}   AdvSearch
 * @property {object}   Panel
 * @property {object}   Popup
 * @property {object}   Upload
 * @property {object}   Entry
 * @property {object}   Scroll
 */
var Emma = (function() {

    // ========================================================================
    // Function definitions - Type conversions
    //
    // These are primarily for *.js.erb files to allow values that will be
    // inserted by ERB pre-processing to be expressed as a string, so that the
    // Javascript has valid syntax even before pre-processing.
    // ========================================================================

    // noinspection FunctionNamingConventionJS
    /**
     * Interpret a string as a boolean value.
     *
     * @param {*} arg
     *
     * @returns {boolean}
     */
    function b$(arg) {
        switch (typeof arg) {
            case 'boolean': return arg;
            case 'string':  return arg.toLowerCase() === 'true';
            default:        return isDefined(arg);
        }
    }

    // noinspection FunctionNamingConventionJS
    /**
     * Interpret a string as a integer value.
     *
     * @param {*} arg
     *
     * @returns {number}
     */
    function i$(arg) {
        switch (typeof arg) {
            case 'number': return arg;
            case 'string': return Math.max(0, parseInt(arg));
            default:       return 0;
        }
    }

    // noinspection FunctionNamingConventionJS
    /**
     * Interpret a string as an Array definition.
     *
     * @param {*}      arg
     * @param {string} [separator]    Default: ','
     *
     * @returns {Array}
     */
    function a$(arg, separator) {
      let result = [];
      if (Array.isArray(arg)) {
          result = arg;
      } else if (typeof arg === 'object') {
          result = Object.values(arg);
      } else if (typeof arg === 'string') {
          let string = arg.trim();
          if (string.startsWith('[')) {
              result = JSON.parse(string);
          } else {
              let array = string.split(separator || ',');
              result = array.map(function(element) { return element.trim(); });
          }
      }
      return result;
    }

    // noinspection FunctionNamingConventionJS
    /**
     * Interpret a string as an Object definition.
     *
     * @param {*} arg
     *
     * @returns {object}
     */
    function o$(arg) {
        switch (typeof arg) {
            case 'object': return arg;
            case 'string': return JSON.parse(arg.replace(/\n/g, '\\n'));
            default:       return {};
        }
    }

    // ========================================================================
    // Application settings
    // ========================================================================

    // noinspection LongLine
    const settings = {

        // ====================================================================
        // Exported conversion functions
        // ====================================================================

        to_boolean: b$,
        to_number:  i$,
        to_array:   a$,
        to_object:  o$,

        // ====================================================================
        // General settings
        // ====================================================================

        RAILS_ENV:  "<%= Rails.env.to_s %>",
        DEPLOYED:   b$("<%= application_deployed? %>"),
        SESSION_ID: '',

        // ====================================================================
        // Feature settings
        // ====================================================================

        /**
         * ====================================================================
         *
         * feature/images.js
         *
         * - placeholder.alt    Placeholder image alt text.
         * - placeholder.asset  Asset path for the animated "downloading" GIF.
         * - placeholder.class  Placeholder image CSS class.
         *
         * ====================================================================
         *
         * @type {{
         *    placeholder: {
         *        alt:    string,
         *        asset:  string,
         *        class:  string,
         *    }
         * }}
         */
        Image: {
            placeholder: {
                alt:   "<%= ImageHelper::PLACEHOLDER_IMAGE_ALT %>",
                asset: "<%= asset_path(ImageHelper::PLACEHOLDER_IMAGE_ASSET) %>",
                class: "<%= ImageHelper::PLACEHOLDER_IMAGE_CLASS %>",
            }
        },

        /**
         * ====================================================================
         *
         * feature/download.js
         *
         * - button.class       Artifact download button element CSS class.
         * - progress.class     Artifact download progress indicator element CSS class.
         * - failure.class      Artifact download failure message element CSS class.
         * - failure.prefix     Prefix for download failure message labels.
         * - failure.canceled   Failure message for a user-canceled download.
         * - failure.sign_in    Message for authentication failure.
         * - failure.unknown    Unknown download failure.
         *
         * ====================================================================
         *
         * @type {{
         *    button:       ElementProperties,
         *    progress:     ElementProperties,
         *    failure: {
         *        class:    string,
         *        prefix:   string,
         *        canceled: string,
         *        sign_in:  string,
         *        unknown:  string
         *    }
         * }}
         */
        Download: {
            button: {
                class:    "<%= ArtifactHelper::DOWNLOAD_BUTTON_CLASS %>"
            },
            progress: {
                class:    "<%= ArtifactHelper::DOWNLOAD_PROGRESS_CLASS %>"
            },
            failure: {
                class:    "<%= ArtifactHelper::DOWNLOAD_FAILURE_CLASS %>",
                prefix:   "<%= I18n.t('emma.download.failure.prefix') %>",
                canceled: "<%= I18n.t('emma.download.failure.canceled') %>",
                sign_in:  "<%= I18n.t('emma.download.failure.sign_in') %>",
                unknown:  "<%= I18n.t('emma.download.failure.unknown') %>"
            }
        },

        /**
         * ====================================================================
         *
         * feature/advanced-search.js
         *
         * - opener.text      Label for button to open advanced search controls.
         * - opener.tooltip   Tooltip for button to open advanced search controls.
         * - closer.text      Label for button to close advanced search controls.
         * - closer.tooltip   Tooltip for button to close advanced search controls.
         * - search_type      Label, tooltip and placeholder for each search type
         *
         * ====================================================================
         *
         * @type {{
         *    opener:       ElementProperties,
         *    closer:       ElementProperties,
         *    search_type:  { string: ElementProperties }
         * }}
         */
        AdvSearch: {
            opener: {
                label:   "<%= LayoutHelper::SearchFilters::ADV_SEARCH_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::SearchFilters::ADV_SEARCH_OPENER_TIP %>"
            },
            closer: {
                label:   "<%= LayoutHelper::SearchFilters::ADV_SEARCH_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::SearchFilters::ADV_SEARCH_CLOSER_TIP %>"
            },
            search_type: o$('<%= SearchTermsHelper::SEARCH_TYPE.to_json %>')
        },

        /**
         * ====================================================================
         *
         * feature/panel.js
         *
         * - opener.text      Label for button to open a collapsible panel.
         * - opener.tooltip   Tooltip for button to open a collapsible panel.
         * - closer.text      Label for button to close a collapsible panel.
         * - closer.tooltip   Tooltip for button to close a collapsible panel.
         *
         * ====================================================================
         *
         * @type {{
         *    opener: ElementProperties,
         *    closer: ElementProperties,
         * }}
         */
        Panel: {
            opener: {
                label:   "<%= LayoutHelper::Common::PANEL_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_OPENER_TIP %>"
            },
            closer: {
                label:   "<%= LayoutHelper::Common::PANEL_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_CLOSER_TIP %>"
            }
        },

        /**
         * ====================================================================
         *
         * feature/popup.js
         *
         * - button.class     Popup activator CSS class.
         * - panel.class      Popup panel CSS class.
         * - closer.class     CSS class signifying a panel close control.
         * - controls.class   CSS class for controls below the panel.
         * - deferred.class   CSS class signifying deferred content.
         * - hidden.class     CSS class indicating a hidden element.
         *
         * ====================================================================
         *
         * @type {{
         *    button:   ElementProperties,
         *    panel:    ElementProperties,
         *    closer:   ElementProperties,
         *    controls: ElementProperties,
         *    deferred: ElementProperties,
         *    hidden:   ElementProperties,
         * }}
         */
        Popup: {
            button: {
                class: "<%= PopupHelper::POPUP_BUTTON_CLASS %>"
            },
            panel: {
                class: "<%= PopupHelper::POPUP_PANEL_CLASS %>"
            },
            closer: {
                class: "<%= PopupHelper::POPUP_CLOSER_CLASS %>"
            },
            controls: {
                class: "<%= PopupHelper::POPUP_CONTROLS_CLASS %>"
            },
            deferred: {
                class: "<%= PopupHelper::POPUP_DEFERRED_CLASS %>"
            },
            hidden: {
                class: "<%= PopupHelper::POPUP_HIDDEN_MARKER %>"
            }
        },

        /**
         * ====================================================================
         *
         * feature/file-upload.js
         *
         * - Path.index         The endpoint for listing submissions.
         * - Path.new           The new entry creation form.
         * - Path.edit          The existing entry modification form.
         * - Path.create        The POST endpoint for creating a database entry for the uploaded file.
         * - Path.renew         The POST endpoint for generating a fresh database entry.
         * - Path.reedit        The POST endpoint for re-starting an edit workflow on an existing database entry.
         * - Path.cancel        The endpoint for canceling a submission.
         * - Path.endpoint      Shrine's upload endpoint (the server route to which uploads are directed).
         * - Style.drag_target  CSS class for the element used to hold an Uppy drag-and-drop target.
         * - Style.preview      CSS class for the element used to hold an Uppy preview thumbnail image.
         * - Action             Form action label/tooltips for controller actions.
         * - Filter             Form action label/tooltips for form field filter selections.
         * - Status             Status marker label/tooltips.
         * - Mime.to_fmt        A table mapping MIME type to file format.
         * - Field.empty        Blank field value indicator.
         * - Repo.default       The name of the default repository.
         *
         * ====================================================================
         *
         * @type {{
         *    Path: {
         *        index:        string,
         *        new:          string,
         *        edit:         string,
         *        create:       string,
         *        renew:        string,
         *        reedit:       string,
         *        cancel:       string,
         *        endpoint:     string,
         *    },
         *    Style: {
         *        drag_target:  string,
         *        preview:      string,
         *    },
         *    Action: {
         *        new:          RouteActionProperties,
         *        edit:         RouteActionProperties,
         *        delete:       RouteActionProperties,
         *        bulk_new:     RouteActionProperties,
         *        bulk_edit:    RouteActionProperties,
         *        bulk_delete:  RouteActionProperties
         *    },
         *    Filter: {
         *        available:    FieldGroupProperties,
         *        filled:       FieldGroupProperties,
         *        invalid:      FieldGroupProperties,
         *        all:          FieldGroupProperties
         *    },
         *    Status: {
         *        required:     ElementProperties,
         *        invalid:      ElementProperties,
         *        valid:        ElementProperties,
         *        disabled:     ElementProperties
         *    },
         *    Mime: {
         *        to_fmt:       object,
         *    },
         *    Field: {
         *        empty:        string,
         *    }
         * }}
         */
        Upload: {
            Path:   o$('<%= UploadHelper::UPLOAD_PATH.to_json %>'),
            Style:  o$('<%= UploadHelper::UPLOAD_STYLE.to_json %>'),
            Action: o$('<%= UploadHelper::UPLOAD_ACTION_VALUES.to_json %>'),
            Filter: o$('<%= UploadHelper::UPLOAD_FIELD_GROUP.to_json %>'),
            Status: o$('<%= ModelHelper::STATUS_MARKER.to_json %>'),
            Mime:   { to_fmt:  o$('<%= FileNaming.mime_to_fmt.to_json %>') },
            Field:  { empty:   '<%= ModelHelper::EMPTY_VALUE %>' },
            Repo:   {
                name:    o$('<%= EmmaRepository.pairs.to_json %>'),
                default: '<%= EmmaRepository.default %>'
            }
        },

        /**
         * ====================================================================
         *
         * feature/entry-form.js
         *
         * - Path.index         The endpoint for listing submissions.
         * - Path.new           The new entry creation form.
         * - Path.edit          The existing entry modification form.
         * - Path.create        The POST endpoint for creating a database entry for the uploaded file.
         * - Path.renew         The POST endpoint for generating a fresh database entry.
         * - Path.reedit        The POST endpoint for re-starting an edit workflow on an existing database entry.
         * - Path.cancel        The endpoint for canceling a submission.
         * - Path.endpoint      Shrine's upload endpoint (the server route to which uploads are directed).
         * - Style.drag_target  CSS class for the element used to hold an Uppy drag-and-drop target.
         * - Style.preview      CSS class for the element used to hold an Uppy preview thumbnail image.
         * - Action             Form action label/tooltips for controller actions.
         * - Filter             Form action label/tooltips for form field filter selections.
         * - Status             Status marker label/tooltips.
         * - Mime.to_fmt        A table mapping MIME type to file format.
         * - Field.empty        Blank field value indicator.
         * - Repo.default       The name of the default repository.
         *
         * ====================================================================
         *
         * @type {{
         *    Path: {
         *        index:        string,
         *        new:          string,
         *        edit:         string,
         *        create:       string,
         *        renew:        string,
         *        reedit:       string,
         *        cancel:       string,
         *        endpoint:     string,
         *    },
         *    Style: {
         *        drag_target:  string,
         *        preview:      string,
         *    },
         *    Action: {
         *        new:          RouteActionProperties,
         *        edit:         RouteActionProperties,
         *        delete:       RouteActionProperties,
         *        bulk_new:     RouteActionProperties,
         *        bulk_edit:    RouteActionProperties,
         *        bulk_delete:  RouteActionProperties
         *    },
         *    Filter: {
         *        available:    FieldGroupProperties,
         *        filled:       FieldGroupProperties,
         *        invalid:      FieldGroupProperties,
         *        all:          FieldGroupProperties
         *    },
         *    Status: {
         *        required:     ElementProperties,
         *        invalid:      ElementProperties,
         *        valid:        ElementProperties,
         *        disabled:     ElementProperties
         *    },
         *    Mime: {
         *        to_fmt:       object,
         *    },
         *    Field: {
         *        empty:        string,
         *    }
         * }}
         */
        Entry: {
            Path:   o$('<%= EntryHelper::ENTRY_PATH.to_json %>'),
            Style:  o$('<%= EntryHelper::ENTRY_STYLE.to_json %>'),
            Action: o$('<%= EntryHelper::ENTRY_ACTION_VALUES.to_json %>'),
            Filter: o$('<%= EntryHelper::ENTRY_FIELD_GROUP.to_json %>'),
            Status: o$('<%= ModelHelper::STATUS_MARKER.to_json %>'),
            Mime:   { to_fmt:  o$('<%= FileNaming.mime_to_fmt.to_json %>') },
            Field:  { empty:   '<%= ModelHelper::EMPTY_VALUE %>' },
            Repo:   {
                name:    o$('<%= EmmaRepository.pairs.to_json %>'),
                default: '<%= EmmaRepository.default %>'
            }
        },

        /**
         * ====================================================================
         *
         * feature/records.js
         *
         * - GroupPanel     Selection for type of Upload records to show.
         * - PageFilter     Upload records filter radio button panel.
         * - FilterOptions  Debug-only filter option panel.
         * - List           Container for a listing of Upload records.
         * - StateGroup     Workflow state groups.
         *
         * ====================================================================
         *
         * @type {{
         *    GroupPanel:     object,
         *    PageFilter:     object,
         *    FilterOptions:  object,
         *    List:           object,
         *    StateGroup:     string[]
         * }}
         */
        Record: {
            GroupPanel: {
                class:  '<%= UploadHelper::UPLOAD_GROUP_PANEL_CLASS %>',
                Control: {
                    class: '<%= UploadHelper::UPLOAD_GROUP_CONTROL_CLASS %>'
                }
            },
            PageFilter: {
                class:  '<%= UploadHelper::UPLOAD_PAGE_FILTER_CLASS %>',
                Control: {
                    class: '<%= UploadHelper::UPLOAD_FILTER_CONTROL_CLASS %>'
                }
            },
            FilterOptions: {
                class:  '<%= UploadHelper::UPLOAD_FILTER_OPTIONS_CLASS %>',
                Control: {
                    class: '<%= UploadHelper::UPLOAD_FILTER_CONTROL_CLASS %>'
                }
            },
            List: {
                class: '<%= UploadHelper::UPLOAD_LIST_CLASS %>',
            },
            StateGroup: a$('<%= UploadHelper::UPLOAD_STATE_GROUP.keys.to_json %>'),
        },

        /**
         * ====================================================================
         *
         * feature/scroll.js
         *
         * - target   Properties for the element which is scrolled to the top.
         * - button   Properties for the scroll-to-top button.
         *
         * ====================================================================
         *
         * @type {{
         *     target:  ElementProperties,
         *     button:  ElementProperties
         * }}
         */
        Scroll: {
            target: o$('<%= LayoutHelper::Scroll::SCROLL_TARGET.to_json %>'),
            button: o$('<%= LayoutHelper::Scroll::SCROLL_TOP.to_json %>')
        }

    };

    // Update with any live data values injected from the server.
    $.each(OverrideScriptSettings, function(key, value) {
        const current = settings[key];
        if (Array.isArray(current) || (typeof current !== 'object')) {
            settings[key] = value;
        } else {
            $.extend(settings[key], value);
        }
    });

    // ========================================================================
    // Exported values.
    // ========================================================================

    return deepFreeze(settings);

})();
