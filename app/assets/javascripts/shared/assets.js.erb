// app/assets/javascripts/shared/assets.js.erb
//
// This file holds all of the constants that rely on ERB processing, which
// allows shared settings to be maintained in the Rails application.

/**
 * This object mirrors one that is generated by the server and injected as a
 * <script> tag preceding the one which loads all of the JavaScript for the
 * page.
 *
 * If the server has not defined OverrideScriptSettings prior to this point
 * then it is defined here as an empty object.
 *
 * @type {Emma}
 *
 * @see "UVA::Helper::Layout#override_script_settings"
 */
var OverrideScriptSettings = OverrideScriptSettings || {};

// noinspection LongLine
/**
 * Values "imported" from the Rails project via the asset pipeline.
 *
 * Note that a change to any of the values from Rails will require either
 * recompiling the assets or a dynamic override via #override_script_settings.
 *
 * @type {object}
 *
 * @property {function} to_boolean
 * @property {function} to_number
 * @property {function} to_array
 * @property {function} to_object
 *
 * @property {string}   RAILS_ENV
 * @property {boolean}  DEPLOYED
 *
 * @property {object}   Image
 * @property {object}   Download
 * @property {object}   AdvSearch
 * @property {object}   Panel
 * @property {object}   Upload
 */
var Emma = (function() {

    // ========================================================================
    // Function definitions - Type conversions
    //
    // These are primarily for *.js.erb files to allow values that will be
    // inserted by ERB pre-processing to be expressed as a string, so that the
    // Javascript has valid syntax even before pre-processing.
    // ========================================================================

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as a boolean value.
     *
     * @param {*} arg
     *
     * @return {boolean}
     */
    function b$(arg) {
        switch (typeof arg) {
            case 'boolean': return arg;
            case 'string':  return arg.toLowerCase() === 'true';
            default:        return isDefined(arg);
        }
    }

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as a integer value.
     *
     * @param {*} arg
     *
     * @return {number}
     */
    function i$(arg) {
        switch (typeof arg) {
            case 'number': return arg;
            case 'string': return Math.max(0, parseInt(arg));
            default:       return 0;
        }
    }

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as an Array definition.
     *
     * @param {*}      arg
     * @param {string} [separator]    Default: ','
     *
     * @return {Array}
     */
    function a$(arg, separator) {
        switch (typeof arg) {
            case 'object': return Object.values(arg);
            case 'string': return arg.split(separator || ',');
            default:       return [];
        }
    }

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as an Object definition.
     *
     * @param {*} arg
     *
     * @return {object}
     */
    function o$(arg) {
        switch (typeof arg) {
            case 'object': return arg;
            case 'string': return JSON.parse(arg.replace('\n', '\\n'));
            default:       return {};
        }
    }

    // ========================================================================
    // Application settings
    // ========================================================================

    // noinspection LongLine
    var settings = {

        // ====================================================================
        // Exported conversion functions
        // ====================================================================

        to_boolean: b$,
        to_number:  i$,
        to_array:   a$,
        to_object:  o$,

        // ====================================================================
        // General settings
        // ====================================================================

        RAILS_ENV:  "<%= Rails.env.to_s %>",
        DEPLOYED:   b$("<%= application_deployed? %>"),

        // ====================================================================
        // feature/images.js
        //
        // image.asset  Asset path for the animated "downloading" GIF.
        // image.alt    Placeholder image alt text.
        // ====================================================================

        placeholder: {
            image: {
                asset: "<%= asset_path(ImageHelper::PLACEHOLDER_IMAGE_ASSET) %>",
                alt:   "<%= ImageHelper::PLACEHOLDER_IMAGE_ALT %>"
            }
        },

        // ====================================================================
        // feature/download.js
        //
        // button.class       Artifact download button element CSS class.
        // progress.class     Artifact download progress indicator element CSS class.
        // failure.class      Artifact download failure message element CSS class.
        // failure.prefix     Prefix for download failure message labels.
        // failure.cancelled  Failure message for a user-cancelled download.
        // failure.unknown    Unknown download failure.
        // ====================================================================

        Download: {
            button: {
                class:     "<%= ArtifactHelper::DOWNLOAD_BUTTON_CLASS %>"
            },
            progress: {
                class:     "<%= ArtifactHelper::DOWNLOAD_PROGRESS_CLASS %>"
            },
            failure: {
                class:     "<%= ArtifactHelper::DOWNLOAD_FAILURE_CLASS %>",
                prefix:    "<%= I18n.t('emma.download.failure.prefix') %>",
                cancelled: "<%= I18n.t('emma.download.failure.cancelled') %>",
                unknown:   "<%= I18n.t('emma.download.failure.unknown') %>"
            }
        },

        // ====================================================================
        // feature/advanced-search.js
        //
        // opener.label     Label for button to open advanced search controls.
        // opener.tooltip   Tooltip for button to open advanced search controls.
        // closer.label     Label for button to close advanced search controls.
        // closer.tooltip   Tooltip for button to close advanced search controls.
        // ====================================================================

        AdvSearch: {
            opener: {
                label:   "<%= LayoutHelper::SearchControls::ADV_SEARCH_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::SearchControls::ADV_SEARCH_OPENER_TIP %>"
            },
            closer: {
                label:   "<%= LayoutHelper::SearchControls::ADV_SEARCH_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::SearchControls::ADV_SEARCH_CLOSER_TIP %>"
            }
        },

        // ====================================================================
        // feature/panel.js
        //
        // opener.label     Label for button to open a collapsible panel.
        // opener.tooltip   Tooltip for button to open a collapsible panel.
        // closer.label     Label for button to close a collapsible panel.
        // closer.tooltip   Tooltip for button to close a collapsible panel.
        // ====================================================================

        Panel: {
            opener: {
                label:   "<%= LayoutHelper::Common::PANEL_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_OPENER_TIP %>"
            },
            closer: {
                label:   "<%= LayoutHelper::Common::PANEL_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_CLOSER_TIP %>"
            }
        },

        // ====================================================================
        // feature/file-upload.js
        //
        // path.endpoint          Shrine's upload endpoint (the server route to
        //                          which uploads are directed).
        //
        // path.create            The POST endpoint for creating a database
        //                          entry for the uploaded file.
        //
        // css.drag_target        CSS class for the element used to hold an
        //                          Uppy drag-and-drop target.
        //
        // css.preview            CSS class for the element used to hold an
        //                          Uppy preview thumbnail image.
        //
        // mime.to_fmt            A table mapping MIME type to file format.
        //
        // Status                 Status marker label/tooltips.
        //
        // Create                 Form action label/tooltips for new/create.
        //
        // Update                 Form action labels/tooltips for edit/update.
        //
        // Delete                 Form action labels/tooltips for delete.
        //
        // ====================================================================

        Upload: {
            path: {
                index:       "<%= UploadHelper::UPLOAD_URL %>",
                create:      "<%= UploadHelper::UPLOAD_CREATE_URL %>",
                endpoint:    "<%= UploadHelper::UPLOAD_ENDPOINT_URL %>"
            },
            css: {
                drag_target: "<%= UploadHelper::UPLOAD_DRAG_TARGET_CSS %>",
                preview:     "<%= UploadHelper::UPLOAD_PREVIEW_CSS %>"
            },
            mime: {
                to_fmt:      o$('<%= FileNaming.mime_to_fmt.to_json %>')
            },
            Status: o$('<%= ModelHelper::STATUS_MARKER.to_json %>'),
            Create: o$('<%= UploadHelper::UPLOAD_CREATE_VALUES.to_json %>'),
            Update: o$('<%= UploadHelper::UPLOAD_UPDATE_VALUES.to_json %>'),
            Delete: o$('<%= UploadHelper::UPLOAD_DELETE_VALUES.to_json %>')
        }

    };

    // Update with any live data values injected from the server.
    $.each(OverrideScriptSettings, function(key, value) {
        if (settings[key]) {
            $.extend(settings[key], value);
        } else {
            settings[key] = value;
        }
    });

    // ========================================================================
    // Exported values.
    // ========================================================================

    return settings;

})();
