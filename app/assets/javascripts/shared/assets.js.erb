// app/assets/builds/javascripts-shared-assets.js
// app/assets/javascripts/shared/assets.js.erb
//
// This file holds all of the constants that rely on ERB processing, which
// allows shared settings to be maintained in the Rails application.
//
// The "emma:assets:erb" Rake task processes this file through ERB in order to
// provide current values from the Ruby-on-Rails source code, with the
// exception of Image_placeholder_asset , which is set through a <script>
// tag inserted earlier in the <head> element.
//
// @see file:lib/tasks/emma_assets.rake
// @see HeadHelper::Scripts#page_script_settings
//
// noinspection JSFileReferences, ES6UnusedImports, LongLine, LocalVariableNamingConventionJS


import { AppDebug }   from '../javascripts/application/debug';
import { deepFreeze } from '../javascripts/shared/objects';
import {
    decodeArray   as a$,
    decodeBoolean as b$,
    decodeObject  as o$,
} from '../javascripts/shared/decode';


AppDebug.file('shared/assets.js.erb');

// ============================================================================
// Type definitions
// ============================================================================

/**
 * @typedef {Object.<string,string>} StringTable
 */

/**
 * @typedef {object} ElementProperties
 *
 * @property {string|null}      [tag]
 * @property {string|null}      [type]
 * @property {string|null}      [class]
 * @property {string|null}      [icon]
 * @property {string|null}      [label]
 * @property {string|null}      [text]
 * @property {string|null}      [html]
 * @property {string|null}      [tooltip]
 * @property {function|null}    [func]
 * @property {boolean|null}     [active]
 */

/**
 * @typedef {ElementProperties} ToggleProperties
 *
 * @property {ElementProperties} opener
 *
 *  Label/tooltip for a button to open a collapsed element. <p/>
 *
 * @property {ElementProperties} closer
 *
 *  Label/tooltip for a button to close an expanded element. <p/>
 */

/**
 * @typedef {ElementProperties} ActionProperties
 *
 * @property {ElementProperties|null} [enabled]
 *
 *  Property values that apply only if the action is enabled. <p/>
 *
 * @property {ElementProperties|null} [disabled]
 *
 *  Property values that apply only if the action is disabled. <p/>
 */

/**
 * @typedef {Object.<string,ActionProperties>} ActionPropertiesTable
 */

/**
 * @typedef {object} EndpointProperties
 *
 * @property {ActionProperties} submit
 * @property {ActionProperties} cancel
 * @property {ActionProperties} [select]
 * @property {ActionProperties} [import]
 * @property {ActionProperties} [export]
 * @property {ActionProperties} [start]
 * @property {ActionProperties} [stop]
 * @property {ActionProperties} [pause]
 * @property {ActionProperties} [resume]
 */

/**
 * @typedef {object} ControllerActionProperties
 *
 * Form action label/tooltips for controller actions.
 *
 * @property {EndpointProperties} new
 * @property {EndpointProperties} edit
 * @property {EndpointProperties} delete
 * @property {EndpointProperties} [bulk_new]
 * @property {EndpointProperties} [bulk_edit]
 * @property {EndpointProperties} [bulk_delete]
 * @property {EndpointProperties} [remit]
 */

/**
 * @typedef {object} FieldGroupProperties
 *
 * @property {string|null}          [label]
 * @property {string|null}          [tooltip]
 * @property {boolean|string|null}  [enabled]
 * @property {boolean|string|null}  [default]
 */

/**
 * @typedef {object} FilterProperties
 *
 * Form action label/tooltips for form field filter selections.
 *
 * @property {FieldGroupProperties} available
 * @property {FieldGroupProperties} filled
 * @property {FieldGroupProperties} invalid
 * @property {FieldGroupProperties} all
 */

/**
 * @typedef {object} StatusProperties
 *
 * Status marker label/tooltips.
 *
 * @property {ElementProperties} required
 * @property {ElementProperties} invalid
 * @property {ElementProperties} valid
 * @property {ElementProperties} disabled
 * @property {ElementProperties} blank
 */

/**
 * @typedef {object} MimeProperties
 *
 * @property {Object.<string,string[]>} to_fmt
 *
 *  A table mapping MIME type to file format. <p/>
 */

/**
 * @typedef {object} FieldProperties
 *
 * @property {string} empty
 *
 *  Blank field value indicator. <p/>
 */

/**
 * @typedef {object} RepositoryProperties
 *
 * @property {StringTable} name
 *
 *  A mapping of repository name to displayable label. <p/>
 *
 * @property {string} default
 *
 *  The name of the default repository. <p/>
 */

/**
 * @typedef {object} UploaderProperties
 *
 * @property {string} drag_target
 *
 *  CSS class for an Uppy drag-and-drop target. <p/>
 *
 * @property {string} preview
 *
 *  CSS class for an Uppy preview thumbnail image. <p/>
 */

/**
 * @typedef {object} StyleControlProperties
 *
 * @see "en.emma.search.styles"
 *
 * @property {string|null}          [field]
 * @property {string|null}          [label]
 * @property {string|null}          [class]
 * @property {string|null}          [tooltip]
 * @property {function|null}        [func]
 * @property {boolean|string|null}  [active]
 */

/**
 * @typedef {object} AssetProperties
 *
 * @property {string} alt           Image alt text.
 * @property {string} class         Image CSS class.
 * @property {string} asset         Asset path to the image file.
 */

/**
 * @typedef {object} ImageProperties
 *
 * @property {AssetProperties} placeholder
 */

/**
 * @typedef {ToggleProperties} PanelProperties
 *
 *  Properties for a collapsible panel and its opener/closer control.
 */

/**
 * @typedef {ToggleProperties} TreeProperties
 *
 *  Properties for a collapsible tree and its opener/closer control.
 */

/**
 * @typedef {object} GridHeaderProperties
 *
 * @property {ToggleProperties} column
 * @property {ToggleProperties} row
 */

/**
 * @typedef {object} GridProperties
 *
 * @property {GridHeaderProperties}  Headers
 * @property {ActionPropertiesTable} Icons
 */

/**
 * @typedef {object} PopupProperties
 *
 * @property {ElementProperties} button
 *
 *  Popup activators. <p/>
 *
 * @property {ElementProperties} panel
 *
 *  Popup panel. <p/>
 *
 * @property {ElementProperties} closer
 *
 *  Popup panel closer control. <p/>
 *
 * @property {ElementProperties} controls
 *
 *  Popup controls below the panel. <p/>
 *
 * @property {ElementProperties} deferred
 *
 *  deferred.class: CSS class signifying deferred content. <p/>
 *
 * @property {ElementProperties} hidden
 *
 *  hidden.class: CSS class indicating a hidden element. <p/>
 */

/**
 * @typedef {object} ScrollProperties
 *
 * @property {ElementProperties} target
 *
 *  Properties for an element which is scrolled to the top. <p/>
 *
 * @property {ElementProperties} button
 *
 *  Properties for the scroll-to-top button. <p/>
 *
 * @property {ElementProperties} down
 *
 *  Properties for the scroll-down-to-top variant. <p/>
 */

/**
 * @typedef {Object.<string,ElementProperties>} SearchPropertiesType
 *
 * Label/tooltip/placeholder for each search type.
 */

/**
 * @typedef {object} SearchPropertiesFilter
 *
 * Button to expand/contract search filters.
 *
 * @property {ToggleProperties} control
 */

/**
 * @typedef {object} SearchPropertiesStyleControl
 *
 * @property {StyleControlProperties} template
 *
 *  Default colorize button properties. <p/>
 *
 * @property {Object.<string,StyleControlProperties>} buttons
 *
 *  Properties for each colorize button. <p/>
 */

/**
 * @typedef {object} SearchPropertiesStyle
 *
 * @property {ElementProperties} container
 *
 *  Properties for the style button tray. <p/>
 *
 * @property {SearchPropertiesStyleControl} control
 */

/**
 * @typedef {object} SearchProperties
 *
 * @property {SearchPropertiesType}   type
 * @property {SearchPropertiesFilter} Filter
 * @property {SearchPropertiesStyle}  Style
 */

/**
 * @typedef {object} DownloadFailureMsg
 *
 * @property {string} class
 * @property {string} prefix    Prefix for download failure message labels.
 * @property {string} canceled  Failure message for a user-canceled download.
 * @property {string} sign_in   Message for authentication failure.
 * @property {string} unknown   Unknown download failure.
 */

/**
 * @typedef {object} DownloadProperties
 *
 * @property {ElementProperties}  button    Artifact download button.
 * @property {ElementProperties}  progress  Artifact download progress.
 * @property {DownloadFailureMsg} failure   Artifact download failure message.
 */

/**
 * @typedef {object} RecordControl
 *
 * @property {string} class
 */

/**
 * @typedef {object} RecordFeature
 *
 * @property {string}        class
 * @property {RecordControl} Control
 */

/**
 * @typedef {object} RecordProperties
 *
 * @property {RecordFeature} GroupPanel
 *
 *  Selection for type of model records to show. <p/>
 *
 * @property {RecordFeature} ListFilter
 *
 *  Model records filter radio button panel. <p/>
 *
 * @property {RecordFeature} FilterOptions
 *
 *  Debug-only filter option panel. <p/>
 *
 * @property {RecordControl} List
 *
 *  Container for a listing of model records. <p/>
 *
 * @property {string[]} StateGroup
 *
 *  Workflow state groups. <p/>
 */

/**
 * @typedef {object} PathProperties
 *
 *  General controller endpoints.
 *
 * @property {string} index
 *
 *  The endpoint for listing submissions. <p/>
 *
 * @property {string} show
 *
 *  Display a single item. <p/>
 *
 * @property {string} [new]
 *
 *  The new entry creation form. <p/>
 *
 * @property {string} [create]
 *
 *  The POST endpoint for creating a database entry for the uploaded file. <p/>
 *
 * @property {string} [edit]
 *
 *  The existing entry modification form. <p/>
 *
 * @property {string} [update]
 *
 *  The POST endpoint for modifying a database entry for the uploaded file. <p/>
 *
 * @property {string} [delete]
 *
 *  <p/>
 *
 * @property {string} [destroy]
 *
 *  <p/>
 *
 * @property {string} [renew]
 *
 *  The POST endpoint for generating a fresh database entry. <p/>
 *
 * @property {string} [reedit]
 *
 *  The POST endpoint for re-starting an edit workflow on an existing database
 *  entry. <p/>
 *
 * @property {string} [cancel]
 *
 *  The endpoint for canceling a submission. <p/>
 *
 * @property {string} [upload]
 *
 *  Shrine's upload endpoint (the server route to which uploads are
 *  directed). <p/>
 */

/**
 * @typedef {object} ModelProperties
 *
 * @property {PathProperties}               Path
 * @property {UploaderProperties}           Uploader
 * @property {ControllerActionProperties}   Action
 * @property {FilterProperties}             Filter
 * @property {StatusProperties}             Status
 * @property {MimeProperties}               Mime
 * @property {FieldProperties}              Field
 * @property {RepositoryProperties}         Repo
 * @property {RecordProperties}             Record
 * @property {Object.<string,StringTable>}  [Label]
 */

/**
 * @typedef {object} AssetOverrides
 *
 * @property {object} OverrideScriptSettings
 * @property {string} Image_placeholder_asset
 */

// ============================================================================
// Application settings
// ============================================================================

/**
 * Values taken from the Rails project via the asset pipeline.
 *
 * Note that a change to any of the values from Rails will require either
 * recompiling the assets or a dynamic override via #page_script_settings.
 *
 * @type {object}
 *
 * @property {boolean}  APP_DEBUG
 * @property {string}   RAILS_ENV
 * @property {boolean}  DEPLOYED
 * @property {string}   SESSION_ID
 * @property {boolean}  SEARCH_ANALYSIS
 *
 * @property {ImageProperties}    Image
 * @property {PanelProperties}    Panel
 * @property {TreeProperties}     Tree
 * @property {GridProperties}     Grid
 * @property {PopupProperties}    Popup
 * @property {ScrollProperties}   Scroll
 * @property {SearchProperties}   Search
 * @property {DownloadProperties} Download
 * @property {ActionProperties}   Lookup
 * @property {ModelProperties}    Account
 * @property {ModelProperties}    User
 * @property {ModelProperties}    Entry
 * @property {ModelProperties}    Upload
 * @property {ModelProperties}    Manifest
 * @property {ModelProperties}    ManifestItem
 */
export const Emma = (function() {

    // ========================================================================
    // Asset precompile overrides
    // ========================================================================

    // noinspection JSUnresolvedVariable
    /**
     * The server passes current information via a <script> tag that is
     * inserted before 'application.js' in a global location that will be
     * accessible from any ES6 module.
     *
     * @type {AssetOverrides}
     *
     * @see "HeadHelper::Scripts#page_script_settings"
     */
    const ASSET_OVERRIDES   = { ...window.ASSET_OVERRIDES };
    const setting_overrides = ASSET_OVERRIDES.OverrideScriptSettings  || {};
    const image_placeholder = ASSET_OVERRIDES.Image_placeholder_asset || '';

    // ========================================================================
    // General settings (at the time of asset creation).
    // ========================================================================

    /** @type {string} */
    const RAILS_ENV =       "<%= Rails.env.to_s %>",
          SESSION_ID =      '';

    /** @type {boolean} */
    const DEPLOYED =        b$("<%= application_deployed? %>"),
          SEARCH_ANALYSIS = b$("<%= SearchesDecorator::SEARCH_ANALYSIS %>"),
          APP_DEBUG =       false;

    // ========================================================================
    // Feature settings
    // ========================================================================

    /** @type {ImageProperties} */
    const Image = {
        placeholder: {
            alt:        "<%= ImageHelper::PLACEHOLDER_IMAGE_ALT %>",
            class:      "<%= ImageHelper::PLACEHOLDER_IMAGE_CLASS %>",
            asset:      image_placeholder,
        }
    };

    /** @type {PanelProperties} */
    const Panel = {
        opener: {
            label:      "<%= PanelHelper::PANEL_OPENER_LABEL %>",
            tooltip:    "<%= PanelHelper::PANEL_OPENER_TIP %>",
        },
        closer: {
            label:      "<%= PanelHelper::PANEL_CLOSER_LABEL %>",
            tooltip:    "<%= PanelHelper::PANEL_CLOSER_TIP %>",
        },
    };

    /** @type {TreeProperties} */
    const Tree = {
        opener: {
            label:      "<%= TreeHelper::TREE_OPENER_LABEL %>",
            tooltip:    "<%= TreeHelper::TREE_OPENER_TIP %>",
        },
        closer: {
            label:      "<%= TreeHelper::TREE_CLOSER_LABEL %>",
            tooltip:    "<%= TreeHelper::TREE_CLOSER_TIP %>",
        },
    };

    /** @type {GridProperties} */
    const Grid = {
        Headers:        o$('<%= js ManifestItemDecorator::GRID_HEADER %>'),
        Icons:          o$('<%= js ManifestItemDecorator::ICONS %>'),
    };

    /** @type {PopupProperties} */
    const Popup = {
        button: {
            class:      "<%= PopupHelper::POPUP_TOGGLE_CLASS %>",
        },
        panel: {
            class:      "<%= PopupHelper::POPUP_PANEL_CLASS %>",
        },
        closer: {
            class:      "<%= PopupHelper::POPUP_CLOSER_CLASS %>",
        },
        controls: {
            class:      "<%= PopupHelper::POPUP_CONTROLS_CLASS %>",
        },
        deferred: {
            class:      "<%= PopupHelper::POPUP_DEFERRED_CLASS %>",
        },
        hidden: {
            class:      "<%= PopupHelper::POPUP_HIDDEN_MARKER %>",
        },
    };

    /** @type {ScrollProperties} */
    const Scroll = {
        target:         o$('<%= js ScrollHelper::SCROLL_TARGET %>'),
        button:         o$('<%= js ScrollHelper::SCROLL_TOP_BUTTON %>'),
        down:           o$('<%= js ScrollHelper::SCROLL_DOWN_BUTTON %>'),
    };

    /** @type {SearchProperties} */
    const Search = {
        type:           o$('<%= js SearchTermsHelper::SEARCH_TYPE %>'),
        Filter: {
            control:    o$('<%= js LayoutHelper::SearchFilters::ADV_SEARCH%>'),
        },
        Style: {
            container: {
                class:  "<%= SearchDecorator::STYLE_CONTAINER %>",
            },
            control: {
                template:
                        o$('<%= js SearchDecorator::STYLE_BUTTON_TEMPLATE %>'),
                buttons:
                        o$('<%= js SearchDecorator::STYLE_BUTTONS %>'),
            },
        },
    };

    /** @type {DownloadProperties} */
    const Download = {
        button: {
            class:      "<%= ArtifactDecorator::DOWNLOAD_BUTTON_CLASS %>",
        },
        progress: {
            class:      "<%= ArtifactDecorator::DOWNLOAD_PROGRESS_CLASS %>",
        },
        failure: {
            class:      "<%= ArtifactDecorator::DOWNLOAD_FAILURE_CLASS %>",
            prefix:     "<%= I18n.t('emma.download.failure.prefix') %>",
            canceled:   "<%= I18n.t('emma.download.failure.canceled') %>",
            sign_in:    "<%= I18n.t('emma.download.failure.sign_in') %>",
            unknown:    "<%= I18n.t('emma.download.failure.unknown') %>",
        },
    };

    /** @type {ActionProperties} */
    const Lookup =      o$('<%= js I18n.t(%q(emma.lookup)) %>');

    /** @type {ModelProperties} */
    const Account =     o$('<%= js AccountDecorator.js_properties %>'),
          User =        o$('<%= js UserDecorator.js_properties %>'),
          Entry =       o$('<%= js EntryDecorator.js_properties %>'),
          Upload =      o$('<%= js UploadDecorator.js_properties %>'),
          Manifest =    o$('<%= js ManifestDecorator.js_properties %>'),
          ManifestItem= o$('<%= js ManifestItemDecorator.js_properties %>');

    // ========================================================================
    // Application settings
    // ========================================================================

    const settings = {
        APP_DEBUG,
        RAILS_ENV,
        DEPLOYED,
        SESSION_ID,
        SEARCH_ANALYSIS,
        Image,
        Panel,
        Tree,
        Grid,
        Popup,
        Scroll,
        Search,
        Download,
        Lookup,
        Account,
        User,
        Entry,
        Upload,
        Manifest,
        ManifestItem,
    };

    // Update with any configuration values injected from the server.
    const tag = 'OverrideScriptSettings';
    $.each(setting_overrides, (key, value) => {
        const current = settings[key];
        const type    = typeof value;
        if (type === 'undefined') {
            console.log(`${tag}: ${key}: skipping "${type}" value`);
        } else if (type === 'function') {
            console.warn(`${tag}: ${key}: invalid "${type}" value`);
        } else if (Array.isArray(current) || (typeof current !== 'object')) {
            settings[key] = value;
        } else if (type === 'object') {
            settings[key] = { ...settings[key], ...value };
        } else {
            console.warn(`${tag}: ${key}: cannot merge "${type}" value`);
        }
    });

    // ========================================================================
    // Exposed values
    // ========================================================================

    return deepFreeze(settings);

})();
