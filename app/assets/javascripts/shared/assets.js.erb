// app/assets/javascripts/shared/assets.js.erb
//
// This file holds all of the constants that rely on ERB processing, which
// allows shared settings to be maintained in the Rails application.

// noinspection JSUnusedAssignment
/**
 * This object mirrors one that is generated by the server and injected as a
 * <script> tag preceding the one which loads all of the JavaScript for the
 * page.
 *
 * If the server has not defined OverrideScriptSettings prior to this point
 * then it is defined here as an empty object.
 *
 * @type {Emma}
 *
 * @see "UVA::Helper::Layout#override_script_settings"
 */
var OverrideScriptSettings = OverrideScriptSettings || {};

/**
 * @typedef {{
 *  tag:      string|null|undefined,
 *  type:     string|null|undefined,
 *  class:    string|null|undefined,
 *  tooltip:  string|null|undefined,
 *  text:     string|null|undefined,
 *  html:     string|null|undefined
 * }} ElementProperties
 */

/**
 * @typedef {{
 *  tag:      string|null|undefined,
 *  type:     string|null|undefined,
 *  class:    string|null|undefined,
 *  tooltip:  string|null|undefined,
 *  text:     string|null|undefined,
 *  html:     string|null|undefined,
 *  enabled:  ElementProperties|null|undefined,
 *  disabled: ElementProperties|null|undefined
 * }} ActionProperties
 */

/**
 * @typedef {{
 *  submit:  ActionProperties,
 *  cancel:  ActionProperties,
 *  select:  ActionProperties|null|undefined
 * }} RouteActionProperties
 */

/**
 * @typedef {{
 *  label:    string|null,
 *  tooltip:  string|null,
 *  enabled:  boolean|string|null,
 *  default:  boolean|string|null
 * }} FieldGroupProperties
 */

// noinspection LongLine
/**
 * Values "imported" from the Rails project via the asset pipeline.
 *
 * Note that a change to any of the values from Rails will require either
 * recompiling the assets or a dynamic override via #override_script_settings.
 *
 * @type {object}
 *
 * @property {function} to_boolean
 * @property {function} to_number
 * @property {function} to_array
 * @property {function} to_object
 *
 * @property {string}   RAILS_ENV
 * @property {boolean}  DEPLOYED
 *
 * @property {object}   Image
 * @property {object}   Download
 * @property {object}   AdvSearch
 * @property {object}   Panel
 * @property {object}   Upload
 */
var Emma = (function() {

    // ========================================================================
    // Function definitions - Type conversions
    //
    // These are primarily for *.js.erb files to allow values that will be
    // inserted by ERB pre-processing to be expressed as a string, so that the
    // Javascript has valid syntax even before pre-processing.
    // ========================================================================

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as a boolean value.
     *
     * @param {*} arg
     *
     * @return {boolean}
     */
    function b$(arg) {
        switch (typeof arg) {
            case 'boolean': return arg;
            case 'string':  return arg.toLowerCase() === 'true';
            default:        return isDefined(arg);
        }
    }

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as a integer value.
     *
     * @param {*} arg
     *
     * @return {number}
     */
    function i$(arg) {
        switch (typeof arg) {
            case 'number': return arg;
            case 'string': return Math.max(0, parseInt(arg));
            default:       return 0;
        }
    }

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as an Array definition.
     *
     * @param {*}      arg
     * @param {string} [separator]    Default: ','
     *
     * @return {Array}
     */
    function a$(arg, separator) {
        switch (typeof arg) {
            case 'object': return Object.values(arg);
            case 'string': return arg.split(separator || ',');
            default:       return [];
        }
    }

    // noinspection FunctionNamingConventionJS, FunctionWithMultipleReturnPointsJS
    /**
     * Interpret a string as an Object definition.
     *
     * @param {*} arg
     *
     * @return {object}
     */
    function o$(arg) {
        switch (typeof arg) {
            case 'object': return arg;
            case 'string': return JSON.parse(arg.replace('\n', '\\n'));
            default:       return {};
        }
    }

    // ========================================================================
    // Application settings
    // ========================================================================

    // noinspection LongLine
    var settings = {

        // ====================================================================
        // Exported conversion functions
        // ====================================================================

        to_boolean: b$,
        to_number:  i$,
        to_array:   a$,
        to_object:  o$,

        // ====================================================================
        // General settings
        // ====================================================================

        RAILS_ENV:  "<%= Rails.env.to_s %>",
        DEPLOYED:   b$("<%= application_deployed? %>"),

        // ====================================================================
        // Feature settings
        // ====================================================================

        /**
         * ====================================================================
         * feature/images.js
         *
         * - image.asset      Asset path for the animated "downloading" GIF.
         * - image.alt        Placeholder image alt text.
         * ====================================================================
         *
         * @type {{
         *    image: {
         *        asset:  string,
         *        alt:    string,
         *    }
         * }}
         */
        placeholder: {
            image: {
                asset: "<%= asset_path(ImageHelper::PLACEHOLDER_IMAGE_ASSET) %>",
                alt:   "<%= ImageHelper::PLACEHOLDER_IMAGE_ALT %>"
            }
        },

        /**
         * ====================================================================
         * feature/download.js
         *
         * - button.class       Artifact download button element CSS class.
         * - progress.class     Artifact download progress indicator element CSS class.
         * - failure.class      Artifact download failure message element CSS class.
         * - failure.prefix     Prefix for download failure message labels.
         * - failure.cancelled  Failure message for a user-cancelled download.
         * - failure.unknown    Unknown download failure.
         * ====================================================================
         *
         * @type {{
         *    button:         ElementProperties,
         *    progress:       ElementProperties,
         *    failure: {
         *        class:      string,
         *        prefix:     string,
         *        cancelled:  string,
         *        unknown:    string
         *    }
         * }}
         */
        Download: {
            button: {
                class:     "<%= ArtifactHelper::DOWNLOAD_BUTTON_CLASS %>"
            },
            progress: {
                class:     "<%= ArtifactHelper::DOWNLOAD_PROGRESS_CLASS %>"
            },
            failure: {
                class:     "<%= ArtifactHelper::DOWNLOAD_FAILURE_CLASS %>",
                prefix:    "<%= I18n.t('emma.download.failure.prefix') %>",
                cancelled: "<%= I18n.t('emma.download.failure.cancelled') %>",
                unknown:   "<%= I18n.t('emma.download.failure.unknown') %>"
            }
        },

        /**
         * ====================================================================
         * feature/advanced-search.js
         *
         * - opener.text      Label for button to open advanced search controls.
         * - opener.tooltip   Tooltip for button to open advanced search controls.
         * - closer.text      Label for button to close advanced search controls.
         * - closer.tooltip   Tooltip for button to close advanced search controls.
         * - search_type      Label, tooltip and placeholder for each search type
         * ====================================================================
         *
         * @type {{
         *    opener:       ElementProperties,
         *    closer:       ElementProperties,
         *    search_type:  ElementProperties
         * }}
         */
        AdvSearch: {
            opener: {
                text:    "<%= LayoutHelper::SearchControls::ADV_SEARCH_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::SearchControls::ADV_SEARCH_OPENER_TIP %>"
            },
            closer: {
                text:    "<%= LayoutHelper::SearchControls::ADV_SEARCH_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::SearchControls::ADV_SEARCH_CLOSER_TIP %>"
            },
            search_type: o$('<%= SearchTermsHelper::SEARCH_TYPE.to_json %>')
        },

        /**
         * ====================================================================
         * feature/panel.js
         *
         * - opener.text      Label for button to open a collapsible panel.
         * - opener.tooltip   Tooltip for button to open a collapsible panel.
         * - closer.text      Label for button to close a collapsible panel.
         * - closer.tooltip   Tooltip for button to close a collapsible panel.
         * ====================================================================
         *
         * @type {{
         *    opener: ElementProperties,
         *    closer: ElementProperties,
         * }}
         */
        Panel: {
            opener: {
                text:    "<%= LayoutHelper::Common::PANEL_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_OPENER_TIP %>"
            },
            closer: {
                text:    "<%= LayoutHelper::Common::PANEL_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_CLOSER_TIP %>"
            }
        },

        /**
         * ====================================================================
         * feature/popup.js
         *
         * - button.class     Popup activator CSS class.
         * - panel.class      Popup panel CSS class.
         * - closer.class     CSS class signifying a panel close control.
         * - controls.class   CSS class for controls below the panel.
         * - deferred.class   CSS class signifying deferred content.
         * ====================================================================
         *
         * @type {{
         *    button:   ElementProperties,
         *    panel:    ElementProperties,
         *    closer:   ElementProperties,
         *    controls: ElementProperties,
         *    deferred: ElementProperties,
         * }}
         */
        Popup: {
            button: {
                class: "<%= PopupHelper::POPUP_BUTTON_CLASS %>"
            },
            panel: {
                class: "<%= PopupHelper::POPUP_PANEL_CLASS %>"
            },
            closer: {
                class: "<%= PopupHelper::POPUP_CLOSER_CLASS %>"
            },
            controls: {
                class: "<%= PopupHelper::POPUP_CONTROLS_CLASS %>"
            },
            deferred: {
                class: "<%= PopupHelper::POPUP_DEFERRED_CLASS %>"
            }
        },

        /**
         * ====================================================================
         * feature/file-upload.js
         *
         * - path.endpoint    Shrine's upload endpoint (the server route to which uploads are directed).
         * - path.create      The POST endpoint for creating a database entry for the uploaded file.
         * - css.drag_target  CSS class for the element used to hold an Uppy drag-and-drop target.
         * - css.preview      CSS class for the element used to hold an Uppy preview thumbnail image.
         * - mime.to_fmt      A table mapping MIME type to file format.
         * - Status           Status marker label/tooltips.
         * - Action           Form action label/tooltips for controller actions.
         * - Filter           Form action label/tooltips for form field filter selections.
         * ====================================================================
         *
         * @type {{
         *    path: {
         *        index:          string,
         *        create:         string,
         *        endpoint:       string,
         *    },
         *    css: {
         *        target_target:  string,
         *        preview:        string,
         *    },
         *    mime: {
         *        to_fmt:         object,
         *    },
         *    Status: {
         *        required:       ElementProperties,
         *        invalid:        ElementProperties,
         *        valid:          ElementProperties,
         *        nominal:        ElementProperties
         *    },
         *    Action: {
         *        new:            RouteActionProperties,
         *        edit:           RouteActionProperties,
         *        delete:         RouteActionProperties,
         *        bulk_new:       RouteActionProperties,
         *        bulk_edit:      RouteActionProperties,
         *        bulk_delete:    RouteActionProperties
         *    },
         *    Filter: {
         *        available:      FieldGroupProperties,
         *        filled:         FieldGroupProperties,
         *        invalid:        FieldGroupProperties,
         *        all:            FieldGroupProperties
         *    }
         * }}
         */
        Upload: {
            path: {
                index:       "<%= UploadHelper::UPLOAD_URL %>",
                create:      "<%= UploadHelper::UPLOAD_CREATE_URL %>",
                endpoint:    "<%= UploadHelper::UPLOAD_ENDPOINT_URL %>"
            },
            css: {
                drag_target: "<%= UploadHelper::UPLOAD_DRAG_TARGET_CSS %>",
                preview:     "<%= UploadHelper::UPLOAD_PREVIEW_CSS %>"
            },
            mime: {
                to_fmt:      o$('<%= FileNaming.mime_to_fmt.to_json %>')
            },
            Status: o$('<%= ModelHelper::STATUS_MARKER.to_json %>'),
            Action: o$('<%= UploadHelper::UPLOAD_ACTION_VALUES.to_json %>'),
            Filter: o$('<%= UploadHelper::UPLOAD_FIELD_GROUP_VALUES.to_json %>')
        },

        /**
         * ====================================================================
         * feature/scroll.js
         *
         * - target   Properties for the element which is scrolled to the top.
         * - button   Properties for the scroll-to-top button.
         * ====================================================================
         *
         * @type {{
         *     target:  ElementProperties,
         *     button:  ElementProperties
         * }}
         */
        Scroll: {
            target: o$('<%= LayoutHelper::Scroll::SCROLL_TARGET.to_json %>'),
            button: o$('<%= LayoutHelper::Scroll::SCROLL_TOP.to_json %>')
        }

    };

    // Update with any live data values injected from the server.
    $.each(OverrideScriptSettings, function(key, value) {
        if (settings[key]) {
            $.extend(settings[key], value);
        } else {
            settings[key] = value;
        }
    });

    // ========================================================================
    // Exported values.
    // ========================================================================

    return settings;

})();
