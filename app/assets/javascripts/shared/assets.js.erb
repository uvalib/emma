// app/assets/builds/javascripts-shared-assets.js
// app/assets/javascripts/shared/assets.js.erb
//
// This file holds all of the constants that rely on ERB processing, which
// allows shared settings to be maintained in the Rails application.
//
// The "emma:assets:erb" Rake task processes this file through ERB in order to
// provide current values from the Ruby-on-Rails source code, with the
// exception of Image_placeholder_asset , which is set through a `<script>`
// tag inserted earlier in the `<head>` element.
//
// @see file:lib/tasks/emma_assets.rake
// @see HeadHelper::Scripts#page_script_settings
//
// noinspection JSFileReferences, ES6UnusedImports, LongLine, LocalVariableNamingConventionJS


import { AppDebug }   from '../javascripts/application/debug';
import { deepFreeze } from '../javascripts/shared/objects';
import {
    decodeArray   as a$,
    decodeBoolean as b$,
    decodeObject  as o$,
} from '../javascripts/shared/decode';


AppDebug.file('shared/assets.js.erb');

// ============================================================================
// Type definitions
// ============================================================================

/**
 * @typedef {Object.<string,string>} StringTable
 */

/**
 * @typedef {object} ElementProperties
 *
 * @property {string|null}      [tag]
 * @property {string|null}      [type]
 * @property {string|null}      [class]
 * @property {string|null}      [icon]
 * @property {string|null}      [label]
 * @property {string|null}      [text]
 * @property {string|null}      [html]
 * @property {string|null}      [tooltip]
 * @property {function|null}    [func]
 * @property {boolean|null}     [enabled]
 */

/**
 * @typedef {ElementProperties} ToggleProperties
 *
 * @property {ElementProperties} opener
 *
 *  Label/tooltip for a button to open a collapsed element. <p/>
 *
 * @property {ElementProperties} closer
 *
 *  Label/tooltip for a button to close an expanded element. <p/>
 */

/**
 * @typedef {ElementProperties} ActionProperties
 *
 * @property {ElementProperties|null} [if_enabled]
 *
 *  Property values that apply only if the action is enabled. <p/>
 *
 * @property {ElementProperties|null} [if_disabled]
 *
 *  Property values that apply only if the action is disabled. <p/>
 */

/**
 * @typedef {Object.<string,ActionProperties>} ActionPropertiesTable
 */

/**
 * @typedef {object} EndpointProperties
 *
 * @property {ActionProperties} submit
 * @property {ActionProperties} cancel
 * @property {ActionProperties} [select]
 * @property {ActionProperties} [import]
 * @property {ActionProperties} [export]
 * @property {ActionProperties} [start]
 * @property {ActionProperties} [stop]
 * @property {ActionProperties} [pause]
 * @property {ActionProperties} [resume]
 */

/**
 * Form action label/tooltips for controller actions.
 *
 * @typedef {object} ControllerActionProperties
 *
 * @property {EndpointProperties} new
 * @property {EndpointProperties} edit
 * @property {EndpointProperties} delete
 * @property {EndpointProperties} [bulk_new]
 * @property {EndpointProperties} [bulk_edit]
 * @property {EndpointProperties} [bulk_delete]
 * @property {EndpointProperties} [remit]
 */

/**
 * @typedef {object} FieldGroupProperties
 *
 * @property {string|null}          [label]
 * @property {string|null}          [tooltip]
 * @property {boolean|string|null}  [enabled]
 * @property {boolean|string|null}  [default]
 */

/**
 * Form action label/tooltips for form field filter selections.
 *
 * @typedef {object} FilterProperties
 *
 * @property {FieldGroupProperties} available
 * @property {FieldGroupProperties} filled
 * @property {FieldGroupProperties} invalid
 * @property {FieldGroupProperties} all
 */

/**
 * Status marker label/tooltips.
 *
 * @typedef {object} StatusProperties
 *
 * @property {ElementProperties} required
 * @property {ElementProperties} invalid
 * @property {ElementProperties} valid
 * @property {ElementProperties} disabled
 * @property {ElementProperties} blank
 */

/**
 * @typedef {object} MimeProperties
 *
 * @property {Object.<string,string[]>} to_fmt
 *
 *  A table mapping MIME type to file format. <p/>
 */

/**
 * @typedef {object} FieldProperties
 *
 * @property {string} empty
 *
 *  Blank field value indicator. <p/>
 */

/**
 * @typedef {object} RepositoryProperties
 *
 * @property {StringTable} name
 *
 *  A mapping of repository name to displayable label. <p/>
 *
 * @property {string} default
 *
 *  The name of the default repository. <p/>
 *
 * @property {string[]} partner
 *
 *  The repositories that require the "partner repository workflow". <p/>
 */

/**
 * @typedef {object} UploaderProperties
 *
 * @property {string} drag_target
 *
 *  CSS class for an Uppy drag-and-drop target. <p/>
 *
 * @property {string} preview
 *
 *  CSS class for an Uppy preview thumbnail image. <p/>
 */

/**
 * @typedef {object} StyleControlProperties
 *
 * @property {string|null}          [field]
 * @property {string|null}          [label]
 * @property {string|null}          [class]
 * @property {string|null}          [tooltip]
 * @property {function|null}        [func]
 * @property {boolean|string|null}  [enabled]
 *
 * @see "en.emma.search.styles"
 */

/**
 * @typedef {object} AssetProperties
 *
 * @property {string} alt           Image alt text.
 * @property {string} class         Image CSS class.
 * @property {string} asset         Asset path to the image file.
 */

/**
 * @typedef {object} ImageProperties
 *
 * @property {AssetProperties} placeholder
 */

/**
 * Properties for a collapsible panel and its opener/closer control.
 *
 * @typedef {ToggleProperties} PanelProperties
 */

/**
 * Properties for a collapsible tree and its opener/closer control.
 *
 * @typedef {ToggleProperties} TreeProperties
 */

/**
 * @typedef {object} GridHeaderProperties
 *
 * @property {ToggleProperties} column
 * @property {ToggleProperties} row
 */

/**
 * @typedef {object} GridProperties
 *
 * @property {GridHeaderProperties}  Headers
 * @property {ActionPropertiesTable} Icons
 */

/**
 * @typedef {object} PopupProperties
 *
 * @property {ElementProperties} button
 *
 *  Popup activators. <p/>
 *
 * @property {ElementProperties} panel
 *
 *  Popup panel. <p/>
 *
 * @property {ElementProperties} closer
 *
 *  Popup panel closer control. <p/>
 *
 * @property {ElementProperties} controls
 *
 *  Popup controls below the panel. <p/>
 *
 * @property {ElementProperties} deferred
 *
 *  deferred.class: CSS class signifying deferred content. <p/>
 *
 * @property {ElementProperties} hidden
 *
 *  hidden.class: CSS class indicating a hidden element. <p/>
 */

/**
 * @typedef {object} ScrollProperties
 *
 * @property {ElementProperties} target
 *
 *  Properties for an element which is scrolled to the top. <p/>
 *
 * @property {ElementProperties} button
 *
 *  Properties for the scroll-to-top button. <p/>
 *
 * @property {ElementProperties} down
 *
 *  Properties for the scroll-down-to-top variant. <p/>
 */

/**
 * Label/tooltip/placeholder for each search type.
 *
 * @typedef {Object.<string,ElementProperties>} SearchPropertiesType
 */

/**
 * Button to expand/contract search filters.
 *
 * @typedef {object} SearchPropertiesFilter
 *
 * @property {ToggleProperties} control
 */

/**
 * @typedef {object} SearchPropertiesStyleControl
 *
 * @property {StyleControlProperties} template
 *
 *  Default colorize button properties. <p/>
 *
 * @property {Object.<string,StyleControlProperties>} buttons
 *
 *  Properties for each colorize button. <p/>
 */

/**
 * @typedef {object} SearchPropertiesStyle
 *
 * @property {ElementProperties} container
 *
 *  Properties for the style button tray. <p/>
 *
 * @property {SearchPropertiesStyleControl} control
 */

/**
 * @typedef {object} SearchProperties
 *
 * @property {SearchPropertiesType}   type
 * @property {SearchPropertiesFilter} Filter
 * @property {SearchPropertiesStyle}  Style
 */

/**
 * @typedef {object} DownloadFailureMsg
 *
 * @property {string} class
 * @property {string} sign_in   Message for authentication failure.
 * @property {string} unknown   Unknown download failure.
 */

/**
 * @typedef {object} DownloadProperties
 *
 * @property {ElementProperties}  button    Artifact download button.
 * @property {ElementProperties}  progress  Artifact download progress.
 * @property {DownloadFailureMsg} failure   Artifact download failure message.
 */

/**
 * @typedef {object} RecordControl
 *
 * @property {string} class
 */

/**
 * @typedef {object} RecordFeature
 *
 * @property {string}        class
 * @property {RecordControl} Control
 */

/**
 * @typedef {object} RecordProperties
 *
 * @property {RecordFeature} GroupPanel
 *
 *  Selection for type of model records to show. <p/>
 *
 * @property {RecordFeature} ListFilter
 *
 *  Model records filter radio button panel. <p/>
 *
 * @property {RecordFeature} FilterOptions
 *
 *  Debug-only filter option panel. <p/>
 *
 * @property {RecordControl} List
 *
 *  Container for a listing of model records. <p/>
 *
 * @property {string[]} StateGroup
 *
 *  Workflow state groups. <p/>
 */

/**
 * General controller endpoints.
 *
 * @typedef {object} PathProperties
 *
 * @property {string} index
 *
 *  The endpoint for listing submissions. <p/>
 *
 * @property {string} show
 *
 *  Display a single item. <p/>
 *
 * @property {string} [new]
 *
 *  The new entry creation form. <p/>
 *
 * @property {string} [create]
 *
 *  The POST endpoint for creating a database entry for the uploaded file. <p/>
 *
 * @property {string} [edit]
 *
 *  The existing entry modification form. <p/>
 *
 * @property {string} [update]
 *
 *  The POST endpoint for modifying a database entry for the uploaded file. <p/>
 *
 * @property {string} [delete]
 *
 *  <p/>
 *
 * @property {string} [destroy]
 *
 *  <p/>
 *
 * @property {string} [renew]
 *
 *  The POST endpoint for generating a fresh database entry. <p/>
 *
 * @property {string} [reedit]
 *
 *  The POST endpoint for re-starting an edit workflow on an existing database
 *  entry. <p/>
 *
 * @property {string} [cancel]
 *
 *  The endpoint for canceling a submission. <p/>
 *
 * @property {string} [upload]
 *
 *  Shrine's upload endpoint (the server route to which uploads are
 *  directed). <p/>
 */

/**
 * @typedef {object} ModelProperties
 *
 * @property {PathProperties}               Path
 * @property {UploaderProperties}           Uploader
 * @property {ControllerActionProperties}   Action
 * @property {FilterProperties}             Filter
 * @property {StatusProperties}             Status
 * @property {MimeProperties}               Mime
 * @property {FieldProperties}              Field
 * @property {RecordProperties}             Record
 * @property {Object.<string,StringTable>}  [Label]
 */

/**
 * @typedef {object} AssetOverrides
 *
 * @property {object} OverrideScriptSettings
 * @property {string} Image_placeholder_asset
 */

/**
 * @typedef {object} AnalyticsProperties
 *
 * @property {boolean} enabled
 * @property {string}  site
 * @property {string}  tracker_url
 */

// ============================================================================
// Application settings
// ============================================================================

/**
 * Values taken from the Rails project via the asset pipeline. <p/>
 *
 * Note that a change to any of the values from Rails will require either
 * recompiling the assets or a dynamic override via #page_script_settings.
 *
 * @type {object}
 *
 * @property {boolean}  APP_DEBUG
 * @property {string}   RAILS_ENV
 * @property {boolean}  DEPLOYED
 * @property {string}   SESSION_ID
 * @property {boolean}  SEARCH_ANALYSIS
 *
 * @property {RepositoryProperties} Repo
 * @property {AnalyticsProperties}  Analytics
 *
 * @property {ImageProperties}    Image
 * @property {PanelProperties}    Panel
 * @property {TreeProperties}     Tree
 * @property {GridProperties}     Grid
 * @property {PopupProperties}    Popup
 * @property {ScrollProperties}   Scroll
 * @property {SearchProperties}   Search
 * @property {DownloadProperties} Download
 * @property {ActionProperties}   Lookup
 * @property {ModelProperties}    Org
 * @property {ModelProperties}    User
 * @property {ModelProperties}    Account
 * @property {ModelProperties}    Enrollment
 * @property {ModelProperties}    Upload
 * @property {ModelProperties}    Manifest
 * @property {ModelProperties}    ManifestItem
 *
 * @property {object}             Messages
 */
export const Emma = (function() {

    // ========================================================================
    // Asset precompile overrides
    // ========================================================================

    // noinspection JSUnresolvedVariable
    /**
     * The server passes current information via a `<script>` tag that is
     * inserted before "application.js" in a global location that will be
     * accessible from any ES6 module.
     *
     * @type {AssetOverrides}
     *
     * @see "HeadHelper::Scripts#page_script_settings"
     */
    const ASSET_OVERRIDES   = { ...window.ASSET_OVERRIDES };
    const setting_overrides = ASSET_OVERRIDES.OverrideScriptSettings  || {};
    const image_placeholder = ASSET_OVERRIDES.Image_placeholder_asset || '';

    // ========================================================================
    // General settings (at the time of asset creation).
    // ========================================================================

    /** @type {string} */
    const RAILS_ENV =       '<%= Rails.env.to_s %>',
          SESSION_ID =      '';

    /** @type {boolean} */
    const DEPLOYED =        b$('<%= application_deployed? %>'),
          SEARCH_ANALYSIS = b$('<%= SearchesDecorator::SEARCH_ANALYSIS %>'),
          APP_DEBUG =       false;

    // ========================================================================
    // General information
    // ========================================================================

    /** @type {RepositoryProperties} */
    const Repo = {
        name:               o$('<%= js EmmaRepository.pairs %>'),
        default:            '<%= js EmmaRepository.default %>',
        partner:            a$('<%= js EmmaRepository.partner %>'),
    };

    /** @type {AnalyticsProperties} */
    const Analytics = {
        enabled:            b$('<%= Matomo.enabled? %>'),
        site:               '<%= Matomo.site %>',
        tracker_url:        '<%= Matomo.tracker_url %>',
    };

    // ========================================================================
    // Feature settings
    // ========================================================================

    /** @type {ImageProperties} */
    const Image = {
        placeholder: {
            alt:            '<%= js ImageHelper::PLACEHOLDER_IMAGE_ALT %>',
            class:          '<%= js ImageHelper::PLACEHOLDER_IMAGE_CLASS %>',
            asset:          image_placeholder,
        },
    };

    /** @type {PanelProperties} */
    const Panel = {
        opener: {
            label:          '<%= js PanelHelper::PANEL_OPENER_LABEL %>',
            tooltip:        '<%= js PanelHelper::PANEL_OPENER_TIP %>',
        },
        closer: {
            label:          '<%= js PanelHelper::PANEL_CLOSER_LABEL %>',
            tooltip:        '<%= js PanelHelper::PANEL_CLOSER_TIP %>',
        },
    };

    /** @type {TreeProperties} */
    const Tree = {
        opener: {
            label:          '<%= js TreeHelper::TREE_OPENER_LABEL %>',
            tooltip:        '<%= js TreeHelper::TREE_OPENER_TIP %>',
        },
        closer: {
            label:          '<%= js TreeHelper::TREE_CLOSER_LABEL %>',
            tooltip:        '<%= js TreeHelper::TREE_CLOSER_TIP %>',
        },
    };

    /** @type {GridProperties} */
    const Grid = {
        Headers:            o$('<%= js ManifestItemDecorator::GRID_HEADER %>'),
        Icons:              o$('<%= js ManifestItemDecorator::ICONS %>'),
    };

    /** @type {PopupProperties} */
    const Popup = {
        button: {
            class:          '<%= js PopupHelper::POPUP_TOGGLE_CLASS %>',
        },
        panel: {
            class:          '<%= js PopupHelper::POPUP_PANEL_CLASS %>',
        },
        closer: {
            class:          '<%= js PopupHelper::POPUP_CLOSER_CLASS %>',
        },
        controls: {
            class:          '<%= js PopupHelper::POPUP_CONTROLS_CLASS %>',
        },
        deferred: {
            class:          '<%= js PopupHelper::POPUP_DEFERRED_CLASS %>',
        },
        hidden: {
            class:          '<%= js PopupHelper::POPUP_HIDDEN_MARKER %>',
        },
    };

    /** @type {ScrollProperties} */
    const Scroll = {
        target:             o$('<%= js ScrollHelper::SCROLL_TARGET %>'),
        button:             o$('<%= js ScrollHelper::SCROLL_TOP_BUTTON %>'),
        down:               o$('<%= js ScrollHelper::SCROLL_DOWN_BUTTON %>'),
    };

    /** @type {SearchProperties} */
    const Search = {
        type:               o$('<%= js SearchTermsHelper::SEARCH_TYPE %>'),
        Filter: {
            control:        o$('<%= js LayoutHelper::SearchFilters::ADV_SEARCH %>'),
        },
        Style: {
            container: {
                class:      '<%= js SearchDecorator::STYLE_CONTAINER %>',
            },
            control: {
                template:   o$('<%= js SearchDecorator::STYLE_BUTTON_TEMPLATE %>'),
                buttons:    o$('<%= js SearchDecorator::STYLE_BUTTONS %>'),
            },
        },
    };

    /** @type {DownloadProperties} */
    const Download = {
        button: {
            class:          'button',
        },
        progress: {
            class:          'progress',
            image: {
                alt:        '<%= js config_item("emma.download.progress.image.alt") %>',
            }
        },
        failure: {
            class:          'failure',
            sign_in:        '<%= js config_item("emma.download.failure.sign_in") %>',
            unknown:        '<%= js config_item("emma.download.failure.unknown") %>',
        },
    };

    /** @type {ActionProperties} */
    const Lookup =          o$('<%= js config_section("emma.lookup") %>');

    /** @type {ModelProperties} */
    const Org =             o$('<%= js OrgDecorator.js_properties %>'),
          User =            o$('<%= js UserDecorator.js_properties %>'),
          Account =         o$('<%= js AccountDecorator.js_properties %>'),
          Enrollment =      o$('<%= js EnrollmentDecorator.js_properties %>'),
          Upload =          o$('<%= js UploadDecorator.js_properties %>'),
          Manifest =        o$('<%= js ManifestDecorator.js_properties %>'),
          ManifestItem =    o$('<%= js ManifestItemDecorator.js_properties %>');

    // ========================================================================
    // Messages
    // ========================================================================

    /** @type {Object} */
    const Messages = {

        EMMA:                           '<%= js config_text(:EMMA) %>',

        all:                            '<%= js config_text(:all) %>',
        also:                           '<%= js config_text(:also) %>',
        attention:                      '<%= js config_text(:attention) %>',
        entry:                          '<%= js config_text(:entry) %>',
        error:                          '<%= js config_text(:error) %>',
        file:                           '<%= js config_text(:file) %>',
        for:                            '<%= js config_text(:for) %>',
        from:                           '<%= js config_text(:from) %>',
        invalid:                        '<%= js config_text(:invalid) %>',
        item:                           '<%= js config_text(:item) %>',
        match:                          '<%= js config_text(:match) %>',
        one:                            '<%= js config_text(:one) %>',
        original:                       '<%= js config_text(:original) %>',
        other:                          '<%= js config_text(:other) %>',
        problem:                        '<%= js config_text(:problem) %>',
        require:                        '<%= js config_text(:require) %>',
        resolved:                       '<%= js config_text(:resolved) %>',
        result:                         '<%= js config_text(:result) %>',
        still:                          '<%= js config_text(:still) %>',
        the:                            '<%= js config_text(:the) %>',

        field: {
            readonly:                   '<%= js config_text(:field, :readonly) %>',
            validation: {
                empty:                  '<%= js config_text(:field, :validation, :empty) %>',
                no_server:              '<%= js config_text(:field, :validation, :no_server) %>',
                too_big:                '<%= js config_text(:field, :validation, :too_big) %>',
                too_small:              '<%= js config_text(:field, :validation, :too_small) %>',
            },
        },
        flash: {
            client: {
                no_fetch:               '<%= js config_text(:flash, :client, :no_fetch) %>',
                no_data:                '<%= js config_text(:flash, :client, :no_data) %>',
                bad_data:               '<%= js config_text(:flash, :client, :bad_data) %>',
            },
        },
        form: {
            cancel_first:               '<%= js config_text(:form, :cancel_first) %>',
            no_lookup:                  '<%= js config_text(:form, :no_lookup) %>',
            success:                    '<%= js config_text(:form, :success) %>',
            unchangeable:               '<%= js config_text(:form, :unchangeable) %>',
            action: {
                create:                 '<%= js config_text(:form, :action, :create) %>',
                created:                '<%= js config_text(:form, :action, :created) %>',
                update:                 '<%= js config_text(:form, :action, :update) %>',
                updated:                '<%= js config_text(:form, :action, :updated) %>',
            },
        },
        lookup: {
            field_is:                   '<%= js config_text(:lookup, :field_is) %>',
            no_changes:                 '<%= js config_text(:lookup, :no_changes) %>',
            lock: {
                label:                  '<%= js config_text(:lookup, :lock, :label) %>',
                tooltip:                '<%= js config_text(:lookup, :lock, :tooltip) %>',
            },
            unlock: {
                label:                  '<%= js config_text(:lookup, :unlock, :label) %>',
                tooltip:                '<%= js config_text(:lookup, :unlock, :tooltip) %>',
            },
            column: {
                selection:              '<%= js config_text(:lookup, :column, :selection) %>',
                tag:                    '<%= js config_text(:lookup, :column, :tag) %>',
                dc_identifier:          '<%= js config_text(:lookup, :column, :dc_identifier) %>',
                dc_title:               '<%= js config_text(:lookup, :column, :dc_title) %>',
                dc_creator:             '<%= js config_text(:lookup, :column, :dc_creator) %>',
                dc_publisher:           '<%= js config_text(:lookup, :column, :dc_publisher) %>',
                emma_publicationDate:   '<%= js config_text(:lookup, :column, :emma_publicationDate) %>',
                dcterms_dateCopyright:  '<%= js config_text(:lookup, :column, :dcterms_dateCopyright) %>',
                dc_description:         '<%= js config_text(:lookup, :column, :dc_description) %>',
            },
        },
        md: {
            clipboard: {
                access:                 '<%= js config_text(:md, :clipboard, :access) %>',
                copied:                 '<%= js config_text(:md, :clipboard, :copied) %>',
                failed:                 '<%= js config_text(:md, :clipboard, :failed) %>',
                saved:                  '<%= js config_text(:md, :clipboard, :saved) %>',
                unknown:                '<%= js config_text(:md, :clipboard, :unknown) %>',
                data: {
                    image:              '<%= js config_text(:md, :clipboard, :data, :image) %>',
                    no_image:           '<%= js config_text(:md, :clipboard, :data, :no_image) %>',
                    nothing:            '<%= js config_text(:md, :clipboard, :data, :nothing) %>',
                },
                input: {
                    file_name:          '<%= js config_text(:md, :clipboard, :input, :file_name) %>',
                },
            },
            copy: {
                tooltip:                '<%= js config_text(:md, :copy, :tooltip) %>',
            },
            response: {
                error:                  '<%= js config_text(:md, :response, :error) %>',
                fatal:                  '<%= js config_text(:md, :response, :fatal) %>',
                unknown:                '<%= js config_text(:md, :response, :unknown) %>',
                no_item:                '<%= js config_text(:md, :response, :no_item) %>',
                size_limit:             '<%= js config_text(:md, :response, :size_limit) %>',
                bad_http:               '<%= js config_text(:md, :response, :bad_http) %>',
                no_data:                '<%= js config_text(:md, :response, :no_data) %>',
                no_req:                 '<%= js config_text(:md, :response, :no_req) %>',
            },
            status: {
                starting:               '<%= js config_text(:md, :status, :starting) %>',
                failed:                 '<%= js config_text(:md, :status, :failed) %>',
                fetching:               '<%= js config_text(:md, :status, :fetching) %>',
                submitting:             '<%= js config_text(:md, :status, :submitting) %>',
                initializing:           '<%= js config_text(:md, :status, :initializing) %>',
                timeout:                '<%= js config_text(:md, :status, :timeout) %>',
            },
        },
        search_analysis: {
            early_exile:                '<%= js config_text(:search_analysis, :early_exile) %>',
            error:                      '<%= js config_text(:search_analysis, :error) %>',
            fields:                     '<%= js config_text(:search_analysis, :fields) %>',
            jump:                       '<%= js config_text(:search_analysis, :jump) %>',
            late_exile:                 '<%= js config_text(:search_analysis, :late_exile) %>',
            tooltip:                    '<%= js config_text(:search_analysis, :tooltip) %>',
        },
        search_bar: {
            button: {
                label:                  '<%= js config_item("emma.search_bar.button.label") %>',
            },
        },
        search_filters: {
            remove_all:                 '<%= js config_text(:search_filters, :remove_all) %>',
        },
        status: {
            offline:                    '<%= js config_text(:status, :offline) %>',
        },
        submission: {
            all_resolved:               '<%= js config_text(:submission, :all_resolved) %>',
            all_selected:               '<%= js config_text(:submission, :all_selected) %>',
            blocked:                    '<%= js config_text(:submission, :blocked) %>',
            conn_error:                 '<%= js config_text(:submission, :conn_error) %>',
            none_saved:                 '<%= js config_text(:submission, :none_saved) %>',
            not_selectable:             '<%= js config_text(:submission, :not_selectable) %>',
            ready_for_upload:           '<%= js config_text(:submission, :ready_for_upload) %>',
            refresh:                    '<%= js config_text(:submission, :refresh) %>',
            some_selected:              '<%= js config_text(:submission, :some_selected) %>',
            still_needed:               '<%= js config_text(:submission, :still_needed) %>',
            submitted_as:               '<%= js config_text(:submission, :submitted_as) %>',
            failed: {
                cancel:                 '<%= js config_text(:submission, :failed, :cancel) %>',
                pause:                  '<%= js config_text(:submission, :failed, :pause) %>',
                resume:                 '<%= js config_text(:submission, :failed, :resume) %>',
                submit:                 '<%= js config_text(:submission, :failed, :submit) %>',
            },
            status: {
                complete:               '<%= js config_text(:submission, :status, :complete) %>',
                done:                   '<%= js config_text(:submission, :status, :done) %>',
                starting:               '<%= js config_text(:submission, :status, :starting) %>',
                step:                   '<%= js config_text(:submission, :status, :step) %>',
                unexpected:             '<%= js config_text(:submission, :status, :unexpected) %>',
            },
        },
        table: {
            sort: {
                ascending:              '<%= js config_text(:table, :sort, :ascending) %>',
                descending:             '<%= js config_text(:table, :sort, :descending) %>',
                none:                   '<%= js config_text(:table, :sort, :none) %>',
            },
        },
        uploader: {
            error:                      '<%= js config_text(:uploader, :error) %>',
            paused:                     '<%= js config_text(:uploader, :paused) %>',
            placeholder:                '<%= js config_text(:uploader, :placeholder) %>',
            results:                    '<%= js config_text(:uploader, :results) %>',
            resumed:                    '<%= js config_text(:uploader, :resumed) %>',
            state: {
                canceled:               '<%= js config_text(:uploader, :state, :canceled) %>',
                paused:                 '<%= js config_text(:uploader, :state, :paused) %>',
                resumed:                '<%= js config_text(:uploader, :state, :resumed) %>',
                retrying:               '<%= js config_text(:uploader, :state, :retrying) %>',
                uploading:              '<%= js config_text(:uploader, :state, :uploading) %>',
            },
        },
    };

    // ========================================================================
    // Application settings
    // ========================================================================

    const settings = {
        APP_DEBUG,
        RAILS_ENV,
        DEPLOYED,
        SESSION_ID,
        SEARCH_ANALYSIS,
        Repo,
        Analytics,
        Image,
        Panel,
        Tree,
        Grid,
        Popup,
        Scroll,
        Search,
        Download,
        Lookup,
        Org,
        User,
        Account,
        Enrollment,
        Upload,
        Manifest,
        ManifestItem,
        Messages,
    };

    // Update with any configuration values injected from the server.
    const tag = 'OverrideScriptSettings';
    for (const [key, value] of Object.entries(setting_overrides)) {
        const current = settings[key];
        const type    = typeof value;
        if (type === 'undefined') {
            console.log(`${tag}: ${key}: skipping "${type}" value`);
        } else if (type === 'function') {
            console.warn(`${tag}: ${key}: invalid "${type}" value`);
        } else if (Array.isArray(current) || (typeof current !== 'object')) {
            settings[key] = value;
        } else if (type === 'object') {
            settings[key] = { ...settings[key], ...value };
        } else {
            console.warn(`${tag}: ${key}: cannot merge "${type}" value`);
        }
    }

    // ========================================================================
    // Exposed values
    // ========================================================================

    return deepFreeze(settings);

})();
