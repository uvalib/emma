// app/assets/builds/javascripts-shared-assets.js
// app/assets/javascripts/shared/assets.js.erb
//
// This file holds all of the constants that rely on ERB processing, which
// allows shared settings to be maintained in the Rails application.
//
// The "emma_assets:erb" Rake task processes this file through ERB in order to
// provide current values from the Ruby-on-Rails source code, with the
// exception of Image_placeholder_asset , which is set through a <script>
// tag inserted earlier in the <head> element.
//
// @see file:lib/tasks/emma_assets.rake
// @see HeadHelper::Scripts#page_script_settings
//
// noinspection JSFileReferences, LongLine


import { deepFreeze } from '../javascripts/shared/objects'
import {
    decodeArray   as a$,
    decodeBoolean as b$,
    decodeObject  as o$,
} from '../javascripts/shared/decode'


// noinspection JSUnresolvedVariable
/**
 * The server passes current information via a <script> tag that is inserted
 * before 'application.js' in a global location that will be accessible from
 * any ES6 module.
 *
 * @type {{OverrideScriptSettings: object, Image_placeholder_asset: string}}
 *
 * @see "HeadHelper::Scripts#page_script_settings"
 */
let ASSET_OVERRIDES = window.ASSET_OVERRIDES || {};

/**
 * Updated top-level values.
 *
 * @type {object}
 */
let OverrideScriptSettings = ASSET_OVERRIDES.OverrideScriptSettings || {};

/**
 * Current path to the placeholder asset.
 *
 * @type {string}
 */
let Image_placeholder_asset = ASSET_OVERRIDES.Image_placeholder_asset || {};

// ============================================================================
// JSDoc type definitions
// ============================================================================

/**
 * ElementProperties
 *
 * @typedef {{
 *     active:      ?(boolean|null|undefined),
 *     tag:         ?(string|null|undefined),
 *     type:        ?(string|null|undefined),
 *     class:       ?(string|null|undefined),
 *     tooltip:     ?(string|null|undefined),
 *     label:       ?(string|null|undefined),
 *     text:        ?(string|null|undefined),
 *     html:        ?(string|null|undefined),
 *     func:        ?(function|null|undefined),
 * }} ElementProperties
 */

/**
 * ToggleProperties
 *
 * @typedef {{
 *     opener:      ElementProperties,
 *     closer:      ElementProperties,
 * }} ToggleProperties
 */

/**
 * Action Properties
 *
 * @typedef {{
 *     tag:         ?(string|null|undefined),
 *     type:        ?(string|null|undefined),
 *     class:       ?(string|null|undefined),
 *     tooltip:     ?(string|null|undefined),
 *     label:       ?(string|null|undefined),
 *     text:        ?(string|null|undefined),
 *     html:        ?(string|null|undefined),
 *     enabled:     ?(ElementProperties|null|undefined),
 *     disabled:    ?(ElementProperties|null|undefined),
 * }} ActionProperties
 */

/**
 * RouteActionProperties
 *
 * @typedef {{
 *     submit:      ActionProperties,
 *     cancel:      ActionProperties,
 *     select:      ?(ActionProperties|null|undefined),
 * }} RouteActionProperties
 */

/**
 * FieldGroupProperties
 *
 * @typedef {{
 *     label:       ?(string|null),
 *     tooltip:     ?(string|null),
 *     enabled:     ?(boolean|string|null),
 *     default:     ?(boolean|string|null),
 * }} FieldGroupProperties
 */

/**
 * StyleControlProperties
 *
 * @see "en.emma.search.styles"
 *
 * @typedef {{
 *     label:       ?(string|null|undefined),
 *     class:       ?(string|null|undefined),
 *     tooltip:     ?(string|null|undefined),
 *     field:       ?(string|null|undefined),
 *     active:      ?(boolean|string|null|undefined),
 *     func:        ?(function|null|undefined),
 * }} StyleControlProperties
 */

/**
 * ImageProperties
 *
 * - placeholder.alt    Placeholder image alt text.
 * - placeholder.class  Placeholder image CSS class.
 * - placeholder.asset  Asset path for the animated "downloading" GIF.
 *
 * @typedef {{
 *    placeholder: {
 *        alt:      string,
 *        class:    string,
 *        asset:    string,
 *    },
 * }} ImageProperties
 */

/**
 * PanelProperties
 *
 * - opener             Label/tooltip for a button to open a collapsible panel
 * - closer             Label/tooltip for a button to close a collapsible panel
 *
 * @typedef {ToggleProperties} PanelProperties
 */

/**
 * TreeProperties
 *
 * - opener             Label/tooltip for a button to open a collapsed tree.
 * - closer             Label/tooltip for a button to close an expanded tree.
 *
 * @typedef {ToggleProperties} TreeProperties
 */

/**
 * PopupProperties
 *
 * - button.class       Popup activator CSS class.
 * - panel.class        Popup panel CSS class.
 * - closer.class       CSS class signifying a panel close control.
 * - controls.class     CSS class for controls below the panel.
 * - deferred.class     CSS class signifying deferred content.
 * - hidden.class       CSS class indicating a hidden element.
 *
 * @typedef {{
 *    button:       ElementProperties,
 *    panel:        ElementProperties,
 *    closer:       ElementProperties,
 *    controls:     ElementProperties,
 *    deferred:     ElementProperties,
 *    hidden:       ElementProperties,
 * }} PopupProperties
 */

/**
 * SearchProperties
 *
 * - type                       Label/tooltip/placeholder for each search type.
 * - Filter.control             Button to expand/contract search filters.
 * - Style.container            Properties for the style button tray.
 * - Style.control.template     Default colorize button properties.
 * - Style.control.buttons      Properties for each colorize button.
 *
 * @typedef {{
 *    type:             Object.<string,ElementProperties>,
 *    Filter: {
 *        control:      ToggleProperties,
 *    },
 *    Style: {
 *        container:    ElementProperties,
 *        control: {
 *            template: StyleControlProperties,
 *            buttons:  Object<StyleControlProperties>,
 *        },
 *    },
 * }} SearchProperties
 */

/**
 * DownloadProperties
 *
 * - button.class       Artifact download button element CSS class.
 * - progress.class     Artifact download progress indicator element CSS class.
 * - failure.class      Artifact download failure message element CSS class.
 * - failure.prefix     Prefix for download failure message labels.
 * - failure.canceled   Failure message for a user-canceled download.
 * - failure.sign_in    Message for authentication failure.
 * - failure.unknown    Unknown download failure.
 *
 * @typedef {{
 *    button:       ElementProperties,
 *    progress:     ElementProperties,
 *    failure: {
 *        class:    string,
 *        prefix:   string,
 *        canceled: string,
 *        sign_in:  string,
 *        unknown:  string,
 *    },
 * }} DownloadProperties
 */

/**
 * EntryProperties
 *
 * - Path.index         The endpoint for listing submissions.
 * - Path.new           The new entry creation form.
 * - Path.edit          The existing entry modification form.
 * - Path.create        The POST endpoint for creating a database entry for the uploaded file.
 * - Path.renew         The POST endpoint for generating a fresh database entry.
 * - Path.reedit        The POST endpoint for re-starting an edit workflow on an existing database entry.
 * - Path.cancel        The endpoint for canceling a submission.
 * - Path.endpoint      Shrine's upload endpoint (the server route to which uploads are directed).
 * - Style.drag_target  CSS class for the element used to hold an Uppy drag-and-drop target.
 * - Style.preview      CSS class for the element used to hold an Uppy preview thumbnail image.
 * - Action             Form action label/tooltips for controller actions.
 * - Filter             Form action label/tooltips for form field filter selections.
 * - Status             Status marker label/tooltips.
 * - Mime.to_fmt        A table mapping MIME type to file format.
 * - Field.empty        Blank field value indicator.
 * - Repo.default       The name of the default repository.
 *
 * @typedef {{
 *    Path: {
 *        index:        string,
 *        new:          string,
 *        edit:         string,
 *        create:       string,
 *        renew:        string,
 *        reedit:       string,
 *        cancel:       string,
 *        endpoint:     string,
 *    },
 *    Style: {
 *        drag_target:  string,
 *        preview:      string,
 *    },
 *    Action: {
 *        new:          RouteActionProperties,
 *        edit:         RouteActionProperties,
 *        delete:       RouteActionProperties,
 *        bulk_new:     RouteActionProperties,
 *        bulk_edit:    RouteActionProperties,
 *        bulk_delete:  RouteActionProperties,
 *    },
 *    Filter: {
 *        available:    FieldGroupProperties,
 *        filled:       FieldGroupProperties,
 *        invalid:      FieldGroupProperties,
 *        all:          FieldGroupProperties,
 *    },
 *    Status: {
 *        required:     ElementProperties,
 *        invalid:      ElementProperties,
 *        valid:        ElementProperties,
 *        disabled:     ElementProperties,
 *    },
 *    Mime: {
 *        to_fmt:       Object.<string,string[]>,
 *    },
 *    Field: {
 *        empty:        string,
 *    },
 *    Repo: {
 *        name:         Object.<string,string>,
 *        default:      string,
 *    },
 * }} EntryProperties
 */

/**
 * RecordProperties
 *
 * - GroupPanel         Selection for type of Entry records to show.
 * - PageFilter         Entry records filter radio button panel.
 * - FilterOptions      Debug-only filter option panel.
 * - List               Container for a listing of Entry records.
 * - StateGroup         Workflow state groups.
 *
 * @typedef {{
 *    GroupPanel:       object,
 *    PageFilter:       object,
 *    FilterOptions:    object,
 *    List:             object,
 *    StateGroup:       string[],
 * }} RecordProperties
 */

/**
 * ScrollProperties
 *
 * - target             Properties for an element which is scrolled to the top.
 * - button             Properties for the scroll-to-top button.
 *
 * @typedef {{
 *     target:      ElementProperties,
 *     button:      ElementProperties,
 * }} ScrollProperties
 */

// ============================================================================
// Application settings
// ============================================================================

/**
 * Values taken from the Rails project via the asset pipeline.
 *
 * Note that a change to any of the values from Rails will require either
 * recompiling the assets or a dynamic override via #page_script_settings.
 *
 * @type {object}
 *
 * @property {string}   RAILS_ENV
 * @property {boolean}  DEPLOYED
 * @property {string}   SESSION_ID
 *
 * @property {ImageProperties}    Image
 * @property {PanelProperties}    Panel
 * @property {TreeProperties}     Tree
 * @property {PopupProperties}    Popup
 * @property {SearchProperties}   Search
 * @property {DownloadProperties} Download
 * @property {EntryProperties}    Upload
 * @property {EntryProperties}    Entry
 * @property {RecordProperties}   UploadRecord
 * @property {RecordProperties}   EntryRecord
 * @property {ScrollProperties}   Scroll
 */
export const Emma = (function() {

    // ========================================================================
    // Application settings
    // ========================================================================

    const settings = {

        // ====================================================================
        // General settings (at the time of asset creation).
        // ====================================================================

        RAILS_ENV:  "<%= Rails.env.to_s %>",
        DEPLOYED:   b$("<%= application_deployed? %>"),
        SESSION_ID: '',

        // ====================================================================
        // Feature settings
        // ====================================================================

        Image: {
            placeholder: {
                alt:    "<%= ImageHelper::PLACEHOLDER_IMAGE_ALT %>",
                class:  "<%= ImageHelper::PLACEHOLDER_IMAGE_CLASS %>",
                asset:  Image_placeholder_asset,
            }
        },

        Panel: {
            opener: {
                label:   "<%= LayoutHelper::Common::PANEL_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_OPENER_TIP %>",
            },
            closer: {
                label:   "<%= LayoutHelper::Common::PANEL_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::PANEL_CLOSER_TIP %>",
            },
        },

        Tree: {
            opener: {
                label:   "<%= LayoutHelper::Common::TREE_OPENER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::TREE_OPENER_TIP %>",
            },
            closer: {
                label:   "<%= LayoutHelper::Common::TREE_CLOSER_LABEL %>",
                tooltip: "<%= LayoutHelper::Common::TREE_CLOSER_TIP %>",
            },
        },

        Popup: {
            button: {
                class:   "<%= PopupHelper::POPUP_BUTTON_CLASS %>",
            },
            panel: {
                class:   "<%= PopupHelper::POPUP_PANEL_CLASS %>",
            },
            closer: {
                class:   "<%= PopupHelper::POPUP_CLOSER_CLASS %>",
            },
            controls: {
                class:   "<%= PopupHelper::POPUP_CONTROLS_CLASS %>",
            },
            deferred: {
                class:   "<%= PopupHelper::POPUP_DEFERRED_CLASS %>",
            },
            hidden: {
                class:   "<%= PopupHelper::POPUP_HIDDEN_MARKER %>",
            },
        },

        Search: {
            type:       o$('<%= js SearchTermsHelper::SEARCH_TYPE %>'),
            Filter: {
                control:
                    o$('<%= js LayoutHelper::SearchFilters::ADV_SEARCH %>'),
            },
            Style: {
                container: {
                    class:  "<%= SearchHelper::SEARCH_STYLE_CONTAINER %>",
                },
                control: {
                    template:
                        o$('<%= js SearchHelper::SEARCH_STYLE_BUTTON_TEMPLATE %>'),
                    buttons:
                        o$('<%= js SearchHelper::SEARCH_STYLE_BUTTONS %>'),
                },
            },
        },

        Download: {
            button: {
                class:      "<%= ArtifactHelper::DOWNLOAD_BUTTON_CLASS %>",
            },
            progress: {
                class:      "<%= ArtifactHelper::DOWNLOAD_PROGRESS_CLASS %>",
            },
            failure: {
                class:      "<%= ArtifactHelper::DOWNLOAD_FAILURE_CLASS %>",
                prefix:     "<%= I18n.t('emma.download.failure.prefix') %>",
                canceled:   "<%= I18n.t('emma.download.failure.canceled') %>",
                sign_in:    "<%= I18n.t('emma.download.failure.sign_in') %>",
                unknown:    "<%= I18n.t('emma.download.failure.unknown') %>",
            },
        },

        Upload: {
            Path:        o$('<%= js UploadHelper::UPLOAD_PATH %>'),
            Style:       o$('<%= js UploadHelper::UPLOAD_STYLE %>'),
            Action:      o$('<%= js UploadHelper::UPLOAD_ACTION_VALUES %>'),
            Filter:      o$('<%= js UploadHelper::UPLOAD_FIELD_GROUP %>'),
            Status:      o$('<%= js ModelHelper::Form::STATUS_MARKER %>'),
            Mime: {
                to_fmt:  o$('<%= js FileNaming.mime_to_fmt %>'),
            },
            Field: {
                empty:   '<%= ModelHelper::Fields::EMPTY_VALUE %>',
            },
            Repo:   {
                name:    o$('<%= js EmmaRepository.pairs %>'),
                default: '<%= EmmaRepository.default %>',
            },
        },

        Entry: {
            Path:        o$('<%= js EntryHelper::ENTRY_PATH %>'),
            Style:       o$('<%= js EntryHelper::ENTRY_STYLE %>'),
            Action:      o$('<%= js EntryHelper::ENTRY_ACTION_VALUES %>'),
            Filter:      o$('<%= js EntryHelper::ENTRY_FIELD_GROUP %>'),
            Status:      o$('<%= js ModelHelper::Form::STATUS_MARKER %>'),
            Mime: {
                to_fmt:  o$('<%= js FileNaming.mime_to_fmt %>'),
            },
            Field: {
                empty:   '<%= ModelHelper::Fields::EMPTY_VALUE %>',
            },
            Repo:   {
                name:    o$('<%= js EmmaRepository.pairs %>'),
                default: '<%= EmmaRepository.default %>',
            },
        },

        UploadRecord: {
            GroupPanel: {
                class:      '<%= UploadHelper::UPLOAD_GROUP_PANEL_CLASS %>',
                Control: {
                    class:  '<%= UploadHelper::UPLOAD_GROUP_CONTROL_CLASS %>',
                },
            },
            PageFilter: {
                class:      '<%= UploadHelper::UPLOAD_PAGE_FILTER_CLASS %>',
                Control: {
                    class:  '<%= UploadHelper::UPLOAD_FILTER_CONTROL_CLASS %>',
                },
            },
            FilterOptions: {
                class:      '<%= UploadHelper::UPLOAD_FILTER_OPTIONS_CLASS %>',
                Control: {
                    class:  '<%= UploadHelper::UPLOAD_FILTER_CONTROL_CLASS %>',
                },
            },
            List: {
                class:      '<%= UploadHelper::UPLOAD_LIST_CLASS %>',
            },
            StateGroup: a$('<%= js UploadHelper::UPLOAD_STATE_GROUP.keys %>'),
        },

        EntryRecord: {
            GroupPanel: {
                class:      '<%= EntryHelper::ENTRY_GROUP_PANEL_CLASS %>',
                Control: {
                    class:  '<%= EntryHelper::ENTRY_GROUP_CONTROL_CLASS %>',
                },
            },
            PageFilter: {
                class:      '<%= EntryHelper::ENTRY_PAGE_FILTER_CLASS %>',
                Control: {
                    class:  '<%= EntryHelper::ENTRY_FILTER_CONTROL_CLASS %>',
                },
            },
            FilterOptions: {
                class:      '<%= EntryHelper::ENTRY_FILTER_OPTIONS_CLASS %>',
                Control: {
                    class:  '<%= EntryHelper::ENTRY_FILTER_CONTROL_CLASS %>',
                },
            },
            List: {
                class:      '<%= EntryHelper::ENTRY_LIST_CLASS %>',
            },
            StateGroup: a$('<%= js EntryHelper::ENTRY_STATE_GROUP.keys %>'),
        },

        Scroll: {
            target:     o$('<%= js LayoutHelper::Scroll::SCROLL_TARGET %>'),
            button:     o$('<%= js LayoutHelper::Scroll::SCROLL_TOP %>'),
        }

    };

    // Update with any live data values injected from the server.
    const tag = 'OverrideScriptSettings';
    $.each(OverrideScriptSettings, function(key, value) {
        const current = settings[key];
        const type    = typeof value;
        if (type === 'undefined') {
            console.log(`${tag}: ${key}: skipping "${type}" value`);
        } else if (type === 'function') {
            console.warn(`${tag}: ${key}: invalid "${type}" value`);
        } else if (Array.isArray(current) || (typeof current !== 'object')) {
            settings[key] = value;
        } else if (type === 'object') {
            $.extend(settings[key], value);
        } else {
            console.warn(`${tag}: ${key}: cannot merge "${type}" value`);
        }
    });

    // ========================================================================
    // Exposed values
    // ========================================================================

    return deepFreeze(settings);

})();
