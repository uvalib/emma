// app/assets/stylesheets/shared/_mixins.scss

@use 'shared/variables' as *;
@use 'shared/common'    as *;

// ============================================================================
// Generic - Widths
// ============================================================================

/// Set width to the available width.
///
/// @param {String} $fall-back        The value that will be used for MS Edge
///                                     and Internet Explorer (since they don't
///                                     support any "fit-content" variant).
///
// noinspection CssInvalidPropertyValue
@mixin width-available($fall-back: 50%) {
    width: $fall-back;
    width: -webkit-fill-available;      // NOTE: valid but flagged by RubyMine
    width: -moz-available;
    width: available;
}

/// Set max width to the available width.
///
/// @param {String} $fall-back        The value that will be used for MS Edge
///                                     and Internet Explorer (since they don't
///                                     support any "fit-content" variant).
///
// noinspection CssInvalidPropertyValue
@mixin max-width-available($fall-back: 100%) {
    max-width: $fall-back;
    max-width: -webkit-fill-available;  // NOTE: valid but flagged by RubyMine
    max-width: -moz-available;          // NOTE: valid but flagged by RubyMine
    max-width: available;
}

/// Set width to fit the content.
///
/// @param {String} $fall-back        The value that will be used for MS Edge
///                                     and Internet Explorer (since they don't
///                                     support any "fit-content" variant).
///
// noinspection CssInvalidPropertyValue
@mixin width-fit-content($fall-back: auto) {
    width: $fall-back;
    width: -webkit-fit-content;         // NOTE: valid but flagged by RubyMine
    width: -moz-fit-content;
    width: fit-content;
}

// ============================================================================
// Generic - Heights
// ============================================================================

/// Set height to the available vertical space.
///
/// @param {String} $fall-back        The value that will be used for MS Edge
///                                     and Internet Explorer (since they don't
///                                     support any "fit-content" variant).
///
// noinspection CssInvalidPropertyValue
@mixin height-available($fall-back: 50%) {
    height: $fall-back;
    height: -webkit-fill-available;     // NOTE: valid but flagged by RubyMine
    height: -moz-available;             // NOTE: valid but flagged by RubyMine
    height: available;
}

/// Set height to fit the content.
///
/// @param {String} $fall-back        The value that will be used for MS Edge
///                                     and Internet Explorer (since they don't
///                                     support any "fit-content" variant).
///
// noinspection CssInvalidPropertyValue
@mixin height-fit-content($fall-back: auto) {
    height: $fall-back;
    height: -webkit-fit-content;        // NOTE: valid but flagged by RubyMine
    height: -moz-fit-content;           // NOTE: valid but flagged by RubyMine
    height: fit-content;
}

//=============================================================================
// Page/column breaks
//=============================================================================

/// Control page/column break before an element.
///
/// @param {String} $value
///
@mixin break-before($value) {
    -webkit-column-break-before: $value;
    page-break-before:           $value;
    break-before:                $value;
}

/// Control page/column break inside an element.
///
/// @param {String} $value
///
@mixin break-inside($value) {
    -webkit-column-break-inside: $value;
    page-break-inside:           $value;
    break-inside:                $value;
}

/// Control page/column break after an element.
///
/// @param {String} $value
///
@mixin break-after($value) {
    -webkit-column-break-after: $value;
    page-break-after:           $value;
    break-after:                $value;
}

// ============================================================================
// Input
// ============================================================================

/// Prevent text from being selectable (when double-clicking for example).
///
/// @param {String} $value            Use "none" to turn off selection.
///
@mixin user-select($value) {
    -webkit-user-select: $value;
    -moz-user-select:    $value;
    user-select:         $value;
}

// ============================================================================
// Special
// ============================================================================

/// Make an element only visible to screen readers.
///
/// This was made a mixin so that the effect could be applied within @media
/// queries.  (Using @extend inside a @media query makes SASS crash.)
///
@mixin screen-reader-only {

    // Make the element visually undetectable.
    position: absolute;
    width:    1px;
    height:   1px;
    padding:  0;
    margin:   -1px;
    border:   0;
    overflow: hidden;
    clip:     rect(0 0 0 0);

    // Satisfy accessibility checks for contrast.
    color:      black !important;
    background: white !important;
}
