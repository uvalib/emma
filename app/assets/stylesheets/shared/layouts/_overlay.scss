// app/assets/stylesheets/shared/layouts/_overlay.scss
//
// Shared definitions supporting `layouts/overlay/*`.

@use "shared/variables" as v;
@use "shared/functions" as f;

//=============================================================================
// Constants
//=============================================================================

$default-bg:     #00000008; // Effectively dims the screen a little.
$default-height: 100vh;     // Enough to cover the viewport.

//=============================================================================
// Basic overlay mixins
//=============================================================================

/// Make an overlay which covers the screen.
///
/// @param {Numeric} $bg              Overlay background.
/// @param {Numeric} $height          At least enough to cover the viewport
///
@mixin fill($bg: $default-bg, $height: $default-height) {
    & {
        position:   absolute;
        top:        0;
        left:       0;
        display:    block;
        width:      100%;
        height:     $height;
        min-height: $default-height;
        background: $bg;
    }
}

/// Make an overlay which covers the screen when the ".visible" class is added
/// to the element.
///
/// @param {Numeric} $bg              Overlay background.
/// @param {Numeric} $height          At least enough to cover the viewport
///
@mixin fill-hidden($bg: $default-bg, $height: $default-height) {

    @include fill($bg, $height);

    // Add the "visible" class to the element to make the overlay appear.
    &.visible {
        z-index: v.$z-overlay;
        opacity: 1;
    }

    // Without the addition of the "visible" class, the overlay remains hidden.
    &:not(.visible) {
        z-index: v.$z-hidden;
        opacity: 0;
    }

}

/// Make a dynamic overlay.
///
/// @param {Numeric} $duration        Speed of overlay appearance.
/// @param {Numeric} $delay           Start of overlay appearance.
/// @param {Numeric} $bg              Overlay background.
///
@mixin fill-animated($duration: 0.75s, $delay: 1s, $bg: $default-bg) {

    @include fill-hidden($bg);

    & {
        transition:
            opacity    $duration ease-in $delay,
            background $duration ease-in $delay;
    }

    // Wrapper for overlay features that should remain in place on the screen.
    .content {
        position: sticky;
        display:  block;
    }
}

//=============================================================================
// Content overlay mixins
//=============================================================================

/// Make a dynamic overlay.
///
/// @param {Numeric} $width           Width of image element.
/// @param {Numeric} $height          Height of image element.
/// @param {Numeric} $y-pos           Distance of image from top of screen.
/// @param {Numeric} $x-pos           Distance of image from left of screen.
///
@mixin base(
    $width:  unset,
    $height: unset,
    $y-pos:  unset,
    $x-pos:  unset,
    $fill:   true,
) {
    $width:  if($width,  $width,  "unset");
    $height: if($height, $height, "unset");
    $y-pos:  if($y-pos,  $y-pos,  "unset");
    $x-pos:  if($x-pos,  $x-pos,  "unset");

    @if $fill {
        @include fill-animated;
    }

    & {
        display:         flex;
        align-items:     center;
        justify-content: center;
    }

    .content {
        top:     $y-pos;
        left:    $x-pos;
        width:   $width;
        height:  $height;
        margin:  0;
        padding: 0;
        @if ($height == "unset") or ($width == "unset") {
            aspect-ratio: 1/1;
        }
    }
}

/// Make a dynamic overlay featuring an image.
///
/// @param {String}  $path            Path to image file.
/// @param {Numeric} $width           Width of image element.
/// @param {Numeric} $height          Height of image element.
/// @param {Numeric} $y-pos           Distance of image from top of screen.
/// @param {Numeric} $x-pos           Distance of image from left of screen.
///
@mixin image(
    $path,
    $width:  unset,
    $height: unset,
    $y-pos:  50vh,
    $x-pos:  unset,
    $fill:   true,
) {
    @include base(
        $width:  $width,
        $height: $height,
        $y-pos:  $y-pos,
        $x-pos:  $x-pos,
        $fill:   $fill,
    );

    &.visible {
        height: 100vh;
    }

    .content {
        background-image:    url($path);
        background-repeat:   no-repeat;
        background-size:     contain;
        background-position: center;
    }
}

/// Make a dynamic overlay featuring text.
///
/// @param {Color}   $bg              Color flare surrounding text.
/// @param {Numeric} $width           Width of text element.
/// @param {Numeric} $height          Height of text element.
/// @param {Numeric} $y-pos           Distance of text from top of screen.
/// @param {Numeric} $x-pos           Distance of text from left of screen.
///
@mixin text(
    $bg:     f.lighter(v.$uva-blue, 75%),
    $width:  max-content,
    $height: max-content,
    $y-pos:  50vh,
    $x-pos:  unset,
    $fill:   true,
) {
    @include base(
        $width:  $width,
        $height: $height,
        $y-pos:  $y-pos,
        $x-pos:  $x-pos,
        $fill:   $fill,
    );

    .content {
        margin:        0 auto;
        padding:       1rem;
        font-size:     xx-large;
        color:         white;
        background:    $bg;
        border:        1px solid $bg;
        border-radius: 50%;
        box-shadow:    0 0 3rem 3rem $bg;
    }
}
