// app/assets/stylesheets/shared/controls/_grids.scss
//
// References:
// @see https://css-tricks.com/css-grid-in-ie-debunking-common-ie-grid-misconceptions/

// @use 'shared/common'; // TODO: SASS 4.0

//=============================================================================
// CSS function analogues.
//=============================================================================

/// Simulate CSS "repeat()" for MS Internet Explorer.
///
/// @param {Numeric} $columns
/// @param {String}  $template
///
@function ie-repeat($columns, $template) {
    $column: $template;
    @for $n from 2 through $columns {
        $template: $template $column;
    }
    @return $template;
}

//=============================================================================
// Grid definitions.
//=============================================================================

/// Set up grid display and optionally specify column widths.
///
/// @param {String}  $template
/// @param {Numeric} $columns
///
@mixin grid($template: false, $columns: 1) {

    display: -ms-grid;
    display: grid;

    @if $template { @include grid-columns($template, $columns); }
}

/// Place on the specified row of the grid.
///
/// @param {Numeric} $row
///
@mixin grid-row($row) {
    -ms-grid-row:   $row;
    grid-row-start: $row;
    grid-row-end:   $row;
}

/// Place in the specified column of the grid.
///
/// @param {Numeric} $column
///
@mixin grid-column($column) {
    @if $column <= 0 {
        -ms-grid-column: 100;
    } @else {
        -ms-grid-column: $column;
    }
    grid-column-start: $column;
    grid-column-end:   $column;
}

/// Span all grid columns.
///
/// @param {Numeric} $end             Ending column (for IE only).
/// @param {Numeric} $start           Starting column.
///
@mixin grid-column-span($end: -1, $start: 1) {
    @if $end <= 0 {
        -ms-grid-column-span: 100;
    } @else {
        -ms-grid-column-span: $end;
    }
    -ms-grid-column:   $start;
    grid-column-start: $start;
    grid-column-end:   -1;
}

/// Set up grid gap(s).
///
/// @param {Numeric} $gap-y           Row gap
/// @param {Numeric} $gap-x           Column gap
///
@mixin grid-gap($gap-y: 0, $gap-x: false) {

    @if not $gap-x { $gap-x: $gap-y; }

    grid-gap: $gap-y $gap-x;
    gap:      $gap-y $gap-x;
}

/// Set up grid row gap.
///
/// @param {Numeric} $gap-y
///
@mixin grid-row-gap($gap-y: 0) {
    grid-row-gap: $gap-y;
    row-gap:      $gap-y;
}

/// Set up grid column gap.
///
/// @param {Numeric} $gap-x
///
@mixin grid-column-gap($gap-x: 0) {
    grid-column-gap: $gap-x;
    column-gap:      $gap-x;
}

/// Set grid columns.
///
/// @param {String}  $template
/// @param {Numeric} $columns
///
// noinspection SassScssResolvedByNameOnly
@mixin grid-columns($template, $columns: 1) {
    @if $template {
        @if $columns <= 1 {
            -ms-grid-columns:      $template;
            grid-template-columns: $template;
        } @else {
            -ms-grid-columns:      ie-repeat($columns, $template);
            grid-template-columns: repeat($columns, $template);
        }
    }
}

/// Specific grid column widths.
///
/// @param {Numeric} $columns
/// @param {String}  $template
/// @param {Map}     $template-map
///
// noinspection SassScssResolvedByNameOnly, CssInvalidFunction
@mixin grid-column-classes($columns, $template: false, $template-map: false) {
    @if type-of($template-map) != 'map' {

        @include grid-columns($template, $columns);

        @for $n from 1 through $columns {
            &.columns-#{$n} { }
        }

    } @else if not $template {

        @error "A $template must be provided when $template-map is used.";

    } @else {

        $wide-map:        map-get($template-map, 'wide');
        $medium-map:      map-get($template-map, 'medium');
        $narrow-map:      map-get($template-map, 'narrow');

        $wide-max:        map-get($wide-map,   'columns')  or $columns;
        $wide-template:   map-get($wide-map,   'template') or $template;

        $medium-max:      map-get($medium-map, 'columns')  or $wide-max;
        $medium-template: map-get($medium-map, 'template') or $wide-template;

        $narrow-max:      map-get($narrow-map, 'columns')  or $medium-max;
        $narrow-template: map-get($narrow-map, 'template') or $medium-template;

        @for $n from 1 through $columns {
            &.columns-#{$n} {
                @media #{$wide-screen} {
                    $count: min($n, $wide-max);
                    grid-template-columns: repeat($count, $wide-template);
                }
                @media #{$medium-width} {
                    $count: min($n, $medium-max);
                    grid-template-columns: repeat($count, $medium-template);
                }
                @media #{$narrow-screen} {
                    $count: min($n, $narrow-max);
                    grid-template-columns: repeat($count, $narrow-template);
                }
            }
        }

        @media #{$browser-ie} {
            @for $n from 1 through $columns {
                &.columns-#{$n} {
                    @media #{$wide-screen} {
                        $count: min($n, $wide-max);
                        -ms-grid-columns: ie-repeat($count, $wide-template);
                    }
                    @media #{$medium-width} {
                        $count: min($n, $medium-max);
                        -ms-grid-columns: ie-repeat($count, $medium-template);
                    }
                    @media #{$narrow-screen} {
                        $count: min($n, $narrow-max);
                        -ms-grid-columns: ie-repeat($count, $narrow-template);
                    }
                }
            }
        }
    }
}

//=============================================================================
// Internet Explorer grid support classes
//=============================================================================

// noinspection SassScssResolvedByNameOnly
@media #{$browser-ie} {

    // Internet Explorer's -ms-grid does not auto-position grid elements, hence
    // each must be given classes to define its row/column position.
    @for $n from 1 through 100  {
        .col-#{$n}  { -ms-grid-column: $n; }
        .row-#{$n}  { -ms-grid-row:    $n; }
    }

    // Horizontal item lists which must be vertical when the screen is narrow.
    // (Note: Separate @for loops for each media query results in cleaner CSS.)
    @media #{$not-narrow-screen} {
        @for $n from 1 through 100  { .item-#{$n} { -ms-grid-column: $n; } }
    }
    @media #{$narrow-screen} {
        @for $n from 1 through 100  { .item-#{$n} { -ms-grid-row:    $n; } }
    }
}
