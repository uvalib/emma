// app/assets/stylesheets/shared/controls/_grids.scss
//
// Definitions supporting grid controls.

@use 'sass:map';
@use 'sass:meta';

@use 'shared/variables' as v;

//=============================================================================
// Grid definitions.
//=============================================================================

/// Place on the specified row of the grid.
///
/// @param {Numeric} $row
///
@mixin row($row) {
    & {
        grid-row-start: $row;
        grid-row-end:   $row;
    }
}

/// Place in the specified column of the grid.
///
/// @param {Numeric} $column
///
@mixin column($column) {
    & {
        grid-column-start: $column;
        grid-column-end:   $column;
    }
}

/// Span all grid columns.
///
/// @param {Numeric} $end             Ending column.
/// @param {Numeric} $start           Starting column.
///
@mixin column-span($end: -1, $start: 1) {
    & {
        grid-column-start: $start;
        grid-column-end:   $end;
    }
}

/// Define grid columns.
///
/// @param {String}  $template
/// @param {Numeric} $columns
///
@mixin columns($template, $columns: 1) {
    @if $template {
        & {
            @if $columns <= 1 {
                grid-template-columns: $template;
            } @else {
                grid-template-columns: repeat($columns, $template);
            }
        }
    }
}

//=============================================================================
// Grid class definitions mixins.
//=============================================================================

/// Define .col-N classes which can be applied to affix a grid element to a
/// specific grid column.
///
/// @param {Numeric} $max
///
@mixin cell-col-classes($max) {
    @for $n from 1 through $max {
        .col-#{$n} {
            @include column($n);
        }
    }
}

/// Define .row-N classes which can be applied to affix a grid element to a
/// specific grid row.
///
/// @param {Numeric} $max
///
@mixin cell-row-classes($max) {
    @for $n from 1 through $max {
        .row-#{$n} {
            @include row($n);
        }
    }
}

/// Define .columns-N classes to allow specification of grid column widths.
///
/// @param {Numeric} $max-cols
/// @param {String}  $template
/// @param {Map}     $template-map
///
@mixin column-classes($max-cols, $template: false, $template-map: false) {

    @if meta.type-of($template-map) != 'map' {

        @include columns($template, $max-cols);

        @for $n from 1 through $max-cols {
            &.columns-#{$n} {
                grid-template-columns: repeat($n, $template);
            }
        }

    } @else if not $template {

        @error "A $template must be provided when $template-map is used.";

    } @else {

        $wide-map:        map.get($template-map, 'wide');
        $medium-map:      map.get($template-map, 'medium');
        $narrow-map:      map.get($template-map, 'narrow');

        $wide-max:        map.get($wide-map,   'columns')  or $max-cols;
        $wide-template:   map.get($wide-map,   'template') or $template;

        $medium-max:      map.get($medium-map, 'columns')  or $wide-max;
        $medium-template: map.get($medium-map, 'template') or $wide-template;

        $narrow-max:      map.get($narrow-map, 'columns')  or $medium-max;
        $narrow-template: map.get($narrow-map, 'template') or $medium-template;

        @for $n from 1 through $max-cols {
            &.columns-#{$n} {
                @media #{v.$wide-screen} {
                    $count: $wide-max;
                    @if ($n < $count) { $count: $n; }
                    grid-template-columns: repeat($count, $wide-template);
                }
                @media #{v.$medium-width} {
                    $count: $medium-max;
                    @if ($n < $count) { $count: $n; }
                    grid-template-columns: repeat($count, $medium-template);
                }
                @media #{v.$narrow-screen} {
                    $count: $narrow-max;
                    @if ($n < $count) { $count: $n; }
                    grid-template-columns: repeat($count, $narrow-template);
                }
            }
        }
    }
}

//=============================================================================
// Accessibility debugging
//=============================================================================

/// Dynamically colorize elements according to whether they are focusable.
///
/// To make use of this, scripting must ensure that all potentially focusable
/// elements have `tabindex` applied (even elements like `<input>` that are
/// implicitly in the tab order).
///
@mixin debug-focusables {

    $no_focus:      #ff000020 !important;
    $can_focus:     #00ff0040 !important;
    $inner_focus:   #00ff0080 !important;

    [tabindex="-1"]                         { background-color: $no_focus; }
    [tabindex="0"]                          { background-color: $can_focus; }
    [tabindex="0"] + label                  { background-color: $can_focus; }
    [tabindex="-1"] [tabindex="0"]          { background-color: $inner_focus; }
    [tabindex="-1"] [tabindex="0"] + label  { background-color: $inner_focus; }
}
