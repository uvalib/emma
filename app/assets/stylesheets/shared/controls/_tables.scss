// app/assets/stylesheets/shared/controls/_tables.scss
//
// Definitions supporting tables and table elements.

@use 'shared/variables'      as v;
@use 'shared/controls/grids' as grid;

// ============================================================================
// Grid-based table.
// ============================================================================

$gap:        1rem;
$narrow-gap: 1rem;
$bg-color:   v.$bg-color;
$border-bg:  v.$rev-bg-color;
$border-fg:  v.$rev-fg-color;

// ============================================================================
// Mixins
// ============================================================================

/// Essential definitions for a grid-based table.
///
@mixin grid-table($max-columns: 50) {

    display:     grid;
    position:    relative;
    line-height: 1.25;

    //=========================================================================
    // Grid layout
    //=========================================================================

    @include grid.column-classes($max-columns, minmax(max-content,1fr));
    @include grid.cell-col-classes($max-columns);

    @media #{v.$not-narrow-screen} {
        gap:            $gap;
        padding-bottom: $gap;
    }

    @media #{v.$narrow-screen} {
        gap:            $narrow-gap;
        padding-bottom: $narrow-gap;
    }

    //=========================================================================
    // Elements
    //=========================================================================

    thead, tbody, tfoot, tr {
        display: contents;
    }

    thead {

        tr.spanner {
            display: none;
            z-index: v.$z-hidden;
        }

        th {
            min-width:     max-content;
            text-align:    start;
            border-bottom: 2px solid $border-bg;
            z-index:       v.$z-visible;
        }
    }

    td {
        z-index: v.$z-hidden - 1;
    }

    //=========================================================================
    // Variations
    //=========================================================================

    // Give the heading row a background.
    // @see BaseCollectionDecorator::Table::DARK_HEAD
    &.dark-head {

        // Since "display: contents" makes the `<tr>` un-stylable an additional
        // `<tr>` is required which explicitly positioned so that the `<tr>`
        // with the actual `<th>` headings can be displayed above it in the
        // Z-order.

        thead {

            tr.spanner {
                display:    block;
                position:   absolute;
                height:     2.5rem;
                width:      100%;
                margin-top: -0.5rem;
                background: $border-bg;
            }

            th {
                color:         $border-fg;
                background:    $border-bg;
                border-bottom: none;
            }
        }

        .col-first {
            margin-left: 0.5rem;
        }

        .col-last {
            margin-right: 0.5rem;
        }
    }

    // Make the heading row stick to the top of the table when scrolling.
    // @see BaseCollectionDecorator::Table::STICKY_HEAD
    &.sticky-head {

        position:   relative;
        max-height: 95vh;
        overflow:   auto;
        background: $bg-color;
        z-index:    v.$z-normal;

        overscroll-behavior: contain;

        @media #{v.$narrow-screen} {
            top: $narrow-gap;
        }

        @media print {
            max-height: 90vh;
        }

        //=====================================================================
        // Elements
        //=====================================================================

        thead {

            tr.spanner {
                display:        block;
                position:       absolute;
                height:         100%;
                margin-top:     0;
                padding-bottom: 0.5rem;
                background:     $border-bg;
            }

            th {

                @include grid.row(1);

                position:    sticky;
                top:         0;
                padding-top: 0.5rem;
                background:  $bg-color;
            }
        }

        .col-last {
            margin-right: 0.5rem;
        }
    }

    &.sticky-head.dark-head {

        padding-bottom: 0;
        background:     $bg-color;
        border:         2px solid $border-bg;

        //=====================================================================
        // Elements
        //=====================================================================

        thead {

            tr.spanner {

                @include grid.row(1);
                @include grid.column-span;

                position: sticky;
                top:      0;
            }

            th {

                background: none;

                > * {
                    background: $border-bg;
                }
            }
        }

        .row-last {

            @media #{v.$not-narrow-screen} {
                margin-bottom: $gap;
            }

            @media #{v.$narrow-screen} {
                margin-bottom: $narrow-gap;
            }
        }
    }

    // A table with one or more sortable columns.
    &.sortable {

        thead {

            // An element with up and down controls.
            // @see BaseCollectionDecorator::Table#table_column_sorter
            .sort-toggle {

                display:         flex;
                flex-direction:  column;
                justify-content: center;
                gap:             0;

                .ascending-sort-toggle,
                .descending-sort-toggle {
                    display:     block;
                    margin:      0;
                    padding:     0;
                    max-width:   max-content;
                    max-height:  max-content;
                    line-height: 1;
                    opacity:     0.5;
                    cursor:      pointer;
                }

                .ascending-sort-toggle {
                    margin-bottom: -0.125rem;
                }

                .descending-sort-toggle {
                    margin-top:    -0.125rem;
                }
            }

            th {

                // Highlight the "up" control for a column whose elements are
                // sorted in ascending order.
                &[aria-sort="ascending"] {
                    .sort-toggle {
                        .ascending-sort-toggle {
                            opacity: 1;
                        }
                    }
                }

                // Highlight the "down" control for a column whose elements are
                // sorted in reverse order.
                &[aria-sort="descending"] {
                    .sort-toggle {
                        .descending-sort-toggle {
                            opacity: 1;
                        }
                    }
                }

                // Hide both controls for columns that can't be sorted.
                &:not(.sortable) {
                    .sort-toggle {
                        display: none;
                    }
                }

                &.sortable {
                    display:         inline-flex;
                    flex-direction:  row;
                    flex-wrap:       nowrap;
                    justify-content: space-between;
                    gap:             0.75rem;
                    padding-top:     0.25rem;
                    cursor:          pointer;
                }

                &.sortable:focus {
                    outline-offset: -1px;
                }

                > * {
                    margin-top:    auto;
                    margin-bottom: auto;
                }
            }
        }
    }

    &.sortable.dark-head {

        thead {

            th.sortable:focus {
                outline-color: v.$rev-focus-color;
            }
        }
    }

    &.sortable.sticky-head {

        thead {

            th {
                top: 0.25rem;
            }
        }
    }

    // A table with one or more sortable columns requiring server-side database
    // row sorting with the results replacing the table via client-side code.
    &.sortable.partial {

    }

    // A table with one or more sortable columns requiring server-side database
    // row sorting where the results will be rendered on a new page.
    &.sortable.pageable {

    }

    // A table with one or more sortable columns that can be sorted client-side
    // because all data rows are present on the current browser page.
    &.sortable.complete,
    &.sortable:not(.partial):not(.pageable) {

    }

    //=========================================================================
    // Relative changes
    //=========================================================================

    & + ul.page-actions {
        margin-top: 1.25rem;
    }

    &.sticky-head + ul.page-actions {
        border: none;
    }
}
