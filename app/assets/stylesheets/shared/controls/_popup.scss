// app/assets/stylesheets/shared/controls/_popup.scss
//
// Definitions supporting pop-up elements.

@use "shared/variables" as *;

//=============================================================================
// Responsive breakpoint values
//=============================================================================

:root {
    @media #{$wide-screen}   { --popup-max-width: 50vw; }
    @media #{$medium-width}  { --popup-max-width: 75vw; }
    @media #{$narrow-screen} { --popup-max-width: 90vw; }
}

:root {
    @media #{$wide-screen}   { --popup-max-height: 50vh; }
    @media #{$medium-width}  { --popup-max-height: 75vw; }
    @media #{$narrow-screen} { --popup-max-height: 90vw; }
}

$max-width:  var(--popup-max-width);
$max-height: var(--popup-max-height);

//=============================================================================
// Floating elements
//=============================================================================

/// Used to make an element float in the center of the screen.
///
/// @param {Numeric} $width           Must be in "vw" units.
/// @param {Numeric} $height          Must be in "vh" units.
///
@mixin center-float($width: $max-width, $height: $max-height) {
    & {
        position: sticky;
        top:      if(($height == 0), (100vh * 0.5), calc((100vh - $height) * 0.5));
        left:     if(($width  == 0), (100vw * 0.5), calc((100vw - $width)  * 0.5));
        display:  block;
        height:   $height;
        width:    $width;
        margin:   0;
    }
}

/// Used to make a floating container element in the center of the screen.
///
/// @param {Numeric} $width           Must be in "vw" units.
/// @param {Numeric} $height          Must be in "vh" units.
///
@mixin center-float-container($width, $height) {

    @include center-float($width, $height);

    & {
        display:   flex;
        flex-wrap: nowrap;
        gap:       1vh 1vw;
        overflow:  visible;
    }
}

/// Used to make a floating container element that expands vertically around
/// the horizontal center line of the screen.
///
/// @param {Numeric} $width           Must be in "vw" units.
///
@mixin center-float-vertical($width: $max-width) {

    @include center-float-container($width, 0);

    & {
        flex-direction:  column;
        justify-content: center;
    }

    @media #{$not-wide-screen} {
        min-width: $width;
        max-width: $width;
    }
}

/// Used to make a floating container element that expands horizontally around
/// the vertical midline of the screen.
///
/// @param {Numeric} $height          Must be in "vh" units.
///
@mixin center-float-horizontal($height: $max-height) {

    @include center-float-container(0, $height);

    & {
        flex-direction: row;
        align-content:  center;
    }
}
