// app/assets/stylesheets/shared/_common.scss

@use 'shared/variables' as *;
@use 'shared/mixins'    as *;

//=============================================================================
// Placeholder classes
//=============================================================================

// Remove the element from display.
%hidden {
    display: none !important;
}

// Hide the contents of the element while maintaining the space it occupies on
// the display.
%invisible {
    visibility: hidden !important;
}

// Hide the contents of the element while maintaining horizontal displacement.
%invisible-height {
    @extend %invisible;
    height: 0;
}

// Hide the contents of the element while maintaining vertical displacement.
%invisible-width {
    @extend %invisible;
    width: 0;
}

// Make focus outline more easily seen.
%focus {
    outline:        2px solid $focus-accent;
    outline-offset: 2px;
}

// Make an actionable item (e.g. <a>) appear non-functional.
// NOTE: The link should also have attribute 'tabindex="-1"'.
%disabled {
    text-decoration: none;
    &:active { pointer-events:  none; }
    &:focus  { outline:         none; }
    &:hover  { text-decoration: none; }
}

// Make an element only visible to screen readers.
%sr-only {
    @include screen-reader-only;
}

// Counteract the effects of %sr-only (except for position and border).
%not-sr-only {
    width:       unset;
    height:      unset;
    padding:     unset;
    margin:      unset;
    white-space: unset;
    overflow:    unset;
    clip:        unset;
}

// For an element which should not inherit the default styling imposed by the
// browser (particularly for h1-h6 elements being used to define document
// structure but intended to be styled by supplied CSS class(es).
//
// noinspection CssBrowserCompatibilityForProperties
%clear-default-styling {
    margin:         0;
    margin-block:   0;
    margin-inline:  0;
    padding:        0;
    padding-block:  0;
    padding-inline: 0;
    font-size:      inherit;
    font-weight:    inherit;
}

// An element that spans the entire width of the display.
%banner {

    display:          flex;
    flex-direction:   row;
    justify-content:  space-between;
    width:            inherit;
    margin:           0;
    padding:          $page-padding-y $page-padding-x;
    color:            white;
    background-color: $header-bg;

    @media #{$not-wide-screen} {
        padding-top:    calc(2 * #{$page-padding-y});
        padding-bottom: calc(2 * #{$page-padding-y});
        padding-right:  calc(#{$page-padding-x} + #{$scroll-easement});
    }

    * {
        margin: auto 0;
        color:  white;
    }

    a {

        text-decoration: none;

        &:hover {
            text-decoration: underline;
        }
    }

    .disabled {
        color: lightgray;
    }
}

// A panel for highlighting content.
%panel {
    display:          block;
    padding:          0.5rem;
    background-color: $panel-bg;
    border:           2px solid $panel-border;
    border-radius:    0.625rem;
}

// Definitions for elements within a %panel.
%panel-interior {

    > * {

        margin-top: 0.5rem;

        &:first-child {
            margin-top:     0;
            padding-top:    0;
        }

        &:last-child {
            margin-bottom:  0;
            padding-bottom: 0;
        }
    }

    > br {

        margin-top: 0.25rem;

        &:first-child {
            margin-top: 0.25rem;
        }
    }
}

// A grouping of related controls into a single element.
%control-group {

    @extend %panel;

    @include user-select(none);

    display:     inline-flex;
    padding:     0.25rem 0.5rem;
    align-items: baseline;

    > * {
        display:     inline-flex;
        flex:        0 1 auto;
        align-items: baseline;
    }
}

// Highlight button on hover.
%button-hover {

    cursor:      pointer;
    user-select: none;

    &:focus {
        text-decoration: underline;
    }

    &:hover {
        text-decoration: underline;
        box-shadow:      0 0 0.5rem 0.25rem $uva-accent-orange;
    }

    &:focus:hover {
        outline-color:   transparent;
    }

    &.forbidden:focus,
    &.forbidden:hover {
        text-decoration: none;
        box-shadow:      none;
    }
}

// Style like a button.
//
// The baseline appearance inherits (conceptually) from .uppy-FileInput-btn.
// Classes that extend this may need to add "color: inherit" to get the
// intended color for text (and, by default, borders).
//
%control-button-base {

    @extend %button-hover;

    // From .uppy-FileInput-btn in node_modules/uppy/dist/uppy.css
    //margin:           0;
    //padding:          10px 15px;
    font-family:        sans-serif;
    //font-size:        0.85em;
    color:              $control-text;
    background:         none;
    border:             1px solid $control-accent;
    border-radius:      8px;
    //cursor:           pointer;
    -webkit-appearance: none;

    display:            block;
    margin:             auto 0;
    padding:            2px 6px;
    line-height:        1.125;
    white-space:        pre;
    text-decoration:    none;
    font-size:          large;

    &.disabled,
    &.forbidden {
        background-color: $input-disabled-bg;
        border-color:     $input-disabled-fg;
    }
}

// Style like a control button.
//
// This provides the look and feel for buttons in general.
//
%control-button {

    @extend %control-button-base;

    // Restore some items that %control-button-base has overridden:
    margin:      0;
    padding:     10px 15px;
    line-height: 1;
    font-size:   0.85em;

    &:not(.disabled):not(.forbidden):hover {
        background-color: $uva-accent-orange;
        border-color:     $uppy-file-input-accent;
        color:            white;
    }

    &.disabled:hover, &.forbidden:hover {
        color: unset;
    }

    @extend %button-hover;
}

// Embolden characters by adding a text shadow in order to avoid changing the
// width of the text.
%hover-bold {
    text-shadow: 0 0 1px black;
}

// A pop-out effect for panels.
%popup-shadow {
    box-shadow: $popup-shadow;
}

// A subtle pop-out effect for text blocks.
%block-shadow {
    box-shadow: $block-shadow;
}

// A very subtle pop-out effect for controls.
%control-shadow {

    box-shadow: $control-shadow;

    &:focus {
        box-shadow: none;
    }
}

//=============================================================================
// Common settings.
//=============================================================================

// Make focus outline more easily seen.
a:focus,
input:focus,
button:focus,
select:focus,
textarea:focus {
    @extend %focus;
}

// Avoid the additional interior dotted outline in Firefox.
::-moz-focus-inner {
    border: 0;
}

// Allow <fieldset> to be used like <div> by eliminating browser-defined
// styling.
fieldset {
    margin:  unset;
    padding: unset;
    border:  none;
}

//=============================================================================
// Classes for composition
//=============================================================================

// Include to remove an element from the display.
.hidden {
    @extend %hidden;
}

// Include to hide the contents of an element while maintaining the space it
// occupies on the display.
//
// noinspection CssUnusedSymbol
.invisible {

    @extend %invisible;

    // noinspection CssUnusedSymbol
    &.preserve-width {
        @extend %invisible-height;
    }

    &.preserve-height {
        @extend %invisible-width;
    }
}

// Include to "de-activate" an active element like a button or link.
.disabled {

    @extend %disabled;

    cursor: default;
}

// Include to "de-activate" an active element because it is an invalid choice.
.forbidden {

    @extend %disabled;

    cursor: not-allowed;
}

// Include to make an element only visible to screen readers.
.sr-only {
    @include screen-reader-only;
}

// Indicate that a link is not active because the user is not authorized.
.sign-in-required {
    text-decoration: none;
    &:active { pointer-events:  none; }
    &:hover  { text-decoration: none; }
}

//=============================================================================
// Generic elements
//=============================================================================

.control-button {
    @extend %control-button;
}

// @see LayoutHelper#toggle_button
.toggle {

    @extend %control-button-base;

    background-color: $panel-bg;
}

// Controlled by a .toggle button.
.toggle-panel {
    &:not(.open) {
        display: none;
    }
}

// Holds title text and a .toggle button.
.toggle-panel-title {

    display:        inline-flex;
    flex-direction: row;

    @media #{$narrow-screen} {

        margin-bottom: $page-padding;
        flex-wrap:     wrap;

        .list-heading {
            margin-bottom: 1rem;
        }
    }

    @media #{$not-narrow-screen} {
        .toggle {
            margin-left:  $gap-x;
            margin-right: $gap-x;
        }
    }
}
