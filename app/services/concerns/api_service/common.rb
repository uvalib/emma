# app/services/concerns/api_service/common.rb
#
# frozen_string_literal: true
# warn_indent:           true

__loading_begin(__FILE__)

require 'net/https'
require 'faraday'

# ApiService::Common
#
module ApiService::Common

  # Include the shared data structure which holds the definition of the API
  # requests and parameters.
  #
  # @param [Module] base
  #
  def self.included(base)
    base.send(:include, ApiService::Definition)
    base.send(:extend,  ApiService::Definition)
  end

  include Emma::Common
  include Emma::Debug

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  # Control whether information requests are ever cached. # TODO: ???
  #
  # @type [Boolean]
  #
  CACHING = false

  # Control whether parameter validation errors cause a RuntimeError.
  #
  # @type [Boolean]
  #
  RAISE_ON_INVALID_PARAMS = Rails.env.test?

  # Maximum length of redirection chain.
  #
  # @type [Integer]
  #
  MAX_REDIRECTS = 2

  # Options consumed by #api (and not passed on as URL query options).
  #
  # @type [Array<Symbol>]
  #
  SERVICE_OPTIONS = %i[no_raise no_exception no_redirect].freeze

  # Original request parameters which should not be passed on to the API.
  #
  # @type [Array<Symbol>]
  #
  IGNORED_PARAMETERS = (ParamsHelper::IGNORED_PARAMETERS + %i[offset]).freeze

  # HTTP methods used by the API.
  #
  # @type [Array<Symbol>]
  #
  # == Usage Notes
  # Compare with AllowsType#values.
  #
  HTTP_METHODS =
    %w(GET PUT POST DELETE)
      .map { |w| [w.to_sym, w.downcase.to_sym] }.flatten.deep_freeze

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  # The URL for the API connection.
  #
  # @return [String]
  #
  def base_url
    @base_url ||= self.class.safe_const_get(:BASE_URL)
  end

  # The URL for the API connection as a URI.
  #
  # @return [URI::Generic]
  #
  def base_uri
    @base_uri ||= URI.parse(base_url)
  end

  # API key (if applicable).
  #
  # @return [String, nil]
  #
  def api_key
    @api_key ||= self.class.safe_const_get(:API_KEY)
  end

  # API version (if applicable).
  #
  # @return [String, nil]
  #
  def api_version
    @api_version ||= self.class.safe_const_get(:API_VERSION)
  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  # The HTTP verb for the last #api access.
  #
  # @return [Symbol, nil]
  #
  attr_reader :verb

  # The URL path for the last #api access.
  #
  # @return [String, nil]
  #
  attr_reader :action

  # The URL parameters for the last #api access.
  #
  # @return [Hash, nil]
  #
  attr_reader :params

  # The API endpoint response generated by the last #api access.
  #
  # @return [Faraday::Response, nil]
  #
  attr_reader :response

  # The HTTP method of the latest API request.
  #
  # @overload request_type()
  #   @return [String]                      Type derived from @verb.
  #
  # @overload request_type(http_method)
  #   @param [Symbol, String] http_method
  #   @return [String]                      Type derived from *http_method*.
  #
  def request_type(http_method = nil)
    (http_method || @verb).to_s.upcase
  end

  # Indicate whether the latest API request is an update (PUT, POST, or PATCH).
  #
  # @overload update_request?()
  #   @return [TrueClass, FalseClass]       Whether @verb is an update.
  #
  # @overload update_request?(http_method)
  #   @param [Symbol, String] http_method
  #   @return [TrueClass, FalseClass]       Whether *http_method* is an update.
  #
  def update_request?(http_method = nil)
    http_method = http_method.downcase.to_sym if http_method.is_a?(String)
    %i[put post patch].include?(http_method || @verb)
  end

  # Most recently invoked HTTP request URL.
  #
  # @overload latest_endpoint(complete: false)
  #   @param [Boolean] complete       If *true* return :api_key parameter.
  #   @return [String]                The URL derived from @params.
  #
  # @overload latest_endpoint(hash, complete: false)
  #   @param [Hash]    hash           Parameters to check instead of @params.
  #   @param [Boolean] complete       If *true* return :api_key parameter.
  #   @return [String]                The URL derived from provided *hash*.
  #
  def latest_endpoint(opt = nil)
    opt = (opt || @params).dup
    opt.delete(:api_key) unless opt.delete(:complete)
    opt = url_query(opt).presence
    [@action, opt].compact.join('?')
  end

  # ===========================================================================
  # :section: Exceptions
  # ===========================================================================

  public

  # The exception raised by the last #api access.
  #
  # @return [Exception, nil]
  #
  attr_reader :exception

  # Indicate whether the latest API request generated an exception.
  #
  def error?
    @exception.present?
  end

  # The message associated with the latest API exception.
  #
  # @return [String]
  # @return [nil]                     If there is no exception.
  #
  def error_message
    @exception&.message
  end

  # Cause an exception to be ignored to avoid generation of a flash message.
  #
  # @return [void]
  #
  # @see SessionConcern#session_update
  #
  def discard_exception
    @exception = nil
  end

  # ===========================================================================
  # :section: Authentication
  # ===========================================================================

  public

  # The user that invoked #api.
  #
  # @return [User, nil]
  #
  attr_reader :user

  # Extract the user name to be used for API parameters.
  #
  # @param [User, String] user
  #
  # @return [String]
  #
  def name_of(user)
    user.to_s
  end

  # ===========================================================================
  # :section: Authentication
  # ===========================================================================

  protected

  # Set the user for the current session.
  #
  # @param [User] u
  #
  # @return [void]
  #
  def set_user(u)
    raise "argument must be a User not a #{u.class}" if u && !u.is_a?(User)
    @user = u
  end

  # The current OAuth2 access bearer token.
  #
  # @return [String]
  # @return [nil]                     If there is no @user.
  #
  def access_token
    @user&.access_token
  end

  # The current OAuth2 refresher token.
  #
  # @return [String]
  # @return [nil]                     If there is no @user.
  #
  def refresh_token
    @user&.refresh_token
  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  public

  # Get data from the API and update @response.
  #
  # @param [Symbol, String]           verb  One of :get, :post, :put, :delete
  # @param [Array<String,ScalarType>] args  Path components of the API request.
  # @param [Hash]                     opt   API request parameters.
  #
  # args[0]   [String]  Path component.
  # ...
  # args[-2]  [String]  Path component.
  # args[-1]  [Hash]    URL parameters except for:
  #
  # @option args.last [Boolean] :no_raise       If *true*, set @exception but
  #                                             do not raise it.
  #
  # @option args.last [Boolean] :no_exception   If *true*, neither set
  #                                             @exception nor raise it.
  #
  # @return [Faraday::Response]
  #
  # noinspection RubyScope
  def api(verb, *args, **opt)
    error = @action = @response = @exception = nil
    @verb = verb.to_s.downcase.to_sym

    # Set internal options from parameters or service options.
    opt, @params = partition_options(opt, *SERVICE_OPTIONS)
    no_exception = opt[:no_exception] || options[:no_exception]
    no_raise     = opt[:no_raise]     || options[:no_raise] || no_exception
    method       = opt[:method]       || calling_method

    # Form the API path from arguments, build API call parameters (minus
    # internal options), prepare HTTP headers according to the HTTP method,
    # then send the API request.
    @action = api_path(*args)
    @params = api_options!(@params)
    options, headers = api_headers(@params)
    __debug_line(leader: '>>>') do
      [service_name] << @action.inspect << {}.tap do |details|
        details[:options] = options.inspect if options.present?
        details[:headers] = headers.inspect if headers.present?
      end
    end
    @response = transmit(@verb, @action, options, headers, **opt)

  rescue Api::Error => error
    log_exception(method: method, error: error)

  rescue => error
    log_exception(method: method, error: error)
    error = response_error(error)

  ensure
    __debug_line(leader: '<<<') do
      # noinspection RubyNilAnalysis
      resp = error.respond_to?(:response) && error.response || @response
      [service_name] << @action.inspect << {
        status: resp.respond_to?(:status) && resp.status || resp&.dig(:status),
        data:   resp.respond_to?(:body)   && resp.body   || resp&.dig(:body)
      }.transform_values { |v| v.inspect.truncate(256) }
    end
    @response  = nil   if error.present?
    @exception = error unless no_exception
    raise @exception   unless no_raise || @exception.nil?
    return @response
  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  protected

  # HTTP ports which do not need to be explicitly included when generating an
  # absolute path.
  #
  # @type [Array<Integer>]
  #
  COMMON_PORTS = [URI::HTTPS::DEFAULT_PORT, URI::HTTP::DEFAULT_PORT].freeze

  # Form a normalized API path from one or more path fragments.
  #
  # If *args* represents a full path which is different than `#base_url` then
  # an absolute path is returned.
  #
  # @param [Array<String,Array>] args
  #
  # @return [String]
  #
  def api_path(*args)
    args   = args.flatten.join('/').strip
    uri    = URI.parse(args)
    qry    = uri.query.presence
    path   = uri.path&.squeeze('/') || ''
    path   = "/#{path}" unless path.start_with?('/')
    ver    = api_version.presence
    ver  &&= "/#{ver}"
    result = []
    if (host = uri.host).present? && (host != base_uri.host)
      scheme = uri.scheme || 'https'
      port   = uri.port
      result << scheme << '://' << host
      result << ':' << port if port && !COMMON_PORTS.include?(port)
    end
    result << ver unless (path == ver) || path.start_with?("#{ver}/")
    result << path
    result << '?' << qry if qry
    result.compact.join
  end

  # Add service-specific API options.
  #
  # @param [Hash, nil] params         Default: @params.
  #
  # @return [Hash]                    The *params* hash, possibly modified.
  #
  # == Usage Notes
  # If overridden, this should be called first via 'super'.
  #
  def api_options!(params = @params)
    params.reject! { |k, _| IGNORED_PARAMETERS.include?(k) }
    decode_parameters!(params)
    params[:api_key] = api_key if api_key
    params
  end

  # Determine whether the HTTP method indicates a write rather than a read and
  # prepare the HTTP headers accordingly.
  #
  # @param [Hash] params              Default: @params.
  # @param [Hash] headers             Default: {}.
  #
  # @return [Array<(String,Hash)>]    Message body plus headers for GET.
  # @return [Array<(Hash,Hash)>]      Query plus headers for PUT, POST, PATCH.
  #
  def api_headers(params = nil, headers = nil)
    params ||= @params
    headers  = headers&.dup || {}
    if update_request?
      params = params.to_json
      headers['Content-Type'] = 'application/json'
    end
    return params, headers
  end

  # Get a connection for making cached requests.
  #
  # @return [Faraday::Connection]
  #
  # @see ApiCachingMiddleWare#initialize
  #
  def connection
    @connection ||= make_connection
  end

  # Get a connection.
  #
  # @param [String, nil] url          Default: `#base_url`
  #
  # @return [Faraday::Connection]
  #
  def make_connection(url = nil)
    conn_opts = {
      url:     (url || base_url),
      request: options.slice(:timeout, :open_timeout),
    }
    conn_opts[:request][:params_encoder] ||= Faraday::FlatParamsEncoder

    retry_opt = {
      max:                 options[:retry_after_limit],
      interval:            0.05,
      interval_randomness: 0.5,
      backoff_factor:      2,
    }

    Faraday.new(conn_opts) do |bld|
      bld.use           :instrumentation
      bld.use           :api_caching_middleware if CACHING
      bld.authorization :Bearer, access_token   if access_token.present?
      bld.request       :retry,  retry_opt
      bld.response      :logger, Log.logger
      bld.response      :raise_error
      bld.adapter       options[:adapter] || Faraday.default_adapter
    end
  end

  # Send an API request.
  #
  # @param [Symbol]            verb
  # @param [String]            action
  # @param [Hash, String, nil] params
  # @param [Hash, nil]         headers
  # @param [Hash]              opt
  #
  # @option opt [Boolean]      :no_redirect
  # @option opt [Integer, nil] :redirection
  #
  # @raise [ApiService::EmptyResultError]
  # @raise [ApiService::HtmlResultError]
  # @raise [ApiService::RedirectionError]
  # @raise [ApiService::ResponseError]
  #
  # @return [Faraday::Response]
  # @return [nil]
  #
  # === Bookshare API status codes
  # 301 Moved Permanently
  # 302 Found (typically, redirect to download location)
  # 200 OK
  # 201 Created
  # 202 Accepted
  # 400 Bad Request
  # 401 Unauthorized
  # 403 Forbidden
  # 404 Not Found
  # 405 Method Not Allowed
  # 406 Not Acceptable
  # 409 Conflict
  # 415 Unsupported Media Type
  # 500 Internal Server Error
  #
  # @see https://apidocs.bookshare.org/reference/index.html#_responseCodes
  #
  def transmit(verb, action, params, headers, **opt)
    response = connection.send(verb, action, params, headers)
    raise empty_response_error(response) if response.nil?
    no_redirect = opt[:no_redirect] || options[:no_redirect]
    redirection = nil
    case response.status
      when 200..299
        result = response.body
        raise empty_response_error(response) if result.blank?
        raise html_response_error(response)  if result =~ /^\s*</
      when 301, 303, 308
        redirection = opt[:redirection].to_i
        no_redirect = (redirection >= MAX_REDIRECTS)
      when 302, 307
        redirection = opt[:redirection].to_i
        no_redirect ||= (redirection >= MAX_REDIRECTS)
      else
        raise response_error(response)
    end
    if redirection
      action = response.headers['Location']
      raise redirect_response_error(response) if action.blank?
      unless no_redirect
        opt[:redirection] = (redirection += 1)
        __debug_line(leader: '!!!') do
          [service_name] << "REDIRECT #{redirection} TO #{action.inspect}"
        end
        response = transmit(:get, action, params, headers, **opt)
      end
    end
    response
  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  protected

  # Extract API parameters from *opt*.
  #
  # @param [Symbol]  method
  # @param [Boolean] check_req        Check for missing required keys.
  # @param [Boolean] check_opt        Check for extra optional keys.
  # @param [Hash]    opt
  #
  # @return [Hash]                    Just the API parameters from *opt*.
  # @return [nil]                     If *method* is not an API method.
  #
  def get_parameters(method, check_req: true, check_opt: false, **opt)
    properties     = api_methods(method)
    return invalid_params(method, 'unregistered API method') if properties.nil?
    multi          = Array.wrap(properties[:multi])
    required_keys  = required_parameters(method)
    optional_keys  = optional_parameters(method)
    key_alias      = properties[:alias] || {}
    specified_keys = required_keys + optional_keys + key_alias.keys
    specified_keys += SERVICE_OPTIONS

    # Validate the keys provided.
    errors = []
    if check_req && (missing_keys = required_keys - opt.keys).present?
      error = +'missing API ' << 'parameter'.pluralize(missing_keys.size)
      errors.push(error << ' ' << missing_keys.join(', '))
    end
    if check_opt && (extra_keys = opt.keys - specified_keys).present?
      error = +'invalid API ' << 'parameter'.pluralize(extra_keys.size)
      errors.push(error << ' ' << extra_keys.join(', '))
    end
    invalid_params(method, *errors) if errors.present?

    # Return with the options needed for the API request.
    # @type [Symbol] k
    # @type [*]      v
    opt.slice(*specified_keys).map { |k, v|
      k = key_alias[k] || k
      v = quote(v, separator: ' ') if v.is_a?(Array) && !multi.include?(k)
      k = encode_parameter(k)
      [k, v]
    }.to_h
  end

  # Preserve a key that would be mistaken for an ignored system parameter.
  #
  # @param [Symbol] key
  #
  # @return [Symbol]
  #
  def encode_parameter(key)
    IGNORED_PARAMETERS.include?(key) ? "_#{key}".to_sym : key
  end

  # Preserve keys that would be mistaken for an ignored system parameter.
  #
  # @param [Hash] opt
  #
  # @return [Hash]                    A modified copy of *opt*.
  #
  def encode_parameters(opt = nil)
    encode_parameters!(opt&.dup || {})
  end

  # Preserve keys that would be mistaken for an ignored system parameter.
  #
  # @param [Hash] opt
  #
  # @return [Hash]                    The original *opt* now modified.
  #
  def encode_parameters!(opt)
    opt.transform_keys! { |k| encode_parameter(k) }
  end

  # Reverse the transform of #encode_parameter.
  #
  # @param [Symbol] key
  #
  # @return [Symbol]
  #
  def decode_parameter(key)
    key.to_s.sub(/^_/, '').to_sym
  end

  # Restore preserved keys.
  #
  # @param [Hash] opt
  #
  # @return [Hash]                    A modified copy of *opt*.
  #
  def decode_parameters(opt = nil)
    decode_parameters!(opt&.dup || {})
  end

  # Restore preserved keys.
  #
  # @param [Hash] opt
  #
  # @return [Hash]                    The original *opt* now modified.
  #
  def decode_parameters!(opt)
    opt.transform_keys! { |k| decode_parameter(k) }
  end

  # ===========================================================================
  # :section:
  # ===========================================================================

  private

  # Report on errors in parameters supplied to an API method.
  #
  # @param [String, Symbol] method
  # @param [Array<String>]  errors
  # @param [Boolean]        raise_exception
  #
  # @raise [RuntimeError]             Iff *raise_exception*.
  #
  # @return [nil]
  #
  def invalid_params(method, *errors, raise_exception: RAISE_ON_INVALID_PARAMS)
    return if errors.blank?
    if raise_exception
      raise RuntimeError, ("#{method}: " + errors.join("\nAND "))
    else
      errors.each { |problem| Log.warn("#{method}: #{problem}") }
    end
    nil
  end

  # ===========================================================================
  # :section: Exceptions
  # ===========================================================================

  protected

  # Wrap an exception or response in a service error.
  #
  # @param [Exception, Faraday::Response] obj
  #
  # @return [ApiService::ResponseError]
  #
  def response_error(obj)
    ApiService::ResponseError.new(obj)
  end

  # Wrap response in a service error.
  #
  # @param [Faraday::Response] obj
  #
  # @return [ApiService::EmptyResultError]
  #
  def empty_response_error(obj)
    ApiService::EmptyResultError.new(obj)
  end

  # Wrap response in a service error.
  #
  # @param [Faraday::Response] obj
  #
  # @return [ApiService::HtmlResultError]
  #
  def html_response_error(obj)
    ApiService::HtmlResultError.new(obj)
  end

  # Wrap response in a service error.
  #
  # @param [Faraday::Response] obj
  #
  # @return [ApiService::RedirectionError]
  #
  def redirect_response_error(obj)
    ApiService::RedirectionError.new(obj)
  end

  # log_exception
  #
  # @param [Exception]         error
  # @param [Symbol]            action
  # @param [Faraday::Response] response
  # @param [Symbol, String]    method
  #
  # @return [void]
  #
  def log_exception(error:, action: @action, response: @response, method: nil)
    message = error.message.inspect
    __debug_line(leader: '!!!') do
      [service_name] << action.inspect << message << error.class
    end
    Log.log(error.is_a?(Api::Error) ? Log::WARN : Log::ERROR) do
      method ||= 'request'
      status   = %i[http_status status].find { |m| error.respond_to?(m) }
      status   = status && error.send(status)&.inspect || '???'
      body     = response&.body
      log = ["#{service_name.upcase} #{method}: #{message}"]
      log << "status #{status}"
      log << "body #{body}" if body.present?
      log.join('; ')
    end
  end

  # The name of the service for debugging.
  #
  # @return [String]
  #
  def service_name
    # noinspection RubyYardReturnMatch
    @service_name ||= self.class.name.underscore.delete_suffix('_service')
  end

end

__loading_end(__FILE__)
